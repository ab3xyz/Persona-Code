{"code": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_ludic(n):\n    def is_ludic(num):\n        return num > 0 and (num & (num - 1)) == 0\n\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_ludic(i):\n            ludic_numbers.append(i)\n    \n    return ludic_numbers\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\\nAssertionError\\n')", "success": 0}
{"code": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    return None, -1, -1\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_kth_element(list1, k):\n    if k < 0 or k >= len(list1):\n        return list1\n    return list1[:k] + list1[k+1:]\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\\nAssertionError\\n')", "success": 0}
{"code": "def max_of_nth(test_list, N):\n    return max(row[N] for row in test_list if len(row) > N)\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert merge([[\\'x\\', \\'y\\',\\'z\\' ], [\\'a\\', \\'b\\',\\'c\\'], [\\'m\\', \\'n\\',\\'o\\']]) == [[\\'x\\', \\'a\\', \\'m\\'], [\\'y\\', \\'b\\', \\'n\\'],[\\'z\\', \\'c\\',\\'o\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def cummulative_sum(test_list):\n    return [sum(test_list[i]) for i in range(len(test_list))]\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\\nAssertionError\\n')", "success": 0}
{"code": "def average_tuple(nums):\n    return [sum(t) / len(t) for t in nums]\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\\nAssertionError\\n')", "success": 0}
{"code": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_Jumps(steps, d):\n    if d % steps != 0:\n        return -1\n    jumps = d // steps\n    return jumps if jumps >= 0 else -1\nassert min_Jumps((3,4),11)==3.5\nassert min_Jumps((3,4),0)==0\nassert min_Jumps((11,14),11)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert min_Jumps((3,4),11)==3.5\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 2, in min_Jumps\\n    if d % steps != 0:\\nTypeError: unsupported operand type(s) for %: \\'int\\' and \\'tuple\\'\\n')", "success": 0}
{"code": "def div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    return [a / b if b != 0 else float('inf') for a, b in zip(nums1, nums2)]\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def move_num(test_str):\n    letters = ''.join(filter(str.isalpha, test_str))\n    numbers = ''.join(filter(str.isdigit, test_str))\n    return letters + numbers\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_median(arr1, arr2, n):\n    if n <= 0:\n        return None\n\n    combined = sorted(arr1 + arr2)\n    mid = n\n\n    if mid % 2 == 0:\n        return (combined[mid // 2 - 1] + combined[mid // 2]) / 2\n    else:\n        return combined[mid // 2]\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\\nAssertionError\\n')", "success": 0}
{"code": "def nth_nums(nums, n):\n    return [x ** n for x in nums]\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_upper(string):\n    return string.upper()\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef triangle_area(r):\n    return (r * r) / 2\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert triangle_area(-1) == None\\nAssertionError\\n')", "success": 0}
{"code": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    if start >= end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid + 1:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid)\nassert find_First_Missing([0,1,2,3]) == 4\nassert find_First_Missing([0,1,2,6,9]) == 3\nassert find_First_Missing([2,3,5,8,9]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert find_First_Missing([0,1,2,3]) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def replace_spaces(string):\n    return string.replace(' ', '%20')\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    return [num for num in list if num % 2 == 0]\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def adjac(ele, sub=[]):\n    x, y = ele\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    for dx, dy in directions:\n        sub.append((x + dx, y + dy))\n    return sub\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\\nNameError: name \\'get_coordinates\\' is not defined\\n')", "success": 0}
{"code": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert replace_spaces(\\'Jumanji The Jungle\\') == \\'Jumanji_The_Jungle\\'\\nAssertionError\\n')", "success": 0}
{"code": "def move_zero(num_list):\n    count = 0\n    for num in num_list:\n        if num != 0:\n            num_list[count] = num\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\\nAssertionError\\n')", "success": 0}
{"code": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def heap_sort(iterable):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    arr = list(iterable)\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef wind_chill(v, t):\n    if v < 0 or t < -50 or t > 10:\n        raise ValueError(\"Wind velocity must be >= 0 and temperature must be between -50 and 10 degrees Celsius.\")\n    \n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return math.ceil(wci)\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert wind_chill(120,35)==40\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in wind_chill\\n    raise ValueError(\"Wind velocity must be >= 0 and temperature must be between -50 and 10 degrees Celsius.\")\\nValueError: Wind velocity must be >= 0 and temperature must be between -50 and 10 degrees Celsius.\\n')", "success": 0}
{"code": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if not name[0].islower())\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_parenthesis(items):\n    result = []\n    for item in items:\n        cleaned_item = ''\n        open_parenthesis = 0\n        for char in item:\n            if char == '(':\n                open_parenthesis += 1\n            elif char == ')':\n                if open_parenthesis > 0:\n                    open_parenthesis -= 1\n                continue\n            if open_parenthesis == 0:\n                cleaned_item += char\n        result.append(cleaned_item)\n    return result\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\\nAssertionError\\n')", "success": 0}
{"code": "def is_nonagonal(n):\n    if n < 1:\n        return None\n    return (n * (7 * n - 5)) // 2\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if len(word) > 1 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maxAverageOfPath(cost):\n    N = len(cost)\n    if N == 0:\n        return 0\n\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    total_cost = dp[N-1][N-1]\n    path_length = 2 * N - 1\n\n    return total_cost / path_length\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert filter_data({\\'Cierra Vega\\': (6.2, 70), \\'Alden Cantrell\\': (5.9, 65), \\'Kierra Gentry\\': (6.0, 68), \\'Pierre Cox\\': (5.8, 66)},6.0,70)=={\\'Cierra Vega\\': (6.2, 70)}\\nAssertionError\\n')", "success": 0}
{"code": "def count_same_pair(nums1, nums2):\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_quotation(text1):\n    import re\n    return re.findall(r'\"(.*?)\"', text1)\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    \n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    \n    return result\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # continue searching in the left half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    mod = 10**9 + 7\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product = (product * arr[j]) % mod\n            total_sum = (total_sum + product) % mod\n            \n    return total_sum\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def set_middle_bits(n):\n    if n < 3:\n        return n\n    mask = (1 << (n.bit_length() - 2)) - 1\n    return n ^ mask\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert toggle_middle_bits(9) == 15\\nNameError: name \\'toggle_middle_bits\\' is not defined. Did you mean: \\'set_middle_bits\\'?\\n')", "success": 0}
{"code": "def left_insertion(a, x):\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef check_str(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert geometric_sum(7) == 1.9921875\\nAssertionError\\n')", "success": 0}
{"code": "def find_Index(n):\n    if n < 1:\n        return -1\n    triangular_number = 0\n    index = 0\n    while True:\n        index += 1\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Characters_Same(s):\n    return len(set(s)) == 1\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def area_tetrahedron(side):\n    import math\n    return math.sqrt(2) * side**2\nassert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert area_tetrahedron(3)==15.588457268119894\\nAssertionError\\n')", "success": 0}
{"code": "def rotate_right(lst, m):\n    if not lst:\n        return lst\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_none(test_tup):\n    return any(x is None for x in test_tup)\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if '0' not in str_num and all(num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sector_area(r, a):\n    if a > 360:\n        return None\n    return (a / 360) * 3.14159 * r ** 2\nassert sector_area(4,45)==6.283185307179586\nassert sector_area(9,45)==31.808625617596654\nassert sector_area(9,361)==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert sector_area(4,45)==6.283185307179586\\nAssertionError\\n')", "success": 0}
{"code": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D array to store lengths of longest common subsequence.\n    L = [[[0 for k in range(o + 1)] for j in range(n + 1)] for i in range(m + 1)]\n    \n    # Build L[m+1][n+1][o+1] in bottom-up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    \n    # The length of the longest common subsequence is in L[m][n][o]\n    return L[m][n][o]\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def capital_words_spaces(str1):\n    result = ''\n    for char in str1:\n        if char.isupper() and result:\n            result += ' '\n        result += char\n    return result\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert sort_numeric_strings( [\\'4\\',\\'12\\',\\'45\\',\\'7\\',\\'0\\',\\'100\\',\\'200\\',\\'-12\\',\\'-500\\'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\\nAssertionError\\n')", "success": 0}
{"code": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\\nAssertionError\\n')", "success": 0}
{"code": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if (left < n and arr[i] > arr[left]) or (right < n and arr[i] > arr[right]):\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert check_min_heap([1, 2, 3, 4, 5, 6]) == True\\nNameError: name \\'check_min_heap\\' is not defined\\n')", "success": 0}
{"code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_k(test_list, K):\n    return sorted(test_list)[:K]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert min_k([(\\'tanmay\\', 14), (\\'Amer\\', 11), (\\'Ayesha\\', 9), (\\'SKD\\', 16)], 1) == [(\\'Ayesha\\', 9)]\\nAssertionError\\n')", "success": 0}
{"code": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\nassert text_match_zero_one(\"ac\")==False\nassert text_match_zero_one(\"dc\")==False\nassert text_match_zero_one(\"abbbba\")==True\nassert text_match_zero_one(\"dsabbbba\")==True\nassert text_match_zero_one(\"asbbbba\")==False\nassert text_match_zero_one(\"abaaa\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_reverse_pairs(test_list):\n    count = 0\n    seen = set()\n    \n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            count += 1\n        seen.add(string)\n    \n    return count\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        return '.' in num and len(num.split('.')[-1]) == 2 and float_num == round(float_num, 2)\n    except ValueError:\n        return False\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_Element(arr):\n    return len(set(arr)) == 1\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 2:\n        return False\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_min_diff(arr, n):\n    if n < 2:\n        return -1\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert find_min_diff((1,5,3,19,18,25),6) == 1\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in find_min_diff\\n    arr.sort()\\nAttributeError: \\'tuple\\' object has no attribute \\'sort\\'\\n')", "success": 0}
{"code": "def number_ctr(str):\n    return sum(c.isdigit() for c in str)\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_polite(n):\n    if n < 1:\n        return None\n    polite_numbers = []\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 == 1 or num % 4 == 0:\n            polite_numbers.append(num)\n            count += 1\n        num += 1\n    return polite_numbers[-1]\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert is_polite(7) == 11\\nAssertionError\\n')", "success": 0}
{"code": "def pair_wise(l1):\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_pairs_count(arr, sum):\n    count = 0\n    num_map = {}\n    \n    for num in arr:\n        complement = sum - num\n        if complement in num_map:\n            count += num_map[complement]\n        \n        if num in num_map:\n            num_map[num] += 1\n        else:\n            num_map[num] = 1\n            \n    return count\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_num_sum(n):\n    return sum((2 * i + 1) ** 4 for i in range(n))\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_expression(exp):\n    stack = []\n    parentheses = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or stack.pop() != parentheses[char]:\n                return False\n    \n    return len(stack) == 0\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def occurance_substring(text, pattern):\n    positions = []\n    start = 0\n    \n    while True:\n        start = text.find(pattern, start)\n        if start == -1:\n            break\n        positions.append(start)\n        start += 1  # Move to the next character after the current match\n    \n    return positions if positions else None\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert occurance_substring(\\'python programming, python language\\',\\'python\\')==(\\'python\\', 0, 6)\\nAssertionError\\n')", "success": 0}
{"code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    \n    for i in range(len(test_str)):\n        if (i > 0 and test_str[i-1] in vowels) or (i < len(test_str) - 1 and test_str[i+1] in vowels):\n            count += 1\n            \n    return count\nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert count_vowels(\\'bestinstareels\\') == 7\\nAssertionError\\n')", "success": 0}
{"code": "def find_sum(arr):\n    from collections import Counter\n    element_count = Counter(arr)\n    return sum(key for key, count in element_count.items() if count == 1)\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert find_sum([1,2,3,1,1,4,5,6]) == 21\\nAssertionError\\n')", "success": 0}
{"code": "def pack_consecutive_duplicates(list1):\n    if not list1:\n        return []\n    \n    packed_list = []\n    current_sublist = [list1[0]]\n    \n    for item in list1[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [item]\n    \n    packed_list.append(current_sublist)\n    return packed_list\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    from collections import Counter\n    return dict(Counter(tuple(sublist) for sublist in list1))\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for r in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, r):\n            if sum(combo) not in result:\n                result.append(sum(combo))\n    return sorted(result)\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in find_combinations\\n    if sum(combo) not in result:\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'tuple\\'\\n')", "success": 0}
{"code": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for length in range(1, n + 1, 2):  # Only odd lengths\n            if i + length <= n:\n                total_sum += sum(arr[i:i + length])\n    \n    return total_sum\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    s = 0 if mx == 0 else (df / mx)\n    v = mx\n    return (h, s * 100, v * 100)\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def mul_even_odd(list1):\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        \n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_str_int(test_str):\n    return tuple(int(x) for x in test_str.strip(\"()\").split(\",\"))\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def right_insertion(a, x):\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    if re.search(pattern, text):\n        return True\n    return False\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_nested(test_tup):\n    return tuple(x for x in test_tup if not isinstance(x, tuple))\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_list(input_list):\n    return sum(1 for item in input_list if isinstance(item, list))\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last(arr, x):\n    low, high = 0, len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,3,2,3,6,8,9],3) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_starta_endb(text):\n    import re\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def return_sum(dict):\n    return sum(dict.values())\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_odd(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert sum_in_range(2,5) == 8\\nNameError: name \\'sum_in_range\\' is not defined\\n')", "success": 0}
{"code": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def left_rotate(n, d):\n    d = d % 32  # Ensure d is within the range of 0-31\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_all_spaces(text):\n    return ''.join(text.split())\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_three_equal(x, y, z):\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert test_three_equal(1,2,2) == 2\\nAssertionError\\n')", "success": 0}
{"code": "def count_rotation(arr):\n    n = len(arr)\n    low, high = 0, n - 1\n\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        \n        mid = (low + high) // 2\n        \n        next_index = (mid + 1) % n\n        prev_index = (mid - 1 + n) % n\n        \n        if arr[mid] <= arr[next_index] and arr[mid] <= arr[prev_index]:\n            return mid\n        \n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return 0\nassert count_rotation([3,2,1]) == 1\nassert count_rotation([4,5,1,2,3]) == 2\nassert count_rotation([7,8,9,1,2,3]) == 3\nassert count_rotation([1,2,3]) == 0\nassert count_rotation([1,3,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 23, in <module>\\n    assert count_rotation([3,2,1]) == 1\\nAssertionError\\n')", "success": 0}
{"code": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    x = int(n**0.5)\n    return x * x == n\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_list(lists):\n    return max(lists, key=sum)\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n            \n    return max_run\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_K(test_tup, K):\n    return K in test_tup\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_smaller(test_tup1, test_tup2):\n    return all(a > b for a, b in zip(test_tup1, test_tup2))\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence == -1 or first_occurrence == last_occurrence:\n        return s.replace(ch, '', 1)\n    \n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_matrix(M):\n    return sorted(M, key=lambda row: sum(row))\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Volume(l, b, h):\n    return (1/2) * l * b * h\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_lowercase_underscore(text):\n    import re\n    return bool(re.fullmatch(r'([a-z]+(_[a-z]+)*)?', text))\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_perimeter(a):\n    return 4 * a\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def str_to_list(string1, string2):\n    return [char for char in string1 if char not in string2]\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_woodall(x):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rev(num):\n    reverse_num = int(str(num)[::-1])\n    return num == 2 * reverse_num - 1\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert check(70) == False\\nNameError: name \\'check\\' is not defined\\n')", "success": 0}
{"code": "def find_Max_Num(arr):\n    from functools import cmp_to_key\n\n    def compare(x, y):\n        if x + y > y + x:\n            return -1\n        else:\n            return 1\n\n    arr = list(map(str, arr))\n    arr.sort(key=cmp_to_key(compare))\n    return ''.join(arr)\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert find_Max_Num([1,2,3]) == 321\\nAssertionError\\n')", "success": 0}
{"code": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_octagonal(n):\n    if n < 1:\n        return False\n    k = (1 + (1 + 3 * n) ** 0.5) / 3\n    return k.is_integer()\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert is_octagonal(5) == 65\\nAssertionError\\n')", "success": 0}
{"code": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return count\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def smallest_num(xs):\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_difference(test_list):\n    if not test_list or len(test_list) < 2:\n        return 0\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            max_diff = max(max_diff, diff)\n    return max_diff\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in max_difference\\n    diff = abs(test_list[i] - test_list[j])\\nTypeError: unsupported operand type(s) for -: \\'tuple\\' and \\'tuple\\'\\n')", "success": 0}
{"code": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bell_number(n):\n    bell = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Monotonic(A):\n    if not A:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n    return increasing or decreasing\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_sublist(l, s):\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_equal_tuple(Input):\n    if not Input:\n        return True\n    length = len(Input[0])\n    return all(len(t) == length for t in Input)\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\\nAssertionError\\n')", "success": 0}
{"code": "def dif_Square(n):\n    if n < 0:\n        return False\n    return n % 4 == 0 or n % 4 == 1\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert dif_Square(15) == True\\nAssertionError\\n')", "success": 0}
{"code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n            \n    return True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_tuples(test_list, K):\n    return [tup for tup in test_list if all(elem % K == 0 for elem in tup)]\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Diff(n):\n    return n % 11 == 0\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def word_len(s):\n    return len(s) % 2 != 0\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def volume_sphere(r):\n    import math\n    return (4/3) * math.pi * (r ** 3)\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def get_Char(strr):\n    total_ascii = sum(ord(char) for char in strr)\n    return chr((total_ascii % 26) + ord('a'))\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert get_Char(\"abc\") == \"f\"\\nAssertionError\\n')", "success": 0}
{"code": "def sequence(n):\n    if n < 1:\n        return None\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def surfacearea_sphere(r):\n    import math\n    return 4 * math.pi * r**2\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def centered_hexagonal_number(n):\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={\\'W\\': \\'White\\', \\'P\\': \\'Pink\\', \\'B\\': \\'Black\\', \\'R\\': \\'Red\\', \\'G\\': \\'Green\\', \\'L\\': \\'lavender\\'}\\nAssertionError\\n')", "success": 0}
{"code": "def freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def closest_num(N):\n    if N <= 0:\n        return None\n    return N - 1\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def len_log(list1):\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_substring(str1, sub_str):\n    return any(sub_str in s for s in str1)\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_undulating(n):\n    s = str(n)\n    return all(s[i] != s[i + 1] for i in range(len(s) - 1))\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power(a, b):\n    return a ** b\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0]\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency_lists(list1):\n    from collections import defaultdict\n    \n    frequency = defaultdict(int)\n    \n    for sublist in list1:\n        for item in sublist:\n            frequency[item] += 1\n            \n    return dict(frequency)\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k - 1]\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert snake_to_camel(\\'python_program\\')==\\'PythonProgram\\'\\nAssertionError\\n')", "success": 0}
{"code": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1 if n == 1 else 0\n    \n    return m * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1)\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert eulerian_num(3, 1) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count(lst):\n    return sum(1 for item in lst if item is True)\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_lists(test_list, test_tup):\n    return tuple(list(test_tup) + test_list)\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_sorted_list(num1, num2, num3):\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_Equivalent(s, n):\n    count = 0\n    length = len(s)\n    \n    for i in range(length):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n            \n    return count\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n    \n    common_elements = set(nestedlist[0])\n    \n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    \n    return list(common_elements)\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_integer(text):\n    if text.isdigit() or (text.startswith('-') and text[1:].isdigit()):\n        return True\n    return False\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_dit(list1):\n    return all(isinstance(d, dict) and not d for d in list1)\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_to_float(test_list):\n    return [[float(item) if isinstance(item, (int, float, str)) and item.replace('.', '', 1).isdigit() else item for item in sublist] for sublist in test_list]\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\\nAssertionError\\n')", "success": 0}
{"code": "def string_to_list(string):\n    return string.split(' ')\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return arr[left]\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) + abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\\nAssertionError\\n')", "success": 0}
{"code": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_numbers = set()\n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import cmath\n\ndef angle_complex(a, b):\n    complex_number = complex(a, b)\n    return cmath.phase(complex_number)\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined. Did you mean: \\'cmath\\'?\\n')", "success": 0}
{"code": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        \n        if current_diff < 0:\n            current_diff = 0\n        \n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisors_sum = 0\n    g = gcd(a, b)\n    \n    for i in range(1, g + 1):\n        if g % i == 0:\n            common_divisors_sum += i\n            \n    return common_divisors_sum\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_int(x, y):\n    return x * y\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum(my_matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum or sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_occurrences(nums):\n    from collections import Counter\n    if not nums:\n        return None\n    count = Counter(nums)\n    return max(count.items(), key=lambda x: x[1])[0]\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    \n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n        if str_list[left] not in vowels:\n            left += 1\n        if str_list[right] not in vowels:\n            right -= 1\n            \n    return ''.join(str_list)\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tup_string(tup1):\n    return ''.join(map(str, tup1))\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def hexagonal_num(n):\n    return n * (2 * n - 1)\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def zero_count(nums):\n    zeroes = sum(1 for num in nums if num == 0)\n    non_zeroes = sum(1 for num in nums if num != 0)\n    if non_zeroes == 0:\n        return float('inf')  # or return None, depending on how you want to handle this case\n    return zeroes / non_zeroes\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0 or (n & (n - 1)) != 0 and (n & (n + 1)) == 0\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert is_Sum_Of_Powers_Of_Two(10) == True\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_singly(test_list):\n    return list(set(num for sublist in test_list for num in sublist))\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\nassert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\nassert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pancake_sort(nums):\n    def flip(sublist, k):\n        return sublist[:k][::-1] + sublist[k:]\n\n    def find_max_index(sublist, n):\n        max_index = 0\n        for i in range(1, n):\n            if sublist[i] > sublist[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = find_max_index(nums, size)\n        if max_index != size - 1:\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            nums = flip(nums, size)\n    return nums\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lists(Input):\n    return sum(1 for item in Input if isinstance(item, list))\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\\nAssertionError\\n')", "success": 0}
{"code": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    return max(arr) - min(arr)\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_solution(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total += term\n    return total\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef area_polygon(s, l):\n    return (l * s ** 2) / (4 * math.tan(math.pi / l))\nassert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\nassert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\nassert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\\nAssertionError\\n')", "success": 0}
{"code": "def div_sum(n1, n2):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n + 1) if n % i == 0)\n    \n    return sum_of_divisors(n1) == sum_of_divisors(n2)\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert are_equivalent(36, 57) == False\\nNameError: name \\'are_equivalent\\' is not defined\\n')", "success": 0}
{"code": "def count_char_position(str1):\n    str1 = str1.lower()\n    count = 0\n    for index, char in enumerate(str1):\n        if char.isalpha() and ord(char) - ord('a') == index:\n            count += 1\n    return count\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_power_of_2(n):\n    if n <= 1:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency(a, x):\n    return a.count(x)\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_range_list(list1, m, n):\n    if m < 0 or n >= len(list1) or m > n:\n        return 0\n    return sum(list1[m:n+1])\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def perimeter_pentagon(a):\n    return 5 * a\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_occurance(s):\n    return s.count('std')\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_type(test_tuple):\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\nassert is_majority([1, 1, 2, 2], 5, 1) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert is_majority([1, 1, 2, 2], 5, 1) == False\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in is_majority\\n    if arr[i] == x:\\nIndexError: list index out of range\\n')", "success": 0}
{"code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_values_string(str):\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_of_three(a, b, c):\n    return min(a, b, c)\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == 0\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\\nAssertionError\\n')", "success": 0}
{"code": "def re_arrange_array(arr, n):\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n    arr[:n] = negative + positive\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def replace_blank(str1, char):\n    return str1.replace(' ', char)\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    return sorted(list1, reverse=True)[:n]\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def volume_cube(l):\n    return l ** 3\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_bit_set_number(n):\n    mask = 0xAAAAAAAA  # Mask for even bits (binary: 10101010...)\n    return n | mask\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert even_bit_set_number(10) == 10\\nAssertionError\\n')", "success": 0}
{"code": "def check_occurences(test_list):\n    occurrences = {}\n    for item in test_list:\n        if item in occurrences:\n            occurrences[item] += 1\n        else:\n            occurrences[item] = 1\n    return occurrences\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\\nAssertionError\\n')", "success": 0}
{"code": "def number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    if m < 1:\n        return 0\n\n    count = 0\n    for start in range(1, m + 1):\n        count += count_sequences(start, m, n - 1)\n    \n    return count\n\ndef count_sequences(current, m, remaining):\n    if remaining == 0:\n        return 1\n    count = 0\n    next_start = current * 2\n    for next_elem in range(next_start, m + 1):\n        count += count_sequences(next_elem, m, remaining - 1)\n    return count\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    return list1\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_charac(str1):\n    return len(str1)\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_Perfect_Square(N):\n    import math\n    next_square_root = math.ceil(math.sqrt(N))\n    return next_square_root ** 2\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert next_Perfect_Square(9) == 16\\nAssertionError\\n')", "success": 0}
{"code": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Create arrays to store the maximum sum of increasing subsequence\n    # and maximum sum of decreasing subsequence\n    inc = [0] * n\n    dec = [0] * n\n\n    # Initialize the inc array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Initialize the dec array\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic_sum\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    elif number == 0:\n        return 0\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    \n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\nassert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 15, in <module>\\n    assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    return sum(1 / i for i in range(1, n))\nassert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\nassert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\nassert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def intersection_array(array_nums1, array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def count_X(tup, x):\n    return tup.count(x)\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def insert_element(lst, element):\n    return [element] + [item for sublist in [[element, item] for item in lst] for item in sublist]\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert insert_element([\\'Red\\', \\'Green\\', \\'Black\\'] ,\\'c\\')==[\\'c\\', \\'Red\\', \\'c\\', \\'Green\\', \\'c\\', \\'Black\\']\\nAssertionError\\n')", "success": 0}
{"code": "import cmath\n\ndef convert(numbers):\n    polar_coordinates = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert convert(1) == (1.0, 0.0)\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in convert\\n    for number in numbers:\\nTypeError: \\'int\\' object is not iterable\\n')", "success": 0}
{"code": "def count_integer(list1):\n    return sum(1 for item in list1 if isinstance(item, int))\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_numbers(a, b):\n    return (b, a)\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximize_elements(test_tup1, test_tup2):\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\\nAssertionError\\n')", "success": 0}
{"code": "def newman_prime(n):\n    if n < 1:\n        return None\n\n    def is_newman_prime(p):\n        if p < 2:\n            return False\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                return False\n        return p in newman_primes\n\n    newman_primes = []\n    k = 1\n    while len(newman_primes) < n:\n        newman_candidate = 2 * k**2 - 1\n        if is_newman_prime(newman_candidate):\n            newman_primes.append(newman_candidate)\n        k += 1\n\n    return newman_primes[-1]\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def division_elements(test_tup1, test_tup2):\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_two_parts(list1, L):\n    return (list1[:L], list1[L:])\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dog_age(h_age):\n    if h_age < 0:\n        return \"Age cannot be negative\"\n    elif h_age == 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 5\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert dog_age(12)==61\\nAssertionError\\n')", "success": 0}
{"code": "def list_split(S, step):\n    return [S[i:i + step] for i in range(0, len(S), step)]\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert list_split([\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\', \\'g\\', \\'h\\', \\'i\\', \\'j\\', \\'k\\', \\'l\\', \\'m\\', \\'n\\'],3)==[[\\'a\\', \\'d\\', \\'g\\', \\'j\\', \\'m\\'], [\\'b\\', \\'e\\', \\'h\\', \\'k\\', \\'n\\'], [\\'c\\', \\'f\\', \\'i\\', \\'l\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def lateralsurface_cube(l):\n    return 4 * l**2\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    return sum((2*i + 1) ** 2 for i in range(n))\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_star_num(n):\n    if n < 1:\n        return 0\n    return n * (2 * n - 1)\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert find_star_num(3) == 37\\nAssertionError\\n')", "success": 0}
{"code": "def ascii_value(k):\n    return ord(k)\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_even_and_even_index(arr):\n    return sum(arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0)\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rear_extract(test_list):\n    return [t[-1] for t in test_list]\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_binomial_Coeff_Sum(n):\n    return sum(binomial(n, k) for k in range(0, n + 1, 2))\n\ndef binomial(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_first_elements(test_tup):\n    return [test_tup.index(x) for x in test_tup]\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def is_num_decagonal(n):\n    if n < 1:\n        return False\n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def validate(n):\n    from collections import Counter\n    \n    # Convert the integer to a string to iterate over digits\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check the frequency condition for each digit\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n            \n    return True\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_element(list, element):\n    return all(item == element for item in list)\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_two_three(text):\n    import re\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum_repeated(a, n, k):\n    if k == 0:\n        return 0\n    \n    # Function to find the maximum subarray sum using Kadane's algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    # Calculate the maximum subarray sum for the original array\n    max_sum_original = kadane(a)\n    \n    # Calculate the total sum of the original array\n    total_sum = sum(a)\n    \n    # If k == 1, return the maximum sum found in the original array\n    if k == 1:\n        return max_sum_original\n    \n    # Calculate the maximum subarray sum for the case of k = 2\n    max_sum_two = kadane(a + a)\n    \n    # If total_sum is positive, we can add it (k-2) times to the maximum sum\n    if total_sum > 0:\n        max_sum_k = max_sum_two + (k - 2) * total_sum\n    else:\n        max_sum_k = max_sum_two\n    \n    return max(max_sum_original, max_sum_k)\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_length(list1):\n    if not list1:\n        return []\n    return max(list1, key=len)\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\\nAssertionError\\n')", "success": 0}
{"code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # dp[i] will store the number of ways to paint the fence with i posts\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find(n, m):\n    return n // m\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def otherside_rightangle(w, h):\n    return (w**2 + h**2) ** 0.5\nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_val(listval):\n    max_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_div(number):\n    return sum(i for i in range(1, number + 1) if number % i == 0)\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert sum_div(8)==7\\nAssertionError\\n')", "success": 0}
{"code": "def get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n  \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n  \n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n  \n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n  \n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n  \n        return inv_count\n  \n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n  \n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n  \n        return inv_count\n  \n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def flatten_list(list1):\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_aggregate(stdata):\n    return max(sum(tup) for tup in stdata)\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert max_aggregate([(\\'Juan Whelan\\',90),(\\'Sabah Colley\\',88),(\\'Peter Nichols\\',7),(\\'Juan Whelan\\',122),(\\'Sabah Colley\\',84)])==(\\'Juan Whelan\\', 212)\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 2, in max_aggregate\\n    return max(sum(tup) for tup in stdata)\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 2, in <genexpr>\\n    return max(sum(tup) for tup in stdata)\\nTypeError: unsupported operand type(s) for +: \\'int\\' and \\'str\\'\\n')", "success": 0}
{"code": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    return (1 << (n - 1)) * (n + 1)\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max((dict_depth(v) for v in d.values()), default=0)\n    return 0\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    if n == 0:\n        return None\n    \n    # Calculate effective rotations\n    effective_rotations = rotations % n\n    \n    # Adjust the index based on the effective rotations\n    new_index = (index - effective_rotations + n) % n\n    \n    return arr[new_index]\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def start_withp(words):\n    return [word for word in words if word.startswith('p')][:2]\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==(\\'Python\\', \\'PHP\\')\\nAssertionError\\n')", "success": 0}
{"code": "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n or k >= n:\n        return 0\n    \n    max_sum = 0\n    current_sum = 0\n    \n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum += a[i]\n    \n    max_sum = current_sum + a[k]\n    \n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, current_sum + a[k])\n    \n    return max_sum\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def colon_tuplex(tuplex, m, n):\n    return tuplex[m:n]\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\\nAssertionError\\n')", "success": 0}
{"code": "def large_product(nums1, nums2, N):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_tuple(str1):\n    return tuple(str1)\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert string_to_tuple(\"python 3.0\")==(\\'p\\', \\'y\\', \\'t\\', \\'h\\', \\'o\\', \\'n\\', \\'3\\', \\'.\\', \\'0\\')\\nAssertionError\\n')", "success": 0}
{"code": "def set_left_most_unset_bit(n):\n    if n == -1:\n        return n\n    left_most_bit = 1 << (n.bit_length())\n    return n | left_most_bit\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert set_left_most_unset_bit(10) == 14\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_string(list_, string):\n    return [f\"{string}{item}\" for item in list_]\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert add_string([1,2,3,4],\\'temp{0}\\')==[\\'temp1\\', \\'temp2\\', \\'temp3\\', \\'temp4\\']\\nAssertionError\\n')", "success": 0}
{"code": "def convert_list_dictionary(l1, l2, l3):\n    return {k: {l2[i]: l3[i] for i in range(len(l2))} for k in l1}\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{\\'S001\\': {\\'Adina Park\\': 85}}, {\\'S002\\': {\\'Leyton Marsh\\': 98}}, {\\'S003\\': {\\'Duncan Boyle\\': 89}}, {\\'S004\\': {\\'Saim Richards\\': 92}}]\\nAssertionError\\n')", "success": 0}
{"code": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_length_list(input_list):\n    if not input_list:\n        return None\n    return max(input_list, key=len)\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\\nAssertionError\\n')", "success": 0}
{"code": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_char(string):\n    if len(string) == 0:\n        return False\n    return string[0] == string[-1]\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert check_char(\"abba\") == \"Valid\"\\nAssertionError\\n')", "success": 0}
{"code": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_of_digits(nums):\n    return [sum(int(digit) for digit in str(num)) for num in nums]\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert sum_of_digits([10,2,56])==14\\nAssertionError\\n')", "success": 0}
{"code": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_freq(test_list):\n    return len(set(test_list))\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def add_nested_tuples(test_tup1, test_tup2):\n    return tuple(tuple(a + b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(test_tup1, test_tup2))\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def minimum(a, b):\n    return a if a < b else b\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 2, in check_tuplex\\n    for element in tuple1:\\nTypeError: \\'int\\' object is not iterable\\n')", "success": 0}
{"code": "def find_Parity(x):\n    return x % 2 != 0\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the pivot\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    if i == -1:\n        return -1  # No bigger number possible\n    \n    # Step 2: Find the rightmost successor to the pivot\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Step 3: Swap the pivot with the successor\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Reverse the sequence after the pivot\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    return int(''.join(digits))\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 26, in <module>\\n    assert rearrange_bigger(10)==False\\nAssertionError\\n')", "success": 0}
{"code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    result = []\n    while k > 0 and min_heap:\n        sum_pair, i, j = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 20, in <module>\\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\\nAssertionError\\n')", "success": 0}
{"code": "def min_product_tuple(list1):\n    if len(list1) < 2:\n        return None\n    \n    min_product = float('inf')\n    min_pair = None\n    \n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n    \n    return min_pair, min_product\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\\nAssertionError\\n')", "success": 0}
{"code": "def min_val(listval):\n    min_value = None\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert snake_to_camel(\\'android_tv\\') == \\'AndroidTv\\'\\nAssertionError\\n')", "success": 0}
{"code": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_nth_element(list1, n):\n    return [t[n] for t in list1 if len(t) > n]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def overlapping(list1, list2):\n    return any(item in list2 for item in list1)\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    \n    return max1 * max2\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\\nAssertionError\\n')", "success": 0}
{"code": "def group_tuples(Input):\n    from collections import defaultdict\n    \n    common_elements = defaultdict(list)\n    \n    for a, b in Input:\n        common_elements[a].append(b)\n    \n    return {key: value for key, value in common_elements.items() if len(value) > 1}\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert group_tuples([(\\'x\\', \\'y\\'), (\\'x\\', \\'z\\'), (\\'w\\', \\'t\\')]) == [(\\'x\\', \\'y\\', \\'z\\'), (\\'w\\', \\'t\\')]\\nAssertionError\\n')", "success": 0}
{"code": "def Find_Max(lst):\n    if not lst:\n        return None\n    return max(lst, key=len)\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def round_and_sum(list1):\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def concatenate_tuple(test_tup, delimiter):\n    return delimiter.join(map(str, test_tup))\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == \\'ID-is-4-UTS\\'\\nTypeError: concatenate_tuple() missing 1 required positional argument: \\'delimiter\\'\\n')", "success": 0}
{"code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    average = sum_of_cubes / n\n    return average\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_rear(test_tuple):\n    return tuple(s[-1] for s in test_tuple)\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert extract_rear((\\'Mers\\', \\'for\\', \\'Vers\\') ) == [\\'s\\', \\'r\\', \\'s\\']\\nAssertionError\\n')", "success": 0}
{"code": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if isinstance(sublist, list) and x in sublist:\n            count += 1\n    return count\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 == 0]\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\\nAssertionError\\n')", "success": 0}
{"code": "def change_date_format(dt):\n    year, month, day = dt.split('-')\n    return f\"{day}-{month}-{year}\"\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\\nAssertionError\\n')", "success": 0}
{"code": "def and_tuples(test_tup1, test_tup2):\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\\nAssertionError\\n')", "success": 0}
{"code": "def parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola.\")\n    directrix = -(b**2 - 4*a*c) / (4*a)\n    return directrix\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert parabola_directrix(5,3,2)==-198\\nAssertionError\\n')", "success": 0}
{"code": "def common_element(list1, list2):\n    return any(elem in list1 for elem in list2)\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert common_element([1,2,3,4,5], [6,7,8,9])==None\\nAssertionError\\n')", "success": 0}
{"code": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_greater(arr, number):\n    return all(number > element for element in arr)\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    return match is not None\nassert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit(n):\n    return abs(n) % 10\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(str1):\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert remove_odd(\"python\")==(\"yhn\")\\nAssertionError\\n')", "success": 0}
{"code": "def count_bidirectional(test_list):\n    count = 0\n    seen = set()\n    \n    for a, b in test_list:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n    \n    return count\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def multiple_to_single(L):\n    return int(''.join(map(str, L)))\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import nltk\nfrom nltk import pos_tag\nfrom nltk.tokenize import word_tokenize\n\ndef find_adverb_position(text):\n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    \n    tokens = word_tokenize(text)\n    tagged = pos_tag(tokens)\n    \n    adverbs = [(word, index) for index, (word, tag) in enumerate(tagged) if tag in ['RB', 'RBR', 'RBS']]\n    \n    return adverbs[0] if adverbs else None\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def surfacearea_cube(l):\n    return 6 * (l ** 2)\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def positive_count(nums):\n    if not nums:\n        return 0\n    positive_numbers = sum(1 for num in nums if num > 0)\n    return positive_numbers / len(nums)\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\\nAssertionError\\n')", "success": 0}
{"code": "def largest_neg(list1):\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def trim_tuple(test_list, K):\n    return [t[:len(t) - K] if len(t) > K else () for t in test_list]\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == \\'[(2,), (9,), (2,), (2,)]\\'\\nAssertionError\\n')", "success": 0}
{"code": "def index_multiplication(test_tup1, test_tup2):\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 2, in index_multiplication\\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 2, in <genexpr>\\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\\nTypeError: can\\'t multiply sequence by non-int of type \\'tuple\\'\\n')", "success": 0}
{"code": "def count_Occurrence(tup, lst):\n    return {item: tup.count(item) for item in lst}\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cube_nums(nums):\n    return [x ** 3 for x in nums]\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 3\n    \n    perrin = [3, 0, 2]\n    total_sum = sum(perrin[:n])\n    \n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        total_sum += next_perrin\n    \n    return total_sum\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in <module>\\n    assert cal_sum(9) == 49\\nAssertionError\\n')", "success": 0}
{"code": "def extract_string(str_list, l):\n    return [s for s in str_list if len(s) == l]\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_whitespaces(text1):\n    return ''.join(text1.split())\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\nassert loss_amount(1500,1200)==0\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert loss_amount(1500,1200)==0\\nAssertionError\\n')", "success": 0}
{"code": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert text_match_wordz(\"pythonz.\")==True\\nAssertionError\\n')", "success": 0}
{"code": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min(lst):\n    if not lst:\n        return []\n    \n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\\nAssertionError\\n')", "success": 0}
{"code": "def rectangle_area(l, b):\n    return l * b\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_uppercase(str1):\n    return ''.join(char for char in str1 if not char.isupper())\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def upper_ctr(str):\n    return sum(1 for char in str if char.isupper())\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert upper_ctr(\\'PYthon\\') == 1\\nAssertionError\\n')", "success": 0}
{"code": "from itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(combinations(list1, r))\n    return result\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert combinations_list([\\'orange\\', \\'red\\', \\'green\\', \\'blue\\'])==[[], [\\'orange\\'], [\\'red\\'], [\\'red\\', \\'orange\\'], [\\'green\\'], [\\'green\\', \\'orange\\'], [\\'green\\', \\'red\\'], [\\'green\\', \\'red\\', \\'orange\\'], [\\'blue\\'], [\\'blue\\', \\'orange\\'], [\\'blue\\', \\'red\\'], [\\'blue\\', \\'red\\', \\'orange\\'], [\\'blue\\', \\'green\\'], [\\'blue\\', \\'green\\', \\'orange\\'], [\\'blue\\', \\'green\\', \\'red\\'], [\\'blue\\', \\'green\\', \\'red\\', \\'orange\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_value(dict, n):\n    return all(value == n for value in dict.values())\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v not in (None, '', [], {})}\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_prod = [0] * n\n    max_prod[0] = arr[0]\n    \n    for i in range(1, n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    \n    return max(max_prod)\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_Consecutive(l):\n    if not l:\n        return False\n    l = sorted(set(l))\n    return l == list(range(l[0], l[-1] + 1))\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert check_Consecutive([1,2,1]) == False\\nAssertionError\\n')", "success": 0}
{"code": "def tuple_intersection(test_list1, test_list2):\n    return tuple(set(test_list1) & set(test_list2))\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\\nAssertionError\\n')", "success": 0}
{"code": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert sort_counter({\\'Math\\':81, \\'Physics\\':83, \\'Chemistry\\':87})==[(\\'Chemistry\\', 87), (\\'Physics\\', 83), (\\'Math\\', 81)]\\nAssertionError\\n')", "success": 0}
{"code": "def big_sum(nums):\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_lower(string):\n    return string.lower()\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_lowercase(str1):\n    return ''.join(char for char in str1 if not char.islower())\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    return [num for num in list if num % 2 != 0]\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def difference(n):\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = sum_of_n ** 2\n    return sum_of_cubes - sum_of_n\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def toggle_string(string):\n    return string.swapcase()\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def digit_distance_nums(n1, n2):\n    n1_str = str(abs(n1))\n    n2_str = str(abs(n2))\n    \n    # Pad the shorter number with leading zeros\n    max_length = max(len(n1_str), len(n2_str))\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    \n    total_distance = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(n1_str, n2_str))\n    \n    return total_distance\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def union_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    \n    for sublist in lst:\n        if isinstance(sublist, list):\n            current_length = len(sublist)\n            if current_length > max_length:\n                max_length = current_length\n    \n    return max_length\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_values(text):\n    import re\n    return re.findall(r'\"(.*?)\"', text)\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Pairs(arr, n):\n    count = 0\n    unique_elements = set(arr)\n    total_unique = len(unique_elements)\n    \n    if total_unique < 2:\n        return 0\n    \n    count = total_unique * (total_unique - 1) // 2\n    return count\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert count_Pairs([1,2,1],3) == 2\\nAssertionError\\n')", "success": 0}
{"code": "def split(word):\n    return list(word)\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def issort_list(list1):\n    return list1 == sorted(list1)\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_list(length):\n    return [{} for _ in range(length)]\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def two_unique_nums(nums):\n    unique_nums = []\n    for sublist in nums:\n        for num in sublist:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in two_unique_nums\\n    for num in sublist:\\nTypeError: \\'int\\' object is not iterable\\n')", "success": 0}
{"code": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef surfacearea_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)\nassert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert surfacearea_cylinder(10,5)==942.45\\nAssertionError\\n')", "success": 0}
{"code": "def is_Sub_Array(A, B):\n    n, m = len(A), len(B)\n    if m == 0:\n        return True\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n    return last_digit\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_dissimilar(test_tup1, test_tup2):\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert snake_to_camel(\\'android_tv\\') == \\'AndroidTv\\'\\nAssertionError\\n')", "success": 0}
{"code": "def even_ele(test_tuple, even_fnc):\n    return tuple(tuple(x for x in inner if even_fnc(x)) for inner in test_tuple)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\\nNameError: name \\'extract_even\\' is not defined\\n')", "success": 0}
{"code": "def surface_Area(b, s):\n    base_area = b * b\n    lateral_area = 2 * b * s\n    total_surface_area = base_area + lateral_area\n    return total_surface_area\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def my_dict(dict1):\n    return len(dict1) == 0\nassert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def catalan_number(num):\n    if num == 0:\n        return 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    for i in range(1, num + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    return catalan[num]\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_adverbs(text):\n    import re\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start()\n    return None, None\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == \\'0-7: Clearly\\'\\nAssertionError\\n')", "success": 0}
{"code": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_Arr(l, n):\n    return l[n:] + l[:n]\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_tuple(listx):\n    return tuple(listx)\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_diff(nums):\n    return max(nums) - min(nums)\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def perfect_squares(a, b):\n    return [i**2 for i in range(int(a**0.5), int(b**0.5) + 1) if i**2 >= a and i**2 <= b]\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef polar_rect(x, y):\n    rect_x = x * math.cos(y)\n    rect_y = x * math.sin(y)\n    return (rect_x, rect_y)\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\\nAssertionError\\n')", "success": 0}
{"code": "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def binomial_Coeff(n, k):\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\ndef sum_of_product_of_consecutive_binomial_coefficients(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n    return total_sum\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert sum_Of_product(3) == 15\\nNameError: name \\'sum_Of_product\\' is not defined\\n')", "success": 0}
{"code": "def removezero_ip(ip):\n    segments = ip.split('.')\n    cleaned_segments = [str(int(segment)) for segment in segments]\n    return '.'.join(cleaned_segments)\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1\n    \n    count_0_str1 = str1.count('0')\n    count_0_str2 = str2.count('0')\n    \n    if count_0_str1 != count_0_str2:\n        return -1\n    \n    count_1_str1 = str1.count('1')\n    count_1_str2 = str2.count('1')\n    \n    if count_1_str1 != count_1_str2:\n        return -1\n    \n    swap_count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n            \n    return swap_count // 2\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 24, in <module>\\n    assert min_Swaps(\"111\",\"000\") == \"Not Possible\"\\nAssertionError\\n')", "success": 0}
{"code": "def tuple_size(tuple_list):\n    return sum(len(item) if isinstance(item, (str, bytes)) else item.__sizeof__() for item in tuple_list)\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\\nNameError: name \\'sys\\' is not defined\\n')", "success": 0}
{"code": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    \n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n    \n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = min(len1, k // 2)\n    j = k - i\n    \n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def armstrong_number(number):\n    num_str = str(number)\n    num_length = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_length for digit in num_str)\n    return sum_of_powers == number\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_average(number):\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number if number > 0 else 0\n    return total_sum, average\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Even(n):\n    return n % 2 == 0\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def similar_elements(test_tup1, test_tup2):\n    return list(set(test_tup1) & set(test_tup2))\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\nassert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\nassert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return sorted(heapq.nlargest(n, nums), reverse=True)\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Power_Of_Two(x):\n    return (x > 0) and (x & (x - 1)) == 0\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert differ_At_One_Bit_Pos(13,9) == True\\nNameError: name \\'differ_At_One_Bit_Pos\\' is not defined\\n')", "success": 0}
{"code": "def find_char_long(text):\n    return [word for word in text.split() if len(word) >= 4]\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_nums(nums):\n    return [x ** 2 for x in nums]\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
