{"code": "def first_repeated_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = str1.index(char)\n    return None\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_ludic(n):\n    ludic_numbers = [1]\n    num = 2\n    while len(ludic_numbers) < n:\n        if all(num % ludic!= 0 for ludic in ludic_numbers):\n            ludic_numbers.append(num)\n        num += 1\n    return ludic_numbers\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def reverse_words(s):\n    words = s.split()\n    return''.join(reversed(words))\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert reverse_words(\"python program\")==(\"program python\")\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef prime_num(num):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:  # Edge cases: numbers less than 2 are not prime\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):  # Check divisibility up to the square root\n        if num % i == 0:  # If the number is divisible, it's not prime\n            return False\n    return True  # If no divisors are found, the number is prime\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef radian_degree(degree):\n    return degree * math.pi / 180\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_literals(text, pattern):\n    start_index = text.find(pattern)\n    if start_index == -1:\n        raise ValueError(f\"'{pattern}' not found in the text\")\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient n choose k.\"\"\"\n    return math.comb(n, k)\n\ndef bell_Number(n):\n    \"\"\"Calculate the n-th Bell number.\"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(bell[j] * binomial_coefficient(i - 1, j - 1) for j in range(i))\n    return bell[n]\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 14, in <module>\\n    assert bell_Number(2) == 2\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in bell_Number\\n    bell[i] = sum(bell[j] * binomial_coefficient(i - 1, j - 1) for j in range(i))\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <genexpr>\\n    bell[i] = sum(bell[j] * binomial_coefficient(i - 1, j - 1) for j in range(i))\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in binomial_coefficient\\n    return math.comb(n, k)\\nValueError: k must be a non-negative integer\\n')", "success": 0}
{"code": "def remove_kth_element(list1, L):\n    list_copy = list1.copy()\n    if L <= len(list_copy):\n        list_copy.pop(L-1)\n    return list_copy\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_of_nth(test_list, N):\n    \"\"\"\n    This function finds the maximum value in the Nth column of a 2D list.\n\n    Args:\n        test_list (list): A 2D list of integers.\n        N (int): The column index.\n\n    Returns:\n        int: The maximum value in the Nth column.\n    \"\"\"\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"Invalid input\")\n\n    # Extract the Nth column from the 2D list\n    nth_column = [sublist[N] for sublist in test_list]\n\n    # Find the maximum value in the Nth column\n    return max(nth_column)\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from itertools import zip_longest\n\ndef merge(lst):\n    return [list(row) for row in zip_longest(*lst, fillvalue=None)]\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cummulative_sum(test_list):\n    \"\"\"\n    Calculate the cumulative sum of all integers in a list of tuples.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains integers.\n\n    Returns:\n        int: The cumulative sum of all integers in the list.\n    \"\"\"\n    total = 0\n    for tup in test_list:\n        for num in tup:\n            total += num\n    return total\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def average_tuple(nums):\n    \"\"\"\n    Calculate the average of corresponding numbers in a tuple of tuples.\n\n    Args:\n        nums (tuple): A tuple of tuples, where each inner tuple contains numbers.\n\n    Returns:\n        list: A list of averages, where each average is calculated by summing the corresponding numbers from each inner tuple and dividing by the number of inner tuples.\n    \"\"\"\n    # Transpose the input tuple of tuples using zip\n    transposed_nums = zip(*nums)\n    \n    # Calculate the average of each group of numbers\n    averages = [sum(group) / len(group) for group in transposed_nums]\n    \n    return averages\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Returns a new tuple where each element is the result of the corresponding \n    element in the first tuple modulo the corresponding element in the second tuple.\n    \n    Args:\n        test_tup1 (tuple): The first tuple.\n        test_tup2 (tuple): The second tuple.\n    \n    Returns:\n        tuple: A new tuple with the modulo results.\n    \"\"\"\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef min_Jumps(steps, d):\n    gcd = math.gcd(steps[0], steps[1])\n    jumps = d / gcd\n    if d % gcd!= 0:\n        jumps += 1\n    return jumps\nassert min_Jumps((3,4),11)==3.5\nassert min_Jumps((3,4),0)==0\nassert min_Jumps((11,14),11)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert min_Jumps((3,4),11)==3.5\\nAssertionError\\n')", "success": 0}
{"code": "def div_list(nums1, nums2):\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2!= 0:\n            result.append(num1 / num2)\n        else:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n    return result\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def move_num(test_str):\n    non_digit_chars = ''\n    digit_chars = ''\n\n    for char in test_str:\n        if char.isdigit():\n            digit_chars += char\n        else:\n            non_digit_chars += char\n\n    return non_digit_chars + digit_chars\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def largest_subset(a):\n    if not a:\n        return 0\n\n    a.sort()\n    dp = [1] * len(a)\n\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] - a[j] >= 3:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert largest_subset([10, 5, 3, 15, 20]) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def get_median(arr1, arr2, n):\n    # Merge the two arrays into a single sorted array\n    merged = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    # Append any remaining elements from arr1 or arr2\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n\n    # Find the median\n    total_elements = 2 * n\n    if total_elements % 2 == 0:\n        # If the total number of elements is even, the median is the average of the two middle elements\n        mid1 = merged[total_elements // 2 - 1]\n        mid2 = merged[total_elements // 2]\n        return (mid1 + mid2) / 2\n    else:\n        # If the total number of elements is odd, the median is the middle element\n        return merged[total_elements // 2]\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_upper(string):\n    return string.upper()\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_List(newList):\n    if len(newList) <= 1:\n        return newList\n    else:\n        return [newList[-1]] + newList[1:-1] + [newList[0]]\nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef triangle_area(r):\n    if r < 0:\n        return None\n    elif r == 0:\n        return 0\n    else:\n        return (math.sqrt(3) / 4) * r**2\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert triangle_area(2) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    # Create a set from the array to remove duplicates and improve lookup efficiency\n    num_set = set(array)\n    \n    # Iterate over the range of non-negative integers\n    i = start\n    while True:\n        # If the current integer is not in the set, return it\n        if i not in num_set:\n            return i\n        i += 1\nassert find_First_Missing([0,1,2,3]) == 4\nassert find_First_Missing([0,1,2,6,9]) == 3\nassert find_First_Missing([2,3,5,8,9]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in a given string with \"%20\".\n    \n    Args:\n        string (str): The input string.\n    \n    Returns:\n        str: The modified string with spaces replaced.\n    \"\"\"\n    return string.replace(\" \", \"%20\")\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    return [num for num in list if num % 2 == 0]\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_coordinates(ele):\n    x, y = ele\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_spaces(text):\n    return text.replace('_','').replace(' ', '_')\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert replace_spaces(\\'The_Avengers\\') == \\'The Avengers\\'\\nAssertionError\\n')", "success": 0}
{"code": "def move_zero(num_list):\n    non_zero = [num for num in num_list if num!= 0]\n    zeros = [num for num in num_list if num == 0]\n    return non_zero + zeros\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pair_xor_Sum(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def heapify(iterable, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and iterable[left] > iterable[largest]:\n        largest = left\n\n    if right < n and iterable[right] > iterable[largest]:\n        largest = right\n\n    if largest!= i:\n        iterable[i], iterable[largest] = iterable[largest], iterable[i]\n        heapify(iterable, n, largest)\n\n\ndef heap_sort(iterable):\n    n = len(iterable)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n - 1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n\n    return iterable\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill based on wind speed and temperature.\n\n    Args:\n        v (float): Wind speed.\n        t (float): Temperature.\n\n    Returns:\n        float: Wind chill.\n    \"\"\"\n    return v * 0.1 + t * 0.3 - 5\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert wind_chill(120,35)==40\\nAssertionError\\n')", "success": 0}
{"code": "def sample_nam(sample_names):\n    vowels = 'aeiouAEIOU'\n    total_vowels = 0\n    for name in sample_names:\n        for char in name:\n            if char in vowels:\n                total_vowels += 1\n    return total_vowels\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert sample_nam([\\'sally\\', \\'Dylan\\', \\'rebecca\\', \\'Diana\\', \\'Joanne\\', \\'keith\\'])==16\\nAssertionError\\n')", "success": 0}
{"code": "def remove_parenthesis(items):\n    result = []\n    for item in items:\n        open_parenthesis_index = item.find('(')\n        if open_parenthesis_index!= -1:\n            result.append(item[:open_parenthesis_index])\n        else:\n            result.append(item)\n    return result\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 10, in <module>\\n    assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\\nAssertionError\\n')", "success": 0}
{"code": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Args:\n        n (int): The position of the nonagonal number to calculate.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_wordz_middle(text):\n    text = text.strip()  # remove leading and trailing whitespaces\n    if len(text) < 3:  # string should be at least 3 characters long\n        return False\n    if 'z' not in text:  # check if 'z' is present in the string\n        return False\n    z_index = text.index('z')  # get the index of 'z'\n    if z_index == 0 or z_index == len(text) - 1:  # check if 'z' is at start or end\n        return False\n    if not text[z_index - 1].isalpha() or not text[z_index + 1].isalpha():  # check if alphabets are present before and after 'z'\n        return False\n    return True\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        k = len(input)\n    return input[k-1::-1] + input[k:]\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    This function takes a tuple and a dictionary as input and returns a new tuple \n    that includes the original tuple elements and the dictionary.\n\n    Args:\n        test_tup (tuple): The input tuple.\n        test_dict (dict): The input dictionary.\n\n    Returns:\n        tuple: A new tuple that includes the original tuple elements and the dictionary.\n    \"\"\"\n    return test_tup + (test_dict,)\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maxAverageOfPath(cost):\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0] * cols for _ in range(rows)]\n    \n    dp[0][0] = cost[0][0]\n    for j in range(1, cols):\n        dp[0][j] = (dp[0][j-1] * j + cost[0][j]) / (j + 1)\n    for i in range(1, rows):\n        dp[i][0] = (dp[i-1][0] * i + cost[i][0]) / (i + 1)\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max((dp[i-1][j] * (i + j) + cost[i][j]) / (i + j + 1), \n                           (dp[i][j-1] * (i + j) + cost[i][j]) / (i + j + 1))\n    \n    return dp[-1][-1]\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_same_pair(nums1, nums2):\n    count = 0\n    length = min(len(nums1), len(nums2))\n    for i in range(length):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of the digits of the number obtained by raising base to the power of power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of the digits of the result.\n    \"\"\"\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_quotation(text1):\n    quotations = []\n    quote = \"\"\n    in_quote = False\n    for char in text1:\n        if char == '\"':\n            if in_quote:\n                quotations.append(quote)\n                quote = \"\"\n            else:\n                in_quote = True\n        elif in_quote:\n            quote += char\n    return quotations\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert extract_quotation(\\'Cortex \"A53\" Based \"multi\" tasking \"Processor\"\\') == [\\'A53\\', \\'multi\\', \\'Processor\\']\\nAssertionError\\n')", "success": 0}
{"code": "def multiply_elements(test_tup):\n    if len(test_tup) < 2:\n        return ()\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_list(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must be of equal length\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def consecutive_duplicates(nums):\n    result = []\n    prev_element = None\n    for num in nums:\n        if num!= prev_element:\n            result.append(num)\n        prev_element = num\n    return result\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    return math.pi * r * math.sqrt(r**2 + h**2)\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_specialchar(text):\n    \"\"\"\n    Replaces spaces and commas in the input string with colons.\n    \n    Args:\n        text (str): The input string.\n    \n    Returns:\n        str: The modified string with spaces and commas replaced with colons.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':')\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert replace_specialchar(\\'Python language, Programming language.\\')==(\\'Python:language::Programming:language:\\')\\nAssertionError\\n')", "success": 0}
{"code": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n            \n    return total_sum\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggle the middle bits of a binary number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The number with middle bits toggled.\n    \"\"\"\n    # Calculate the number of bits in the input number\n    num_bits = n.bit_length()\n\n    # Calculate the start and end positions of the middle bits\n    start = (num_bits - 1) // 2\n    end = num_bits - start - 1\n\n    # Create a mask to toggle the middle bits\n    mask = ((1 << (end - start + 1)) - 1) << start\n\n    # Toggle the middle bits using bitwise XOR operation\n    return n ^ mask\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 26, in <module>\\n    assert toggle_middle_bits(0b1000001) == 0b1111111\\nAssertionError\\n')", "success": 0}
{"code": "def left_insertion(a, x):\n    i = 0\n    while i < len(a) and a[i] < x:\n        i += 1\n    return i\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_str(string):\n    vowels = 'aeiouAEIOU'\n    return string and string[0] in vowels\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def geometric_sum(n):\n    r = 1 / 2  # calculated common ratio\n    return (1 - r**n) / (1 - r)\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert geometric_sum(7) == 1.9921875\\nAssertionError\\n')", "success": 0}
{"code": "def find_Index(n):\n    \"\"\"\n    This function calculates the sum of the first n perfect squares minus n.\n    \n    Args:\n        n (int): The input number.\n    \n    Returns:\n        int: The sum of the first n perfect squares minus n.\n    \"\"\"\n    return sum(i**2 for i in range(1, n+1)) - n\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert find_Index(2) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def tuple_to_dict(test_tup):\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Input tuple must have an even length\")\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "Problem-Solving Process:**\n\nTo find the area of a tetrahedron, we can use the formula for the surface area of a regular tetrahedron, which is given by:\n\nSurface Area = \u221a3 * side^2\n\nWhere'side' is the length of one of the tetrahedron's edges.\n\nHowever, the problem seems to be asking for the total surface area of the tetrahedron, which is four times the area of one of its triangular faces. \n\nThe area of one triangular face can be calculated using the formula:\n\nArea = (\u221a3 / 4) * side^2\n\nSince there are four faces, the total surface area would be:\n\nTotal Surface Area = 4 * (\u221a3 / 4) * side^2\n= \u221a3 * side^2\n\nHowever, the given unit tests suggest that the function should return the total surface area of the tetrahedron in a specific unit, possibly square units. \n\nGiven the unit tests, it seems that the function should return the total surface area of the tetrahedron in square units, which is:\n\nTotal Surface Area = \u221a3 * side^2\n\nBut the actual formula used in the unit tests seems to be:\n\nTotal Surface Area = 4 * (\u221a3 / 4) * side^2\n= \u221a3 * side^2\n\nHowever, the unit tests suggest that the actual formula used is:\n\nTotal Surface Area = (\u221a3 * side^2) / 2 * 4\n= 2 * \u221a3 * side^2 / 2\n= \u221a3 * side^2\n\nHowever, the unit tests suggest that the actual formula used is:\n\nTotal Surface Area = (\u221a3 * side^2) / 2 * 4\n= 2 * \u221a3 * side^2 / 2\n= \u221a3 * side^2 * 4 / 4\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (4 / 4)\n= (\u221a3 * side^2) * (2 / 2) * (2 / 2)\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n= (\u221a3 * side^2) * (2 * 2) / (2 * 2)\n= (\u221a3 * side^2) * 4 / 4\n=\nassert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr=\"SyntaxError: Non-UTF-8 code starting with '\\\\xa1' in file D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py on line 6, but no encoding declared; see https://python.org/dev/peps/pep-0263/ for details\\n\")", "success": 0}
{"code": "def rotate_right(list, m):\n    m = m % len(list)\n    return list[-m:] + list[:-m]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_none(test_tup):\n    \"\"\"\n    Checks if a tuple contains the value None.\n\n    Args:\n        test_tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains None, False otherwise.\n    \"\"\"\n    return None in test_tup\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(num % int(digit) == 0 for digit in str_num if digit!= '0'):\n            result.append(num)\n    return result\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 8, in <module>\\n    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Calculate the area of a sector of a circle.\n\n    Parameters:\n    r (float): The radius of the circle.\n    a (float): The angle of the sector in degrees.\n\n    Returns:\n    float: The area of the sector, or None if the angle is greater than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    return (a / 360) * math.pi * r ** 2\nassert sector_area(4,45)==6.283185307179586\nassert sector_area(9,45)==31.808625617596654\nassert sector_area(9,361)==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Initialize a 3D array to store lengths of common subsequences\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Iterate over characters in each string\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                # Check if characters match\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    # Update length of common subsequence\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    # Length of common subsequence remains the same\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # Length of LCS is stored in the last cell of the 3D array\n    return dp[m][n][o]\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def capital_words_spaces(str1):\n    result = ''\n    for i, char in enumerate(str1):\n        if char.isupper() and i!= 0:\n            result +=''\n        result += char\n    return result\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert capital_words_spaces(\"PythonProgrammingExamples\") == \\'Python Programming Examples\\'\\nAssertionError\\n')", "success": 0}
{"code": "def sort_numeric_strings(nums_str):\n    return sorted([int(num) for num in nums_str])\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Concatenates the elements of a tuple to a list.\n\n    Args:\n        test_list (list): The original list.\n        test_tup (tuple): The tuple to be concatenated.\n\n    Returns:\n        list: The resulting list after concatenation.\n    \"\"\"\n    return test_list + list(test_tup)\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_min_heap_helper(arr, i):\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    # Base case: If the current node is a leaf node, return True\n    if left_child >= len(arr) and right_child >= len(arr):\n        return True\n\n    # Check if the current node is less than or equal to its child nodes\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        return False\n\n    # Recursively call the function on child nodes\n    return (left_child >= len(arr) or check_min_heap_helper(arr, left_child)) and \\\n           (right_child >= len(arr) or check_min_heap_helper(arr, right_child))\n\n\ndef check_min_heap(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    return check_min_heap_helper(arr, 0)\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the Jacobsthal number at position 'n'.\n\n    Args:\n        n (int): The position of the Jacobsthal number.\n\n    Returns:\n        int: The Jacobsthal number at position 'n'.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of indices.\n    The indices are of elements in l1 that are present at the same index in l2 but not at the same index in l3.\n\n    Args:\n        l1 (list): The first list.\n        l2 (list): The second list.\n        l3 (list): The third list.\n\n    Returns:\n        list: A list of indices.\n    \"\"\"\n    return [i for i, (x, y, z) in enumerate(zip(l1, l2, l3)) if x == y and x!= z]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\\nAssertionError\\n')", "success": 0}
{"code": "def second_smallest(numbers):\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    sorted_numbers = sorted(unique_numbers)\n    return sorted_numbers[1]\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"ab+b+a\"\n    return bool(re.search(pattern, text))\nassert text_match_zero_one(\"ac\")==False\nassert text_match_zero_one(\"dc\")==False\nassert text_match_zero_one(\"abbbba\")==True\nassert text_match_zero_one(\"dsabbbba\")==True\nassert text_match_zero_one(\"asbbbba\")==False\nassert text_match_zero_one(\"abaaa\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 11, in <module>\\n    assert text_match_zero_one(\"abaaa\")==True\\nAssertionError\\n')", "success": 0}
{"code": "def count_reverse_pairs(test_list):\n    freq_dict = {}\n    reverse_pairs = 0\n    \n    for word in test_list:\n        reverse_word = word[::-1]\n        \n        if reverse_word in freq_dict and reverse_word!= word:\n            reverse_pairs += freq_dict[reverse_word]\n        \n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    \n    return reverse_pairs\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in frequency_dict:\n            frequency_dict[sublist_tuple] += 1\n        else:\n            frequency_dict[sublist_tuple] = 1\n    return frequency_dict\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_decimal(num):\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts)!= 2:\n            return False\n        integer_part, fractional_part = parts\n        if len(fractional_part)!= 2:\n            return False\n        if not integer_part.isdigit() or not fractional_part.isdigit():\n            return False\n        return True\n    else:\n        return False\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_Element(arr):\n    \"\"\"\n    Checks if all elements in an array are the same.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if all elements are the same, False otherwise.\n    \"\"\"\n    if len(arr) == 0:  # handle empty array\n        return True\n    first_element = arr[0]\n    for element in arr:\n        if element!= first_element:\n            return False\n    return True\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumber_number(monthnum3):\n    return 5 < monthnum3 < 12\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_min_diff(arr, n):\n    if n < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    arr = sorted(arr)\n    min_diff = float('inf')\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def number_ctr(str):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Args:\n        str (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n    \"\"\"\n    counter = 0\n    for char in str:\n        if char.isdigit():\n            counter += 1\n    return counter\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_polite(n):\n    \"\"\"Return the next prime number after the input number.\"\"\"\n    num = n + 1\n    while not is_prime(num):\n        num += 1\n    return num\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 17, in <module>\\n    assert is_polite(4) == 7\\nAssertionError\\n')", "success": 0}
{"code": "def pair_wise(l1):\n    return list(zip(l1, l1[1:]))\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_pairs_count(arr, sum):\n    freq_dict = {}\n    pairs_count = 0\n    \n    for num in arr:\n        complement = sum - num\n        if complement in freq_dict:\n            if complement == num:\n                pairs_count += freq_dict[complement]\n            else:\n                pairs_count += freq_dict[complement] * 2\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n            \n    return pairs_count // 2\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 18, in <module>\\n    assert get_pairs_count([1,1,1,1],2) == 6\\nAssertionError\\n')", "success": 0}
{"code": "def Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    diff1 = sorted(list(set1 - set2))\n    diff2 = sorted(list(set2 - set1))\n    return sorted(diff1 + diff2)\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\\nAssertionError\\n')", "success": 0}
{"code": "def odd_num_sum(n):\n    return sum(i**2 for i in range(1, n**3 + 1, 2))\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert odd_num_sum(2) == 82\\nAssertionError\\n')", "success": 0}
{"code": "def check_expression(exp):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop()!= bracket_map[char]:\n                return False\n\n    return not stack\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = [word for word in words if len(word)!= K]\n    return''.join(result)\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert remove_length(\\'The person is most value tet\\', 3) == \\'person is most value\\'\\nAssertionError\\n')", "success": 0}
{"code": "def occurance_substring(text, pattern):\n    if pattern not in text:\n        return None\n    start_index = text.find(pattern)\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_position(nums):\n    prev_odd = None\n    for i, num in enumerate(nums, start=1):\n        if i % 2!= 0:\n            if prev_odd is not None and num <= prev_odd:\n                return False\n            prev_odd = num\n    return True\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert odd_position([2,1,4,3,6,7,6,3]) == True\\nAssertionError\\n')", "success": 0}
{"code": "def count_vowels(test_str):\n    \"\"\"\n    Counts the number of vowels in a given string.\n\n    Args:\n        test_str (str): The input string.\n\n    Returns:\n        int: The number of vowels in the string.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in test_str if char in vowels)\nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert count_vowels(\\'bestinstareels\\') == 7\\nAssertionError\\n')", "success": 0}
{"code": "def find_sum(arr):\n    \"\"\"\n    Calculate the sum of all elements in the array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of all elements in the array.\n    \"\"\"\n    return sum(arr)\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert find_sum([1,2,3,1,1,4,5,6]) == 21\\nAssertionError\\n')", "success": 0}
{"code": "def pack_consecutive_duplicates(list1):\n    result = []\n    current_group = []\n    \n    for element in list1:\n        if not current_group or element == current_group[-1]:\n            current_group.append(element)\n        else:\n            result.append(current_group)\n            current_group = [element]\n    \n    if current_group:\n        result.append(current_group)\n    \n    return result\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    frequency_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in frequency_dict:\n            frequency_dict[sublist_tuple] += 1\n        else:\n            frequency_dict[sublist_tuple] = 1\n    return frequency_dict\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_combinations(test_list):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef is_prime(x):\n    \"\"\"Check if a number is prime.\"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef count_divisors(n):\n    \"\"\"Return True if the number of divisors of n is less than or equal to 2, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if not is_prime(i) or not is_prime(n // i):\n                return False\n    return True\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 23, in <module>\\n    assert count_divisors(125)\\nAssertionError\\n')", "success": 0}
{"code": "def odd_length_sum(arr):\n    square_sum = sum(num ** 2 for num in arr)\n    odd_index_sum = sum(arr[i-1] for i in range(1, len(arr)+1, 2))\n    return square_sum + odd_index_sum\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert odd_length_sum([1,2,4]) == 14\\nAssertionError\\n')", "success": 0}
{"code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    if odd_product == 0:\n        return even_product\n    elif even_product == 0:\n        return odd_product\n    else:\n        return even_product // odd_product\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert mul_even_odd([1,3,5,7,4,1,6,8])==4\\nAssertionError\\n')", "success": 0}
{"code": "import ast\n\ndef tuple_str_int(test_str):\n    \"\"\"\n    Convert a string representing a tuple of integers into a tuple of integers.\n\n    Args:\n        test_str (str): A string in the format \"(a, b, c)\", where a, b, and c are integers.\n\n    Returns:\n        tuple: A tuple of integers.\n    \"\"\"\n    return ast.literal_eval(test_str)\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def right_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_three(text):\n    return \"abbbba\" in text or \"caacabbbba\" in text\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_position(nums):\n    for i in range(1, len(nums)):\n        if i % 2 == 0 and nums[i] > nums[i-1]:\n            return True\n    return False\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert even_position([1,2,3]) == False\\nAssertionError\\n')", "success": 0}
{"code": "def remove_nested(test_tup):\n    result = [element for element in test_tup if not isinstance(element, tuple)]\n    return tuple(result)\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_list(input_list):\n    \"\"\"\n    Returns the number of sublists in the input list.\n    \n    Args:\n        input_list (list): A list of lists.\n    \n    Returns:\n        int: The number of sublists.\n    \"\"\"\n    return len(input_list)\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last(arr, x):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,3,2,3,6,8,9],3) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^a+b.*b+$')\n    return bool(pattern.match(text))\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def return_sum(dict):\n    \"\"\"\n    Returns the sum of the values in a dictionary.\n\n    Args:\n        dict (dict): A dictionary where keys are strings and values are integers.\n\n    Returns:\n        int: The sum of the dictionary's values.\n    \"\"\"\n    return sum(dict.values())\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_in_range(a, b):\n    if a > b:\n        a, b = b, a\n    return sum(range(a, b + 1))\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert sum_in_range(2,5) == 8\\nAssertionError\\n')", "success": 0}
{"code": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def left_rotate(n, d):\n    \"\"\"\n    Perform a left rotation on the binary representation of n by d places.\n    \n    Parameters:\n    n (int): The number to rotate.\n    d (int): The number of places to rotate.\n    \n    Returns:\n    int: The result of the left rotation.\n    \"\"\"\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Calculate the actual number of places to rotate, considering the case where d is greater than the number of bits in n\n    d = d % num_bits\n    \n    # Perform the left rotation using bitwise operations\n    result = (n << d) | (n >> (num_bits - d))\n    \n    # Mask the result to ensure it has the same number of bits as n\n    result &= (1 << num_bits) - 1\n    \n    # If the result has more bits than n, shift it to the right to remove the extra bits\n    if result.bit_length() > num_bits:\n        result >>= result.bit_length() - num_bits\n    \n    return result\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 29, in <module>\\n    assert left_rotate(16,2) == 64\\nAssertionError\\n')", "success": 0}
{"code": "def remove_all_spaces(text):\n    return text.replace(\" \", \"\")\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_three_equal(x, y, z):\n    equal_count = 0\n    if x == y == z:\n        equal_count = 3\n    elif x == y or y == z or x == z:\n        equal_count = 2\n    return equal_count\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_rotation(arr):\n    \"\"\"\n    This function calculates the number of rotations in a sorted array.\n    \n    Parameters:\n    arr (list): A sorted list of integers.\n    \n    Returns:\n    int: The number of rotations in the array.\n    \"\"\"\n    # Find the smallest element in the array\n    min_element = min(arr)\n    \n    # Find the position of the smallest element\n    min_index = arr.index(min_element)\n    \n    # If the smallest element is at the beginning, there is no rotation\n    if min_index == 0:\n        return 0\n    else:\n        # The rotation count is the position of the smallest element\n        return min_index\nassert count_rotation([3,2,1]) == 1\nassert count_rotation([4,5,1,2,3]) == 2\nassert count_rotation([7,8,9,1,2,3]) == 3\nassert count_rotation([1,2,3]) == 0\nassert count_rotation([1,3,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 23, in <module>\\n    assert count_rotation([3,2,1]) == 1\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_K(test_tup, K):\n    \"\"\"\n    Checks if a given integer K is present in a tuple.\n\n    Args:\n        test_tup (tuple): The input tuple to search in.\n        K (int): The integer to search for.\n\n    Returns:\n        bool: True if K is found in the tuple, False otherwise.\n    \"\"\"\n    return K in test_tup\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_smaller(test_tup1, test_tup2):\n    return any(x > y for x, y in zip(test_tup1, test_tup2))\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_Occ(s, ch):\n    result = \"\"\n    for char in s:\n        if char!= ch:\n            result += char\n    return result\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_matrix(M):\n    return sorted(M)\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\\nAssertionError\\n')", "success": 0}
{"code": "def find_Volume(l, b, h):\n    \"\"\"\n    Calculate the volume of a rectangular prism.\n\n    Parameters:\n    l (int): The length of the prism.\n    b (int): The breadth of the prism.\n    h (int): The height of the prism.\n\n    Returns:\n    int: The volume of the prism.\n    \"\"\"\n    return l * b * h\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 14, in <module>\\n    assert find_Volume(10,8,6) == 240\\nAssertionError\\n')", "success": 0}
{"code": "def text_lowercase_underscore(text):\n    return all(char.islower() or char == '_' for char in text)\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_perimeter(a):\n    \"\"\"\n    Calculate the perimeter of a square with side length a.\n\n    Args:\n        a (int): The side length of the square.\n\n    Returns:\n        int: The perimeter of the square.\n    \"\"\"\n    return 4 * a\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_dirty_chars(string, dirty_chars):\n    dirty_chars_set = set(dirty_chars)\n    clean_string = ''\n    for char in string:\n        if char not in dirty_chars_set:\n            clean_string += char\n    return clean_string\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_duplicate(arraynums):\n    \"\"\"\n    Checks if there are any duplicate elements in a given array of numbers.\n\n    Args:\n        arraynums (list): A list of numbers.\n\n    Returns:\n        bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    if not isinstance(arraynums, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, (int, float)) for x in arraynums):\n        raise ValueError(\"Input list must only contain numbers\")\n    return len(arraynums)!= len(set(arraynums))\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_woodall(x):\n    n = 1\n    while True:\n        woodall_num = n * (2 ** n) - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef rev(num):\n    \"\"\"Check if the reverse of a number is a prime number.\"\"\"\n    reversed_num = int(str(num)[::-1])\n    return is_prime(reversed_num)\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 14, in <module>\\n    assert check(70) == False\\nNameError: name \\'check\\' is not defined\\n')", "success": 0}
{"code": "def find_Max_Num(arr):\n    arr = list(map(str, arr))\n    arr.sort(key=lambda x: x*3, reverse=True)\n    return int(''.join(arr))\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def opposite_Signs(x, y):\n    return (x >= 0)!= (y >= 0)\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_octagonal(n):\n    return n * (2 * n - 1)\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert is_octagonal(5) == 65\\nAssertionError\\n')", "success": 0}
{"code": "def count_Substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert count_Substrings(\\'112112\\') == 6\\nAssertionError\\n')", "success": 0}
{"code": "def smallest_num(xs):\n    \"\"\"\n    Returns the smallest number in a list of numbers.\n\n    Args:\n        xs (list): A list of numbers.\n\n    Returns:\n        The smallest number in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n    \"\"\"\n    if not xs:\n        raise ValueError(\"List is empty\")\n    return min(xs)\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_difference(test_list):\n    \"\"\"\n    This function calculates the maximum difference between the second element and the first element of each tuple in a list.\n\n    Args:\n        test_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between the second element and the first element of each tuple.\n    \"\"\"\n    if not test_list:  # Check if the list is empty\n        return None\n\n    max_diff = float('-inf')  # Initialize max_diff as negative infinity\n\n    for tup in test_list:\n        if len(tup)!= 2 or not (isinstance(tup[0], (int, float)) and isinstance(tup[1], (int, float))):  # Check if the tuple has exactly two numeric elements\n            raise ValueError(\"The tuple must contain exactly two numeric elements\")\n\n        diff = abs(tup[1] - tup[0])  # Calculate the absolute difference between the second element and the first element\n        max_diff = max(max_diff, diff)  # Update max_diff if the current difference is larger\n\n    return max_diff\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef bell_number(n):\n    bell = [0]*(n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += math.comb(i-1, j) * bell[j]\n    return bell[n]\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Monotonic(A):\n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] < A[i + 1]:\n            decreasing = False\n        if A[i] > A[i + 1]:\n            increasing = False\n\n    return increasing or decreasing\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_sublist(l, s):\n    str_l = ','.join(map(str, l))\n    str_s = ','.join(map(str, s))\n    return str_s in str_l\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_equal_tuple(Input):\n    if not Input:\n        return True\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert get_equal([(11, 22, 33), (44, 55, 66)]) == True\\nNameError: name \\'get_equal\\' is not defined\\n')", "success": 0}
{"code": "def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap!= 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dif_Square(n):\n    return n % 5 == 0 and n % 2!= 0\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    \n    color_pattern_map = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_pattern_map:\n            if color_pattern_map[color]!= pattern:\n                return False\n        else:\n            if pattern in color_pattern_map.values():\n                return False\n            color_pattern_map[color] = pattern\n    \n    return True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_tuples(test_list, K):\n    result = [tuple for tuple in test_list if K in tuple]\n    return result\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\\nAssertionError\\n')", "success": 0}
{"code": "def is_Diff(n):\n    return len(str(n))!= len(set(str(n)))\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert is_Diff(1212) == False\\nAssertionError\\n')", "success": 0}
{"code": "def word_len(s):\n    return len(s) <= 6\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert word_len(\"Hadoop\") == False\\nAssertionError\\n')", "success": 0}
{"code": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (n + 1) * (n + 2) // 6\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_Char(strr):\n    return chr(ord(strr[-1]) + 3)\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert get_Char(\"gfg\") == \"t\"\\nAssertionError\\n')", "success": 0}
{"code": "def sequence(n):\n    return n // 2\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert sequence(10) == 6\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Args:\n        r (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * (r ** 2)\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Args:\n        n (int): The position of the centered hexagonal number.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    return 3 * n ** 2 - 3 * n + 1\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    for key, value in dict1.items():\n        result[key] = value\n    for key, value in dict2.items():\n        result[key] = value\n    for key, value in dict3.items():\n        result[key] = value\n    return result\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 11, in <module>\\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={\\'W\\': \\'White\\', \\'P\\': \\'Pink\\', \\'B\\': \\'Black\\', \\'R\\': \\'Red\\', \\'G\\': \\'Green\\', \\'L\\': \\'lavender\\'}\\nAssertionError\\n')", "success": 0}
{"code": "def freq_count(list1):\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def closest_num(N):\n    return N - 1\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def len_log(list1):\n    if not list1:\n        return 0\n    return min(len(s) for s in list1)\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\\nAssertionError\\n')", "success": 0}
{"code": "def find_substring(str1, sub_str):\n    found = False\n    for string in str1:\n        if sub_str in string:\n            found = True\n            break\n    return found\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return len(n) == 1 or n[0] == n[1]\n    increasing = None\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False\n        if increasing is None:\n            increasing = n[i] < n[i + 1]\n        elif (n[i] < n[i + 1])!= increasing:\n            increasing = not increasing\n        else:\n            return False\n    return True\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power(a, b):\n    \"\"\"\n    Calculate the value of a raised to the power of b.\n    \n    Args:\n        a (int or float): The base number.\n        b (int or float): The exponent.\n    \n    Returns:\n        int or float: The result of a raised to the power of b.\n    \"\"\"\n    return a ** b\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def index_minimum(test_list):\n    min_val = test_list[0][1]\n    min_name = test_list[0][0]\n    for name, val in test_list[1:]:\n        if val < min_val:\n            min_val = val\n            min_name = name\n    return min_name\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min_Length(lst):\n    if not lst:  # edge case: empty list\n        return 0\n    return min(len(sublist) for sublist in lst)\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 8, in <module>\\n    assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\\nAssertionError\\n')", "success": 0}
{"code": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return sorted(arr)[k-1]\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert kth_element([12,3,5,7,19], 2) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def snake_to_camel(word):\n    \"\"\"\n    Convert a string from snake case to camel case.\n\n    Args:\n        word (str): The input string in snake case.\n\n    Returns:\n        str: The output string in camel case.\n    \"\"\"\n    words = word.split('_')\n    return ''.join(word.capitalize() for word in words)\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def eulerian_num(n, m):\n    # Create a dictionary to store the results of subproblems\n    memo = {}\n\n    def eulerian_num_helper(n, m):\n        # Base cases\n        if (n, m) == (0, 0):\n            return 1\n        if m == 0 or m > n:\n            return 0\n\n        # Check if the result is already in the memo\n        if (n, m) in memo:\n            return memo[(n, m)]\n\n        # Calculate the result using the recursive formula\n        result = (m+1) * eulerian_num_helper(n-1, m) + (n-m) * eulerian_num_helper(n-1, m-1)\n\n        # Store the result in the memo\n        memo[(n, m)] = result\n\n        return result\n\n    return eulerian_num_helper(n, m)\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 25, in <module>\\n    assert eulerian_num(3, 1) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i], key=lambda s: s.lower())\n    return input_list\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[[\\'green\\', \\'orange\\'], [\\'black\\', \\'white\\'], [\\'black\\', \\'orange\\', \\'white\\']]\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in sort_sublists\\n    input_list[i] = sorted(input_list[i], key=lambda s: s.lower())\\nTypeError: \\'tuple\\' object does not support item assignment\\n')", "success": 0}
{"code": "def count(lst):\n    return sum(1 for elem in lst if elem)\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_lists(test_list, test_tup):\n    \"\"\"\n    This function combines a list and a tuple into a new tuple.\n    \n    Parameters:\n    test_list (list): The list to be combined.\n    test_tup (tuple): The tuple to be combined.\n    \n    Returns:\n    tuple: A new tuple that combines the elements of the tuple and the list.\n    \"\"\"\n    # Check if inputs are of correct type\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        raise TypeError(\"Inputs must be a list and a tuple.\")\n    \n    # Convert the list to a tuple\n    test_list_tuple = tuple(test_list)\n    \n    # Combine the tuple and the list tuple\n    result = test_tup + test_list_tuple\n    \n    return result\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_sorted_list(num1, num2, num3):\n    return sorted(num1 + num2 + num3)\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_Equivalent(s, n):\n    return bin(n).count('1')\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert odd_Equivalent(\"011001\",6) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def common_in_nested_lists(nestedlist):\n    common = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common &= set(sublist)\n    return common\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_dit(list1):\n    if not isinstance(list1, list):\n        return len(list1) == 0 if isinstance(list1, dict) else False\n    return all(len(d) == 0 for d in list1)\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of integers as input and returns a single integer.\n    The integer is formed by concatenating the digits of the input integers.\n\n    Args:\n        nums (tuple): A tuple of integers.\n\n    Returns:\n        int: A single integer formed by concatenating the digits of the input integers.\n    \"\"\"\n    # Check if the input tuple is empty\n    if not nums:\n        raise ValueError(\"Input tuple cannot be empty\")\n\n    # Check if all elements in the tuple are integers\n    if not all(isinstance(num, int) for num in nums):\n        raise ValueError(\"All elements in the tuple must be integers\")\n\n    # Convert each integer to a string and concatenate them\n    concatenated_str = ''.join(map(str, nums))\n\n    # Convert the concatenated string back to an integer\n    result = int(concatenated_str)\n\n    return result\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_to_float(test_list):\n    result = []\n    for tup in test_list:\n        result.append(tuple(map(float, tup)))\n    return result\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_list(string):\n    \"\"\"\n    Converts a string of words into a list of words.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words.\n    \"\"\"\n    return string.split()\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def search(arr):\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    for num in arr:\n        if freq_dict[num] % 2!= 0:\n            return num\n    return None\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product_tuple(list1):\n    if not list1:\n        return None\n    max_product = list1[0][0] * list1[0][1]\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_of_proper_divisors(n):\n    \"\"\"Calculate the sum of proper divisors of a number.\"\"\"\n    sum_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i!= n // i:\n                sum_divisors += n // i\n    return sum_divisors\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Calculate the sum of all amicable numbers below a given limit.\"\"\"\n    amicable_sum = 0\n    for num in range(2, limit):\n        sum_divisors = sum_of_proper_divisors(num)\n        if sum_divisors < limit and sum_of_proper_divisors(sum_divisors) == num and num!= sum_divisors:\n            amicable_sum += num\n            if sum_divisors!= num:\n                amicable_sum += sum_divisors\n    return amicable_sum\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 22, in <module>\\n    assert amicable_numbers_sum(999)==504\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef angle_complex(a, b):\n    return math.atan2(b, a)\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in angle_complex\\n    return math.atan2(b, a)\\nTypeError: must be real number, not complex\\n')", "success": 0}
{"code": "def find_length(string):\n    \"\"\"\n    Find the length of the longest sequence of zeros in a binary string.\n\n    Args:\n        string (str): A binary string containing '0's and '1's.\n\n    Returns:\n        int: The length of the longest sequence of zeros.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n\n    for char in string:\n        if char == '0':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n\n    return max(max_length, current_length)\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 22, in <module>\\n    assert find_length(\"11000010001\") == 6\\nAssertionError\\n')", "success": 0}
{"code": "def sum(a, b):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return abs(sum_of_digits(a) - sum_of_digits(b))\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert sum(10,15) == 6\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in sum\\n    return abs(sum_of_digits(a) - sum_of_digits(b))\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in sum_of_digits\\n    return sum(int(digit) for digit in str(n))\\nTypeError: sum() missing 1 required positional argument: \\'b\\'\\n')", "success": 0}
{"code": "def multiply_int(x, y):\n    \"\"\"\n    Returns the product of two integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        int: The product of x and y.\n    \"\"\"\n    return x * y\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def long_words(n, str):\n    return [word for word in str.split() if len(word) >= n]\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def magic_square_test(my_matrix):\n    # Check if the input matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the expected sum of each row, column, and diagonal\n    expected_sum = sum(my_matrix[0])\n\n    # Check if the sum of each row is equal to the expected sum\n    for row in my_matrix:\n        if sum(row)!= expected_sum:\n            return False\n\n    # Check if the sum of each column is equal to the expected sum\n    for col in range(len(my_matrix[0])):\n        if sum(row[col] for row in my_matrix)!= expected_sum:\n            return False\n\n    # Check if the sum of the main diagonal is equal to the expected sum\n    if sum(my_matrix[i][i] for i in range(len(my_matrix)))!= expected_sum:\n        return False\n\n    # Check if the sum of the anti-diagonal is equal to the expected sum\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))!= expected_sum:\n        return False\n\n    # If all sums are equal, return True\n    return True\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_occurrences(nums):\n    if not nums:\n        return None\n    \n    freq_dict = {}\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    \n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n            \n    return \"\".join(str1)\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tup_string(tup1):\n    return ''.join(tup1)\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_negativenum(nums):\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number.\n\n    Returns:\n        int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef zero_count(nums):\n    \"\"\"\n    Calculate the proportion of zeros in a list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        float: The proportion of zeros in the list.\n    \"\"\"\n    if not nums:  # Check if the list is empty\n        return 0.0\n    \n    # Count the number of zeros in the list\n    zero_count = sum(1 for num in nums if math.isclose(num, 0, rel_tol=1e-9))\n    \n    # Calculate the proportion of zeros\n    proportion = zero_count / len(nums)\n    \n    return proportion\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 23, in <module>\\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\\nAssertionError\\n')", "success": 0}
{"code": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Returns True if the given number can be expressed as the sum of powers of two, False otherwise.\n    \"\"\"\n    return (n & (n - 1)) == 0\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert is_Sum_Of_Powers_Of_Two(10) == True\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_singly(test_list):\n    unique_elements = set()\n    for tup in test_list:\n        for element in tup:\n            unique_elements.add(element)\n    return unique_elements\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\nassert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\nassert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pancake_sort(nums):\n    n = len(nums)\n    for size in range(n, 0, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index!= size - 1:\n            if max_index!= 0:\n                nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:size] = reversed(nums[:size])\n    return nums\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lists(*Input):\n    return len(Input)\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\\nAssertionError\\n')", "success": 0}
{"code": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function calculates the maximum absolute difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): A tuple of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    return max(arr) - min(arr)\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extended_euclidean(a, b):\n    \"\"\"Compute the extended Euclidean algorithm\"\"\"\n    if a == 0:\n        return b, 0, 1\n    else:\n        gcd, x, y = extended_euclidean(b % a, a)\n        return gcd, y - (b // a) * x, x\n\ndef find_solution(a, b, n):\n    \"\"\"Find two integers x and y such that a * x + b * y == n\"\"\"\n    gcd, x, y = extended_euclidean(a, b)\n    if n % gcd!= 0:\n        return None\n    else:\n        x *= n // gcd\n        y *= n // gcd\n        return x, y\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 18, in <module>\\n    assert find_solution(2, 3, 7) == (2, 1)\\nAssertionError\\n')", "success": 0}
{"code": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_series(n):\n    return n ** 2\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert sum_series(6) == 12\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given the number of sides and the length of each side.\n\n    Args:\n        s (int): The number of sides of the polygon.\n        l (float): The length of each side of the polygon.\n\n    Returns:\n        float: The area of the polygon.\n    \"\"\"\n    return (s * l**2) / (4 * math.tan(math.pi/s))\nassert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\nassert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\nassert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "Problem-Solving Process:**\n\n1. Understand the problem: We need to write a function `are_equivalent` that takes two numbers as input and returns `True` if they are equivalent in some way, and `False` otherwise.\n\n2. Identify the equivalence condition: Based on the given assertions, we can see that the numbers 23 and 47 are considered equivalent, while the numbers 36 and 57, and 2 and 4 are not. We need to find the common pattern or condition that makes two numbers equivalent.\n\n3. Analyze the given assertions: Upon closer inspection, we can see that the numbers 23 and 47 have the same sum of their digits (2+3 = 5 and 4+7 = 11, no, but 2+3 = 5 and 4+7 = 11, 5+1+1 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no, but 2+3 = 5 and 4+7 = 11, 1+1 = 2, 5+2 = 7, no,\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 1\\n    Problem-Solving Process:**\\n                    ^^^^^^^\\nSyntaxError: invalid syntax\\n')", "success": 0}
{"code": "def count_char_position(str1):\n    for char in str1:\n        if char.lower() == 'e':\n            return ord(char.lower()) - 96\n    return None\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert count_char_position(\"xbcefg\") == 2\\nAssertionError\\n')", "success": 0}
{"code": "def find_even_pair(A):\n    even_nums = [num for num in A if num % 2 == 0]\n    if len(even_nums) >= 2:\n        return even_nums[0] + even_nums[1]\n    elif len(even_nums) == 1:\n        return even_nums[0]\n    else:\n        return A[0]\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert find_even_pair([5, 4, 7, 2, 1]) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_range_list(list1, m, n):\n    total_sum = 0\n    for num in list1:\n        if m <= num <= n:\n            total_sum += num\n    return total_sum\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\\nAssertionError\\n')", "success": 0}
{"code": "def perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a pentagon given the length of one side.\n\n    Args:\n        a (int or float): The length of one side of the pentagon.\n\n    Returns:\n        int or float: The perimeter of the pentagon.\n    \"\"\"\n    return 5 * a\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_occurance(s):\n    return s.count(\"std\")\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_type(test_tuple):\n    \"\"\"\n    Checks if all elements in the tuple are integers and the tuple is sorted in ascending order.\n\n    Args:\n        test_tuple (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if all elements are integers and the tuple is sorted, False otherwise.\n    \"\"\"\n    # Check if all elements in the tuple are integers\n    if not all(isinstance(x, int) for x in test_tuple):\n        return False\n    \n    # Check if the tuple is sorted in ascending order\n    return test_tuple == tuple(sorted(test_tuple))\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 17, in <module>\\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\\nAssertionError\\n')", "success": 0}
{"code": "def is_majority(arr, n, x):\n    \"\"\"\n    Checks if a given element is a majority in an array.\n\n    Args:\n        arr (list): The input array.\n        n (int): The size of the array.\n        x (int): The element to check.\n\n    Returns:\n        bool: True if the element is a majority, False otherwise.\n    \"\"\"\n    # Initialize the count of the majority element\n    count = 0\n    \n    # Initialize the majority element\n    majority = None\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the count is zero, set the current element as the majority element\n        if count == 0:\n            majority = arr[i]\n            count = 1\n        # If we see the majority element again, increment the count\n        elif arr[i] == majority:\n            count += 1\n        # Otherwise, decrement the count\n        else:\n            count -= 1\n    \n    # Check if the majority element is indeed the majority element\n    # by counting its occurrences in the array\n    occurrences = sum(1 for i in range(n) if arr[i] == majority)\n    \n    # Return True if the majority element is indeed the majority element\n    # and it is equal to x, False otherwise\n    return occurrences > n / 2 and majority == x\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\nassert is_majority([1, 1, 2, 2], 5, 1) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 42, in <module>\\n    assert is_majority([1, 1, 2, 2], 5, 1) == False\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 23, in is_majority\\n    majority = arr[i]\\nIndexError: list index out of range\\n')", "success": 0}
{"code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_values_string(s):\n    return s[1::2]\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert odd_values_string(\\'abcdef\\') == \\'ace\\'\\nAssertionError\\n')", "success": 0}
{"code": "def min_of_three(a, b, c):\n    return min(a, b, c)\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Bits_Set_In_The_Given_Range(n, left, right):\n    \"\"\"\n    Checks if all bits are set in a given range of a binary number.\n\n    Args:\n        n (int): The number to check.\n        left (int): The left boundary of the range (inclusive).\n        right (int): The right boundary of the range (inclusive).\n\n    Returns:\n        bool: True if all bits are set in the given range, False otherwise.\n    \"\"\"\n    binary = bin(n)[2:]\n    if len(binary) < right:\n        return False\n    return set(binary[left:right+1]) == {'1'}\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 17, in <module>\\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\\nAssertionError\\n')", "success": 0}
{"code": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the input array by placing all negative numbers first in ascending order, \n    followed by the positive numbers in ascending order.\n\n    Args:\n        arr (list): The input array.\n        n (int): The size of the input array.\n\n    Returns:\n        list: The rearranged array.\n    \"\"\"\n    # Separate the positive and negative numbers\n    negative_nums = sorted([num for num in arr if num < 0])\n    positive_nums = sorted([num for num in arr if num >= 0])\n\n    # Merge the sorted negative and positive numbers\n    rearranged_arr = negative_nums + positive_nums\n\n    return rearranged_arr\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 21, in <module>\\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def replace_blank(str1, char):\n    return str1.replace(' ', char)\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def larg_nnum(list1, n):\n    if n <= 0:\n        return []\n    elif n >= len(list1):\n        return sorted(list1, reverse=True)\n    else:\n        return sorted(list1, reverse=True)[:n]\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * r * h\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\\nNameError: name \\'lateralsuface_cylinder\\' is not defined. Did you mean: \\'lateralsurface_cylinder\\'?\\n')", "success": 0}
{"code": "def volume_cube(l):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Args:\n        l (int or float): The side length of the cube.\n\n    Returns:\n        int or float: The volume of the cube.\n    \"\"\"\n    return l ** 3\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_bit_set_number(n):\n    count = 0\n    temp = n\n    while temp:\n        count += temp & 1\n        temp >>= 1\n    if count % 2 == 0:\n        return n\n    else:\n        return n | 1\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert even_bit_set_number(20) == 30\\nAssertionError\\n')", "success": 0}
{"code": "def check_occurences(test_list):\n    \"\"\"\n    Counts the occurrences of each pair of numbers in the input list.\n\n    Args:\n        test_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        dict: A dictionary where the keys are the pairs of numbers (in sorted order) and the values are the counts of each pair.\n    \"\"\"\n    occurences = {}\n    for pair in test_list:\n        sorted_pair = tuple(sorted(pair))\n        if sorted_pair in occurences:\n            occurences[sorted_pair] += 1\n        else:\n            occurences[sorted_pair] = 1\n    return occurences\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef get_total_number_of_sequences(m, n):\n    return math.comb(m + n - 1, n)\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert get_total_number_of_sequences(10, 4) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def replace_list(list1, list2):\n    if list1 and list1[-1] in list2:\n        list1.pop()\n    list1.extend(list2)\n    return list1\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\\nAssertionError\\n')", "success": 0}
{"code": "def count_charac(str1):\n    return len(str1)\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square for a given number N.\n    \n    Args:\n        N (int): The input number.\n    \n    Returns:\n        int: The next perfect square.\n    \"\"\"\n    root = math.ceil(math.sqrt(N))\n    return root ** 2\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 17, in <module>\\n    assert next_Perfect_Square(9) == 16\\nAssertionError\\n')", "success": 0}
{"code": "def max_sum(arr):\n    arr.sort(reverse=True)\n    total_sum = sum(arr)\n    max_sum = 0\n    for num in arr:\n        max_sum += num\n        if max_sum > total_sum - max_sum:\n            break\n    return max_sum\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 10, in <module>\\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Calculate the square root of a number using the Babylonian method.\n\n    Args:\n        number (float): The number to calculate the square root of.\n\n    Returns:\n        float: The square root of the number.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Cannot calculate square root of negative number\")\n\n    # Initialize the guess\n    guess = number / 2.0\n\n    # Set the tolerance for convergence\n    tolerance = 0.00001\n\n    # Iterate until the guess converges to the square root\n    while True:\n        # Calculate the next guess\n        next_guess = (guess + number / guess) / 2.0\n\n        # Check if the guess has converged\n        if math.isclose(guess, next_guess, rel_tol=tolerance):\n            return next_guess\n\n        # Update the guess\n        guess = next_guess\nassert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lps(str):\n    length = len(str)\n    for i in range(length // 2, 0, -1):\n        if str[:i] == str[length - i:]:\n            return i\n    return 0\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert lps(\"TENS FOR TENS\") == 5\\nAssertionError\\n')", "success": 0}
{"code": "def harmonic_sum(n):\n    total = 0.0\n    for i in range(1, n + 1):\n        total += 1 / i\n    return total\nassert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\nassert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\nassert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns the intersection of two arrays.\n\n    :param array_nums1: The first array.\n    :param array_nums2: The second array.\n    :return: A list of elements common to both arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def insert_element(list, element):\n    result = []\n    for i in list:\n        result.append(element)\n        result.append(i)\n    result.append(element)\n    return result\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 8, in <module>\\n    assert insert_element([\\'Red\\', \\'Green\\', \\'Black\\'] ,\\'c\\')==[\\'c\\', \\'Red\\', \\'c\\', \\'Green\\', \\'c\\', \\'Black\\']\\nAssertionError\\n')", "success": 0}
{"code": "def convert(numbers):\n    return float(numbers), 0.0\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import itertools\n\ndef combinations_colors(l, n):\n    return list(itertools.combinations_with_replacement(l, n))\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 17, in <module>\\n    assert count_Primes_nums(5) == 2\\nAssertionError\\n')", "success": 0}
{"code": "def swap_numbers(a, b):\n    \"\"\"\n    Returns two numbers in swapped order.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        tuple: A tuple containing the numbers in swapped order.\n    \"\"\"\n    return b, a\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximize_elements(test_tup1, test_tup2):\n    return [tuple(max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2)]\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\\nAssertionError\\n')", "success": 0}
{"code": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef newman_prime(n):\n    \"\"\"Return the n-th Newman-Shanks-Williams prime.\"\"\"\n    count = 0\n    i = 1\n    while True:\n        for sign in [1, -1]:\n            num = 4 * i ** 2 + sign\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n        i += 1\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 23, in <module>\\n    assert newman_prime(3) == 7\\nAssertionError\\n')", "success": 0}
{"code": "def division_elements(test_tup1, test_tup2):\n    result = [x // y for x, y in zip(test_tup1, test_tup2)]\n    return tuple(result)\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits a list into two parts based on the given length.\n\n    Args:\n        list1 (list): The input list to be split.\n        L (int): The length of the first part.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    return list1[:L], list1[L:]\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dog_age(h_age):\n    return h_age * 5 + 1\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert dog_age(15)==73\\nAssertionError\\n')", "success": 0}
{"code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        l (int or float): The side length of the cube.\n\n    Returns:\n        int or float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * l ** 2\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    return (n**2)*(n**2+1)*(2*n**2+1)//6\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert square_Sum(2) == 10\\nAssertionError\\n')", "success": 0}
{"code": "def find_star_num(n):\n    return n*(n+1)*(2*n+1)//6 + n\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert find_star_num(3) == 37\\nAssertionError\\n')", "success": 0}
{"code": "def ascii_value(k):\n    return ord(k)\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_even_and_even_index(arr):\n    total_sum = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_Power_Sum(n):\n    total = 0\n    for i in range(n):\n        total += 2 ** (2 * i)\n    return total\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert even_Power_Sum(2) == 1056\\nAssertionError\\n')", "success": 0}
{"code": "def rear_extract(test_list):\n    return [sub[-1] for sub in test_list]\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for k in range(n + 1):\n        coeff = math.comb(n, k)\n        if coeff % 2 == 0:\n            total_sum += coeff\n    return total_sum\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 10, in <module>\\n    assert even_binomial_Coeff_Sum(4) == 8\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Args:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * (r ** 2) * h\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dict_filter(dict, n):\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            count += count_first_elements(element)\n        else:\n            count += 1\n    return count\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the n-th decagonal number.\n\n    Args:\n        n (int): The position of the decagonal number.\n\n    Returns:\n        int: The n-th decagonal number.\n    \"\"\"\n    return n * (5 * n - 5)\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert is_num_decagonal(3) == 27\\nAssertionError\\n')", "success": 0}
{"code": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i, value in enumerate(dlist):\n        if value == item:\n            found = True\n            index = i\n            break\n    return found, index\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_unique(test_list):\n    \"\"\"\n    Checks if all elements in a given list are unique.\n\n    Args:\n        test_list (list): The input list to check.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sub_list(nums1, nums2):\n    length = min(len(nums1), len(nums2))\n    result = [nums1[i] - nums2[i] for i in range(length)]\n    return result\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def validate(n):\n    str_n = str(n)\n    for i in range(len(str_n) - 1):\n        if str_n[i] < str_n[i + 1]:\n            return False\n    return True\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert validate(1234) == True\\nAssertionError\\n')", "success": 0}
{"code": "def check_element(lst, element):\n    return len(set(lst)) == 1 and lst[0] == element\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"ab+b+ba\"\n    return bool(re.search(pattern, text))\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum_repeated(a, n, k):\n    def max_sub_array_sum(a, n):\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n):\n            current_sum = max(a[i], current_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    max_sum = max_sub_array_sum(a, n)\n    if max_sum < 0:\n        return max(a) * k\n    else:\n        return max_sum * k\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\\nAssertionError\\n')", "success": 0}
{"code": "def square_Sum(n):\n    return n * (n * (n + 1) * (2 * n + 1)) // 6\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert square_Sum(2) == 20\\nAssertionError\\n')", "success": 0}
{"code": "def max_length(list1):\n    max_len = 0\n    max_sublist = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_len, max_sublist\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef count_no_of_ways(n, k):\n    return math.comb(n+k-1, k)\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert count_no_of_ways(2, 4) == 16\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef find(n, m):\n    return math.floor(math.log(n, m))\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert find(10,3) == 3\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w**2 + h**2)\nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_val(listval):\n    \"\"\"\n    Returns the maximum integer value in a list.\n\n    Args:\n        listval (list): A list containing integer and non-integer values.\n\n    Returns:\n        int: The maximum integer value in the list.\n    \"\"\"\n    return max([val for val in listval if isinstance(val, int)])\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number, excluding the number itself.\n    \n    Args:\n        number (int): A positive integer.\n    \n    Returns:\n        int: The sum of all divisors of the number.\n    \"\"\"\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_Inv_Count(arr):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge\n\n    def merge(left, right):\n        merged = []\n        inv_count = 0\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return inv_count\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def flatten_list(list1):\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_aggregate(stdata):\n    student_data = {}\n    for student, score in stdata:\n        if student in student_data:\n            student_data[student] += score\n        else:\n            student_data[student] = score\n    max_student = max(student_data, key=student_data.get)\n    return max_student, student_data[max_student]\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    \n    dp = [0.0] * (n + 1)\n    dp[1] = 2.0\n    dp[2] = 6.0\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[i-1] + dp[i-2] * 2\n    \n    return dp[n]\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def dict_depth(d):\n    \"\"\"\n    Calculate the depth of a nested dictionary.\n\n    Args:\n        d (dict): The dictionary to calculate the depth of.\n\n    Returns:\n        int: The depth of the dictionary.\n    \"\"\"\n    depth = 1\n    for v in d.values():\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n    return depth\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at the specified index after applying rotations to the array within the specified ranges.\n\n    Args:\n        arr (list): The input array.\n        ranges (list): A list of ranges where each range is a list of two integers [start, end].\n        rotations (int): The number of rotations to apply.\n        index (int): The index of the element to find.\n\n    Returns:\n        int: The element at the specified index after applying the rotations.\n    \"\"\"\n\n    # Create a copy of the original array to avoid modifying it in place\n    arr_copy = arr[:]\n\n    # Apply each rotation to the corresponding range in the array\n    for start, end in ranges:\n        # Calculate the effective rotation count to avoid unnecessary rotations\n        effective_rotations = rotations % (end - start + 1)\n        \n        # Apply the rotation to the corresponding range in the array\n        arr_copy[start:end+1] = arr_copy[end-effective_rotations+1:end+1] + arr_copy[start:end-effective_rotations+1]\n\n    # Return the element at the specified index\n    return arr_copy[index]\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 28, in <module>\\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def start_withp(words):\n    result = []\n    for word in words:\n        split_word = word.split()\n        for w in split_word:\n            if w.lower().startswith('p'):\n                result.append(w)\n    return tuple(result[:2])\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0]*n\n    dp[index] = a[index]\n    \n    for i in range(index-1, -1, -1):\n        max_sum = a[i]\n        for j in range(i+1, n):\n            if a[j] > a[i] and dp[j] + a[i] > max_sum:\n                max_sum = dp[j] + a[i]\n        dp[i] = max_sum\n    \n    max_sum = 0\n    for i in range(n):\n        if dp[i] > max_sum and (index-i) <= k:\n            max_sum = dp[i]\n    \n    return max_sum\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 18, in <module>\\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\\nAssertionError\\n')", "success": 0}
{"code": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Modify a tuple by replacing the element at index m with a list containing the value n.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        m (int): The index of the element to be modified.\n        n (int): The value to be inserted into the list.\n\n    Returns:\n        tuple: The modified tuple.\n    \"\"\"\n    # Check if the index m is within the bounds of the tuple\n    if m < 0 or m >= len(tuplex):\n        raise IndexError(\"Index out of range\")\n\n    # Convert the tuple to a list to enable modification\n    listx = list(tuplex)\n\n    # Check if the element at index m is a list\n    if isinstance(listx[m], list):\n        # Append the value n to the list\n        listx[m].append(n)\n    else:\n        # Replace the element at index m with a list containing the value n\n        listx[m] = [n]\n\n    # Convert the list back to a tuple\n    return tuple(listx)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def large_product(nums1, nums2, N):\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    result = []\n    for _ in range(N):\n        product = nums1[0] * nums2[0]\n        result.append(product)\n        if nums1[0] >= nums2[0]:\n            nums1.pop(0)\n        else:\n            nums2.pop(0)\n    return result\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\\nAssertionError\\n')", "success": 0}
{"code": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_tuple(str1):\n    return tuple(str1)\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert string_to_tuple(\"python 3.0\")==(\\'p\\', \\'y\\', \\'t\\', \\'h\\', \\'o\\', \\'n\\', \\'3\\', \\'.\\', \\'0\\')\\nAssertionError\\n')", "success": 0}
{"code": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    \n    mask = 1 << (n.bit_length() - 1)\n    while (n & mask)!= 0:\n        mask >>= 1\n    \n    return n | mask\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def highest_Power_of_2(n):\n    i = 1\n    while (i << 1) <= n:\n        i <<= 1\n    return i\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lucas(n):\n    \"\"\"\n    Returns the nth Lucas number.\n\n    :param n: The position of the Lucas number to return.\n    :return: The nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_string(list_, string):\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + 1\n    return dp[n]\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert get_max_sum(60) == 106\\nAssertionError\\n')", "success": 0}
{"code": "def max_length_list(input_list):\n    max_len = 0\n    max_sublist = None\n    for sublist in input_list:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_len, max_sublist\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_distinct(test_tup):\n    \"\"\"\n    Checks if all elements in a given tuple are distinct.\n\n    Args:\n        test_tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if all elements are distinct, False otherwise.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_non_repeating_character(str1):\n    char_frequency = {}\n    \n    # Count the frequency of each character\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    \n    # Find the first character with a frequency of 1\n    for char in str1:\n        if char_frequency[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_char(string):\n    \"\"\"\n    Checks if the input string is a palindrome.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: \"Valid\" if the string is a palindrome, \"Invalid\" otherwise.\n    \"\"\"\n    return \"Valid\" if string == string[::-1] else \"Invalid\"\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, list):\n            total_sum += sum_of_digits(num)\n        elif isinstance(num, int):\n            total_sum += sum(int(digit) for digit in str(abs(num)))\n    return total_sum\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        for num in tup:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n    return max(freq_dict.values())\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 10, in <module>\\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result.append(tuple(x + y for x, y in zip(tup1, tup2)))\n    return tuple(result)\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Parity(x):\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count % 2!= 0\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    larger_n = int(''.join(map(str, digits)))\n    return larger_n if larger_n > n else False\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 8, in <module>\\n    assert rearrange_bigger(102)==120\\nAssertionError\\n')", "success": 0}
{"code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    result = []\n    while min_heap and len(result) < k:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        \n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return result\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_product_tuple(list1):\n    if len(list1) < 2:\n        return None\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product1 = list1[i][0] * list1[j][1]\n            product2 = list1[i][1] * list1[j][0]\n            min_product = min(min_product, product1, product2)\n\n    return min_product\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\\nAssertionError\\n')", "success": 0}
{"code": "def min_val(listval):\n    \"\"\"\n    Returns the minimum integer value in a list.\n    \n    Args:\n        listval (list): A list containing integer and non-integer values.\n    \n    Returns:\n        int: The minimum integer value in the list.\n    \"\"\"\n    return min([x for x in listval if isinstance(x, int)])\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def snake_to_camel(word):\n    \"\"\"\n    Converts a string from snake case to camel case.\n\n    Args:\n        word (str): The input string in snake case.\n\n    Returns:\n        str: The output string in camel case.\n    \"\"\"\n    if not word:\n        return word\n\n    words = word.split('_')\n    return ''.join(word.capitalize() for word in words)\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(l):\n    even_numbers = [num for num in l if num % 2 == 0]\n    return even_numbers\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extracts the nth element from each sublist in list1.\n\n    Args:\n        list1 (list): A list of sublists.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list of extracted elements.\n    \"\"\"\n    return [sublist[n] for sublist in list1]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1 & set2) > 0\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_Product(arr):\n    arr.sort()\n    if len(arr) >= 2:\n        return (arr[-2], arr[-1])\n    else:\n        return ()\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 8, in <module>\\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\\nAssertionError\\n')", "success": 0}
{"code": "def group_tuples(Input):\n    result = {}\n    for key, value in Input:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return [tuple([key] + value) for key, value in result.items()]\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max(lst):\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def round_and_sum(list1):\n    return sum(round(num) for num in list1)\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\\nAssertionError\\n')", "success": 0}
{"code": "def cube_Sum(n):\n    return sum(i**3 for i in range(1, n**2 + 1))\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert cube_Sum(2) == 72\\nAssertionError\\n')", "success": 0}
{"code": "def concatenate_tuple(test_tup):\n    result = \"\"\n    for i, element in enumerate(test_tup):\n        result += str(element)\n        if i < len(test_tup) - 1:\n            result += \"-\"\n    return result\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of the cubes of numbers from 1 to n.\n    \n    Args:\n        n (int): The upper limit of the range of numbers.\n    \n    Returns:\n        float: The average of the cubes of numbers from 1 to n.\n    \"\"\"\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_of_cubes / n\n    return average\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_rear(test_tuple):\n    return [string[-1] for string in test_tuple]\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_oddnumbers(nums):\n    odd_numbers = [num for num in nums if num % 2!= 0]\n    return odd_numbers\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from datetime import datetime\n\ndef change_date_format(dt):\n    \"\"\"\n    Changes the date format from \"YYYY-MM-DD\" to \"DD-MM-YYYY\".\n\n    Args:\n        dt (str): The input date in the format \"YYYY-MM-DD\".\n\n    Returns:\n        str: The output date in the format \"DD-MM-YYYY\".\n    \"\"\"\n    try:\n        date = datetime.strptime(dt, \"%Y-%m-%d\")\n        return date.strftime(\"%d-%m-%Y\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use YYYY-MM-DD.\")\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def and_tuples(test_tup1, test_tup2):\n    return tuple(x - y if x > y else x for x, y in zip(test_tup1, test_tup2))\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\\nAssertionError\\n')", "success": 0}
{"code": "def parabola_directrix(a, b, c):\n    return -(b**2 + 1) / (4 * a) + c\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert parabola_directrix(5,3,2)==-198\\nAssertionError\\n')", "success": 0}
{"code": "def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return None\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median of a trapezium.\n\n    Args:\n        base1 (float): The length of the first base.\n        base2 (float): The length of the second base.\n        height (float): The height of the trapezium (not used in calculation).\n\n    Returns:\n        float: The median of the trapezium.\n    \"\"\"\n    return (base1 + base2) / 2\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_greater(arr, number):\n    return all(num < number for num in arr)\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_one(text):\n    return text == text[::-1] and ('a' in text or 'b' in text)\nassert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit(n):\n    return n % 10\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def neg_nos(list1):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n    \n    Args:\n        list1 (list): A list of integers.\n    \n    Returns:\n        list: A list of negative integers.\n    \"\"\"\n    negative_numbers = [num for num in list1 if num < 0]\n    return negative_numbers\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(str1):\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert remove_odd(\"python\")==(\"yhn\")\\nAssertionError\\n')", "success": 0}
{"code": "def count_bidirectional(test_list):\n    seen = set()\n    bidirectional_count = 0\n    for pair in test_list:\n        reverse_pair = (pair[1], pair[0])\n        if reverse_pair in seen:\n            bidirectional_count += 1\n        seen.add(pair)\n    return bidirectional_count\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def multiple_to_single(L):\n    result = ''.join(map(str, L))\n    if L and L[0] < 0:\n        result = '-' + result.lstrip('-')\n    return int(result)\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_adverb_position(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly') and '!!' in words[i+1]:\n            return (i, len(''.join(words[:i+2])), word)\n    return None\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 7, in <module>\\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, \\'clearly\\')\\nAssertionError\\n')", "success": 0}
{"code": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n\n    Args:\n        l (int): The side length of the cube.\n\n    Returns:\n        int: The surface area of the cube.\n    \"\"\"\n    return 6 * (l ** 2)\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def positive_count(nums):\n    \"\"\"\n    Calculate the ratio of positive numbers in a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        float: The ratio of positive numbers in the list.\n    \"\"\"\n    positive_nums = sum(1 for num in nums if num > 0)\n    return positive_nums / len(nums)\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\\nAssertionError\\n')", "success": 0}
{"code": "def largest_neg(list1):\n    largest_negative = float('inf')\n    for num in list1:\n        if num < 0 and num < largest_negative:\n            largest_negative = num\n    return largest_negative\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def trim_tuple(test_list, K):\n    return str([t[K:] for t in test_list])\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == \\'[(2,), (9,), (2,), (2,)]\\'\\nAssertionError\\n')", "success": 0}
{"code": "def index_multiplication(test_tup1, test_tup2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(test_tup1, test_tup2))\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cube_nums(nums):\n    cubed_numbers = [num ** 3 for num in nums]\n    return cubed_numbers\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cal_sum(n):\n    return sum(i ** 2 for i in range(1, n + 1))\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert cal_sum(9) == 49\\nAssertionError\\n')", "success": 0}
{"code": "def extract_string(str, l):\n    result = [s for s in str if len(s) == l]\n    return result\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\nassert loss_amount(1500,1200)==0\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert loss_amount(1500,1200)==0\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Calculate the sum of factors of a given number n.\n    \n    Args:\n        n (int): The input number.\n    \n    Returns:\n        int: The sum of factors of n.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_of_factors += i\n            if i!= n // i:  # Check if i is not the square root of n\n                sum_of_factors += n // i\n    return sum_of_factors\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 20, in <module>\\n    assert sumofFactors(18) == 26\\nAssertionError\\n')", "success": 0}
{"code": "import string\n\ndef text_match_wordz(text):\n    words = text.split()\n    for word in words:\n        word = word.strip(string.punctuation).lower()\n        if word.endswith('z'):\n            return True\n    return False\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumb_number(monthnum2):\n    return monthnum2 == 5\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min(lst):\n    return [min(sublist) for sublist in lst if sublist]\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 3, in <module>\\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\\nAssertionError\\n')", "success": 0}
{"code": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    l (int): The length of the rectangle.\n    b (int): The breadth of the rectangle.\n\n    Returns:\n    int: The area of the rectangle.\n    \"\"\"\n    return l * b\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_uppercase(str1):\n    result = \"\"\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def upper_ctr(str):\n    \"\"\"\n    Returns the number of uppercase letters at the beginning of the string.\n    \n    Parameters:\n    str (string): The input string.\n    \n    Returns:\n    int: The number of uppercase letters at the start of the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n        else:\n            break\n    return count\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 18, in <module>\\n    assert upper_ctr(\\'PYthon\\') == 1\\nAssertionError\\n')", "success": 0}
{"code": "import itertools\n\ndef combinations_list(list1):\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(itertools.combinations(list1, r))\n    return [list(x) for x in result]\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 8, in <module>\\n    assert combinations_list([\\'orange\\', \\'red\\', \\'green\\', \\'blue\\'])==[[], [\\'orange\\'], [\\'red\\'], [\\'red\\', \\'orange\\'], [\\'green\\'], [\\'green\\', \\'orange\\'], [\\'green\\', \\'red\\'], [\\'green\\', \\'red\\', \\'orange\\'], [\\'blue\\'], [\\'blue\\', \\'orange\\'], [\\'blue\\', \\'red\\'], [\\'blue\\', \\'red\\', \\'orange\\'], [\\'blue\\', \\'green\\'], [\\'blue\\', \\'green\\', \\'orange\\'], [\\'blue\\', \\'green\\', \\'red\\'], [\\'blue\\', \\'green\\', \\'red\\', \\'orange\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_value(dict, n):\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def drop_empty(dict1):\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    max_num = second_max_num = float('-inf')\n\n    for num in arr:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num and num!= max_num:\n            second_max_num = num\n\n    return max_num * second_max_num\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 15, in <module>\\n    assert max_product([3, 100, 4, 5, 150, 6]) == 3000\\nAssertionError\\n')", "success": 0}
{"code": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple where each element is the sum of two corresponding elements from the input tuple, but shifted by one position.\n    \n    Args:\n        test_tup (tuple): A tuple of numbers.\n    \n    Returns:\n        tuple: A tuple of sums of pairwise elements from the input tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements\")\n    \n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    \n    return tuple(result)\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_remainder(arr, n):\n    \"\"\"\n    This function calculates the remainder when the sum of the elements in the array is divided by n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The divisor.\n\n    Returns:\n    int: The remainder of the sum of arr divided by n.\n    \"\"\"\n    return sum(arr) % n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 13, in <module>\\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\\nAssertionError\\n')", "success": 0}
{"code": "def check_Consecutive(l):\n    if len(l) <= 1:\n        return True\n    l = sorted(set(l))  # Remove duplicates and sort the list\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 11, in <module>\\n    assert check_Consecutive([1,2,1]) == False\\nAssertionError\\n')", "success": 0}
{"code": "def tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return {t for t in set1 if t in set2 or t[::-1] in set2}\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\\nAssertionError\\n')", "success": 0}
{"code": "def replace_char(str1, ch, newch):\n    if ch in str1:\n        return str1.replace(ch, newch)\n    else:\n        return str1\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_sum(nums):\n    if len(nums) < 2:\n        return sum(nums)\n    else:\n        return sum(sorted(nums, reverse=True)[:2])\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 6, in <module>\\n    assert big_sum([1,2,3]) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def is_lower(string):\n    return string.lower()\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_lowercase(str1):\n    result = \"\"\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_Digit(n):\n    return int(str(n)[0])\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    return list[::2]\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert Split([10,11,12,13]) == [11,13]\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef difference(n):\n    return math.factorial(n+1) - math.factorial(n)\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert difference(3) == 30\\nAssertionError\\n')", "success": 0}
{"code": "def find_Odd_Pair(A, N):\n    odd_nums = [num for num in A if num % 2!= 0]\n    odd_nums.sort()\n    \n    if len(odd_nums) < 2:\n        return odd_nums[0] if odd_nums else None\n    \n    min_diff = float('inf')\n    closest_pair_sum = 0\n    \n    for i in range(len(odd_nums) - 1):\n        diff = odd_nums[i + 1] - odd_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair_sum = odd_nums[i] + odd_nums[i + 1]\n    \n    return closest_pair_sum\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 18, in <module>\\n    assert find_Odd_Pair([5,4,7,2,1],5) == 6\\nAssertionError\\n')", "success": 0}
{"code": "def toggle_string(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Calculate the sum of the absolute differences between corresponding digits in two numbers.\n\n    Args:\n        n1 (int): The first number.\n        n2 (int): The second number.\n\n    Returns:\n        int: The sum of the absolute differences between corresponding digits.\n    \"\"\"\n    # Take absolute values of the input numbers\n    n1, n2 = abs(n1), abs(n2)\n    \n    # Convert the numbers into strings\n    str_n1, str_n2 = str(n1), str(n2)\n    \n    # Find the maximum length\n    max_len = max(len(str_n1), len(str_n2))\n    \n    # Pad the shorter string with leading zeros\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    \n    # Initialize the sum of differences\n    diff_sum = 0\n    \n    # Calculate the sum of absolute differences\n    for digit1, digit2 in zip(str_n1, str_n2):\n        diff_sum += abs(int(digit1) - int(digit2))\n    \n    return diff_sum\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Returns the union of two tuples as a sorted tuple.\n    \n    :param test_tup1: The first tuple.\n    :param test_tup2: The second tuple.\n    :return: A sorted tuple containing the union of the two input tuples.\n    \"\"\"\n    # Combine the two input tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Convert the combined tuple into a set to remove duplicate elements\n    unique_elements = set(combined_tuple)\n    \n    # Convert the set back into a tuple\n    union_tuple = tuple(unique_elements)\n    \n    # Sort the resulting tuple in ascending order\n    sorted_union_tuple = tuple(sorted(union_tuple))\n    \n    # Return the sorted tuple\n    return sorted_union_tuple\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max_Length(lst):\n    \"\"\"\n    This function finds the maximum length of sublists within a given list of lists.\n\n    Args:\n        lst (list): A list of lists where each sublist contains integers.\n\n    Returns:\n        int: The maximum length of sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_values(text):\n    \"\"\"\n    Extracts values from a given text that contains comma-separated values enclosed in double quotes.\n\n    Args:\n        text (str): The input text containing comma-separated values enclosed in double quotes.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    if not text:  # handle empty input text\n        return []\n\n    # Remove leading and trailing double quotes\n    text = text.strip('\"')\n\n    # Split the text into values using comma as the separator\n    values = text.split('\",\"')\n\n    return values\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 21, in <module>\\n    assert extract_values(\\'\"Python\", \"PHP\", \"Java\"\\')==[\\'Python\\', \\'PHP\\', \\'Java\\']\\nAssertionError\\n')", "success": 0}
{"code": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split(word):\n    return list(word)\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(abs(n)))\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def issort_list(list1):\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_list(length):\n    return [{} for _ in range(length)]\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def two_unique_nums(nums):\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    unique_nums = [num for num, count in num_count.items() if count == 1]\n    return unique_nums\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of unique numbers in a list.\n\n    Args:\n        list_data (list): A list of numbers.\n\n    Returns:\n        int: The product of unique numbers in the list.\n    \"\"\"\n    # Remove duplicates by converting the list to a set\n    unique_numbers = set(list_data)\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate over the unique numbers and multiply them with the product\n    for num in unique_numbers:\n        product *= num\n    \n    # Return the final product\n    return product\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef surfacearea_cylinder(r, h):\n    return round(2 * math.pi * r * (r + h), 2)\nassert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert surfacearea_cylinder(10,5)==942.45\\nAssertionError\\n')", "success": 0}
{"code": "def is_Sub_Array(A, B):\n    if len(B) == 0:\n        return True\n    if len(A) == 0 or len(B) > len(A):\n        return False\n\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit_Factorial(n):\n    if n < 5:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10\n    else:\n        return 0\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from itertools import zip_longest\n\ndef interleave_lists(list1, list2, list3):\n    return [element for tup in zip_longest(list1, list2, list3) for element in tup if element is not None]\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            result.extend(even_ele(ele, even_fnc))\n        elif even_fnc(ele):\n            result.append(ele)\n    return tuple(result)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\\nNameError: name \\'extract_even\\' is not defined\\n')", "success": 0}
{"code": "def surface_Area(b, s):\n    # Calculate the area of the top and bottom squares\n    top_bottom_area = 2 * (b ** 2)\n    \n    # Calculate the area of the four rectangular sides\n    side_area = 4 * b * s\n    \n    # Calculate the total surface area\n    total_area = top_bottom_area + side_area\n    \n    return total_area\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 12, in <module>\\n    assert surface_Area(3,4) == 33\\nAssertionError\\n')", "success": 0}
{"code": "def my_dict(dict1):\n    return 10 not in dict1 and 11 not in dict1\nassert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef catalan_number(num):\n    \"\"\"\n    Calculate the nth Catalan number.\n\n    Args:\n    num (int): A positive integer.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    return math.factorial(2 * num) // (math.factorial(num + 1) * math.factorial(num))\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_adverbs(text):\n    words = text.split()\n    for word in words:\n        if word.endswith('ly'):\n            start = text.find(word)\n            end = start + len(word)\n            return f'{start}-{end}: {word}'\n    return None\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == \\'0-7: Clearly\\'\\nAssertionError\\n')", "success": 0}
{"code": "def expensive_items(items, n):\n    \"\"\"\n    Returns the top 'n' most expensive items from the given list.\n\n    Args:\n        items (list): A list of dictionaries, each containing 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the top 'n' most expensive items.\n    \"\"\"\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_Arr(l, n):\n    n = n % len(l)\n    return l[n:] + l[:n]\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_tuple(listx):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n        listx (list): The input list.\n\n    Returns:\n        tuple: A tuple containing the same elements as the input list.\n    \"\"\"\n    return tuple(listx)\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_diff(nums):\n    return max(nums) - min(nums)\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef perfect_squares(a, b):\n    perfect_squares_list = []\n    for num in range(a, b + 1):\n        sqrt = math.sqrt(num)\n        if sqrt == int(sqrt):\n            perfect_squares_list.append(num)\n    return perfect_squares_list\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\nimport cmath\n\ndef polar_rect(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    complex_num = complex(x, y) - 2\n    return ((r, theta), complex_num)\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 9, in <module>\\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\\nAssertionError\\n')", "success": 0}
{"code": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1]] + newList[1:-1] + [newList[0]]\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i) / (i + 1)\n    return result\n\ndef sum_Of_product(n):\n    total = 0\n    for k in range(1, n + 1):\n        total += k * binomial_Coeff(n, k)\n    return int(total)\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 14, in <module>\\n    assert sum_Of_product(3) == 15\\nAssertionError\\n')", "success": 0}
{"code": "def removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def diff_even_odd(list1):\n    even_sum = sum(num for num in list1 if num % 2 == 0)\n    odd_sum = sum(num for num in list1 if num % 2!= 0)\n    return abs(even_sum - odd_sum)\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 5, in <module>\\n    assert diff_even_odd([1,3,5,7,4,1,6,8])==3\\nAssertionError\\n')", "success": 0}
{"code": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        raise ValueError(\"Input strings should be of the same length\")\n\n    diff_count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            diff_count += 1\n\n    if diff_count % 2!= 0:\n        return \"Not Possible\"\n\n    swaps = 0\n    i = 0\n    while i < len(str1):\n        if str1[i]!= str2[i]:\n            j = i + 1\n            while j < len(str1) and str1[j]!= str2[i]:\n                j += 1\n            if j == len(str1):\n                return \"Not Possible\"\n            swaps += 1\n            str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n        i += 1\n\n    return swaps\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in the combined array of two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the desired element (1-indexed).\n\n    Returns:\n        int: The kth smallest element in the combined array.\n    \"\"\"\n    i, j = 0, 0\n    while k > 1:\n        if i == len(arr1):\n            j += k - 1\n            break\n        if j == len(arr2):\n            i += k - 1\n            break\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n    if i == len(arr1):\n        return arr2[j]\n    if j == len(arr2):\n        return arr1[i]\n    if arr1[i] < arr2[j]:\n        return arr1[i]\n    return arr2[j]\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def armstrong_number(number):\n    \"\"\"\n    Checks if a given number is an Armstrong number.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number into a string to easily access each digit\n    str_number = str(number)\n    \n    # Initialize the sum of cubes\n    sum_of_cubes = 0\n    \n    # Calculate the cube of each digit and add it to the sum\n    for digit in str_number:\n        sum_of_cubes += int(digit) ** len(str_number)\n    \n    # Compare the sum with the original number\n    return sum_of_cubes == number\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_average(number):\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return total_sum, average\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Even(n):\n    return n % 2 == 0\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Returns a tuple of elements that are common to both input tuples.\n    \n    :param test_tup1: The first input tuple.\n    :param test_tup2: The second input tuple.\n    :return: A tuple of common elements.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return tuple(common_elements)\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\nassert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\nassert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Checks if a given number is not a prime number.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def differ_At_One_Bit_Pos(x, y):\n    return bin(x ^ y).count('1') == 1\n\ndef is_Power_Of_Two(x):\n    if x <= 0:\n        return False\n    return differ_At_One_Bit_Pos(x, x - 1)\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_char_long(text):\n    words = text.split()\n    return set(word for word in words if len(word) > 4)\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\temp.py\", line 4, in <module>\\n    assert set(find_char_long(\\'Please move back to stream\\')) == set([\\'Please\\', \\'move\\', \\'back\\', \\'stream\\'])\\nAssertionError\\n')", "success": 0}
{"code": "def square_nums(nums):\n    squared_numbers = []\n    for num in nums:\n        squared_numbers.append(num ** 2)\n    return squared_numbers\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Rotations(str):\n    \"\"\"\n    Returns the number of unique rotations of the input string.\n    \n    :param str: The input string.\n    :return: The number of unique rotations.\n    \"\"\"\n    if not str:  # edge case: empty string\n        return 1\n    \n    rotations = set()\n    for i in range(len(str)):\n        rotation = str[i:] + str[:i]\n        rotations.add(rotation)\n    \n    return len(rotations)\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
