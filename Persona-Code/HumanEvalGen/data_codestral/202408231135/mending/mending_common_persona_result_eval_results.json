{"date": "2024-09-01 17:01", "hash": "84f4b93a1270b492e4c54d5212da7a5b", "eval": {"HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        if result:\n            result.append(delimeter)\n        result.append(num)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\n# Test cases\nprint(truncate_number(3.5))  # Output: 0.5\nprint(truncate_number(10.25))  # Output: 0.25\nprint(truncate_number(7.0))  # Output: 0.0\nprint(truncate_number(12.75))  # Output: 0.75", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute differences from the mean\n    abs_diffs = [abs(x - mean) for x in numbers]\n\n    # Calculate the Mean Absolute Deviation\n    mad = sum(abs_diffs) / len(abs_diffs)\n\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    balance = 0\n    start = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n\n        if balance == 0:\n            result.append(paren_string[start:i+1])\n            start = i + 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Check if the lengths of the strings are equal\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must have the same length\")\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over the characters in the strings\n    for i in range(len(a)):\n        # Perform binary XOR on the characters and append the result to the result string\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_values = [numbers[0]]\n    current_max = numbers[0]\n\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        max_values.append(current_max)\n\n    return max_values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of two integers a and b.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    # If the string is empty, return an empty string\n    if not string:\n        return string\n\n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n            return string + string[:i][::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    # Define a dictionary to map word representations to integer values\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of words\n    num_list = numbers.split()\n\n    # Sort the list of words based on their integer values\n    num_list.sort(key=lambda x: num_dict[x])\n\n    # Join the sorted list of words into a string and return it\n    return ' '.join(num_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to handle case insensitivity\n    string = string.lower()\n\n    # Use a set to store unique characters\n    unique_chars = set(string)\n\n    # Count the number of elements in the set to get the number of distinct characters\n    return len(unique_chars)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Calculate the range of the numbers\n    range_val = max_val - min_val\n\n    # Rescale each number to the range [0, 1]\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n\n    return rescaled_numbers", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0.1, 0.5, 0.9, 0.3, 0.7]]]}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = (0, 0)\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i-1], numbers[i])\n\n    return pair", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\"Return the length of the given string.\"\"\"\n    count = 0\n    for _ in string:\n        count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    This function takes a list of strings as input and returns a single string\n    that is the concatenation of all the strings in the input list.\n\n    Parameters:\n    strings (List[str]): A list of strings to be concatenated.\n\n    Returns:\n    str: A single string that is the concatenation of all the strings in the input list.\n    \"\"\"\n    result = \"\"\n    for string in strings:\n        result += string\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    # Using a set to remove duplicates, then sorting the set\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes a list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees a solution.\n    \"\"\"\n    # Check if the input is valid\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input\")\n\n    # Initialize the lower and upper bounds for the root\n    lower_bound = -abs(xs[-1])\n    upper_bound = abs(xs[-1])\n\n    # Use the bisection method to find the root\n    while upper_bound - lower_bound > 1e-10:\n        midpoint = (lower_bound + upper_bound) / 2\n        if poly(xs, midpoint) > 0:\n            upper_bound = midpoint\n        else:\n            lower_bound = midpoint\n\n    # Return the midpoint as the root\n    return (lower_bound + upper_bound) / 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    # Extract elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n    # Sort the extracted elements\n    divisible_by_three.sort()\n\n    # Replace elements at indices divisible by three in the original list with the sorted elements\n    for i in range(len(divisible_by_three)):\n        l[i * 3] = divisible_by_three[i]\n\n    return l", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n\n    return max_val", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    # Extract even indices\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n\n    # Sort the even indices\n    even_indices.sort()\n\n    # Replace even indices in the original list with sorted ones\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n\n    return l", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions in a car race scenario.\n\n    Parameters:\n    n (int): The number of cars moving in each direction.\n\n    Returns:\n    int: The number of collisions that will occur.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left exactly once.\n    # Therefore, the total number of collisions is the product of the number of cars in each direction.\n    return n * n\n\n# Test the function\nprint(car_race_collision(3))  # Output: 9\nprint(car_race_collision(5))  # Output: 25", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    l.sort()\n\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Test the function\nprint(decode_cyclic(encode_cyclic(\"Hello, World!\")))  # Should print \"Hello, World!\"\nprint(decode_cyclic(encode_cyclic(\"Python is fun!\")))  # Should print \"Python is fun!\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Create an empty list to store the incremented values\n    result = []\n\n    # Iterate over each element in the input list\n    for num in l:\n        # Increment the number by 1 and append it to the result list\n        result.append(num + 1)\n\n    # Return the result list\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    # Create an empty set to store the elements we've seen so far\n    seen = set()\n\n    # Iterate over the list\n    for num in l:\n        # If the negative of the current number is in the set,\n        # we've found a pair that sums to zero\n        if -num in seen:\n            return True\n        # Otherwise, add the current number to the set\n        else:\n            seen.add(num)\n\n    # If we've gone through the entire list and haven't found a pair,\n    # return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(base, height):\n    \"\"\"\n    Calculate the area of a triangle given its base and height.\n\n    :param base: The length of the base of the triangle.\n    :param height: The height of the triangle.\n    :return: The area of the triangle.\n    \"\"\"\n    return 0.5 * base * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return [0, 0, 2, 0][n]\n\n    fib_values = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_value = sum(fib_values)\n        fib_values = fib_values[1:] + [next_value]\n\n    return fib_values[-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["never odd or even"]]}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n % 2 == 1 else (s[n//2 - 1] + s[n//2]) / 2)\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Expected output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Expected output: 15.0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    # Initialize result\n    result = 1\n\n    # Calculate 2^n modulo p using binary exponentiation\n    base = 2\n    exponent = n\n    while exponent > 0:\n        # If exponent is odd, multiply base with result\n        if exponent % 2 == 1:\n            result = (result * base) % p\n            exponent -= 1\n        # If exponent is even, square the base\n        else:\n            base = (base * base) % p\n            exponent //= 2\n\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 1]]}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Count the occurrences of each character in both strings\n    count_s0 = {char: s0.count(char) for char in set(s0)}\n    count_s1 = {char: s1.count(char) for char in set(s1)}\n\n    # Compare the character counts\n    return count_s0 == count_s1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        bool: True if the list elements are monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction * (l[i] - l[i - 1]) <= 0:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 1, 1, 0]]], "plus_fail_tests": [[[1, 1, 1, 1, 1]]]}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert the lists to sets for efficient lookup\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n\n    # Convert the set back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n\n    return sorted_common_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function calculates the sum of all numbers from 1 to n.\n    It uses the formula for the sum of an arithmetic series: (n * (n + 1)) / 2\n    \"\"\"\n    return (n * (n + 1)) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"bcdfgh\") == 0\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"y\") == 1\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"example\") == 3\n    assert vowels_count(\"python\") == 1\n    assert vowels_count(\"my\") == 1\n    assert vowels_count(\"My\") == 1\n    assert vowels_count(\"YES\") == 1\n    assert vowels_count(\"YES!\") == 1\n    assert vowels_count(\"YES?\") == 1\n    assert vowels_count(\"YES.\") == 1\n    assert vowels_count(\"YES,\") == 1\n    assert vowels_count(\"YES;\") == 1\n    assert vowels_count(\"YES:\") == 1\n    assert vowels_count(\"YES'\") == 1\n    assert vowels_count(\"YES\\\"\") == 1\n    assert vowels_count(\"YES(\") == 1\n    assert vowels_count(\"YES)\") == 1\n    assert vowels_count(\"YES[\") == 1\n    assert vowels_count(\"YES]\") == 1\n    assert vowels_count(\"YES{\") == 1\n    assert vowels_count(\"YES}\") == 1\n    assert vowels_count(\"YES<\") == 1\n    assert vowels_count(\"YES>\") == 1\n    assert vowels_count(\"YES/\") == 1\n    assert vowels_count(\"YES\\\\\") == 1\n    assert vowels_count(\"YES|\") == 1\n    assert vowels_count(\"YES~\") == 1\n    assert vowels_count(\"YES`\") == 1\n    assert vowels_count(\"YES@\") == 1\n    assert vowels_count(\"YES#\") == 1\n    assert vowels_count(\"YES$\") == 1\n    assert vowels_count(\"YES%\") == 1\n    assert vowels_count(\"YES^\") == 1\n    assert vowels_count(\"YES&\") == 1\n    assert vowels_count(\"YES*\") == 1\n    assert vowels_count(\"YES=\") == 1\n    assert vowels_count(\"YES+\") == 1\n    assert vowels_count(\"YES-\") == 1\n    assert vowels_count(\"YES_\") == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    # Initialize the memoization table with base cases\n    memo = [0, 0, 1] + [0] * (n - 2)\n\n    # Compute the n-th element using bottom-up dynamic programming\n    for i in range(3, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]\n\n    return memo[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs)][1:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    # Convert the integer to a string\n    digits = str(x)\n\n    # If shift is greater than the number of digits, reverse the digits\n    if shift >= len(digits):\n        return digits[::-1]\n\n    # Perform the circular shift\n    shifted_digits = digits[-shift:] + digits[:-shift]\n\n    return shifted_digits", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12, 2]], "plus_fail_tests": [[987654321, 9]]}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    apples = int(s.split(\" apples and \")[0])\n    oranges = int(s.split(\" apples and \")[1].split(\" oranges\")[0])\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Expected output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Expected output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))  # Expected output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120))  # Expected output: 19", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_index]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # If it is, add its ASCII value to the total\n            total += ord(char)\n\n    # Return the total sum\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    # Create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the integers in descending order\n    for num in sorted(freq.keys(), reverse=True):\n        # If the frequency of the integer is greater than or equal to the value of the integer, return it\n        if freq[num] >= num:\n            return num\n\n    # If no such integer is found, return -1\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Use Heron's formula to calculate the area\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    is_palindromic = q == q[::-1]\n\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    is_light_enough = total_weight <= w\n\n    # Return True if the object will fly, and False otherwise\n    return is_palindromic and is_light_enough", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Function to check if a number is the multiplication of 3 prime numbers.\"\"\"\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            a //= i\n            count += 1\n        if count > 3:\n            return False\n    return count == 3 and is_prime(a)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[30]], "plus_fail_tests": [[99]]}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n\n    # Iterate through the first half of the array\n    for i in range(n // 2):\n        # If the corresponding elements from the start and end of the array are not equal,\n        # increment the changes counter\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    return changes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "import math\n\ndef is_simple_power(x, n):\n    # If x is less than 1, it cannot be a simple power of n\n    if x < 1:\n        return False\n\n    # Calculate the logarithm of x in base n\n    log_value = math.log(x, n)\n\n    # Check if the logarithm is an integer\n    return log_value.is_integer()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 1]], "plus_fail_tests": [[125, 5]]}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    # If the number is negative, make it positive to check for cube\n    a = abs(a)\n\n    # Start with the cube root of the number\n    cube_root = round(a ** (1. / 3))\n\n    # Check if the cube of the cube root is equal to the number\n    return cube_root ** 3 == a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n\n    # Initialize the count of prime hexadecimal digits\n    count = 0\n\n    # Iterate over each digit in the input number\n    for digit in num:\n        # If the digit is a prime hexadecimal digit, increment the count\n        if digit in prime_hex_digits:\n            count += 1\n\n    # Return the count of prime hexadecimal digits\n    return count\n\n# Test cases\nprint(hex_key(\"AB\")) # Expected output: 1\nprint(hex_key(\"1077E\")) # Expected output: 2\nprint(hex_key(\"ABED1A33\")) # Expected output: 4\nprint(hex_key(\"123456789ABCDEF0\")) # Expected output: 6\nprint(hex_key(\"2020\")) # Expected output: 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # The number of n-digit numbers that start or end with 1 is equal to\n        # the number of (n-1)-digit numbers multiplied by 2 (since each of\n        # those numbers can be placed at the beginning or end of the n-digit\n        # number) minus the number of (n-2)-digit numbers (since those are\n        # counted twice).\n        return 2 * starts_one_ends(n - 1) - starts_one_ends(n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to string to iterate over its digits\n    digits = str(N)\n\n    # Sum the digits\n    total = sum(int(digit) for digit in digits)\n\n    # Convert the total to binary and return as a string\n    return bin(total)[2:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n\n    # Sort coordinates initially by rows in ascending order\n    # and then by columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    # Split the string into words\n    words = s.split(' ')\n\n    # For each word, sort the characters and join them back together\n    ordered_words = [''.join(sorted(word)) for word in words]\n\n    # Join the words back together with spaces and return the result\n    return ' '.join(ordered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    # Make a copy of the array to avoid modifying the original\n    sorted_array = array.copy()\n\n    # Check if the sum of the first and last elements is odd or even\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # If even, sort the array in descending order\n        sorted_array.sort(reverse=True)\n    else:\n        # If odd, sort the array in ascending order\n        sorted_array.sort()\n\n    return sorted_array", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \"\"\"\n    # Check if the list has at least 2 elements\n    if len(lst) < 2:\n        return None\n\n    # Initialize the smallest and second smallest elements with positive infinity\n    smallest = second_smallest = float('inf')\n\n    # Iterate over the list\n    for num in lst:\n        # If the current number is smaller than the smallest, update both the smallest and second smallest\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        # If the current number is between the smallest and second smallest, update the second smallest\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    # If the second smallest is still equal to positive infinity, it means there is no such element\n    if second_smallest == float('inf'):\n        return None\n\n    return second_smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "import re\n\ndef is_bored(S):\n    # Split the string into sentences using regular expressions\n    sentences = re.split('[.?!]', S)\n\n    # Initialize a counter for boredoms\n    boredoms = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Remove leading and trailing whitespaces\n        sentence = sentence.strip()\n\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # Increment the boredoms counter\n            boredoms += 1\n\n    # Return the number of boredoms\n    return boredoms", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["In the morning, I like to have a cup of coffee to start my day off right. How about you?"]]}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n\n    # iterate over each character in the string\n    for char in s:\n        # check if the character is a letter\n        if char.isalpha():\n            # determine the shift amount based on the case of the letter\n            shift = 2 * 2 if char.islower() else 2 * 2\n            # calculate the encrypted character using the shift amount\n            encrypted_char = chr((ord(char) - ord('a' if char.islower() else 'A') + shift) % 26 + ord('a' if char.islower() else 'A'))\n            result += encrypted_char\n        else:\n            # if the character is not a letter, leave it unchanged\n            result += char\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    replacements = 'cdefgCDEFG'\n    encoded_message = ''\n\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            encoded_message += replacements[index]\n        elif char.isupper():\n            encoded_message += char.lower()\n        else:\n            encoded_message += char.upper()\n\n    return encoded_message\n\nprint(encode('test'))  # Expected output: 'TGST'\nprint(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime number in the list and return the sum of its digits.\"\"\"\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n\n    lower_case = all(key.islower() for key in dictionary.keys() if isinstance(key, str))\n    upper_case = all(key.isupper() for key in dictionary.keys() if isinstance(key, str))\n\n    return lower_case or upper_case", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    # Extract the unit digits of a and b\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    # Convert the string to a float\n    value = float(value)\n\n    # If the value is positive, round away from zero\n    if value > 0:\n        # If the decimal part is exactly 0.5, add 0.5 to round up\n        if value - int(value) == 0.5:\n            return int(value) + 1\n        # Otherwise, use the built-in round function\n        else:\n            return round(value)\n\n    # If the value is negative, round away from zero\n    else:\n        # If the decimal part is exactly -0.5, subtract 0.5 to round down\n        if value - int(value) == -0.5:\n            return int(value) - 1\n        # Otherwise, use the built-in round function\n        else:\n            return round(value)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n\n    Args:\n    n (int): The number to find the largest divisor for.\n\n    Returns:\n    int: The largest divisor of n that is smaller than n.\n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start from n-1 and iterate down to 1\n    for i in range(n-1, 0, -1):\n        # If i divides n evenly, return i\n        if n % i == 0:\n            return i\n    # If no divisor is found, return -1 or raise an error, depending on the problem requirements\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    # If x is odd, increment it by 1 to make it even\n    if x % 2 != 0:\n        x += 1\n\n    # If y is even, it's a potential candidate for the largest even number\n    if y % 2 == 0:\n        # If x is less than or equal to y, return y\n        if x <= y:\n            return y\n        # If x is greater than y, return -1\n        else:\n            return -1\n    # If y is odd, decrement it by 1 to make it even and check if it's greater than or equal to x\n    else:\n        y -= 1\n        # If x is less than or equal to y, return y\n        if x <= y:\n            return y\n        # If x is greater than y, return -1\n        else:\n            return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Split a string of words separated by commas or spaces into an array of words.\n\n    Args:\n    s (str): The input string of words separated by commas or spaces.\n\n    Returns:\n    list: A list of words extracted from the input string.\n    \"\"\"\n    # Replace commas with spaces to have a consistent delimiter\n    s = s.replace(',', ' ')\n\n    # Split the string into words using the space as the delimiter\n    words = s.split()\n\n    return words\n\n# Test the function\nprint(words_string(\"Hi, my name is John\"))  # Expected output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Expected output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter the array to keep only the numbers between 1 and 9\n    arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the array\n    arr.sort()\n\n    # Reverse the array\n    arr.reverse()\n\n    # Map each number to its corresponding name\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = [num_to_name[num] for num in arr]\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n\n    def sum_to_i(i):\n        return sum(range(1, i+1))\n\n    return [factorial(i) if i % 2 == 0 else sum_to_i(i) for i in range(1, n+1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted(num for num in x if not has_even_digit(num))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    # Separate odd and even numbers in lst1\n    lst1_odd = [num for num in lst1 if num % 2 != 0]\n    lst1_even = [num for num in lst1 if num % 2 == 0]\n\n    # Separate odd and even numbers in lst2\n    lst2_odd = [num for num in lst2 if num % 2 != 0]\n    lst2_even = [num for num in lst2 if num % 2 == 0]\n\n    # Check if it's possible to make lst1 all even numbers\n    if len(lst1_odd) <= len(lst2_even):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Expected output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Expected output: \"NO\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary to store the letter frequencies\n    freq = {}\n\n    # Iterate over each character in the string\n    for char in test:\n        # If the character is a space, skip it\n        if char == ' ':\n            continue\n        # If the character is already in the dictionary, increment its count\n        if char in freq:\n            freq[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            freq[char] = 1\n\n    # If the dictionary is empty, return it as is\n    if not freq:\n        return freq\n\n    # Find the maximum frequency in the dictionary\n    max_freq = max(freq.values())\n\n    # Create a new dictionary to store the letters with the maximum frequency\n    result = {}\n    for char, count in freq.items():\n        # If the count is equal to the maximum frequency, add it to the result dictionary\n        if count == max_freq:\n            result[char] = count\n\n    # Return the result dictionary\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, start=1):\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {count}nput.\")\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Remove characters from s that are in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    current_sum = nums[0]\n    min_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    # Define a helper function to count consonants in a word\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word if char.lower() in consonants)\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter words based on the consonant count\n    selected_words = [word for word in words if count_consonants(word) == n]\n\n    return selected_words", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    # Sort the array based on the number of ones in binary representation and then by decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    open_count_1 = lst[0].count('(')\n    close_count_1 = lst[0].count(')')\n    open_count_2 = lst[1].count('(')\n    close_count_2 = lst[1].count(')')\n\n    # If the number of open parentheses is equal to the number of close parentheses\n    # in both strings, then it is possible to concatenate them in some order to\n    # make a good string.\n    if open_count_1 == close_count_1 and open_count_2 == close_count_2:\n        return 'Yes'\n\n    # If the number of open parentheses in the first string is equal to the number\n    # of close parentheses in the second string, or vice versa, then it is possible\n    # to concatenate them in some order to make a good string.\n    elif open_count_1 == close_count_2 or open_count_2 == close_count_1:\n        return 'Yes'\n\n    # Otherwise, it is not possible to make a good string.\n    else:\n        return 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["(())", ")()("]]]}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * i)\n    return pile", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Expected output: \"u\"\nprint(get_closest_vowel(\"FULL\"))  # Expected output: \"U\"\nprint(get_closest_vowel(\"quick\"))  # Expected output: \"\"\nprint(get_closest_vowel(\"ab\"))  # Expected output: \"\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements\n    return arr[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    if n < 2:\n        return []\n\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n\n    return primes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    total_sum = 0\n    for i in range(k):\n        if arr[i] >= 0 and arr[i] <= 99:\n            total_sum += arr[i]\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-4, 5, 67, 34, 56, 12, 89, 23, 45], 7]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day > 29:\n                return False\n        elif day > 28:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["02-29-2021"]]}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Hello ,Helaabc123lo? rld  !"]]}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = []\n    while n != 1:\n        sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(num for num in sequence if num % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    total = 0\n\n    for num in arr:\n        if num < 0:\n            product *= -1\n        elif num > 0:\n            product *= 1\n        total += abs(num)\n\n    return total * product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1]]], "plus_fail_tests": [[[-1, 0, 1, 2]]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n\n    prev = lst[0]\n    duplicates = set()\n\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        elif num == prev:\n            if num in duplicates:\n                return False\n            duplicates.add(num)\n        prev = num\n\n    return True\n\n# Test cases\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if path < min_path:\n                min_path = path\n            return\n        temp = grid[x][y]\n        grid[x][y] = 0\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != 0:\n                dfs(nx, ny, path + [grid[nx][ny]])\n        grid[x][y] = temp\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Calculate the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Check if the intervals intersect\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 1\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fib", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n\n# Test cases\nprint(digits(1))  # 1\nprint(digits(4))  # 0\nprint(digits(235))  # 15", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) != 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate over each number in the list\n    for num in lst:\n        # Round the number up to the nearest integer\n        rounded_num = math.ceil(num)\n\n        # Square the rounded number\n        squared_num = rounded_num ** 2\n\n        # Add the squared number to the total sum\n        total += squared_num\n\n    # Return the total sum\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # Check if the number is even and greater than or equal to 8\n    if n % 2 == 0 and n >= 8:\n        # The smallest four positive even numbers are 2, 2, 2, and 2\n        # If the number is greater than or equal to 8, it can be written as the sum of four positive even numbers\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True\nprint(is_equal_to_sum_even(10)) # True\nprint(is_equal_to_sum_even(12)) # True\nprint(is_equal_to_sum_even(14)) # False\nprint(is_equal_to_sum_even(16)) # True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "import re\n\ndef fix_spaces(text):\n    # Replace single spaces with underscores\n    text = text.replace(' ', '_')\n\n    # Replace more than two consecutive underscores with a hyphen\n    text = re.sub('_{2,}', '-', text)\n\n    return text", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Yellow Yellow  Dirty  Fellow"]], "plus_fail_tests": [["  spaces  every  where  "]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Replace commas with dots if necessary\n    a = str(a).replace(',', '.')\n    b = str(b).replace(',', '.')\n\n    # Convert strings to floats if possible\n    try:\n        a = float(a)\n    except ValueError:\n        pass\n\n    try:\n        b = float(b)\n    except ValueError:\n        pass\n\n    # Compare and return the larger value in its original type\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "import re\n\ndef file_name_check(file_name):\n    # Check if there are more than three digits in the file's name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n\n    # Check if the file's name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file's name into two parts: before and after the dot\n    parts = file_name.split('.')\n\n    # Check if the substring before the dot is empty or does not start with a latin alphapet letter\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all conditions are met, return 'Yes'\n    return 'Yes'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    # Calculate the sum of digits for each number\n    # and store it in a list of tuples with the original index\n    digit_sums = [(i, sum(int(digit) for digit in str(abs(num)))) for i, num in enumerate(nums)]\n\n    # Sort the list of tuples based on the sum of digits\n    # and then by the original index\n    digit_sums.sort(key=lambda x: (x[1], x[0]))\n\n    # Return the original numbers in the sorted order\n    return [nums[i] for i, _ in digit_sums]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the fractions into numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Simplify the fraction by dividing both numerator and denominator by their greatest common divisor\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    common_divisor = gcd(product_num, product_den)\n    product_num //= common_divisor\n    product_den //= common_divisor\n\n    # Check if the denominator is 1, which means the fraction is a whole number\n    return product_den == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit in [1, 3, 5, 7, 9] and last_digit in [1, 3, 5, 7, 9]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    # Check if n is less than 2 (the smallest prime number)\n    if n < 2:\n        return y\n\n    # Check for factors up to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n\n    # If no factors were found, n is prime\n    return x", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Iterate over each number in the list\n    for num in lst:\n        # Check if the number is an integer and is positive and odd\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            # Square the number and add it to the sum\n            sum_of_squares += num ** 2\n\n    # Return the sum of squares\n    return sum_of_squares", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    result = []\n    for g, s in zip(game, guess):\n        result.append(abs(g - s))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f'{class_name}.{strongest_extension}'\n\n# Test cases\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Expected output: 'my_class.AA'\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Expected output: 'Slices.SErviNGSliCes'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    # Concatenate b with itself to create all possible rotations\n    rotated_b = b + b\n\n    # Check if any rotation of b is a substring of a\n    for i in range(len(b)):\n        if rotated_b[i:i+len(b)] in a:\n            return True\n\n    # If no rotation of b is found in a, return False\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", ""]]}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    # Convert the integer to a string to easily iterate over its digits\n    num_str = str(abs(num))\n\n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer\n        digit_int = int(digit)\n\n        # Check if the digit is even or odd\n        if digit_int % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the counts as a tuple\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    value_symbols = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                     (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                     (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    roman = ''\n    for value, symbol in value_symbols:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    # Initialize variables to store the maximum unique characters and the word with maximum unique characters\n    max_unique_chars = 0\n    max_word = \"\"\n\n    # Iterate over each word in the list\n    for word in words:\n        # Calculate the number of unique characters in the current word\n        unique_chars = len(set(word))\n\n        # If the current word has more unique characters than the previous maximum, update the maximum\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n\n        # If the current word has the same number of unique characters as the previous maximum,\n        # update the maximum word if it comes first in lexicographical order\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    # Return the word with maximum number of unique characters\n    return max_word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # Check if the Pythagorean theorem is satisfied\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    # Return the final result\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if need <= remaining:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Generate even integers between a and b\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    has_letters = False\n    result = \"\"\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    if not has_letters:\n        result = result[::-1]\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n\n    tribonacci = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Create an empty list to store the numbers\n    numbers = []\n\n    # Iterate from 0 to n (inclusive)\n    for i in range(n + 1):\n        # Convert the number to a string and append it to the list\n        numbers.append(str(i))\n\n    # Join the list of strings with a space delimiter and return the result\n    return ' '.join(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize count of triples\n    count = 0\n\n    # Iterate over all possible triples\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # Check if the sum is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1) * factorial(n-1)\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}