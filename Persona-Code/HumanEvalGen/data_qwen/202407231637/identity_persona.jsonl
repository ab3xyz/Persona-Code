{"realworld": "Problem: \nIn a temperature monitoring system for a data center, there is a requirement to check if any two temperature readings from multiple sensors are closer to each other than a specified threshold. This is important to detect potential hotspots or anomalies in the cooling system that could lead to overheating of critical equipment. Given a list of temperature readings (in degrees Celsius) from various sensors and a threshold distance (also in degrees Celsius), determine if any two readings are closer to each other than the threshold.", "identity": "Person: \nSamantha is a facilities manager at a large data center responsible for maintaining optimal operating conditions for thousands of servers. She uses a temperature monitoring system with multiple sensors placed throughout the facility to ensure that no section of the data center becomes too hot, which could lead to equipment failure or reduced efficiency. Samantha needs to regularly analyze temperature readings to identify any potential hotspots that might indicate issues with the cooling infrastructure. Her job requires her to quickly and accurately determine if any two temperature readings are closer to each other than a predefined threshold, so she can take immediate action to adjust the cooling systems or investigate further.", "persona": "INTJ"}
{"realworld": "Problem: Given a string containing multiple groups of nested parentheses, write a function that separates those groups into separate strings and returns a list of those strings. The groups are balanced and not nested within each other, and you should ignore any spaces in the input string.\n\nFor example, given the input string \"( ) (( )) (( )( ))\", the function should return the list ['()', '(())', '(()())'].", "identity": "A software developer working on a compiler for a new programming language might encounter this problem. They need to parse expressions with nested parentheses to identify different components of the code, such as function calls or conditional statements, for further processing or optimization. The developer must ensure that each group of nested parentheses is correctly identified and separated from others to accurately interpret the code's structure.", "persona": "INTP"}
{"realworld": "Problem: Truncating Numbers for Inventory Management\n\nA retail company needs to update its inventory management system to handle product quantities that are calculated as floating-point numbers. When calculating the remaining stock of a product, the system must determine how many whole units are available and how many units are partially used or damaged. The company wants to display this information separately to help with restocking decisions.\n\nTo address this need, the company's software developers have been tasked with creating a function called `truncate_number` that takes a positive floating-point number representing the total quantity of a product in stock and returns the decimal part of the number, which represents the fraction of a unit that is not a complete, whole unit. This will allow the company to easily see how much of each product is in partial units and make more informed decisions about when and how much to restock.", "identity": "Person: Sarah, Inventory Manager at a Retail Company\n\nSarah is an inventory manager working for a large retail company. She oversees the stock levels of various products across multiple stores and ensures that each store is well-stocked without overstocking, which can lead to increased storage costs and potential waste. Sarah relies on accurate data to make informed decisions about when and how much to order from suppliers.\n\nRecently, the company has updated its inventory management system to handle product quantities as floating-point numbers. This change was necessary because some products are sold in fractional units (e.g., half-gallons of milk, quarter-pound packages of cheese), and tracking these fractions accurately helps prevent discrepancies between the physical stock and the recorded stock levels.\n\nSarah often needs to check the remaining stock of products to decide whether it's time to place new orders. She finds it helpful to know not only the total quantity but also how much of that quantity is in whole units versus partial units. For instance, if she sees that there are 25.75 gallons of milk left in one store, she wants to know that there are 25 full gallons and 0.75 gallons in partial containers. This information allows her to assess whether the partial units can meet the immediate demand or if ordering additional whole units is necessary.\n\nTo assist Sarah and other inventory managers, the company's software development team created the `truncate_number` function. This function takes the total quantity as input and returns the decimal part, which represents the fraction of a unit that is not a complete, whole unit. By using this function, Sarah can quickly identify which products have partial units in stock and adjust her restocking decisions accordingly.", "persona": "ISTJ"}
{"realworld": "A financial technology company offers a new digital wallet service. To ensure customer satisfaction and maintain the integrity of their system, they need to implement a feature that monitors the user's account balance in real-time. The goal is to detect when a user's account balance falls below zero due to a series of transactions (deposits and withdrawals). If the balance goes negative at any point, the system must immediately alert the user and block further transactions until the account is refilled. This safety measure prevents users from accruing debt unintentionally and helps the company avoid potential financial liabilities. The function `below_zero` is crucial for this implementation, as it checks the sequence of transactions and determines if the balance ever becomes negative.", "identity": "A person who may encounter this real-world problem is Sarah, a 35-year-old financial analyst working for a fintech startup. Her company has recently launched a new digital wallet service aimed at providing customers with a seamless and secure way to manage their finances. Sarah is responsible for overseeing the development and maintenance of the transaction monitoring system. She needs to ensure that the `below_zero` function works flawlessly to prevent users from going into debt unknowingly. This is critical for maintaining customer trust and complying with financial regulations. Sarah collaborates closely with the engineering team to integrate this feature into the digital wallet platform, constantly testing its accuracy and reliability under various transaction scenarios.", "persona": "INTJ"}
{"realworld": "A real-world problem where the mean absolute deviation can be applied is in analyzing the consistency of product quality in a manufacturing process. For example, a factory produces bolts that are supposed to have a specific length of 10 cm. The quality control team measures the lengths of a sample of bolts produced during a shift. By calculating the mean absolute deviation of these measurements from the target length of 10 cm, the team can determine if the production process is consistently meeting the required specifications or if there is significant variability that needs to be addressed. This information can help in identifying issues with machinery calibration, material quality, or human error, leading to improvements in the overall manufacturing process.", "identity": "Person: Maria is the Quality Control Manager at a factory that manufactures bolts for various industries. She is responsible for ensuring that the bolts produced meet the required specifications, particularly the target length of 10 cm. Maria uses statistical methods to analyze the consistency of the product quality. By calculating the mean absolute deviation of the bolt lengths from the target, she can identify if there are any significant variations in the production process. This helps her pinpoint potential issues such as machinery calibration errors, material inconsistencies, or operator mistakes, allowing her to implement corrective actions and maintain high-quality standards.", "persona": "INTJ"}
{"realworld": "Problem: You are working on a data processing application that requires you to modify lists of integers for easier readability. Specifically, you need to create a function that takes a list of integers and a delimiter integer as inputs. The function should insert the delimiter integer between every two consecutive elements of the input list. For example, given the input list [1, 2, 3] and the delimiter 4, the output should be [1, 4, 2, 4, 3]. If the input list is empty, the function should return an empty list.", "identity": "Person: Data Analyst at a financial institution. They are responsible for processing large datasets containing financial transactions. To make the data more readable and easier to analyze, they need to insert a delimiter between each transaction in a list of transaction amounts. This will help them quickly identify individual transactions when reviewing the data.", "persona": "INTJ"}
{"realworld": "A real-world problem based on the given description could be:\n\nProblem: Designing a system to analyze and categorize complex mathematical expressions\n\nConsider a software application that deals with large volumes of mathematical expressions. These expressions often contain nested parentheses to denote precedence or grouping of operations. The application needs to quickly analyze these expressions and determine the depth of nesting of parentheses in each expression to help categorize their complexity. This categorization will assist users in understanding the level of difficulty of an expression before attempting to solve it. The input to the system would be a string containing multiple mathematical expressions separated by spaces, and the output should be a list indicating the deepest level of nesting of parentheses for each expression. For instance, given the input \"(()()) ((())) () ((())()())\", the system should return [2, 3, 1, 3], where each number corresponds to the maximum depth of nesting in each expression.", "identity": "A mathematics professor working on developing an educational software tool for students. The professor aims to create a feature that helps students gauge the complexity of mathematical expressions before attempting to solve them. By analyzing the depth of nested parentheses, the tool can categorize expressions according to difficulty levels, aiding in personalized learning and practice sessions.", "persona": "INTP"}
{"realworld": "A company has a large database of product names and they want to filter out the products that contain a specific keyword in their name. For example, if the company wants to find all the products related to \"array\", they need a function that can take in the list of all product names and the keyword \"array\", and return a filtered list of product names that contain the keyword \"array\". The function should be able to handle an empty list of product names and should return an empty list in such cases.", "identity": "Person: Sarah is a data analyst at a large e-commerce company. She is responsible for managing the company's product database and ensuring that it is up-to-date and accurate. Sarah has been tasked with creating a function that can filter out products based on a specific keyword in their name. This will help the company to quickly identify and categorize products, making it easier for customers to find what they are looking for. Sarah needs to ensure that the function works correctly and efficiently, especially when dealing with a large number of product names.", "persona": "INTJ"}
{"realworld": "A small business owner is trying to manage their inventory by calculating the total value of items in stock. The inventory consists of various products with different quantities and prices. To simplify the process, the owner wants to write a Python function that takes a list of integers representing the quantities of each product in stock and returns a tuple containing the total quantity of all products and the total value of all products in stock. The total quantity is calculated by summing up all the integers in the list, while the total value is calculated by multiplying each integer (quantity) by its corresponding price and then summing up all the results. If the list is empty, the total quantity should be 0 and the total value should be 1, assuming there's no product in stock.", "identity": "Maria is a small business owner who runs a local grocery store. She has a variety of products ranging from fresh produce to canned goods. Maria is trying to optimize her inventory management system. She needs to calculate the total quantity of all products in stock and their total value to better understand her current stock levels and financial standing. With this information, she can make informed decisions about restocking and budgeting. To streamline this process, Maria decides to create a Python function that will take her inventory data as input and return the total quantity and value of her stock.", "persona": "ENTJ"}
{"realworld": "A company's stock price fluctuates throughout the day. Given a list of stock prices at different times during a trading day, create a list that shows the highest stock price observed up to each point in time. This will help traders make informed decisions about when to buy or sell stocks based on the trend of the stock price. For example, given the stock prices [100, 105, 103, 110, 108, 112, 110] throughout the day, the rolling maximum would be [100, 105, 105, 110, 110, 112, 112].", "identity": "A financial analyst working for a trading firm is responsible for monitoring stock prices and providing insights to the trading team. They need to analyze the stock price trends throughout the day to advise on buying or selling decisions. By calculating the rolling maximum of stock prices, they can quickly identify the peak value up to any given point, which helps in assessing the stock's performance and making timely recommendations to maximize profits or minimize losses.", "persona": "INTJ"}
{"realworld": "Problem: Creating a Function to Generate the Shortest Palindrome from a Given String\n\nConsider a scenario where you are developing an application for generating secure, memorable passwords. The goal is to create a function that can take any given string and transform it into the shortest possible palindrome by appending characters to its end. This feature will allow users to create unique, palindromic passwords that are easy to remember but difficult to guess.\n\nThe function should follow these rules:\n1. Identify the longest suffix of the input string that forms a palindrome.\n2. Append the reverse of the prefix (that precedes the palindromic suffix) to the end of the original string to form the shortest palindrome.\n\nFor example:\n- If the input string is \"cat\", the function should return \"catac\".\n- If the input string is \"cata\", the function should still return \"catac\" as \"atac\" is already a palindrome, so no additional characters are needed at the end except for the reversed prefix \"c\".\n\nYour task is to implement this function efficiently to support the password generation feature in your application.", "identity": "Person: Alex, a software developer working on enhancing user security features for an online banking application.\n\nDescription: Alex is a mid-level software developer with a focus on security and user experience. They are currently working on an online banking application that aims to improve user password policies while maintaining ease of use. As part of this initiative, Alex is tasked with implementing a feature that generates secure yet memorable passwords for users. To achieve this, they need to create a function that takes any given string and transforms it into the shortest possible palindrome by appending characters to its end. This will allow users to have unique, palindromic passwords that are both strong and easy to recall. Alex must ensure the function is efficient and integrates seamlessly with the existing password management system.", "persona": "INTP"}
{"realworld": "Problem: Binary Data Stream Filtering\n\nDescription: A network security system receives two data streams, each represented as a binary string (consisting of 1s and 0s). To detect potential threats, the system needs to perform a bitwise XOR operation on these two streams and analyze the resulting stream for anomalies. The goal is to implement a function that takes in two binary strings as input, performs the XOR operation, and returns the result as a new binary string. This functionality will be used to filter out normal traffic and flag any unusual patterns for further investigation.", "identity": "Person: Network Security Analyst\n\nDescription: Alex is a network security analyst working at a large tech company. Part of Alex's job involves monitoring data traffic to ensure the network's integrity and security. Recently, there has been an increase in suspicious activities that need closer attention. To handle this, Alex is tasked with developing a tool that can process two incoming data streams and identify any anomalies by performing a bitwise XOR operation. This will help separate regular traffic from potential threats, allowing the security team to focus on investigating the flagged data. Alex needs to implement a function that efficiently processes the binary data streams and returns the XOR result for analysis.", "persona": "INTP"}
{"realworld": "The problem is to implement a function called `longest` that takes a list of strings as input and returns the longest string in the list. If there are multiple strings with the same maximum length, the function should return the first one encountered. If the input list is empty, the function should return None. \n\nFor example:\n- If the input list is [], the function should return None.\n- If the input list is ['a', 'b', 'c'], the function should return 'a'.\n- If the input list is ['a', 'bb', 'ccc'], the function should return 'ccc'.", "identity": "A person who might encounter this real-world problem is a software developer working on a text analysis tool. This developer needs to process a list of words or phrases and identify the longest entry for further linguistic analysis or to optimize display in a user interface. For instance, they might be creating a program that analyzes survey responses, where the longest answer needs to be identified to adjust the layout of the results page.", "persona": "INTJ"}
{"realworld": "Problem: Developing an Efficient Algorithm for Determining the Greatest Common Divisor (GCD) for Cryptography Applications\n\nDescription: In cryptography, particularly in algorithms like RSA, determining the greatest common divisor (GCD) of two large integers is crucial for key generation and encryption processes. The GCD is used to ensure that certain numbers are coprime, which is essential for the security of the encryption. Currently, the available GCD functions are not optimized for very large integers, leading to slow performance in cryptographic operations. There is a need for an efficient algorithm that can quickly compute the GCD of two large integers to improve the speed and efficiency of cryptographic systems.", "identity": "Person: Dr. Elara Stone, Cryptographer\n\nDr. Elara Stone is a cryptographer working at a cybersecurity firm specializing in developing advanced encryption algorithms. Her current project involves enhancing the RSA encryption method to handle larger keys more efficiently, aiming to provide stronger security against potential quantum computing attacks. In her work, she frequently encounters the challenge of determining the greatest common divisor (GCD) of two large integers, a critical step in RSA key generation. The existing GCD functions she uses are becoming increasingly slow as the size of the numbers grows, significantly impacting the overall performance of the encryption process. Dr. Stone is actively seeking an innovative and efficient algorithm to compute the GCD of large integers rapidly, which would greatly enhance the speed and effectiveness of her cryptographic systems.", "persona": "INTP"}
{"realworld": "The problem is to write a Python function that takes a string as input and returns a list of all its prefixes, ordered from the shortest to the longest. For example, if the input string is \"abc\", the function should return the list ['a', 'ab', 'abc']. This can be useful in various applications such as text processing, string matching algorithms, or when analyzing sequences of characters.", "identity": "A software developer working on a text analysis tool might encounter this problem. They need to create a feature that allows users to search for patterns within a large corpus of text by generating all possible prefixes of words or phrases. This could help in indexing documents for faster search or in developing predictive text functionality for user interfaces.", "persona": "INTP"}
{"realworld": "Problem: \nYou are tasked with creating a function that generates a string sequence of numbers starting from 0 up to a given integer, n, inclusive. The numbers in the sequence should be separated by spaces. For example, if n is 5, the function should return the string \"0 1 2 3 4 5\". This function could be useful for generating numerical sequences for various applications such as data processing or algorithm testing.", "identity": "Person: \nMeet Alex, a software developer working on optimizing data processing algorithms for a large tech company. Alex needs to test a new algorithm's performance with varying sizes of input data. To do this efficiently, Alex decides to create a function that can generate a sequence of numbers up to a specified limit. This sequence will serve as the input data for testing the algorithm's efficiency and accuracy under different conditions. By using a programmatically generated sequence, Alex ensures consistency and control over the testing environment, making it easier to analyze the results and make informed decisions about algorithm improvements.", "persona": "INTJ"}
{"realworld": "A real-world problem based on this function could be: A social media platform wants to analyze the uniqueness of usernames in their database. They need to find out how many distinct characters (ignoring case sensitivity) are used in each username to understand the variety of characters used by their users. This information can help them in setting username creation policies and detecting potential bot accounts.", "identity": "Person: Mark is a data analyst working for a large social media company. His job involves analyzing user data to improve platform policies and user experience. Recently, he was tasked with assessing the uniqueness of usernames in the company's database. Mark needs to write a program that can efficiently calculate the number of distinct characters (ignoring case sensitivity) used in each username. This analysis will help the company understand the variety of characters used by their users, which is crucial for setting robust username creation policies and identifying potential bot accounts.", "persona": "INTP"}
{"realworld": "A music teacher needs to write a program that can take a string representing musical notes in a simplified ASCII format and convert it into a list of integers that indicate how long each note should be held when played. The ASCII format uses 'o' for a whole note (four beats), 'o|' for a half note (two beats), and '.|' for a quarter note (one beat). The teacher wants to use this program to easily translate pieces of music written in this format into a format that can be understood by a digital music player.", "identity": "Person: Mrs. Thompson, a dedicated music teacher at Oakwood Elementary School, has been using a simplified ASCII format to write down music pieces for her young students. She finds it easier for them to understand and follow. However, she recently acquired a digital music player that requires input in the form of integer durations for each note. To make the most out of this technology and enhance her teaching methods, Mrs. Thompson is looking for a program that can convert her ASCII music notation into the required integer format. This would save her time and effort from manually converting each piece of music.", "persona": "ESFJ"}
{"realworld": "Problem: Substring Frequency Counter\n\nDescription: Develop a function that calculates the frequency of a specified substring within a primary string, including instances where the substring overlaps. This function is essential for analyzing patterns or repetitions in text data, such as identifying recurring motifs in genetic sequences or common phrases in large documents.", "identity": "A bioinformatician working on analyzing genetic sequences might encounter this real-world problem. They need to identify and count the occurrences of specific DNA patterns or motifs within a larger sequence to understand genetic variations, mutations, or evolutionary relationships. The ability to accurately count overlapping occurrences is crucial for this analysis.", "persona": "INTP"}
{"realworld": "Real-World Problem:\n\nA local elementary school teacher wants to create an interactive learning tool for her students to help them learn about sorting numbers in ascending order. The teacher plans to use verbal descriptions of numbers instead of digits, to ensure that the activity is accessible to all students, regardless of their reading level or familiarity with numerical symbols. \n\nThe teacher needs a function that takes a string of number words (from \"zero\" to \"nine\") separated by spaces as input and returns the same string but with the number words sorted in ascending order. This function will be used to automatically generate feedback for the students when they submit their answers, allowing them to immediately see if they have correctly sorted the numbers.\n\nFor example, if a student submits \"three one five\" as their answer to a question asking them to sort the numbers, the function should return \"one three five\" to indicate the correct order. The teacher can then display this result to the student, helping them learn and improve their understanding of number ordering.", "identity": "Person Encountering the Real-World Problem:\n\nMs. Thompson is a dedicated third-grade teacher at Greenfield Elementary School. She is passionate about creating engaging and inclusive learning experiences for her students, especially those who struggle with traditional methods of learning. Ms. Thompson has noticed that some of her students are having difficulty grasping the concept of number ordering, particularly when presented with number words rather than digits. To address this, she decides to incorporate a hands-on activity into her lesson plan where students sort number words from \"zero\" to \"nine\" in ascending order. However, she realizes that manually checking each student's work would be time-consuming and might not provide immediate feedback, which is crucial for their learning process. Therefore, Ms. Thompson seeks a solution that can automatically verify the correctness of the students' submissions, ensuring that they receive instant feedback and can quickly understand any mistakes they made. This will not only save her time but also enhance the effectiveness of the learning activity.", "persona": "ESFJ"}
{"realworld": "A real-world problem based on this function could be related to sensor data analysis in environmental monitoring. For instance, you might have a network of temperature sensors deployed across a large area, such as a forest or a city, which regularly send temperature readings to a central server. The readings can vary due to local conditions, but sudden close matches between two sensors could indicate a specific event, such as a microclimate change or a malfunctioning sensor. The function `find_closest_elements` could be used to identify the two sensors with the most similar readings over a period, which would help in diagnosing potential issues or understanding localized weather patterns.", "identity": "A person who may encounter this real-world problem is an Environmental Data Analyst working for a governmental agency responsible for climate monitoring and research. This individual manages a network of environmental sensors across various geographical locations and uses the collected data to analyze trends, anomalies, and potential issues in real-time. By applying the `find_closest_elements` function, they can quickly identify pairs of sensors that are recording unusually similar temperatures, which could signal either a technical problem with the equipment or an interesting environmental phenomenon requiring further investigation.", "persona": "INTJ"}
{"realworld": "A real-world problem where this function could be applied is in the field of image processing or machine learning. When dealing with pixel intensity values in images or features in a dataset, it's often necessary to normalize the data so that all features are on the same scale. This ensures that no single feature dominates the others due to its scale, which can improve the performance of algorithms that use distance measures or gradient descent for optimization. For example, if you have a dataset of grayscale images where pixel values range from 0 to 255, you might want to rescale these values to be between 0 and 1 before feeding them into a neural network for classification.", "identity": "A data scientist working on an image recognition project using machine learning algorithms might encounter this real-world problem. They need to preprocess grayscale images by normalizing the pixel intensity values from a range of 0-255 to a scale of 0-1 to ensure optimal performance of their neural network models.", "persona": "INTJ"}
{"realworld": "Problem: Filtering Integers from a Mixed List\n\nGiven a list containing various data types such as strings, floats, integers, dictionaries, and lists, write a function that filters out all non-integer values, returning a new list containing only the integer elements.\n\nExample:\nInput: ['a', 3.14, 5, True, None, 10]\nOutput: [5, 10]", "identity": "Person: Data Analyst\n\nDescription: A data analyst working with large datasets often encounters mixed data types within lists or arrays. To clean and process the data effectively, they need to filter out specific types of data, such as keeping only integer values for numerical analysis or calculations. This could be particularly useful when preparing data for statistical analysis, machine learning models, or data visualization, where data type consistency is crucial.", "persona": "INTP"}
{"realworld": "Problem: A software developer needs to write a function that accurately calculates and returns the length of any given string, which is essential for various applications such as validating input fields, optimizing data storage, and processing text-based data in real-time systems. The function should handle strings of any length and content, including special characters and Unicode.", "identity": "Person: John is a full-stack software developer working on a new web application that involves handling large amounts of user-generated text content. He needs to ensure that the application can efficiently process and store this data without causing performance issues or security vulnerabilities. To achieve this, John must write a reliable function that accurately calculates the length of any string input, including those containing special characters and Unicode, to validate user inputs and optimize data storage.", "persona": "INTP"}
{"realworld": "Problem: You have been tasked with creating a function for a software application that determines the largest divisor of a given number, which is smaller than the number itself. This function will be used to optimize resource allocation in the application by identifying the largest divisible unit of resources that can be evenly distributed among users or processes without any remainder. For example, if the total number of available resources is 15, the function should return 5, as it is the largest divisor of 15 (besides 15 itself) that allows for an even distribution.", "identity": "Person: Sarah is a software engineer working on a project to develop a resource management system for a cloud-based application. Her task is to create an efficient algorithm that can determine the largest divisor of a given number of resources, which is smaller than the number itself, to ensure optimal distribution among users or processes. This will help the application to allocate resources in the most efficient manner possible, avoiding any wastage and ensuring that all users receive their fair share. Sarah needs to write a function that takes a positive integer as input and returns the largest divisor of that number, excluding the number itself.", "persona": "INTP"}
{"realworld": "Problem: Prime Factorization\n\nGiven a positive integer n, write a function that returns a list of its prime factors, sorted from smallest to largest. The function should include each prime factor as many times as it appears in the factorization of n, such that the product of all factors in the returned list equals n. For example:\n- If n is 8, the function should return [2, 2, 2] because 8 = 2 * 2 * 2.\n- If n is 25, the function should return [5, 5] because 25 = 5 * 5.\n- If n is 70, the function should return [2, 5, 7] because 70 = 2 * 5 * 7.", "identity": "Person: Math Tutor\n\nDescription: A math tutor who specializes in teaching middle school and high school students. They often need to explain concepts like prime factorization to their students in a clear and engaging way. To make learning more interactive, the tutor creates custom exercises for each student based on their level of understanding. The tutor uses a function that generates prime factorizations of random numbers to create these exercises quickly and accurately. This allows them to focus on explaining the concept rather than manually calculating prime factorizations for each exercise.", "persona": "INTJ"}
{"realworld": "A company is tracking the performance of their employees by recording the number of sales each employee makes every day. However, they want to analyze the unique sales made by each employee, meaning they want to remove any duplicates from the list of sales for each employee while preserving the order of the remaining sales. This will help them understand the variety of products sold by each employee and identify any patterns or trends in their sales behavior. For example, if an employee's sales list is [10, 15, 20, 15, 25], the function should return [10, 20, 25].", "identity": "The person who may encounter this real-world problem is a data analyst working for a retail company. Their job is to analyze the sales data of the company's employees and provide insights to management on employee performance and sales trends. They need to write a function that removes duplicate sales from each employee's sales list while preserving the order of the remaining sales. This will help them identify the variety of products sold by each employee and detect any patterns or trends in their sales behavior.", "persona": "INTP"}
{"realworld": "Problem: A software developer needs to create a function that can flip the case of each character in a given string. This means that all lowercase letters should be converted to uppercase and all uppercase letters should be converted to lowercase. The function should take a single string as input and return the modified string with the flipped cases. For example, if the input string is \"Hello\", the function should return \"hELLO\".", "identity": "Person: John is a software developer working on a project that involves processing user input for a web application. He needs to create a function that can flip the case of each character in a given string to ensure that the application can handle input in any case format. This will help improve the user experience by making the application more flexible and accommodating to different typing habits.", "persona": "INTJ"}
{"realworld": "Problem: Merging Patient Names for Hospital Records\n\nA hospital's record-keeping system requires updating patient information, including their full names. The system receives a list of strings representing each part of a patient's name (first name, middle name(s), and last name) and needs to concatenate these parts into a single string for the records. However, not all patients have middle names, meaning some lists may contain only two elements (first and last names). The system must handle this variability and efficiently merge the name parts while maintaining the correct order. This functionality is crucial for accurate patient identification and record management.", "identity": "Person: Sarah Thompson, Medical Records Administrator\n\nSarah Thompson works as a medical records administrator at a large hospital. She is responsible for ensuring that patient records are up-to-date and accurate. Sarah often encounters the need to merge patient names from various sources into a standardized format for the hospital's record-keeping system. With the high volume of patients and the variability in how names are provided (some with middle names, some without), Sarah requires an efficient method to concatenate the name parts correctly. This task is critical for maintaining accurate patient identification and facilitating smooth hospital operations.", "persona": "ISTJ"}
{"realworld": "A company has a large database of product names, and they need to quickly find all products that belong to a specific category. The category is determined by a prefix in the product name. For example, all computer-related products start with \"Comp-\", while all kitchen appliances start with \"Kitch-\". Write a function that takes the database of product names as a list of strings and a prefix as input, then returns a new list containing only the product names that start with the given prefix. This will help the company to easily filter and manage their products based on categories.", "identity": "A retail store manager named Alex is responsible for organizing the vast inventory of products at their store. With thousands of items in various categories, it's crucial to efficiently sort and display products for easy customer navigation and internal management. Alex often needs to pull up lists of products belonging to specific categories, such as computers or kitchen appliances, to update store layouts, prepare for sales, or check stock levels. By using the function described, Alex can swiftly filter the product database based on category prefixes, saving significant time and effort in managing the store's inventory.", "persona": "ISTJ"}
{"realworld": "Problem: Filtering Positive Feedback Scores\n\nIn an e-commerce platform, customers can leave feedback scores for products they have purchased. The feedback scores range from -10 to 10, where negative scores indicate dissatisfaction, zero indicates neutrality, and positive scores indicate satisfaction. As a data analyst, you are tasked with creating a function that filters out only the positive feedback scores from a given list of feedback scores to analyze customer satisfaction levels. This will help the company identify popular products and improve customer experience by focusing on positively rated items.", "identity": "Person: Sarah, a Data Analyst at an E-commerce Company\n\nDescription: Sarah is a data analyst working for a large e-commerce platform. Her job involves analyzing customer feedback to understand product performance and customer satisfaction. Recently, her manager has asked her to focus on identifying popular products by filtering out only the positive feedback scores from a large dataset. This will help the company improve its product offerings and enhance customer experience by understanding which products are well-received by customers. Sarah needs to create a function that efficiently filters out only the positive feedback scores from a given list of feedback scores ranging from -10 to 10.", "persona": "INTJ"}
{"realworld": "Problem: Developing an Efficient Prime Number Checker for Cryptography Applications\n\nDescription: In cryptography, particularly in public key systems like RSA, large prime numbers are crucial for generating secure keys. The efficiency and accuracy of a prime number checker can significantly impact the overall security and performance of such cryptographic systems. The challenge is to implement an efficient algorithm that can accurately determine whether a given large number is prime or not, enabling faster and more secure key generation processes. This is essential for maintaining the integrity and confidentiality of data transmitted over insecure networks.", "identity": "Person: Alex, a Cryptography Engineer at a leading cybersecurity firm, is tasked with optimizing the prime number checking algorithm used in their encryption software. With the increasing demand for faster and more secure communication channels, Alex needs to develop a more efficient method to verify the primality of large numbers quickly and accurately. This will ensure that the cryptographic keys generated by their system remain robust against potential attacks while minimizing processing time. Success in this endeavor will enhance the firm's reputation in the cybersecurity market and contribute to the protection of sensitive information for their clients.", "persona": "INTP"}
{"realworld": "Problem: Given a polynomial function represented by its coefficients, find a root of the polynomial, i.e., a value of x such that the polynomial evaluates to zero. The polynomial is guaranteed to have an even number of coefficients and a non-zero highest degree coefficient, ensuring at least one real root exists.\n\nFor example, consider the polynomial \\(f(x) = 1 + 2x\\). We need to find a value of x such that \\(f(x) = 0\\). In this case, the root is \\(-0.5\\).\n\nAnother example is the polynomial \\(f(x) = -6 + 11x - 6x^2 + x^3\\), which can be factored as \\((x - 1)(x - 2)(x - 3)\\). Here, we need to find one of the roots, which could be \\(1.0\\), \\(2.0\\), or \\(3.0\\). However, the function will return only one root.", "identity": "A high school math teacher preparing for a lesson on polynomial functions might encounter this problem. They are creating a worksheet for their students to practice finding roots of polynomials with various degrees. To ensure the problems are solvable and provide meaningful practice, the teacher needs to generate polynomials that guarantee at least one real root. This ensures students can apply concepts like the Rational Root Theorem and synthetic division to find the roots effectively.", "persona": "INTJ"}
{"realworld": "A company is implementing a new data processing algorithm for optimizing their inventory management system. The algorithm processes a list of inventory items, each represented by an integer value indicating the quantity of that item in stock. To improve efficiency, the company has decided to implement a specific sorting mechanism for every third item in the list. This means that all items in positions that are not multiples of three will remain in their original order, while the items in positions that are multiples of three (i.e., index 0, 3, 6, etc.) should be sorted in ascending order. This will allow the system to quickly access and manage critical inventory items while minimizing disruptions to the overall inventory flow.", "identity": "The person who may encounter this real-world problem is a software engineer working on inventory management systems. This engineer is responsible for implementing and optimizing algorithms that enhance the efficiency of the company's inventory tracking and management. They need to ensure that the new data processing algorithm meets the specific requirements set by the company, including the unique sorting mechanism for every third item in the list, without affecting the order of other items. Their task involves writing code, testing its functionality, and ensuring it integrates seamlessly with the existing inventory management system to improve overall performance.", "persona": "INTJ"}
{"realworld": "A company is tracking the performance of its employees over multiple quarters. They have a list of employee performance scores from various quarters, which may contain duplicate values. The company wants to analyze the unique performance levels achieved by their employees and sort them in ascending order to better understand the range of performances they have encountered. For instance, given the list of scores [5, 3, 5, 2, 3, 3, 9, 0, 123], the company needs to find and sort the unique scores, resulting in [0, 2, 3, 5, 9, 123].", "identity": "The person who may encounter this real-world problem is a Human Resources (HR) Analyst at a mid-sized corporation. This HR Analyst is responsible for evaluating employee performance trends and identifying areas for improvement or recognition. By analyzing unique performance levels sorted in ascending order, the analyst can easily spot patterns, outliers, and the overall distribution of performance within the company, aiding in making informed decisions regarding employee development and resource allocation.", "persona": "INTJ"}
{"realworld": "Problem: Given a list of numerical values representing daily stock prices of a company over a period of time, determine the highest stock price that occurred during this period. For instance, given the list [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], the function should return 123 as the maximum stock price. Note that negative values might represent a decrease in stock price below a certain reference point.", "identity": "Person: A financial analyst working for an investment firm who needs to quickly analyze and report on the performance of various stocks. This person is responsible for identifying the highest and lowest points in stock prices to advise clients on when to buy or sell shares. They use programming skills to automate data analysis tasks, making it easier to handle large datasets and provide timely insights to their team and clients.", "persona": "INTJ"}
{"realworld": "Problem: A company needs to analyze a large dataset of product serial numbers to count how many of them, which are less than a certain value and divisible by either 11 or 13, contain the digit 7. This is crucial for identifying specific batches of products for quality control purposes. The function \"fizz_buzz\" is required to automate this process efficiently.", "identity": "Person: Sarah is a quality control manager at a manufacturing company that produces electronic devices. She needs to identify specific batches of products that have been reported to have higher defect rates. To do this, she must analyze a large dataset of product serial numbers and filter out those that are less than a certain value and divisible by either 11 or 13, and also contain the digit 7. This will help her narrow down the search for potentially defective products and take appropriate action to ensure customer satisfaction and safety. Sarah needs an efficient way to automate this process, which is where the \"fizz_buzz\" function comes in.", "persona": "INTJ"}
{"realworld": "A company is managing its inventory and has a list of product quantities that need to be sorted for analysis. However, due to specific constraints, they require a sorting algorithm that only sorts the quantities of products with even indices in the list, while keeping the quantities of products with odd indices unchanged. This will help them analyze the inventory data more efficiently by focusing on certain groups of products. For example, if the current inventory list is [50, 30, 20, 40], they want to sort it so that the quantities at even indices (0 and 2) are sorted, resulting in [20, 30, 50, 40].", "identity": "Person: Inventory Management Analyst\n\nDescription: An Inventory Management Analyst working for a retail company needs to analyze the inventory data efficiently. They have been tasked with sorting the product quantities in the inventory list but only for the products with even indices. This will allow them to focus on analyzing specific groups of products without altering the entire inventory list, which could disrupt other ongoing analyses or reports. By sorting only the even-indexed quantities, they can quickly identify trends and make informed decisions about stock levels for these particular products.", "persona": "INTJ"}
{"realworld": "A company needs to securely transmit sensitive information over an unsecured network. They decide to use a simple encoding method to obfuscate the data. The method involves taking the plaintext and encoding it by cycling groups of three characters. This means that every three characters in the plaintext are rearranged such that the second and third characters come first, followed by the first character. For example, \"abc\" would be encoded as \"bca\". However, if the group has fewer than three characters, it is left unchanged.\n\nThe problem is to implement two functions: `encode_cyclic` and `decode_cyclic`. The `encode_cyclic` function should take a string as input and return the encoded string by cycling groups of three characters. The `decode_cyclic` function should take the encoded string as input and return the original plaintext by reversing the encoding process.", "identity": "Person: Sarah, a cybersecurity analyst at a financial services firm. She is tasked with implementing secure communication channels for transmitting sensitive client data between different departments. Due to budget constraints, they opt for a simple yet effective encoding method that can be easily integrated into their existing systems without requiring complex encryption algorithms. Sarah needs to write and test the `encode_cyclic` and `decode_cyclic` functions to ensure the data remains confidential during transmission over unsecured networks.", "persona": "INTJ"}
{"realworld": "Problem: Finding the n-th Fibonacci number that is also a prime number.\n\nIn this problem, we are tasked with creating a function that takes an integer n as input and returns the n-th number that is both a Fibonacci number and a prime number. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with initial conditions F(0) = 0 and F(1) = 1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first five numbers in the sequence that meet these criteria are 2, 3, 5, 13, and 89. Our function should efficiently find and return the n-th such number for any given n.", "identity": "A mathematician or a computer scientist working on number theory might encounter this real-world problem. They could be conducting research on the properties of prime numbers and their distribution within specific sequences like the Fibonacci sequence. This problem could also arise in cryptography, where certain properties of prime numbers are crucial for generating secure encryption keys. Additionally, software developers working on algorithms that require efficient computation of prime numbers in sequences might need to solve this problem to optimize their code.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been assigned to develop a software module for a financial data analysis system. The module needs to analyze a list of daily profit/loss figures (represented as integers) from a trading algorithm over a period. Your task is to determine if there exists any three distinct trading days within this period where the sum of profits/losses equals zero. This will help the finance team understand if there were any three-day sequences where their trades balanced out perfectly over that span. The function `triples_sum_to_zero` should return `True` if such a trio of days exists, and `False` otherwise. \n\nFor instance:\n- If the list `[1, 3, 5, 0]` represents the profits/losses for four consecutive trading days, then there are no three days with a sum of zero, so the function returns `False`.\n- If the list `[1, 3, -2, 1]` represents the profits/losses for four days, then the days with profits/losses `1`, `3`, and `-2` sum up to zero, so the function returns `True`.", "identity": "A software engineer working for a financial technology company has been tasked with creating an analytical tool to help the finance team better understand the performance of their trading algorithms. Specifically, they need to identify patterns in daily profit/loss figures over a given period to see if there are any three-day sequences where the total profit or loss is exactly zero. This information will assist the finance team in evaluating the effectiveness of their trading strategies and making informed decisions about future trades.", "persona": "INTP"}
{"realworld": "Problem: Car Race Collision Count\n\nIn a high-speed car racing event, there are n cars moving left to right and another set of n cars moving right to left on an infinitely long, straight road. Initially, these two sets of cars are positioned far apart from each other on the road. All cars travel at the same constant speed. When a car moving left to right meets a car moving right to left, they collide but continue their journey undeterred due to their robust design. The goal is to determine the total number of collisions that occur during the race.", "identity": "Person: Event Organizer for the International Robocar Grand Prix\n\nDescription: As the organizer for the International Robocar Grand Prix, you are responsible for overseeing the technical aspects of the event, including the safety measures and the collection of data for analysis and entertainment purposes. One key metric you track is the total number of collisions between the autonomous vehicles during the high-speed races. This information not only helps in assessing the durability of the car designs but also adds an element of excitement for the spectators. With an upcoming race featuring an equal number of cars traveling in opposite directions on a straight, infinitely long track, you need to accurately predict the total number of collisions to prepare the emergency response teams and enhance the viewing experience with real-time collision statistics.", "persona": "INTJ"}
{"realworld": "A real-world problem based on the given function could be: \"You are working on a system that processes daily stock market data. Each day, you receive a list of closing stock prices for a particular company. Your task is to create a new list where each element (stock price) has been incremented by 1, as part of a process to normalize the data for further analysis.\"", "identity": "A financial data analyst at a stock market research firm who receives daily closing stock prices and needs to normalize the data by incrementing each price by 1 for further analysis and reporting.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been tasked with creating a function for a financial auditing system that checks for fraudulent transactions. The function should take a list of transaction amounts as input and determine whether any two distinct transactions sum to zero, which could indicate potential fraud or errors in the accounting. If such a pair exists, the function should return True; otherwise, it should return False. This check is crucial for identifying possible issues in the financial records where a transaction and its exact opposite might have been mistakenly recorded.", "identity": "Person: \nMeet Alex Thompson, a 35-year-old financial analyst working at a mid-sized investment firm in San Francisco. Alex has over a decade of experience in financial management and auditing. Recently, due to an increase in reported financial discrepancies and fraudulent activities in the industry, Alex's firm has decided to enhance its auditing systems to include real-time anomaly detection. As part of this initiative, Alex has been assigned the task of developing an algorithm that can efficiently identify potentially fraudulent transactions by checking for pairs of transactions that sum to zero. This solution is expected to improve the firm's ability to detect and prevent financial irregularities promptly. With a background in both finance and computer science, Alex is well-equipped to tackle this challenge and integrate technical solutions into the firm's existing financial systems.", "persona": "INTJ"}
{"realworld": "Problem: You need to write a function that changes the numerical base of a given integer to a specified base (less than 10) and returns the string representation of the converted number. For example, if the input number is 8 and the target base is 3, the function should return \"22\". If the input number is 8 and the target base is 2, it should return \"1000\", and if the input number is 7 and the target base is 2, it should return \"111\".", "identity": "Person: A computer science student working on a project that involves understanding and implementing numerical base conversions for a custom encryption algorithm. They need to create a function that can accurately convert integers to different bases as part of their encryption process. This task is crucial for ensuring the algorithm's effectiveness in securing data.", "persona": "INTP"}
{"realworld": "A real-world problem based on the given function could be: \"A landscaper needs to calculate the amount of sod required to cover a triangular section of a park. The base of the triangle is 20 feet and the height is 15 feet. How many square feet of sod are needed to cover this area?\"", "identity": "Person: A professional landscaper working for a city parks department who is tasked with maintaining and improving various public green spaces. They need to efficiently manage resources and ensure that areas designated for renovation or repair receive the correct amount of materials, such as sod for covering bare soil or damaged turf. In this case, they must accurately calculate the area of a triangular section to order the right quantity of sod without incurring unnecessary costs or waste.", "persona": "ISTJ"}
{"realworld": "Problem: Efficient Computation of the n-th Element in the Fib4 Sequence\n\nDescription: The Fib4 sequence is defined as follows: fib4(0) = 0, fib4(1) = 0, fib4(2) = 2, fib4(3) = 0, and for all n > 3, fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). The task is to write an efficient function to compute the n-th element of the Fib4 sequence without using recursion.\n\nExample:\nInput: n = 5\nOutput: 4\n\nInput: n = 6\nOutput: 8\n\nInput: n = 7\nOutput: 14", "identity": "A software engineer working on optimizing algorithms for a financial modeling application might encounter this real-world problem. They need to efficiently calculate complex sequences like Fib4 to model economic trends where each point in the sequence can represent a potential state of the market based on historical data points. Efficiency is critical due to the large datasets involved in financial modeling.", "persona": "INTP"}
{"realworld": "A real-world problem where finding the median is useful could be in analyzing salaries within a company. For instance, a Human Resource manager wants to find the median salary among all employees to understand the typical compensation level, as the average can be skewed by very high or low salaries. Given a list of all employee salaries for the current year, the manager needs to determine the median salary to make informed decisions about pay scales and budgeting. This information is crucial for ensuring fair compensation practices and understanding the financial health of the company.", "identity": "Person: Sarah Thompson, HR Manager at TechInnovate Solutions\n\nDescription: Sarah Thompson is a 35-year-old Human Resource Manager working at TechInnovate Solutions, a mid-sized tech company specializing in software development. She has been with the company for five years and is responsible for overseeing employee relations, compensation, and benefits. Sarah is currently tasked with reviewing the salary structure to ensure competitive and equitable pay scales. To do this effectively, she needs to calculate the median salary among the company's 120 employees to get a clear picture of the typical compensation level without being misled by outliers. This data will help her make informed decisions regarding salary adjustments and budget allocations for the upcoming fiscal year.", "persona": "ENFJ"}
{"realworld": "Problem: \nDevelop a function to determine if a license plate number is a valid palindrome. This would be useful for an automated system in parking garages or toll roads that checks for special promotional or vanity plates. The function should ignore any non-alphanumeric characters and should not be case-sensitive. For example, the license plate \"RACECAR\" should return True, while \"ZBCD\" should return False.", "identity": "Person: \nSamantha is a software engineer working for a company that provides smart parking solutions for various cities. She has been tasked with developing an algorithm that can quickly and accurately identify palindromic license plates for a new promotional campaign. This will allow the company's clients to offer discounts or other perks to drivers with qualifying plates. Samantha needs to create a function that meets the specified requirements to ensure the system works efficiently and without errors.", "persona": "INTJ"}
{"realworld": "Problem: Implementing Secure Communication Protocols in Cryptography\n\nDescription: In cryptography, secure communication protocols often require the calculation of large powers of a number modulo a prime number to ensure data security and integrity. For instance, the Diffie-Hellman key exchange algorithm, which is used to establish a shared secret between two parties over an insecure channel, relies on this mathematical operation. Given a large integer n and a prime number p, the goal is to efficiently compute 2^n modulo p without causing numerical overflow or losing precision, which could compromise the security of the communication. This operation is crucial for generating keys that are used to encrypt and decrypt messages in various cryptographic systems.", "identity": "Person: Network Security Engineer\n\nDescription: A network security engineer working for a multinational corporation is tasked with implementing secure communication channels between different offices worldwide. They need to ensure that all data transmitted over these channels is encrypted using robust cryptographic methods to protect sensitive information from interception by unauthorized third parties. To achieve this, the engineer must efficiently calculate large powers of a number modulo a prime number as part of the Diffie-Hellman key exchange algorithm, which is essential for establishing secure connections. The engineer's success in performing this operation accurately and without numerical issues directly impacts the effectiveness of the encryption and, consequently, the overall security of the company's communication infrastructure.", "persona": "INTP"}
{"realworld": "Problem: Secure Communication System\n\nDescription: Develop a simple yet secure communication system that allows users to send and receive messages without being easily deciphered by unauthorized parties. The system should use an encoding algorithm that shifts each character in the message by a fixed number (e.g., 5) in the alphabet to create an encoded message. Conversely, the system must also include a decoding algorithm capable of reversing the encoding process to retrieve the original message. The goal is to ensure that only the intended recipient can understand the message, while others will see only seemingly random characters.", "identity": "Person: Sarah, a high school student participating in a science fair project on cybersecurity. She wants to create a secure messaging app as her project to demonstrate the importance of encryption in protecting personal communications. Sarah has a basic understanding of programming and is eager to learn more about cryptography. She plans to present her app at the science fair and hopes to inspire her peers to take an interest in cybersecurity.", "persona": "INTP"}
{"realworld": "Problem: Filtering Vowels from Text in Speech Recognition Systems\n\nDescription: In speech recognition systems, there might be a need to process and filter out vowels from the transcribed text for certain applications such as phonetic analysis or language learning tools. The goal is to create a function `remove_vowels` that takes a string (representing transcribed speech) as input and returns a new string with all vowels removed.\n\nExample: Consider a speech recognition system that transcribes spoken words into text. After transcription, the system needs to analyze the consonant structure of the words for educational purposes. The `remove_vowels` function can be used to quickly strip away the vowels from the transcribed text, leaving only the consonants for further analysis. For instance, if the transcribed text is \"Hello, World!\", the function should return \"Hll, Wrld!\".", "identity": "Person: Language Learning App Developer\n\nDescription: A developer working on a language learning application that focuses on teaching users about phonetics and pronunciation. They are looking to implement a feature that highlights the importance of consonant clusters in various languages. To achieve this, they need to filter out vowels from the transcribed speech provided by the app's speech recognition module, so that users can practice and learn how to pronounce words based on their consonant structures. This will help learners to better understand and produce the sounds of the target language.", "persona": "INTP"}
{"realworld": "Problem: A company has set a maximum limit (threshold) for the weight of packages that can be shipped using their standard shipping method. The weights of several packages are stored in a list. Determine if all the package weights in the list are below the company's shipping weight threshold. If any package exceeds the threshold, the company will need to use a more expensive shipping method.", "identity": "Person: Sarah is a logistics coordinator at a retail company that ships products to customers. She needs to ensure that all packages being shipped using the standard method do not exceed the weight limit to avoid additional costs. Sarah has a list of package weights and needs to quickly determine if any of them exceed the company's shipping weight threshold.", "persona": "ISTJ"}
{"realworld": "Problem: A company needs to develop a function that can accurately calculate the total quantity of two different products ordered by a customer. The function should take in the quantities of each product as integers and return the total quantity as an integer. This is necessary to ensure that the inventory system can accurately track the number of items being sold and prevent stockouts. For example, if a customer orders 2 units of product A and 3 units of product B, the function should return a total quantity of 5. Similarly, if a customer orders 5 units of product A and 7 units of product B, the function should return a total quantity of 12.", "identity": "Person: John is the inventory manager at a small retail store. He is responsible for ensuring that the store has enough stock to meet customer demand while avoiding overstocking, which can lead to waste and increased storage costs. John needs to develop a function that can accurately calculate the total quantity of two different products ordered by a customer so that he can update the inventory system and prevent stockouts. John has some programming experience but is not a professional developer, so he needs a simple and easy-to-use solution that he can implement quickly and efficiently.", "persona": "ISTJ"}
{"realworld": "Problem: \nYou are tasked with creating a function that checks whether two strings contain the same set of characters, regardless of the order or frequency of those characters. This could be useful in various applications such as text analysis, cryptography, or data validation, where it's necessary to determine if two pieces of text have identical character compositions.\n\nFor instance, in text analysis, you might want to compare two documents to see if they use the same vocabulary. In cryptography, this function could help in analyzing encrypted messages to check for similarities in character usage. In data validation, it can ensure that two fields in a database contain the same types of information, like ensuring that two different entries for addresses contain the same characters, indicating they might refer to the same location.", "identity": "Person: \nMeet Dr. Elara Voss, a computational linguist working at a leading research institute. Her primary focus is on developing algorithms for natural language processing (NLP) and text analysis. Recently, she has been tasked with creating a tool that can compare the vocabulary used in historical texts to understand linguistic evolution over time. To achieve this, she needs a function that can efficiently determine if two documents contain the same set of unique words, disregarding the frequency and order of these words. This will allow her to identify documents that share a common vocabulary, which is crucial for her comparative linguistic studies. Dr. Voss is proficient in Python and has experience with various NLP libraries but is looking for an optimized solution to handle large datasets.", "persona": "INTP"}
{"realworld": "Problem: Optimizing the Calculation of Fibonacci Numbers for Large Inputs\n\nDescription: The given function `fib` computes the n-th Fibonacci number using a recursive approach. However, this method is inefficient for large inputs due to redundant calculations and exponential time complexity. The problem is to optimize this function so that it can efficiently compute the n-th Fibonacci number even for large values of n, without sacrificing accuracy. This optimization is crucial in scenarios where the Fibonacci sequence is used in algorithms or models that require fast computation, such as in financial modeling, computer graphics, or algorithmic trading systems.", "identity": "A person who may encounter this real-world problem is a quantitative analyst working in a financial institution. They use mathematical models to predict market trends and optimize investment strategies. In their work, they often need to perform complex calculations involving sequences and series, including the Fibonacci sequence, which is sometimes used in technical analysis to identify potential support and resistance levels in stock prices. Due to the large datasets and the need for quick responses to market changes, the analyst requires an efficient algorithm to calculate Fibonacci numbers for potentially very large inputs. An optimized Fibonacci function would significantly enhance the performance of their predictive models and trading algorithms, enabling faster and more accurate financial decision-making.", "persona": "INTP"}
{"realworld": "A real-world problem based on this description could be validating the structure of nested HTML tags. For example, given a string representing a snippet of HTML code, determine if all opening tags have corresponding closing tags in the correct order. This is crucial for ensuring that web pages are rendered correctly by browsers. Incorrectly nested tags can lead to unexpected behavior or layout issues on the page.", "identity": "A person who may encounter this real-world problem is a web developer. They write and maintain the code for websites, using languages like HTML, CSS, and JavaScript. Ensuring that HTML tags are properly nested is essential for their work, as it affects how web pages are displayed and function across different browsers. A web developer needs to validate HTML structures to debug issues, optimize website performance, and ensure accessibility and responsiveness.", "persona": "INTP"}
{"realworld": "Problem: Design an algorithm to monitor and analyze stock price trends for a financial trading application. The application needs to determine if the stock prices are monotonically increasing or decreasing over a given period to assist in making buy, sell, or hold decisions. The function should take a list of stock prices as input and return True if the prices are either consistently increasing or decreasing, and False otherwise. This can help traders identify clear upward or downward trends in the market.", "identity": "Person: John is a professional day trader working at a leading financial firm. His job involves analyzing stock market trends and making quick decisions on buying, selling, or holding stocks to maximize profits for his clients. John needs a reliable tool to help him identify clear upward or downward trends in stock prices over short periods, enabling him to make informed trades during volatile market conditions. He often deals with large datasets of stock prices and requires an efficient algorithm to process this information in real-time.", "persona": "INTJ"}
{"realworld": "Problem: Given two lists of integers, write a function to find and return a sorted list of unique common elements present in both lists.\n\nFor example:\n- If the input lists are [1, 4, 3, 34, 653, 2, 5] and [5, 7, 1, 5, 9, 653, 121], the function should return [1, 5, 653].\n- If the input lists are [5, 3, 2, 8] and [3, 2], the function should return [2, 3].", "identity": "Person: Data Analyst\n\nDescription: A data analyst working for a market research company needs to compare data from two different sources to find common trends or overlapping customer segments. They have two lists of survey respondent IDs from separate surveys and need to identify the unique respondents that participated in both surveys to ensure the consistency and reliability of their analysis. The analyst writes a function to find and return a sorted list of these common elements.", "persona": "INTP"}
{"realworld": "Problem: Finding the largest prime factor of a large integer is a common task in cryptography, particularly in algorithms such as RSA. Given a large integer 'n' that is not a prime number and greater than 1, the goal is to efficiently find its largest prime factor. This is crucial for ensuring the security of encrypted communications, as the strength of many cryptographic systems relies on the difficulty of factoring large numbers. For instance, if 'n' is a product of two large prime numbers, determining these primes can compromise the encryption.", "identity": "Person: Alex, a cybersecurity analyst working for a tech company that specializes in secure communication solutions. Alex often deals with large integers used in cryptographic algorithms like RSA. Their job requires them to ensure the security of their encryption methods by confirming that the large numbers used are indeed products of two large prime numbers and by identifying any potential vulnerabilities, such as the ability to easily factor these numbers. This involves finding the largest prime factor of given large integers to assess the strength of the encryption.", "persona": "INTP"}
{"realworld": "Problem: A company needs to calculate the total number of hours worked by all employees in the first n days of the month for payroll processing. The function `sum_to_n` can be used to compute the cumulative sum of hours worked from day 1 to day n, assuming each employee works a consistent number of hours each day. This will help the HR department to quickly and accurately calculate the total number of work hours for all employees for any given number of days in the month.", "identity": "Person: Sarah is the HR manager at a mid-sized software development company. She is responsible for processing payroll every month and ensuring that all employees are paid accurately for the hours they have worked. With over 100 employees in the company, manually calculating the total number of hours worked by all employees for any given number of days in the month is a time-consuming and error-prone task. Sarah needs an efficient way to calculate the total number of work hours for all employees for any given number of days in the month to streamline her payroll processing and avoid any potential mistakes. By using the `sum_to_n` function, Sarah can quickly and accurately calculate the total number of work hours for all employees for any given number of days in the month, saving her valuable time and reducing the risk of errors.", "persona": "ISTJ"}
{"realworld": "Problem: \nYou are given a string of parentheses, and you need to write a function to determine if the parentheses are correctly matched. That is, every opening parenthesis \"(\" should have a corresponding closing parenthesis \")\", and they should be properly nested. For example, the string \"(()())\" is correctly matched, while the string \")(()\" is not. Your function should return True if the parentheses are correctly matched, and False otherwise.", "identity": "A software developer working on a text editor or an integrated development environment (IDE) might encounter this problem. They need to implement a feature that checks the syntax of code being written by users, specifically focusing on validating the correct pairing and nesting of parentheses in expressions or function calls. This ensures that the code is syntactically correct before it is compiled or executed, helping to prevent runtime errors.", "persona": "INTP"}
{"realworld": "A real-world problem based on the given description could be: \"A mechanical engineer is working on optimizing the performance of a combustion engine. The efficiency of the engine can be modeled as a polynomial function of the fuel-air ratio. The engineer needs to find the maximum efficiency point by calculating the derivative of the efficiency polynomial and setting it equal to zero. However, manually computing the derivative for complex polynomials is time-consuming and prone to errors. The engineer decides to write a Python function that takes the coefficients of the polynomial as input and returns the coefficients of its derivative, allowing for quick and accurate calculation of the maximum efficiency point.\"", "identity": "The person who may encounter this real-world problem is a mechanical engineer specializing in combustion engines. This engineer is tasked with optimizing engine performance, specifically focusing on the relationship between the fuel-air ratio and engine efficiency. To achieve this, they need to calculate the maximum efficiency point by finding the derivative of a complex polynomial function that models engine efficiency. Due to the complexity and potential for human error in manual calculations, the engineer decides to automate this process by writing a Python function to handle the derivation task efficiently and accurately.", "persona": "INTJ"}
{"realworld": "A real-world problem based on the given description could be:\n\nProblem: Stock Market Prediction using the FibFib Sequence\n\nDescription: In financial market analysis, technical analysts often use various mathematical sequences to predict stock prices and identify trends. One such sequence that has gained attention recently is the FibFib sequence. The FibFib sequence is similar to the Fibonacci sequence but starts with three base cases instead of two. It is defined as follows: fibfib(0) = 0, fibfib(1) = 0, fibfib(2) = 1, and for n > 2, fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\nAs a data scientist working for a financial firm, you have been tasked with developing a model to predict future stock prices using the FibFib sequence. Your goal is to create an efficient algorithm to compute the n-th element of the FibFib sequence and then use it to analyze historical stock price data. By comparing the FibFib numbers with the stock prices at specific intervals, you aim to identify patterns or correlations that can help in making accurate predictions.\n\nTo achieve this, you need to write a function that takes an integer n as input and returns the n-th element of the FibFib sequence. The function should be optimized for efficiency to handle large values of n, as stock price predictions often require analyzing long-term trends. Once you have the FibFib sequence values, you can integrate them into your stock market prediction model to evaluate their predictive power.\n\nNote: The stock market prediction using the FibFib sequence is purely hypothetical and may not necessarily result in accurate predictions. This problem focuses on the computational aspect of generating the FibFib sequence efficiently.", "identity": "Person: Data Scientist at a Financial Firm\n\nDescription: Alex is a data scientist working for a prestigious financial firm. With a strong background in mathematics and computer science, Alex specializes in developing predictive models for stock market analysis. Recently, Alex has been intrigued by the potential of the FibFib sequence in identifying hidden patterns within stock prices.\n\nAlex's team has been exploring various mathematical sequences to improve their stock prediction algorithms. They came across the FibFib sequence and decided to investigate its application in financial markets. The goal is to determine if there is any correlation between the FibFib numbers and stock price movements, which could potentially enhance their predictive accuracy.\n\nTo accomplish this, Alex needs to create an efficient algorithm for computing the n-th element of the FibFib sequence. The function must be optimized for performance, as stock price predictions often involve analyzing extensive historical data. By integrating the FibFib sequence values into their existing models, Alex hopes to uncover new insights and improve the firm's trading strategies.\n\nWhile the connection between the FibFib sequence and stock market predictions is speculative, Alex is excited about the opportunity to explore this unconventional approach. Success in this project could establish Alex as a pioneer in the field of financial analytics and contribute to the firm's competitive edge in the market.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been assigned to write a function called `vowels_count` that calculates the number of vowels in a given word. The function should consider 'a', 'e', 'i', 'o', 'u' as vowels, and 'y' should be considered a vowel only if it appears at the end of the word. Your task is to implement this function and ensure it passes all the provided test cases, including edge cases where the word might be empty or contain only consonants. For instance, the word \"abcde\" should return 2 (since 'a' and 'e' are vowels), and the word \"ACEDY\" should return 3 (since 'A', 'E', and 'Y' are considered vowels in this context).", "identity": "A high school computer science student named Alex is working on a project about text analysis. As part of this project, Alex needs to create a series of functions that analyze different aspects of words, such as counting vowels. This particular function, `vowels_count`, is crucial for a module that will later help categorize words based on their vowel content for linguistic studies. Alex must ensure the function accurately counts vowels, including handling uppercase letters and the special case of 'y' at the end of a word.", "persona": "INTP"}
{"realworld": "Problem: Implementing a Circular Shift Algorithm for Data Encryption\n\nDescription: You have been tasked with implementing a circular shift algorithm to encrypt sensitive data before transmitting it over a network. The algorithm takes an integer value 'x' and shifts its digits right by a specified number of positions 'shift'. The result is returned as a string. However, if the 'shift' value exceeds the number of digits in 'x', the digits should be reversed instead of being shifted. This encryption technique adds an extra layer of security to the data, making it harder for potential eavesdroppers to decipher. Your goal is to write a function that accurately performs this circular shift operation according to the given specifications.", "identity": "Person: Alex, a software engineer working for a financial services company, is responsible for developing secure communication protocols. In light of recent data breaches in the industry, Alex has been tasked with enhancing the encryption methods used for transmitting sensitive information between servers. One of the proposed techniques involves using a circular shift algorithm to obfuscate the data before transmission. Alex must implement this algorithm to ensure that even if the data is intercepted, it remains unreadable without the decryption key. This task requires a deep understanding of number manipulation and string handling in programming languages, as well as a keen eye for detail to adhere to the specific shifting rules.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been tasked with creating a program for a cybersecurity firm that needs to quickly assess the strength of passwords based on certain criteria. One of the methods they want to implement is to evaluate the sum of the ASCII values of uppercase letters in a password. Your task is to write a function that takes a string (representing a password) as input and returns the sum of the ASCII codes of the uppercase characters only. This will help the firm to quickly determine if a password contains strong, hard-to-guess uppercase characters.", "identity": "Person: Alex, a software engineer working at a cybersecurity firm. Alex is part of the team responsible for developing tools to assess password strength. With the rise in cyber attacks, Alex's firm has decided to enhance their password evaluation system to include specific checks for uppercase characters, as these can significantly increase password complexity. Alex needs to create a function that will calculate the sum of the ASCII values of all uppercase letters in a given password string, which will then be used as one of the metrics in the overall password strength assessment algorithm.", "persona": "INTJ"}
{"realworld": "A local farmer's market has a basket filled with apples, oranges, and mangoes. The total number of apples and oranges is provided in a string format (e.g., \"5 apples and 6 oranges\"), and the total number of fruits in the basket is given as an integer. The challenge is to determine how many mangoes are in the basket by subtracting the number of apples and oranges from the total fruit count.", "identity": "A person who may encounter this real-world problem is a grocery store manager who needs to keep track of inventory. They receive shipments of mixed fruits from local farmers and must accurately count the number of each type of fruit to ensure proper stock management and avoid overstocking or running out of popular items. In this scenario, they need to calculate the number of mangoes in a shipment where the total number of apples and oranges is provided in a string format and the total fruit count is given as an integer.", "persona": "ISTJ"}
{"realworld": "Problem: \nYou are working on a gardening application that helps users manage their fruit trees. One feature of this application is to assist users in identifying the healthiest fruits on the tree for picking. For simplicity, the health of each fruit is represented by a non-negative integer value. Your task is to implement a function that takes an array representing the health values of fruits on a branch and returns the health value and index of the healthiest (smallest even-valued) fruit to pick. If there are multiple fruits with the same health value, the function should return the one with the smallest index. If there are no even health values or the branch is empty, the function should return an empty array.\n\nFunction Signature:\n```python\ndef pluck_fruit(health_values: List[int]) -> List[int]:\n    pass\n```\n\nInput:\n- `health_values`: A list of non-negative integers representing the health values of fruits on a branch. The length of the list is between 1 and 10,000.\n\nOutput:\n- Returns a list containing the smallest even health value and its index if such a value exists; otherwise, returns an empty list.\n\nExamples:\n```python\n# Example 1\npluck_fruit([4, 2, 3]) == [2, 1]\n\n# Example 2\npluck_fruit([1, 2, 3]) == [2, 1]\n\n# Example 3\npluck_fruit([]) == []\n\n# Example 4\npluck_fruit([5, 0, 3, 0, 4, 2]) == [0, 1]\n```", "identity": "A person who may encounter this real-world problem is a software developer working for a startup that specializes in agricultural technology. This developer is tasked with creating algorithms for a mobile application designed to help farmers optimize their crop management, specifically focusing on fruit trees. The application includes features like disease detection, ripeness prediction, and optimal picking times. In this context, the developer needs to implement a function that identifies the healthiest fruits based on specific criteria, such as the one described in the problem statement, to assist farmers in making informed decisions about which fruits to pick first.", "persona": "INTP"}
{"realworld": "A company is analyzing customer purchase data to identify their most loyal customers based on the frequency of purchases. They have a list of purchase amounts made by different customers. The company wants to find the highest purchase amount that was made by at least as many customers as the value of the purchase amount itself, to determine the level of loyalty among high spenders. If no such purchase amount exists, they want to return -1. For example, if the list of purchases is [4, 1, 2, 2, 3, 1], the function should return 2 because two customers spent $2 each, which meets the criteria.", "identity": "A marketing analyst at a retail company is tasked with identifying the most loyal high-spending customers. They need to analyze the purchase data to find the highest purchase amount that was made by at least as many customers as the value of the purchase amount itself, to understand the spending habits and loyalty of their high-end clientele.", "persona": "INTJ"}
{"realworld": "Problem: Implement a function `strange_sort_list` that takes a list of integers as input and returns a new list sorted in a strange order. The strange order starts with the minimum value, then the maximum of the remaining integers, then the minimum of the remaining, and so on until all elements are placed in the new list.\n\nFor example:\n- `strange_sort_list([1, 2, 3, 4])` should return `[1, 4, 2, 3]`.\n- `strange_sort_list([5, 5, 5, 5])` should return `[5, 5, 5, 5]`.\n- `strange_sort_list([])` should return `[]`.", "identity": "A data analyst working on market trend analysis might need to use this function. They could be analyzing stock prices or sales data where they need to compare extreme values (like lowest and highest) in a sequence over time, but in a format that allows for easy comparison and visualization. This unique sorting method could help them quickly identify patterns or anomalies by alternating between showing the most and least significant values.", "persona": "INTP"}
{"realworld": "Problem: Triangle Area Calculation and Validation\n\nGiven three positive integers representing the lengths of the sides of a potential triangle, write a function that calculates and returns the area of the triangle rounded to 2 decimal points if the given lengths can form a valid triangle. If the lengths cannot form a valid triangle, the function should return -1. A valid triangle is defined as one where the sum of the lengths of any two sides is greater than the length of the remaining side.\n\nExample:\n- For sides of length 3, 4, and 5, the function should return 6.00, as these lengths can form a valid triangle with an area of 6 square units.\n- For sides of length 1, 2, and 10, the function should return -1, as these lengths cannot form a valid triangle.", "identity": "Person: Alex, a high school geometry teacher, is looking for a way to engage her students with practical applications of mathematical concepts. She decides to create a programming project where students must write a function that takes three side lengths as input and determines whether they can form a valid triangle. If so, the program should calculate and display the triangle's area. This project aims to reinforce the students' understanding of triangle properties and area calculation while introducing them to basic programming skills.", "persona": "INTJ"}
{"realworld": "Problem: Designing a Drone Cargo System\n\nA company is developing a drone cargo system to deliver packages in remote areas. To ensure safe and efficient flights, they need to determine whether a package configuration will allow the drone to fly based on two conditions:\n\n1. Balance: The package configuration must be symmetrical (palindromic) to maintain stability during flight.\n2. Weight Limit: The total weight of the packages must not exceed the drone's maximum carrying capacity.\n\nGiven a list representing the weights of individual packages in the configuration (q) and the drone's maximum carrying capacity (w), create a function to determine if the drone can safely carry the configuration.\n\nFunction Signature: `def will_it_fly(q: List[int], w: int) -> bool:`\n\nExample Usage:\n- `will_it_fly([1, 2], 5)` should return `False` because although the total weight (3) is within the limit, the configuration is unbalanced.\n- `will_it_fly([3, 2, 3], 1)` should return `False` because the configuration is balanced, but the total weight (8) exceeds the limit.\n- `will_it_fly([3, 2, 3], 9)` should return `True` because the configuration is balanced, and the total weight (8) is within the limit.\n- `will_it_fly([3], 5)` should return `True` because the single package is balanced, and its weight (3) is within the limit.", "identity": "Person: Logistics Engineer at SkyCargoX\n\nDescription: Sarah is a logistics engineer working for SkyCargoX, a startup that specializes in delivering goods to remote locations using drones. Her current project involves optimizing the drone cargo system to ensure safe and efficient deliveries. Sarah needs to write a function that checks if a given package configuration meets the balance and weight criteria for the drone's flight parameters. This will help her team quickly validate configurations before loading them onto the drones for delivery missions.", "persona": "INTJ"}
{"realworld": "Problem: Palindrome Array Renovation\n\nYou've been tasked with optimizing data storage for a file management system. The system stores arrays of integers representing various data patterns. To maximize efficiency, you aim to transform these arrays into palindromic form, where the array reads the same backward as forward. Each transformation operation allows you to change any single element to any value. Your goal is to minimize the number of transformations required to achieve a palindromic array.\n\nFor instance, consider the array [1,2,3,5,4,7,9,6]. To make this array palindromic, you might need to change multiple elements. Similarly, for the array [1, 2, 3, 4, 3, 2, 2], fewer changes are needed, and for [1, 2, 3, 2, 1], no changes are necessary since it's already palindromic.\n\nYour task is to write a function `smallest_change(arr)` that takes an array of integers as input and returns the minimum number of elements that need to be changed to make the array palindromic.", "identity": "A software engineer working on optimizing data storage for a file management system encounters this real-world problem. They are responsible for enhancing the system's efficiency by transforming arrays of integers into palindromic form to save space and improve access speed. This involves writing algorithms to determine the minimum number of changes needed to convert non-palindromic arrays into palindromes, directly impacting the system's performance and resource usage.", "persona": "INTP"}
{"realworld": "Problem: Two teams of students are participating in a coding competition where they need to submit their code snippets as a list of strings. The organizing committee wants to determine which team should get extra practice time based on the total number of characters in their submitted code snippets. If one team's total number of characters is less than the other's, they will be granted extra practice time. However, if both teams have an equal number of characters in their submissions, the first team to submit their code will receive the extra practice time. Write a function `total_match` that takes two lists of strings (representing the code submissions of the two teams) and returns the list that should be granted extra practice time based on the criteria mentioned above.", "identity": "Person: Sarah is a computer science student and the captain of her coding team at university. She is preparing for an upcoming coding competition with another rival team from a neighboring university. Sarah has just heard about the rule that the team with fewer total characters in their code submissions might get extra practice time, or the first team to submit if the total character counts are equal. She wants to use this information to her advantage by writing a function that can quickly determine which team should get the extra practice time based on their submissions. This way, she can strategize better and potentially secure more preparation time for her team before the final round of the competition.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been tasked with creating a function to determine if a given number, less than 100, is the product of exactly three prime numbers. This could be useful in various applications, such as cryptography, where understanding the factors of a number is crucial. Your function should return True if the number can be expressed as the product of three primes, and False otherwise. For instance, for the input 30, the function should return True since 30 = 2 * 3 * 5, which are all prime numbers.", "identity": "Person: Alex, a software engineer working on a new encryption algorithm that relies on identifying numbers with specific prime factor properties. Alex needs to ensure that certain keys used in the encryption process meet the criteria of being the product of exactly three prime numbers to enhance the security of the system.", "persona": "INTP"}
{"realworld": "Problem: Determining if a Number is a Simple Power\n\nYou are working on a software application for a scientific research project that involves analyzing large sets of numerical data. One of the tasks requires you to determine whether a given number is a simple power of another number. This is crucial for categorizing data points based on their mathematical properties.\n\nThe function `is_simple_power(x, n)` needs to be implemented to check if the number `x` can be expressed as `n` raised to an integer power. The function should return `True` if `x` is a simple power of `n`, and `False` otherwise. This functionality will help in filtering and classifying data points efficiently during the analysis phase of the project.", "identity": "Person: Dr. Elara Stone, a Data Scientist at the Quantum Dynamics Research Institute (QDRI).\n\nDescription: Dr. Elara Stone is a seasoned data scientist with a specialization in quantum mechanics and statistical analysis. She leads a team at the Quantum Dynamics Research Institute (QDRI) that focuses on developing algorithms to process and interpret complex datasets from quantum experiments. Recently, her team has been tasked with analyzing vast amounts of data generated by particle accelerators, which involve identifying patterns and categorizing data points based on their mathematical properties. Dr. Stone's expertise in algorithm design and her experience in handling large-scale scientific data make her well-suited to tackle the challenge of determining whether numbers are simple powers of other numbers, a critical step in their data analysis pipeline.", "persona": "INTP"}
{"realworld": "Problem: Implement a function to determine if a given integer is a perfect cube.\n\nIn the real world, this function could be useful in various mathematical computations, cryptography, or data analysis where determining properties of numbers is essential. For instance, in analyzing patterns in large datasets, identifying whether certain values are perfect cubes can help in categorizing or filtering data based on specific criteria. This could be particularly relevant in fields such as statistics, physics, or computer science algorithms that require efficient number property checks.", "identity": "A data analyst working for a scientific research institute might need to use this function. They are analyzing a large dataset containing measurements from various experiments. To filter and categorize the data more efficiently, they need to identify which measurement values are perfect cubes. This will help them to separate certain types of experimental outcomes for further specialized analysis, ensuring that they can focus on specific phenomena related to cubic properties in their data.", "persona": "INTP"}
{"realworld": "Problem: Hexadecimal Prime Counter\n\nDescription: Write a function that takes a hexadecimal number as a string input and returns the count of hexadecimal digits that are also prime numbers. The prime hexadecimal digits are 2, 3, 5, 7, B (11 in decimal), and D (13 in decimal). Assume the input will always be a valid hexadecimal string with uppercase letters for A-F.\n\nExamples:\n- For input \"AB\", the output should be 1.\n- For input \"1077E\", the output should be 2.\n- For input \"ABED1A33\", the output should be 4.\n- For input \"123456789ABCDEF0\", the output should be 6.\n- For input \"2020\", the output should be 2.", "identity": "Person: Alex, a computer science student working on a cryptography project that involves manipulating hexadecimal values. Alex needs to implement a function to count the prime hexadecimal digits in various keys to ensure they meet certain security criteria. This function will help Alex quickly assess the quality of generated keys based on the presence of prime digits, which is a requirement for the encryption algorithm being used.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been tasked with creating a function that converts decimal numbers to binary format for a hardware configuration software. The function should take an integer in decimal form as input and return a string representing the binary equivalent. However, to ensure compatibility with the existing system, the returned string must have 'db' prefixed and suffixed to it. This is because the hardware expects this specific format to identify binary data. Your task is to implement this function according to the given specifications.", "identity": "Person: \nMeet Alex, a software engineer working at a tech company specializing in hardware-software integration solutions. Alex's current project involves updating the configuration software used by their clients to manage various hardware devices more efficiently. As part of this update, Alex needs to create a new feature that allows the software to communicate decimal values in binary format to the hardware, which requires a specific 'db' prefix and suffix for identification. To accomplish this, Alex must develop a function that takes decimal numbers as input and returns them in the required binary format with the 'db' markers. This will ensure seamless communication between the software and hardware components, enhancing the overall performance and reliability of the system.", "persona": "INTP"}
{"realworld": "Problem: Checking the Happiness of a Brand's Product Line\n\nA retail company wants to ensure that its product line is \"happy,\" meaning it offers a diverse range of products to keep customers engaged and satisfied. The company defines a \"happy\" product line as one where there are at least three different types of products, and no three consecutive products in the lineup belong to the same category. For instance, if the categories are clothing, electronics, and groceries, the sequence (clothing, electronics, groceries) would be considered happy, but (clothing, clothing, electronics) would not. The company needs a way to determine if their current product line meets this happiness criterion.", "identity": "Person: Retail Data Analyst\n\nDescription: A retail data analyst working for a large department store chain is tasked with analyzing the product line across various stores to ensure customer satisfaction and engagement. They need to check if each store's product arrangement meets the company's \"happiness\" criteria, which involves having a diverse range of products without any three consecutive products belonging to the same category. This analysis helps in optimizing store layouts and product assortments to enhance the shopping experience and boost sales.", "persona": "INTJ"}
{"realworld": "Problem: GPA to Letter Grade Conversion\n\nDescription: At the end of the academic semester, a teacher needs to convert a list of student GPAs into corresponding letter grades based on a specific grading scale. The grading scale is as follows:\n\n- A+ for a GPA of 4.0\n- A for a GPA greater than 3.7\n- A- for a GPA greater than 3.3\n- B+ for a GPA greater than 3.0\n- B for a GPA greater than 2.7\n- B- for a GPA greater than 2.3\n- C+ for a GPA greater than 2.0\n- C for a GPA greater than 1.7\n- C- for a GPA greater than 1.3\n- D+ for a GPA greater than 1.0\n- D for a GPA greater than 0.7\n- D- for a GPA greater than 0.0\n- E for a GPA of 0.0\n\nGiven a list of GPAs, the task is to implement a function that returns a list of letter grades according to the grading scale provided.", "identity": "Person: Mrs. Thompson, a high school math teacher, has just finished grading her students' final exams and needs to convert their semester GPAs into letter grades for the report cards. She wants to use a computer program to automate this process and ensure accuracy in the conversion. Mrs. Thompson is familiar with basic computer operations but requires a user-friendly solution that can handle a list of GPAs and output the corresponding letter grades efficiently.", "persona": "ISTJ"}
{"realworld": "Problem: Designing a Filter for Social Media Posts Based on Prime Number Lengths\n\nIn the context of social media management, there's a need to filter posts based on certain criteria to streamline content analysis and engagement. One innovative filtering method involves assessing the length of posts to determine their potential impact. Specifically, the goal is to create a tool that can identify posts whose lengths are prime numbers, as these may stand out more or have unique characteristics compared to others.\n\nFor instance, consider a social media analytics platform that wants to categorize posts for further analysis. The platform needs a function that can quickly determine whether the length of a given post is a prime number. This would help in identifying posts that might have a distinct impact due to their unusual length, potentially attracting more attention or engagement from users. By implementing such a feature, social media managers could better understand which post lengths correlate with higher engagement rates and tailor their content strategies accordingly.", "identity": "Person: Social Media Data Analyst\n\nDescription: A social media data analyst working for a digital marketing agency is tasked with optimizing client social media posts for maximum engagement. They are exploring unconventional methods to analyze post performance and believe that post lengths could be a significant factor. The analyst decides to implement a filter that categorizes posts based on whether their length is a prime number, hypothesizing that such posts might capture more attention due to their uniqueness. This approach aims to uncover patterns in engagement related to post length, helping clients craft more effective social media strategies.", "persona": "INTP"}
{"realworld": "Problem: Counting Numbers Starting or Ending with 1\n\nGiven a positive integer `n`, determine how many `n`-digit positive integers there are that either start or end with the digit `1`. This problem requires understanding the structure of numbers and applying combinatorial principles to calculate the total count efficiently.", "identity": "A high school math teacher preparing for a lesson on number theory and combinatorics might encounter this problem. They are looking for interesting examples to illustrate how to calculate the number of elements in specific subsets of large sets, such as the set of all `n`-digit numbers. This scenario challenges their understanding of positional number systems and combinatorial counting techniques, making it suitable for advanced mathematics classes.", "persona": "INTP"}
{"realworld": "Problem: Binary Digit Sum\n\nGiven a positive integer N (where 0 \u2264 N \u2264 10000), write a function that calculates the sum of its digits and returns the sum as a binary string. For example, if N is 1000, the sum of its digits is 1, and the output should be \"1\" in binary. If N is 150, the sum of its digits is 6, and the output should be \"110\" in binary. Similarly, for N = 147, the sum of its digits is 12, and the output should be \"1100\" in binary.", "identity": "Person: Sarah, a computer science student working on a digital signal processing project.\n\nDescription: Sarah is a third-year computer science student with a keen interest in algorithms and data structures. She is currently working on a project that involves processing large sets of numerical data in various formats. As part of her project, she needs to develop a function that can take a positive integer, calculate the sum of its digits, and then convert that sum into a binary string. This specific functionality will help her analyze patterns in binary representations of digit sums, which could have implications in error detection and correction algorithms for digital communications.", "persona": "INTP"}
{"realworld": "Problem: You have been tasked with creating a function for an inventory management system in a retail store. The system needs to calculate the total quantity of even-numbered products that are placed at odd-numbered shelves in a storage rack. This is necessary to optimize stock distribution and ensure efficient inventory tracking. For instance, if the list of product quantities on each shelf is [4, 2, 6, 7], the function should return 2, as the only even product at an odd shelf position is '2' (at index 1).", "identity": "Person: Sarah is a software developer working for a retail company. She is part of the team responsible for enhancing the inventory management system to improve stock distribution and tracking efficiency. Sarah has been assigned the task of writing a function that will help identify and count even-numbered products placed on odd-numbered shelves in the storage racks. This information will be crucial for the logistics team to optimize inventory placement and reduce time spent on manual checks.", "persona": "INTJ"}
{"realworld": "Problem: Sorting Characters in Words of a Sentence\n\nGiven a string containing multiple words separated by spaces, write a function that returns a new version of the string where each word's characters are sorted in ascending order based on their ASCII values. The order of words and spaces in the sentence must be preserved. For instance, if the input is \"Coding is fun\", the output should be \"Cdgino is fnu\".", "identity": "A possible person who might encounter this real-world problem is a software developer working on a text processing application. This developer needs to implement a feature that enhances readability or creates a standardized format for user inputs, such as sorting the characters within words for a unique textual analysis tool or a cryptography-related project.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been tasked with developing a system for a large retail chain to manage their inventory across multiple stores. Each store has different sections with various products, and the inventory is represented as a 2D list where each row represents a store and each element within a row represents a product's stock status. The number of sections can vary from store to store. Your task is to implement a function `get_row` that takes this inventory list and an integer `x`, representing a specific stock level, and returns the coordinates of all products with stock level `x`. The coordinates should be returned as a list of tuples, sorted first by store in ascending order and then by section within the store in descending order. This will help the inventory management team quickly locate products with specific stock levels across different stores.", "identity": "Person: \nMeet Alex, the Inventory Management Specialist at MegaMart, a nationwide retail chain with over 100 stores. Alex's job involves monitoring and managing the inventory levels of thousands of products spread across these stores. With the holiday season approaching, it's crucial to ensure that all products are well-stocked and efficiently managed. Alex has been struggling to find products with specific stock levels quickly, especially those that are running low or are overstocked. This information is essential for making timely restocking decisions and avoiding storage inefficiencies. To tackle this challenge, Alex needs a sophisticated system that can sift through the vast 2D inventory list and pinpoint products with a given stock level, presenting the results in a clear, organized manner. This will not only save time but also improve overall inventory management efficiency.", "persona": "ISTJ"}
{"realworld": "Problem: Sorting Algorithm with Conditional Order\n\nYou are tasked with creating a sorting algorithm for an array of non-negative integers. The twist is that the sorting order (ascending or descending) is determined by the sum of the first and last elements of the array. If the sum is odd, the array should be sorted in ascending order; if the sum is even, it should be sorted in descending order. Your function must not modify the original array but return a new array that is sorted according to these rules. This could be useful in scenarios where data needs to be sorted dynamically based on specific conditions, such as in database queries or data analysis tools where the sorting criteria can change based on the dataset's characteristics.", "identity": "A data analyst working on a financial report is trying to organize a list of transaction amounts. They need to sort the transactions based on a unique condition: whether the sum of the first and last transaction amounts in their list is odd or even. This will help them quickly identify patterns in spending or revenue based on the sorted order, which could vary from one report to another depending on the specific data set they are analyzing. Using the sorting algorithm with conditional order, the analyst can efficiently prepare reports with dynamic sorting without having to manually adjust the sorting criteria each time.", "persona": "INTP"}
{"realworld": "Problem: \nA local bookstore wants to secure its inventory list which is currently stored in plain text. They have decided to use a simple encryption method where each letter in the inventory item names is shifted down by four places in the alphabet. For example, \"book\" would be encrypted as \"fttw\". They need a function that can take any string (inventory item name) and return its encrypted version using this specific rotation method.", "identity": "Person: \nMeet Sarah, the manager of a small, community-oriented bookstore nestled in the heart of a bustling city. With a passion for literature and a keen eye for detail, Sarah has been running the bookstore for over five years. She's always on the lookout for ways to improve her store's operations and ensure the security of her inventory data. Recently, she learned about basic encryption methods and decided to implement a simple one to protect her inventory list, which includes titles, authors, and categories. Sarah needs a reliable function to encrypt her inventory item names by shifting each letter down by four places in the alphabet, ensuring that her bookstore's data remains confidential and secure.", "persona": "ISTJ"}
{"realworld": "A real-world problem based on this description could be: \n\nConsider a scenario where you are working as a data analyst for a retail company. The company collects sales data daily from multiple stores. Your task is to write a function that identifies the second lowest selling product from a list of products' sales volumes. This information will help the company understand which products are underperforming and might need attention or promotional strategies. If there are not enough products in the list (less than two unique sales volumes), the function should return None, indicating that it's not possible to determine the second lowest selling product.", "identity": "Person: Alex Thompson, Data Analyst at MegaMart Retail Inc.\n\nDescription: Alex is a data analyst working for MegaMart Retail Inc., a large chain of retail stores. Part of Alex's job involves analyzing sales data from various stores to identify trends and underperforming products. Recently, Alex has been tasked with writing a function that can determine the second lowest selling product across all stores based on daily sales volumes. This analysis is crucial for the company to adjust its inventory and marketing strategies effectively. If there aren't enough products with distinct sales volumes to determine the second lowest seller, Alex's function should return None to indicate this situation. With this tool, Alex aims to provide valuable insights to the management team, helping them make informed decisions about product placement, promotions, and stock levels.", "persona": "INTP"}
{"realworld": "Problem: Counting Boredom Sentences in Text\n\nGiven a string of text containing multiple sentences, you need to implement a function `is_bored(text)` that counts the number of sentences starting with the word \"I\". Sentences are considered to be delimited by '.', '?' or '!'. This can be particularly useful in analyzing personal diaries, social media posts, or any text data where first-person narratives are common, to gauge the frequency of personal reflections or complaints which might indicate boredom or introspection.", "identity": "A high school English teacher is developing a tool to analyze student essays for self-reflective writing. They want to use the `is_bored` function to identify essays where students might be excessively focusing on personal experiences or feelings, potentially indicating a lack of engagement with the assigned topics. This could help them provide targeted feedback to encourage more diverse and engaging writing styles.", "persona": "ENFJ"}
{"realworld": "Problem: \nYou have been tasked with creating a system for a local charity organization that organizes a donation drive. The system should verify if the total number of donated items matches the sum of two separate counts made by different volunteers. However, it's crucial that all counts are exact integer values and not approximate measurements. For instance, if one volunteer counts 5 items, another counts 2 items, and the final count is 7 items, the system should confirm that these counts are consistent. On the other hand, if the counts are 3, 2, and 2 (which does not add up correctly), or if any of the counts include decimal points (indicating an estimation rather than an exact count), the system should flag this as inconsistent. Your task is to implement a function that can accurately determine if the total count matches the sum of the two individual counts and that all counts are precise integer values.", "identity": "Person: Sarah, a software developer volunteering for a local charity organization, is responsible for creating a new inventory management system. She has been asked specifically to design a feature that ensures the accuracy of item counts during donation drives. This feature is critical for maintaining transparency and trust with donors and ensuring that all items are properly accounted for. Sarah must consider edge cases such as incorrect counts or non-integer values that could indicate estimation errors or miscounts. Her solution needs to be robust and reliable to support the charity's operations effectively.", "persona": "INTJ"}
{"realworld": "Problem: You need to write a function called `encode` that takes a string message as input and returns an encoded version of the message. The encoding rules are as follows:\n1. Swap the case of all letters in the message (lowercase becomes uppercase and vice versa).\n2. Replace all vowels in the message with the letter that appears two places ahead of that vowel in the English alphabet. For example, 'a' should be replaced with 'c', 'e' with 'g', 'i' with 'k', 'o' with 'q', and 'u' with 'w'. Note that the input will only contain letters.\nFor instance:\n- If the input is 'test', the output should be 'TGST'.\n- If the input is 'This is a message', the output should be 'tHKS KS C MGSSCGG'.", "identity": "Person: Alex, a software developer working on a secure messaging application for a startup company. Alex needs to implement an additional layer of encryption for user messages to ensure privacy and security. He comes across the `encode` function requirements and decides to integrate it into the messaging app's encryption module. This will help obfuscate messages before they are sent over the network, making it harder for potential eavesdroppers to decipher the content.", "persona": "INTP"}
{"realworld": "Problem: \nGiven a list of integers, write a function that finds the largest prime number in the list and returns the sum of its digits. If there are no prime numbers in the list, the function should return 0.\n\nExample:\nFor the input list [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3], the largest prime number is 181, and the sum of its digits (1+8+1) is 10. Therefore, the function should return 10. \n\nNote: The input list can contain any integer, including negative numbers and zeros. The function should handle these cases appropriately.", "identity": "Person: \nMeet Alex, a software developer working for a data analysis company. Alex's job involves processing large datasets containing various types of information, including numerical data. Recently, his team has been tasked with analyzing a dataset that contains a mix of positive, negative, and zero integers. Their goal is to extract meaningful insights from the data by identifying patterns and trends.\n\nAs part of their analysis, Alex needs to write a function that can find the largest prime number in the dataset and calculate the sum of its digits. This will help them understand if there are any significant prime numbers in the dataset and potentially uncover interesting relationships between the numbers. Since the dataset can be quite large, Alex needs an efficient solution that can handle different types of integers, including negative numbers and zeros.\nAlex has some experience with programming but is not an expert in number theory or algorithm optimization. He relies on clear and well-documented code examples to guide him in solving complex problems like this one. By finding the largest prime number and calculating the sum of its digits, Alex hopes to contribute valuable insights to the team's analysis and showcase his skills as a developer.", "persona": "INTP"}
{"realworld": "Problem: Inconsistent Key Case in Dictionary\n\nDescription: A software application receives a dictionary containing various data fields as input. To ensure consistent data processing and to avoid potential errors caused by case-sensitive mismatches, the application needs to validate whether all dictionary keys are uniformly in either lower case or upper case. However, the application must also handle cases where the dictionary might contain non-string keys or be empty. If the dictionary has mixed case keys, contains non-string keys, or is empty, the validation should fail, leading to an error or a request for corrected input. This validation is crucial for maintaining data integrity and preventing runtime errors in the application's workflow.", "identity": "Person: Sarah is a quality assurance engineer working on a financial reporting software. She is responsible for testing the input validation features of the application. One critical aspect she needs to ensure is that the application can correctly process dictionaries with uniform key cases (either all lower case or all upper case) while handling edge cases like non-string keys or empty dictionaries. This validation is essential for the software to function reliably, especially when dealing with sensitive financial data from various sources. Sarah uses test cases to simulate different scenarios, including those with inconsistent key cases, to confirm the application's robustness and accuracy in data processing.", "persona": "ISTJ"}
{"realworld": "Problem: Prime Number Finder\n\nYou have been tasked with developing a software feature for an educational math application that helps students learn about prime numbers. The feature should include a function that takes a non-negative integer input, `n`, and returns an array of all prime numbers less than `n`. This will allow students to easily explore and understand prime numbers within any given range.\n\nFor instance, if a student inputs `5`, the function should return `[2, 3]`, as these are the prime numbers less than `5`. Similarly, for an input of `11`, the function should return `[2, 3, 5, 7]`.\n\nThis feature will not only assist in teaching prime numbers but also help students verify their calculations and deepen their understanding of number theory concepts.", "identity": "Person: Math Teacher\n\nDescription: Ms. Garcia is a dedicated middle school math teacher looking to enhance her students' learning experience by integrating interactive tools into her lessons. She often covers topics such as number theory, including prime numbers, and believes that practical applications can significantly improve comprehension. To make her classroom more engaging, she collaborates with educational software developers to incorporate features like the prime number finder into the math application used by her students. This allows her to create dynamic activities and quizzes that reinforce the concepts taught in class. Ms. Garcia's goal is to ensure that her students not only memorize facts but also develop a deep understanding of mathematical principles.", "persona": "INTJ"}
{"realworld": "Problem: Implement a function to calculate the product of the unit digits of two given integers. The function should work for both positive and negative numbers. For example, if the function is given the numbers 148 and 412, it should return 16 (since 8 * 2 = 16). If given 19 and 28, it should return 72 (since 9 * 8 = 72). If given 2020 and 1851, it should return 0 (since 0 * 1 = 0). If given 14 and -15, it should return 20 (since 4 * 5 = 20).", "identity": "Person: Mathew is a high school math teacher who is creating a series of exercises for his students to practice their arithmetic skills. He wants to include problems that involve multiplying the unit digits of two integers, as he has noticed this can be a challenging concept for some students. To make the exercise more comprehensive, Mathew decides to write a Python function that calculates the product of the unit digits for any pair of integers, including negative numbers. This will allow him to generate a variety of problems for his students to solve.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been tasked with creating a function that analyzes a given string to determine how many uppercase vowels are located at even indices. This could be useful in various applications such as text analysis, password strength checking, or data validation in forms where specific patterns of characters are required.\n\nFor instance, in a password policy, you might want to enforce a rule that requires at least one uppercase vowel at an even position to increase complexity. Your function will help implement this rule by counting the number of uppercase vowels ('A', 'E', 'I', 'O', 'U') that appear at even indices (0, 2, 4, ...) in the input string.", "identity": "Person: \nAlex is a software engineer working for a cybersecurity firm that specializes in developing secure authentication systems. As part of their latest project, Alex is responsible for enhancing the password strength checker used by their clients' web applications. The goal is to introduce a new complexity requirement: at least one uppercase vowel must be present at an even index within the password. To achieve this, Alex needs to create a function that accurately counts the number of uppercase vowels at even positions in any given password string. This will ensure that passwords meet the new complexity criteria, thereby increasing security against brute-force and dictionary attacks.", "persona": "INTP"}
{"realworld": "Problem: Implementing a Rounding Function for Financial Calculations\n\nA financial software company needs to implement a rounding function for their accounting system. The function should take a monetary value as input, represented as a string, and return the closest integer to that value. However, due to specific financial regulations, if the value is exactly halfway between two integers, it must be rounded away from zero. This ensures consistency in financial reporting and avoids discrepancies in large datasets. For instance, a transaction amount of \"14.5\" should be rounded to 15, while \"-14.5\" should be rounded to -15. This rounding rule is crucial for maintaining accurate financial records and ensuring compliance with accounting standards.", "identity": "Person: Sarah, Financial Software Developer\n\nSarah is a software developer working at a financial technology company. Her team is responsible for building and maintaining a robust accounting system used by various financial institutions for managing transactions, balances, and reports. Recently, they have encountered issues with rounding errors in their calculations, leading to discrepancies in financial reports. To address this, Sarah has been tasked with implementing a custom rounding function that adheres to the specific rounding rules required by financial regulations. She needs to ensure that the function accurately rounds monetary values represented as strings to the nearest integer, rounding away from zero when the value is exactly halfway between two integers. This will help maintain the accuracy and integrity of financial data processed by their software.", "persona": "INTJ"}
{"realworld": "A landscaper is designing a decorative stone pile for a garden. The pile will have a specified number of levels, and the landscaper wants to ensure that the pile is visually appealing by following a specific pattern. The first level of the pile will have a certain number of stones based on the total number of levels. For each subsequent level, the number of stones will either be the next odd or even number depending on whether the initial number of stones was odd or even. The landscaper needs an algorithm to calculate the number of stones required for each level to create the pile according to this pattern.", "identity": "Person: Alex Thompson, a professional landscaper with a small business specializing in garden design and maintenance. Alex has been contracted by a client to create a unique stone pile feature in their garden, which should follow a specific mathematical pattern to enhance its visual appeal. To ensure accuracy and efficiency, Alex needs to develop or use an algorithm that calculates the number of stones required for each level of the pile based on the total number of levels and the starting condition of being odd or even. This will help Alex to plan the project, estimate costs, and order the necessary materials in advance.", "persona": "INTJ"}
{"realworld": "Problem: \nGiven a string of words that are separated by commas or spaces, write a function to split the string into individual words and return them as a list. The function should handle both commas and spaces as separators and ensure that the words are cleanly extracted without any trailing punctuation or whitespace. This is a common task when processing text data, such as parsing user input, cleaning up log files, or analyzing survey responses.", "identity": "Person: Sarah, a data analyst at a market research firm, frequently receives large volumes of unstructured text data from customer feedback surveys. She needs to process this data to extract meaningful insights for her team and clients. One common task is to split the feedback into individual words for sentiment analysis and word frequency counts. Since the feedback can be separated by either commas or spaces, Sarah requires a robust function that can handle both types of delimiters and ensure that the words are cleanly extracted without any trailing punctuation or whitespace. This will help her streamline the data preprocessing phase and improve the accuracy of her analyses.", "persona": "INTJ"}
{"realworld": "Problem: Developing an Algorithm for Smart Thermostat Scheduling\n\nA smart home system allows users to set temperature preferences for different times of the day. The system needs an algorithm to determine the latest time within a specified range when the temperature can be adjusted to an even number (in degrees Celsius) without violating user-set constraints. If no suitable time exists, the system should indicate an error.\n\nFor instance:\n- If a user wants the temperature to be adjusted to an even number between 6:00 AM and 9:00 AM, and the latest suitable time is 8:00 AM, the system should schedule the adjustment for 8:00 AM.\n- If the user's constraints do not allow any even-numbered temperature adjustments within the given time frame, the system should display an error message.", "identity": "Person: Sarah, a busy working mother, uses a smart thermostat in her home to maintain optimal comfort levels while conserving energy. She prefers to set the temperature to even numbers for easy recall and consistency. Sarah needs an efficient algorithm to ensure that her smart thermostat can automatically adjust to an even temperature within her preferred schedule without her constant supervision. This will help her save time and energy while keeping her home at the desired comfort level.", "persona": "INTJ"}
{"realworld": "A tech company needs to calculate the average employee age for each department in their office, then convert this average to binary format for a unique data encryption method. Given the start and end range of ages within a department, write a function to calculate the rounded average age in binary format. However, if the provided range is invalid (start age is greater than the end age), the function should return -1. For instance, for an age range of 1 to 5, the function should return \"0b11\"; for an invalid range like 7 to 5, it should return -1; for a range of 10 to 20, the result should be \"0b1111\"; and for 20 to 33, it should be \"0b11010\".", "identity": "A data analyst working at a tech company is tasked with processing employee data for a new encryption project. They need to write a script that takes the minimum and maximum age ranges for each department, calculates the average age, rounds it, and then converts this number into binary format for use in the company's innovative data encryption techniques. This task requires handling edge cases, such as invalid age ranges, and ensuring the output is formatted correctly for integration into the encryption system.", "persona": "INTP"}
{"realworld": "A company is developing a system to manage product codes for their inventory. They want to implement a feature that filters and sorts product codes based on a specific criterion. The problem is to design a function that takes a list of product codes (positive integers) and returns a sorted list of codes that do not contain any even digits. This will help the company to categorize products that have \"unique\" codes for special promotions or quality control purposes.", "identity": "A warehouse manager at a large retail company is tasked with organizing an upcoming promotional event. They need to identify and sort products that have \"unique\" codes, defined as product codes that do not contain any even digits, to ensure these items are highlighted in the store and online platforms. The manager must work with the IT department to develop a custom filtering and sorting algorithm for the inventory management system to streamline this process.", "persona": "INTJ"}
{"realworld": "Problem: Sorting, Reversing, and Converting Numbers to Words\n\nYou are tasked with writing a function for a digital educational platform aimed at teaching young children basic number recognition and names. The function should take an array of integers as input. From this array, it should select only the integers between 1 and 9 (inclusive), sort these numbers in ascending order, reverse the sorted list, and finally convert each number into its corresponding English word representation (\"One\", \"Two\", ..., \"Nine\"). The function should ignore any numbers outside the 1-9 range or non-integer values. This tool will be used in interactive games where children match numbers with their names, helping them learn number names in a fun and engaging way.", "identity": "Person: Sarah, a 3rd-grade elementary school teacher, is looking for interactive and engaging ways to teach her students about basic number recognition and names. She often uses digital educational platforms to supplement her lessons and make learning more fun. Sarah needs a function that can sort, reverse, and convert numbers to words for an upcoming game she plans to use in class, which focuses on matching numbers with their English word representations. This game is designed to help her students improve their numeracy skills and vocabulary simultaneously.", "persona": "ESFJ"}
{"realworld": "Problem: Design an algorithm for a financial analysis software that, given a positive integer n representing the number of days, generates a list of daily financial metrics. For each day i (starting from 1), if i is even, the metric should be the total possible investment combinations (modeled as the factorial of i). If i is odd, the metric should be the cumulative revenue from all previous days plus the revenue of day i (modeled as the sum of numbers from 1 to i). The software needs to efficiently compute this list to provide insights into investment opportunities and revenue growth trends over the specified period.", "identity": "Person: Alex, a financial analyst at a boutique investment firm, is tasked with creating a new tool for their clients. This tool aims to help investors understand the potential growth in investment combinations on even days and cumulative revenue on odd days over a specified period. By analyzing these metrics, clients can make informed decisions about when to increase or decrease their investments based on predicted market trends and potential returns. Alex needs to design an efficient algorithm to compute these metrics for any given number of days, ensuring the tool can handle large datasets quickly and accurately.", "persona": "INTJ"}
{"realworld": "Problem: Counting Even and Odd Palindromic Numbers\n\nDescription: Given a positive integer n, the task is to find and return the count of even and odd integer palindromes that fall within the range from 1 to n, inclusive. An integer palindrome is a number that reads the same backward as forward. The function should return a tuple where the first element represents the count of even palindromes and the second element represents the count of odd palindromes. \n\nExample:\n- For input n = 3, the output should be (1, 2) since there is 1 even palindrome (2) and 2 odd palindromes (1, 3) in the range [1, 3].\n- For input n = 12, the output should be (4, 6) since there are 4 even palindromes (2, 4, 6, 8) and 6 odd palindromes (1, 3, 5, 7, 9, 11) in the range [1, 12].\n\nConstraints:\n- 1 <= n <= 10^3", "identity": "Person: Math Teacher\n\nDescription: A high school math teacher who is preparing a lesson on number theory and patterns in numbers. They want to create an engaging activity for their students that involves identifying and counting even and odd palindromic numbers up to a certain limit. This could serve as an interactive way to reinforce concepts of symmetry, divisibility, and number properties while also introducing students to programming challenges that involve loops, conditionals, and string manipulation. The teacher plans to use this activity to assess students' understanding of these mathematical concepts and their ability to apply logical reasoning in a computational context.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been tasked with creating a program to help financial analysts quickly determine how many transactions in a given dataset are considered profitable. Each transaction is represented as an integer value in an array, where positive values indicate gains and negative values indicate losses. The program should count how many transactions have a sum of digits greater than zero, indicating overall profitability, considering the sign of the first digit for negative numbers. For example, a transaction of -123 would be considered as having digits of -1, 2, and 3.", "identity": "Person: \nMeet Alex, a junior data analyst at a boutique investment firm. Alex's role involves analyzing large datasets containing details of various financial transactions made by the firm. One of his key responsibilities is to identify trends in profitability across different types of investments. With a growing volume of transactions, manually reviewing each one has become impractical. Alex needs an efficient solution to filter and count only those transactions that show an overall profit based on the sum of their digits. This will not only save time but also provide valuable insights into which types of investments are performing well.", "persona": "INTP"}
{"realworld": "Problem: Rotating Museum Exhibit\n\nA museum has a circular exhibit featuring unique artifacts arranged in a specific order. The museum staff wants to ensure that the artifacts are displayed in a historical timeline (non-decreasing order) for visitors to easily follow. However, due to space constraints and the circular nature of the exhibit, they can only rotate the entire exhibit clockwise as many times as needed without rearranging individual artifacts. Determine if it's possible to achieve the correct historical timeline by rotating the exhibit. If the exhibit can be correctly arranged through rotations, return True; otherwise, return False. Assume there are no duplicate artifacts.", "identity": "Person: Museum Curator\n\nDescription: A museum curator is responsible for organizing exhibits and ensuring they are educational and engaging for visitors. In this scenario, the curator must deal with a circular exhibit that needs to be arranged in chronological order without the ability to physically move individual artifacts. Their task is to determine if the correct historical sequence can be achieved by rotating the entire exhibit clockwise. This problem requires logical thinking and an understanding of how to manipulate sequences within given constraints.", "persona": "INTJ"}
{"realworld": "A company is organizing a team-building event where they have two groups of employees, Group A and Group B. The company wants to ensure that Group A is composed entirely of individuals who can participate in an activity that requires even-numbered teams for logistical reasons. The company can transfer any number of individuals between the two groups. Determine if it's possible to rearrange the groups so that Group A consists only of individuals who can participate in the even-numbered activity by exchanging members with Group B.", "identity": "Person: Sarah, the HR Manager at a tech company, is tasked with organizing a team-building event. She needs to ensure that one of the groups, Group A, is composed entirely of participants who can form teams with an even number of people for a specific activity. Sarah must determine if it's feasible to swap members between Group A and Group B to achieve this goal without excluding anyone from participating in the event.", "persona": "INTJ"}
{"realworld": "A company is collecting data on customer preferences for different flavors of a new snack product. The data is collected in the form of a text file where each line represents a customer's preference for one or more flavors, separated by spaces. The flavors are represented by lowercase letters (e.g., \"a\" for apple, \"b\" for banana). The company wants to analyze this data to determine which flavor(s) are the most popular among customers. Specifically, they need to know the frequency of the most repeated flavor(s) in the dataset to guide their production planning. Write a function that takes the text data as input and returns a dictionary where the keys are the most frequently occurring flavor(s) and the values are the counts of those flavors. If multiple flavors have the same highest frequency, the dictionary should include all of them.", "identity": "A market analyst working for a food product company who is responsible for analyzing customer preference data to inform production planning and marketing strategies. This person would need to process large datasets containing customer flavor preferences to identify trends and make decisions about which products to produce more of based on popularity.", "persona": "INTP"}
{"realworld": "Problem: \nYou work for a software company that deals with text processing algorithms. Your team has been tasked with creating a function that takes in two strings, `s` and `c`, and performs the following operations:\n\n1. Delete all characters in `s` that are present in `c`.\n2. Check if the resulting string is a palindrome (reads the same backward as forward).\n3. Return a tuple containing the resulting string and a boolean value indicating whether it is a palindrome.\n\nFor example:\n- If `s = \"abcde\"` and `c = \"ae\"`, the function should return `('bcd', False)`.\n- If `s = \"abcdef\"` and `c = \"b\"`, the function should return `('acdef', False)`.\n- If `s = \"abcdedcba\"` and `c = \"ab\"`, the function should return `('cdedc', True)`.\n\nYour task is to implement this function efficiently and accurately.", "identity": "Person: \nAlex is a software engineer at a tech company specializing in natural language processing. His team is developing a new feature for their text analysis software that requires filtering out certain characters from a string and then checking if the remaining string is a palindrome. This feature will be used by linguists and data analysts to quickly analyze and categorize large sets of text data based on specific character criteria and palindromic properties. Alex needs to write an efficient function to meet these requirements.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been tasked with creating a system that analyzes phone numbers to determine how many odd digits they contain. The system should take a list of phone numbers, each represented as a string of digits, and return a new list. Each element in the output list should describe the number of odd digits in the corresponding phone number from the input list, using a specific format: \"the number of odd elements Xn the strXng X of the Xnput.\", where X is the count of odd digits in that phone number. For example, if given the list ['1234567'], the system should return [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], since there are four odd digits ('1', '3', '5', '7') in the phone number '1234567'.", "identity": "Person: \nMeet Alex, a software developer working for a telecommunications company. Alex's team is responsible for enhancing the company's customer data analysis tools. Recently, the company has decided to implement a feature that allows them to analyze patterns in phone numbers, particularly focusing on the distribution of odd and even digits. This information could potentially help in identifying trends or anomalies in phone number usage across different regions. Alex has been assigned the task of creating a system that can process a large list of phone numbers and determine how many odd digits each contains, following a specific output format. This will be integrated into the company's broader data analytics platform.", "persona": "INTJ"}
{"realworld": "A financial analyst is reviewing the stock price fluctuations of a company over a series of days. The analyst wants to determine the minimum total value of the stock over any continuous period to assess the worst-case scenario for investment. Given an array of daily stock prices (positive or negative values representing increases or decreases), find the minimum sum of prices over any non-empty continuous period. This will help the analyst understand the potential risks associated with investing in the company's stock.", "identity": "Person: Sarah, a 32-year-old financial analyst working at a reputable investment firm in New York City. She specializes in risk assessment and portfolio optimization for corporate clients. Sarah often uses statistical analysis and market trends to advise on investments. In her current project, she is evaluating the stock of a tech startup that recently went public, aiming to provide her client with a comprehensive risk profile before they decide to invest. To do this, she needs to calculate the minimum total value of the stock over any continuous period to identify the lowest point in value, which could indicate significant financial risk.", "persona": "INTJ"}
{"realworld": "A small village relies on a series of wells for their water supply. The wells are arranged in a rectangular grid, and each well may contain a certain amount of water, represented by ones in a grid where zeros indicate no water. The village has a set of identical buckets with the same capacity to draw water from the wells. The goal is to determine the minimum number of bucket drops required to empty all the wells. Each well must be emptied to prevent overflow during the rainy season. Given the grid representing the wells and their water content, along with the capacity of the buckets, calculate the total number of bucket drops needed to empty all the wells.", "identity": "A local village elder responsible for managing the community's water resources would encounter this real-world problem. They need to ensure that all the wells are emptied before the rainy season to prevent overflow and potential contamination of the water supply. With limited resources and a fixed number of buckets, they must efficiently plan the number of trips required to empty all the wells.", "persona": "ISTJ"}
{"realworld": "Problem: Binary Ones Sorter\n\nGiven a list of non-negative integers, write a function that sorts the list in ascending order based on the number of ones in their binary representation. If two numbers have the same number of ones in their binary representation, then they should be sorted by their decimal value. The function should handle negative numbers by sorting them in ascending order without considering their binary representation.", "identity": "Person: Software Engineer at a Cryptography Firm\n\nDescription: Alex is a software engineer working for a cryptography firm. They are developing a new encryption algorithm that requires sorting a list of integers based on the number of ones in their binary representation for optimizing the encryption process. Alex needs to implement a function that can sort the list efficiently while also handling negative numbers separately. This will help in improving the overall performance of the encryption algorithm and ensure that it can handle large datasets with ease.", "persona": "INTP"}
{"realworld": "Problem: Implement a function `select_words` that takes a string `s` and a natural number `n` as input and returns a list of words from the string `s` that contain exactly `n` consonants, maintaining their order of appearance in `s`. The function should handle cases where the input string is empty by returning an empty list. Assume the input string contains only letters and spaces. For example, given the string \"Mary had a little lamb\" and `n=4`, the function should return [\"little\"].", "identity": "A possible person who might encounter this real-world problem could be a software developer working on a text analysis tool for educational purposes. This tool aims to assist language learners in practicing vocabulary based on specific criteria, such as the number of consonants in a word. The developer needs to implement a feature that filters words from sentences according to the user's specified number of consonants, helping students focus on particular aspects of English grammar and pronunciation.", "persona": "INTP"}
{"realworld": "Problem: Implement a function `get_closest_vowel(word)` that takes a string `word` as input and returns the closest vowel that stands between two consonants from the right side of the word, excluding vowels at the beginning and end of the word. The function should be case-sensitive and assume that the input string contains only English letters. If no such vowel exists, return an empty string. For example:\n- `get_closest_vowel(\"yogurt\")` should return `\"u\"`.\n- `get_closest_vowel(\"FULL\")` should return `\"U\"`.\n- `get_closest_vowel(\"quick\")` should return `\"\"`.\n- `get_closest_vowel(\"ab\")` should return `\"\"`.", "identity": "A possible person who might encounter this real-world problem is a software developer working on a text analysis tool for linguistics research. This developer needs to implement various string manipulation functions to extract specific patterns from words in different languages, focusing on the positions of vowels and consonants to study phonetic structures or linguistic rules. The function `get_closest_vowel` could be a part of a larger algorithm analyzing the phonetics of English words.", "persona": "INTP"}
{"realworld": "Problem: \nYou are tasked with creating a function `match_parens` that takes a list of two strings as input. Each string consists solely of opening '(' or closing ')' parentheses. The goal is to determine whether it is possible to concatenate these two strings in any order to form a balanced parentheses string. A balanced parentheses string has matching pairs of parentheses that are properly nested. If such an arrangement is possible, the function should return 'Yes'; otherwise, it should return 'No'. For instance, given the input ['()(', ')'], the function should return 'Yes', as concatenating the strings in their original order results in a balanced parentheses string. However, for the input [')', ')'], the function should return 'No', as no arrangement of the strings can result in a balanced parentheses string.", "identity": "A software developer working on a text editor feature that automatically checks and balances parentheses in code snippets. They need to implement a function to help users quickly identify if two separate lines of code containing only parentheses can be combined to form a valid expression, improving code readability and debugging efficiency.", "persona": "INTP"}
{"realworld": "A company is running a promotion where they want to reward their top-performing employees based on their sales figures. They have a list of sales figures for all employees, and they want to select the top k employees with the highest sales figures to reward them with bonuses. However, the company wants to maintain fairness by ensuring that the selected employees' sales figures are as close to each other as possible to avoid significant disparities in rewards. Your task is to write a function that takes the list of sales figures and the number of employees (k) to be rewarded and returns a sorted list of the sales figures of the top k employees. This will help the company identify and reward the most successful employees while maintaining a level of fairness in the distribution of bonuses.", "identity": "The person who may encounter this real-world problem is a Human Resources (HR) Manager at a sales-driven company. This HR Manager is responsible for implementing fair and motivating compensation strategies for the company's employees. In an effort to boost morale and productivity, they decide to run a promotion rewarding the top-performing salespeople. To ensure the rewards are distributed fairly among these high achievers, they need a method to select the top k employees with the most similar sales figures. This ensures that the bonuses given out do not create significant disparities, maintaining a sense of fairness and camaraderie within the team.", "persona": "ENFJ"}
{"realworld": "Problem: You have been tasked with analyzing a list of daily sales figures for a retail store. The store owner wants to know the total amount of sales made by female employees on days when the store had an even number of customers. However, there's a twist: you should only consider the sales made in odd-numbered hours (e.g., 1 PM, 3 PM, 5 PM, etc.). Your task is to write a function that takes a list of sales figures and returns the total sales made under these conditions. Note that the list may contain sales from both male and female employees, and you must filter out the sales made by female employees on days with an even number of customers during odd-numbered hours.", "identity": "Person: Sarah is a data analyst working for a retail store. She has been assigned the task of analyzing the sales figures to find patterns and insights that can help improve the store's performance. Sarah is proficient in programming and has experience in data analysis, but she needs to write a specific function to address this unique requirement. She understands the importance of filtering the data based on gender, customer count, and time of day to provide accurate results to the store owner.", "persona": "INTP"}
{"realworld": "A company is running an online promotion where they offer discounts to their customers based on the sum of certain product codes. The product codes are represented as a list of integers, and the company wants to calculate the sum of the product codes with at most two digits from the first k products to determine the discount for a customer. Given a list of product codes 'arr' and an integer 'k', write a function that returns the sum of the product codes with at most two digits from the first k products. For example, if the product codes are [111,21,3,4000,5,6,7,8,9] and k is 4, the function should return 24 (which is the sum of 21 and 3). Note that the length of the list 'arr' will be between 1 and 100, and 'k' will be between 1 and the length of 'arr'.", "identity": "A marketing analyst at an e-commerce company is tasked with implementing an online promotion strategy. They need to create a function that calculates discounts for customers based on the sum of selected product codes. Specifically, they must focus on product codes with at most two digits from the first k products in a given list. This task requires filtering through a list of product codes, identifying those with two digits or less, summing them up, and ensuring the process is efficient for a list size ranging from 1 to 100 items.", "persona": "INTP"}
{"realworld": "Problem: Odd Numbers in the Collatz Sequence\n\nGiven a positive integer n, the task is to write a function `get_odd_collatz(n)` that generates the Collatz sequence starting from n and returns a sorted list containing only the odd numbers found in this sequence. The Collatz sequence is generated by repeatedly applying the following rules until reaching 1: if the current number is even, divide it by 2; if it's odd, multiply it by 3 and add 1. According to the Collatz conjecture, regardless of the starting number n, the sequence will always eventually reach 1. For instance, if n = 5, the Collatz sequence is [5, 16, 8, 4, 2, 1], and the function should return [1, 5] as these are the odd numbers in the sequence.", "identity": "Person: Math Enthusiast and Programmer\n\nDescription: Alex is a math enthusiast who also enjoys programming challenges. They recently came across the Collatz conjecture and became fascinated by its simplicity and yet unproven nature. As part of their exploration, Alex decided to write a program that generates the Collatz sequence for any given positive integer and extracts the odd numbers from it. This not only helps them understand the properties of the sequence but also serves as a fun coding exercise. Alex plans to share their code with a local high school math club to inspire young students interested in mathematics and computer science.", "persona": "INTP"}
{"realworld": "Problem: Implement a function `valid_date(date)` that checks whether a given date string is valid based on specific criteria. The function should return `True` if the date is valid and `False` otherwise. A date is considered valid if it meets the following conditions:\n\n1. The date string is not empty.\n2. The number of days is within the valid range for the respective month:\n   - For January (01), March (03), May (05), July (07), August (08), October (10), December (12): between 1 and 31 days.\n   - For April (04), June (06), September (09), November (11): between 1 and 30 days.\n   - For February (02): between 1 and 29 days.\n3. The month is between 1 and 12.\n4. The date is formatted as \"mm-dd-yyyy\".\n\nExamples:\n- `valid_date('03-11-2000')` should return `True`.\n- `valid_date('15-01-2012')` should return `False` because the month is greater than 12.\n- `valid_date('04-0-2040')` should return `False` because the day is not within the valid range.\n- `valid_date('06-04-2020')` should return `True`.\n- `valid_date('06/04/2020')` should return `False` because the date format is incorrect.", "identity": "Person: Event Coordinator\n\nDescription: Sarah is an event coordinator who frequently schedules events for her clients. She often needs to validate dates provided by clients to ensure they are in the correct format and fall within valid ranges, especially when creating invitations or setting up online registration forms. Using the `valid_date(date)` function would help her quickly check the validity of the dates without having to manually verify each one, saving her time and reducing errors.", "persona": "ESFJ"}
{"realworld": "Problem: Implement a function `split_words(txt)` that takes a string `txt` as input and returns a list of words based on specific splitting rules. If the string contains whitespace, it should be used to split the words. If no whitespace is present but commas are found, the string should be split at commas. In cases where neither whitespace nor commas are present, the function should instead return the count of lowercase letters with odd positions in the alphabet (considering 'a' as position 0, 'b' as 1, ..., 'z' as 25). For example:\n- `split_words(\"Hello world!\")` should return `[\"Hello\", \"world!\"]`.\n- `split_words(\"Hello,world!\")` should return `[\"Hello\", \"world!\"]`.\n- `split_words(\"abcdef\")` should return `3`, since there are three lowercase letters ('b', 'd', 'f') with odd positions in the alphabet.", "identity": "A potential user of the `split_words(txt)` function could be a data analyst working on text processing tasks. This analyst might be dealing with a dataset containing mixed types of product descriptions where some entries have spaces, others use commas to separate words, and some are simply strings without clear delimiters. The function would help them standardize the data by consistently splitting the descriptions into words or counting specific characters when standard delimiters are not present, aiding in further analysis or categorization of the products.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been assigned to develop a system for an inventory management software used in a retail store. The system needs to check if the product IDs in the inventory list are sorted in ascending order to ensure data integrity. However, there's an additional requirement: if any product ID appears more than once in the list, the system should flag it as an error, except for cases where there are exactly two duplicates, which is considered acceptable due to a known quirk in the data entry process. Your task is to implement a function that verifies if the product IDs are sorted in ascending order and meets the criteria for duplicates. \n\nFunction Signature:\n```python\ndef is_sorted_with_limit_duplicates(lst: List[int]) -> bool:\n    pass\n```\n\nInput:\n- A list of integers `lst` (1 <= len(lst) <= 10^5), representing the product IDs. Each integer in the list represents a unique product ID, and all integers are positive.\n\nOutput:\n- A boolean value indicating whether the product IDs are sorted in ascending order and meet the criteria for duplicates.\n\nExamples:\n```python\nis_sorted_with_limit_duplicates([1001]) \u279e True\nis_sorted_with_limit_duplicates([1001, 1002, 1003, 1004, 1005]) \u279e True\nis_sorted_with_limit_duplicates([1001, 1003, 1002, 1004, 1005]) \u279e False\nis_sorted_with_limit_duplicates([1001, 1002, 1002, 1003, 1004]) \u279e True\nis_sorted_with_limit_duplicates([1001, 1002, 1002, 1002, 1003, 1004]) \u279e False\n```", "identity": "Person: \nMeet Alex, a software developer working for a retail technology company. Alex has been tasked with enhancing the inventory management system for one of their major clients, a large retail chain. The client recently encountered issues with data integrity in their product database, specifically related to product IDs not being sorted correctly or having too many duplicate entries. This led to errors in stock counts and misplaced items. To address this, Alex needs to create a function that will automatically verify the integrity of the product ID lists, ensuring they are sorted in ascending order and adhere to the specific rules regarding duplicate entries. This solution will help prevent future data integrity issues and streamline the inventory management process for the retail chain.", "persona": "INTJ"}
{"realworld": "Problem: \nYou are tasked with creating a scheduling system for a shared conference room in an office building. The system needs to determine if there is a conflict-free time slot available for two meeting requests. Each meeting request is represented as a time interval with a start and end time. Your function should determine if the intersection of these two intervals results in a time slot whose duration is a prime number. This will be used to implement a feature where meetings can only be scheduled back-to-back if the overlap is a prime number of minutes, as a security measure to prevent accidental overlaps that are too long. If the intersection's length is a prime number, the function should return \"YES\", indicating that the schedule can proceed. Otherwise, it should return \"NO\". If the two meetings do not overlap at all, it should also return \"NO\".", "identity": "Person: \nSamantha is a software engineer working for a large corporation. She has been assigned to develop an advanced scheduling algorithm for the company's shared conference rooms. Samantha's task is to ensure that back-to-back meetings can only be scheduled if their overlapping time is a prime number of minutes, which is part of a new security protocol. She needs to write a function that takes two meeting requests as input and determines if they can be scheduled according to this rule. Samantha must consider various scenarios, including non-overlapping meetings and meetings that overlap for non-prime durations. Her solution will help streamline the booking process while adhering to the company's unique scheduling requirements.", "persona": "INTP"}
{"realworld": "A financial analyst is analyzing a portfolio of stocks. They want to calculate a special metric for the portfolio that takes into account both the magnitude of the stock price changes and the overall direction (up, down, or no change) of these changes. The metric is calculated by summing up the absolute values of the price changes and then multiplying this sum by the product of the signs of each price change (represented as 1 for an increase, -1 for a decrease, and 0 for no change). If the portfolio is empty, the metric should be undefined.", "identity": "Meet Alex Thompson, a seasoned financial analyst working at a prestigious investment firm in New York City. Alex is tasked with evaluating the performance of various stock portfolios to provide insights on potential risks and returns. One particular portfolio, consisting of a diverse range of technology stocks, has caught Alex's attention due to its recent volatility. To gain a deeper understanding of how the portfolio has been performing, Alex decides to calculate a unique metric that not only measures the magnitude of stock price fluctuations but also considers the overall trend of these movements.\n\nAlex believes that this metric will offer a more comprehensive perspective on the portfolio's stability and potential future trends, helping the firm make informed decisions regarding investment strategies. With a keen eye for detail and a strong background in quantitative analysis, Alex is well-equipped to tackle this complex calculation and extract valuable insights from the data. However, given the dynamic nature of the stock market, ensuring accuracy in such calculations is crucial, making this task both challenging and rewarding.", "persona": "INTP"}
{"realworld": "Problem: Minimum Value Path in a Grid\n\nGiven a square grid of size N x N filled with unique integers from 1 to N * N, the task is to find the lexicographically smallest path of length k. A path of length k involves moving to adjacent cells (up, down, left, or right) exactly k times without leaving the grid. The path's lexicographical order is determined by comparing the sequences of numbers visited along each path. If two paths visit the same sequence of numbers up to a certain point but differ at the next number, the one with the smaller number at that point is considered lexicographically smaller. The goal is to return the sequence of numbers visited on this minimum value path. Note that it is possible to revisit cells during the path.", "identity": "Person: Alex, an urban planner working on optimizing delivery routes for a city's postal service. Alex needs to determine the most efficient and lexicographically smallest path for mail carriers to travel across a grid-like city layout, visiting key points to deliver mail while adhering to a specific route length. This ensures that all areas are covered in the most organized and time-efficient manner possible.", "persona": "INTJ"}
{"realworld": "Problem: Tribonacci Sequence Generator\n\nDescription: Given a non-negative integer n, write a function that generates and returns a list containing the first n + 1 numbers of the Tribonacci sequence. The Tribonacci sequence is defined as follows:\n- tri(1) = 3\n- For even n, tri(n) = 1 + n / 2\n- For odd n, tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\nThe function should handle the base case and calculate subsequent values based on the defined recurrence relation. Note that the calculation for odd n involves a forward reference (tri(n + 1)), which requires careful implementation to avoid infinite recursion.", "identity": "A computer science student working on a discrete mathematics project might encounter this real-world problem. They are tasked with implementing various recursive sequences, including the Tribonacci sequence, to better understand recursion and dynamic programming concepts. This exercise challenges their ability to handle base cases, manage even and odd calculations, and prevent infinite recursion by carefully planning the sequence generation process.", "persona": "INTP"}
{"realworld": "Problem: Odd Product Calculator\n\nYou have been tasked with developing a software feature for an educational math application that aims to help students practice and understand number theory concepts. One of the exercises involves calculating the product of the odd digits in a given positive integer. If all digits of the number are even, the function should return 0.\n\nThis feature is crucial for enhancing students' ability to manipulate numbers and apply mathematical operations selectively. It will also serve as a tool for teachers to assess students' understanding of digit manipulation and conditional logic.\n\nThe function `digits(n)` needs to be implemented to meet the following requirements:\n- The input parameter `n` is a positive integer.\n- The function should return the product of all odd digits within `n`.\n- If `n` consists solely of even digits, the function should return 0.\n\nExample use cases:\n- `digits(1)` should return 1.\n- `digits(4)` should return 0 since 4 is an even digit.\n- `digits(235)` should return 15, as the product of its odd digits (3 and 5) is 15.", "identity": "Person: Math Teacher\n\nDescription: A middle school math teacher who is looking for interactive and engaging ways to teach number theory concepts to her students. She wants to incorporate technology into her lessons to make them more dynamic and accessible. By using the educational math application with the Odd Product Calculator feature, she can create customized exercises that challenge students to think critically about digit manipulation and conditional logic. This tool will not only aid in teaching but also in assessing students' comprehension of the subject matter.", "persona": "ENTJ"}
{"realworld": "Problem: \nYou are given a string containing only square brackets. Your task is to create a function to determine if there is a valid subsequence of brackets where at least one bracket is nested. A nested bracket means that there is at least one pair of brackets inside another pair. The function should return True if such a subsequence exists, and False otherwise. \n\nFor example:\n- is_nested('[[]]') should return True because there is a nested subsequence '[[]]'.\n- is_nested('[]]]]]]][[[[[]') should return False because there is no valid nested subsequence.\n- is_nested('[][]') should return False because there are no nested subsequences.\n- is_nested('[]') should return False because it's a single pair without any nesting.\n- is_nested('[[][]]') should return True because there is a nested subsequence '[[][]]'.\n- is_nested('[[]][[') should return True because there is a nested subsequence '[[]]'.", "identity": "Person: \nAlex is a software developer working on optimizing the performance of a new algorithm for processing complex data structures. In his work, he often encounters strings representing nested data structures in the form of square brackets. Alex needs to quickly determine if a given string contains a valid subsequence with at least one level of nesting. This will help him identify potential areas in the code that might require additional optimization or error handling. To solve this problem efficiently, Alex decides to write a function that can accurately detect nested brackets within a given string.", "persona": "INTP"}
{"realworld": "Problem: Implement a function `sum_squares` that takes a list of floating-point numbers as input and returns the sum of their squares after rounding each number up to the nearest integer (ceiling). The function must handle both positive and negative numbers and ensure the result is accurate according to the given examples. For instance, for the input list [1.4, 4.2, 0], the function should return 29, as the ceiling of 1.4 is 2, of 4.2 is 5, and 0 remains 0, and their squares summed up equal 29.", "identity": "Person: Alex, a data analyst working on a project that involves calculating the statistical variance of a dataset. Alex needs to implement a custom function to calculate the sum of the squares of the ceiling values of the dataset's deviations from the mean, as part of a specific analysis method requested by their supervisor. This will help in determining how spread out the data points are from the average value, providing insights into the dataset's variability.", "persona": "INTP"}
{"realworld": "Problem: \nYou are tasked with creating a function for a text processing application that checks whether the last non-space character in a given string is an alphabetical letter and stands alone (i.e., it is not part of a word). This function will be used to validate user inputs in a form where single-letter codes are expected at the end of sentences or phrases. The function should return True if the condition is met and False otherwise. \n\nFor instance, in the context of a recipe application, users might input ingredient lists followed by a single-letter code indicating special preparation instructions. The function needs to ensure that the input ends correctly with such a code. Examples include validating \"2 apples, 3 bananas c\" (True) as opposed to \"2 apples, 3 bananas c \" (False) or \"2 apples, 3 bananasc\" (False).", "identity": "Person: \nAlex is a software developer working on a recipe management application. Part of the application allows users to input detailed ingredient lists for recipes. To enhance functionality, Alex is implementing a feature where users can append a single-letter code at the end of their ingredient list to indicate special preparation instructions for all ingredients listed. For example, 'c' could mean chopping all ingredients, while 'd' could mean dicing them. To ensure data integrity and ease of parsing, Alex needs to create a validation function that checks if the user's input ends with a single alphabetical letter standing alone after potentially valid spaces. This will prevent errors during the processing of user inputs and ensure that the application can accurately interpret the preparation codes.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been tasked with developing a system to monitor and analyze stock prices for a financial firm. The system needs to process a list of stock prices over time and identify any instance where a price is not higher than the one before it, as this could indicate a potential issue or trend that requires attention. Your task is to write a function `can_arrange` that takes in a list of stock prices (as integers) and returns the index of the last price that is not greater than or equal to the price immediately before it. If all prices are in ascending order, the function should return -1. The input list will not contain duplicate values. This will help the firm's analysts quickly pinpoint any irregularities in the stock price data.", "identity": "Person: \nAlex is a software engineer working at a leading financial services company. As part of his role, he is responsible for developing and maintaining systems that analyze market trends and financial data. Recently, the company's trading algorithms have been experiencing some anomalies, and Alex has been tasked with creating a new monitoring tool. Specifically, he needs to develop a function that can quickly identify any unexpected drops in stock prices from the vast amounts of data being processed daily. This will enable the firm's analysts to react promptly to any issues and make informed decisions about their investments. With years of experience in algorithm design and a deep understanding of financial markets, Alex is well-equipped to tackle this challenge. However, he must ensure that the solution is both efficient and accurate to meet the high standards required in the finance industry.", "persona": "INTJ"}
{"realworld": "Problem: \nYou have been tasked with creating a function for a data analysis software that analyzes temperature fluctuations over time. The function should take a list of daily temperature changes (in degrees Celsius) as input, where a positive number indicates a rise in temperature and a negative number indicates a drop. Your function needs to identify the largest drop in temperature (largest negative integer) and the smallest rise in temperature (smallest positive integer) from the list. If there are no drops or rises in temperature, the function should return None for those values. This will help meteorologists quickly understand the most significant temperature changes in either direction during a specific period.", "identity": "Person: \nMeet Dr. Elina Martinez, a meteorologist working at a national weather service. She is responsible for analyzing historical weather data to predict future climate patterns and advise on potential extreme weather events. Dr. Martinez uses various data analysis tools to process large datasets of temperature recordings. Recently, she has been tasked with identifying significant temperature fluctuations over the past decade to better understand climate change impacts in her region. To make her work more efficient, she requested a custom function from the software development team that can quickly analyze daily temperature changes and highlight the largest drops and smallest rises in temperature. This information will be crucial for her to identify trends and inform the public and policymakers about potential weather-related risks.", "persona": "INTJ"}
{"realworld": "Problem:\nGiven two variables `a` and `b`, which can be integers, floats, or strings representing real numbers (with decimal points possibly denoted by either '.' or ','), write a function `compare_one(a, b)` to determine and return the larger value in its original type. If the values are equal, the function should return `None`. The function must handle the different formats of real numbers represented as strings.", "identity": "A software developer working on an international finance application that deals with currency conversions and comparisons. They need to ensure that the application can accurately compare monetary values inputted or stored in various formats, including different string representations of real numbers from multiple countries, where the decimal separator might be a dot ('.') or a comma (','). This developer must create a robust function to handle these comparisons without losing precision or encountering errors due to format inconsistencies.", "persona": "INTP"}
{"realworld": "Problem: Determine if a given positive integer can be expressed as the sum of exactly four positive even numbers. For instance, the number 8 can be expressed as 2 + 2 + 2 + 2, which are all positive even numbers, but 7 cannot because it's an odd number and cannot be the sum of even numbers. Write a function that takes an integer as input and returns True if the number can be expressed as the sum of four positive even numbers, and False otherwise.", "identity": "Person: Sarah is a middle school math teacher who wants to create engaging exercises for her students to practice their understanding of numbers and arithmetic operations. She decides to design a problem set focusing on the concept of expressing numbers as sums of even numbers, aiming to improve her students' analytical skills and deepen their understanding of number properties. To make the exercises more challenging and interactive, she plans to use a programming tool in class where students can write and test functions to solve problems like these.", "persona": "INTJ"}
{"realworld": "Problem: Special Factorial Calculation for Project Management\n\nDescription: A project management team needs to calculate a special type of factorial for analyzing resource allocation in a project. This special factorial, referred to as \"Brazilian factorial,\" is defined as the product of all factorials from n down to 1 (i.e., n! * (n-1)! * (n-2)! * ... * 1!). They need to write a function that takes an integer as input and returns the Brazilian factorial of that integer to optimize their project planning process.", "identity": "Person: Alex, a project management consultant, is working on optimizing resource allocation for a large construction project. He needs to calculate the Brazilian factorial to evaluate different scenarios for assigning tasks to his team members. By using the special factorial calculation, Alex can determine the most efficient way to distribute resources and ensure that the project stays on schedule and within budget.", "persona": "INTJ"}
{"realworld": "Real-world Problem:\n\nIn web development, it's common to use hyphens (-) instead of spaces in URLs and filenames for better readability and compatibility across different systems. Moreover, using underscores (_) for single spaces can help maintain consistency in variable names and identifiers in programming. \n\nConsider a scenario where you are building a content management system (CMS) that allows users to input titles and headings for their articles or blog posts. The CMS needs to automatically generate URL slugs and variable names from these titles and headings. However, the input from users may contain spaces, including multiple consecutive spaces.\n\nThe problem is to create a function within the CMS that takes the user input as a string and processes it to replace all single spaces with underscores (_) and replaces any occurrence of more than two consecutive spaces with a hyphen (-). This will ensure that the generated URL slugs and variable names are valid and compatible with web standards and programming conventions.", "identity": "Person Encountering the Real-World Problem:\n\nMeet Alex, a full-stack web developer working at a digital media company that specializes in creating online platforms for independent writers and bloggers. Alex is currently tasked with enhancing the company's flagship CMS, which is used by hundreds of content creators to publish and manage their articles and blog posts.\n\nOne of the key features requested by the content creators is an improved system for generating URL slugs and variable names based on the titles and headings they input. This is crucial for SEO optimization and ensuring that the content is easily accessible on various devices and platforms. However, the current system struggles with handling spaces in the input text, leading to inconsistent and sometimes invalid URL slugs and variable names.\n\nAlex needs to develop a robust solution that not only replaces single spaces with underscores but also manages cases where users might accidentally input multiple consecutive spaces, which could result in overly long or confusing names. By addressing this issue, Alex aims to streamline the publishing process and enhance the overall user experience on the CMS.", "persona": "INTJ"}
{"realworld": "Problem: File Name Validation\n\nGiven a string representing a file's name, determine if the file's name is valid based on the following criteria:\n- The file's name must not contain more than three digits ('0'-'9').\n- It must contain exactly one dot '.'.\n- The substring before the dot should not be empty and must start with a letter from the Latin alphabet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of the following extensions: 'txt', 'exe', or 'dll'. Return 'Yes' if the file's name is valid according to these conditions, and 'No' otherwise.", "identity": "Person: Sarah, a software developer working for a cybersecurity firm. She often encounters various file formats and needs to validate file names as part of her routine security checks to ensure that files are properly formatted and safe to access within their system. This task is crucial for maintaining the integrity and security of the company's network infrastructure.", "persona": "INTJ"}
{"realworld": "Problem: \nA financial analyst needs to process a list of integer values representing weekly profit changes for a company. They need to develop a method to analyze these numbers by squaring the profit change value if it's at an index that is a multiple of 3 (indicating every third week), and cubing the value if it's at an index that is a multiple of 4 but not a multiple of 3 (representing every fourth week except when it coincides with the third week). All other values will remain unchanged. The final step is to calculate the total sum of these processed values to understand the overall impact of these specific weeks on the company's profits. The goal is to create a function that can accurately perform this calculation given any list of integer profit changes.", "identity": "Person: \nMeet Alex, a dedicated financial analyst working for a multinational corporation. Alex's role involves analyzing various aspects of the company's financial health, including tracking weekly profit changes to identify trends and inform strategic decisions. With the company expanding rapidly and data volumes increasing, Alex seeks to automate some of the analysis processes. One critical task is to assess the impact of specific weekly profit changes on overall performance. Specifically, Alex needs to focus on every third and fourth week of each quarter, where the profit change values must be squared or cubed, respectively, before calculating their total contribution to the quarter's profits. This will help in pinpointing patterns and making informed forecasts. To streamline this process, Alex is looking for an efficient solution to apply the correct mathematical operation to each profit change based on its position in the list and then sum them up to get the total adjusted profit change for the quarter.", "persona": "INTJ"}
{"realworld": "Problem: Prime Length Words Extractor\n\nDescription: Given a string representing a sentence, write a function to return a new string containing only the words whose lengths are prime numbers. The order of the words in the new string should be the same as in the original sentence.\n\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\n\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\n\nConstraints:\n- The length of the sentence will be between 1 and 100 characters.\n- The sentence will contain only letters.", "identity": "Person: Sarah, a software developer working on a text processing project for a language learning app. Her task is to implement various text manipulation features, including one that extracts words of prime length from sentences to create exercises for users on understanding word structures and prime numbers in a fun way.", "persona": "INTP"}
{"realworld": "Problem: Implement a function `simplify(x, n)` that takes two string arguments representing fractions in the format `<numerator>/<denominator>`. The function should return `True` if the multiplication of the two fractions results in a whole number, and `False` otherwise. Assume that the input strings are valid fractions with non-zero denominators.\n\nExample:\n- `simplify(\"1/5\", \"5/1\")` should return `True` because `(1/5) * (5/1) = 1`, which is a whole number.\n- `simplify(\"1/6\", \"2/1\")` should return `False` because `(1/6) * (2/1) = 1/3`, which is not a whole number.\n- `simplify(\"7/10\", \"10/2\")` should return `False` because `(7/10) * (10/2) = 7/2`, which is not a whole number.", "identity": "A math teacher is creating an interactive quiz for their students to practice multiplying fractions. They want to include questions that test whether the product of two given fractions is a whole number. To automate the creation of these questions, they need a function that can determine if the product of two fractions results in a whole number. This will help them quickly generate accurate quiz questions without having to manually calculate each product.", "persona": "INTJ"}
{"realworld": "A company is developing a financial management system for a large retail chain. They need to sort a list of product IDs based on the sum of the digits in each ID. The IDs are integers and should be sorted in ascending order according to the sum of their digits. In cases where two or more IDs have the same sum of digits, they should maintain their original order as they appear in the input list. The company needs a function that can efficiently perform this sorting operation to optimize data retrieval and analysis processes within the system.", "identity": "The person who may encounter this real-world problem is a software engineer working on the backend development of the financial management system for the large retail chain. This engineer is responsible for optimizing data processing algorithms to ensure efficient data retrieval and analysis. They need to implement a function that sorts product IDs based on the sum of their digits while preserving the original order for IDs with the same digit sum. This task is crucial for enhancing the system's performance and ensuring accurate financial management operations.", "persona": "INTJ"}
{"realworld": "A company is analyzing data from its temperature monitoring system in various storage units. The system logs the temperature every hour, but due to a software bug, it occasionally records unrealistic values below 10 degrees or with incorrect formatting. The company needs to filter out these faulty entries and count how many valid temperature readings above 10 degrees were recorded, where the first and last digits of the temperature reading are odd numbers. This will help them understand if any storage units are not maintaining the required temperature range, excluding the faulty data points.", "identity": "Person: Sarah, a Quality Assurance Analyst at a pharmaceutical company responsible for ensuring that temperature-sensitive medications are stored properly in their warehouses. She uses data from the temperature monitoring system to identify any potential issues with the storage conditions and takes corrective actions to prevent medication spoilage. Sarah must filter out faulty temperature readings and focus on valid data points to accurately assess the storage unit temperatures.", "persona": "ISTJ"}
{"realworld": "A company is developing a new algorithm to analyze sequences of numbers for cryptographic purposes. They need to test the algorithm's efficiency in finding specific patterns within generated sequences. One of the tests involves generating a sequence of numbers based on a formula and identifying how many unique sets of three numbers within this sequence can be found where the sum of these three numbers is divisible by 3. Given the computational resources and time constraints, they need to optimize the process of finding these sets to ensure the algorithm performs well under stress tests. Specifically, for a given length `n`, they generate a sequence where each element `a[i]` is calculated as `i * i - i + 1` for all `i` from 1 to `n`. Their challenge is to efficiently count how many unique triples `(a[i], a[j], a[k])` exist in this sequence such that `i < j < k` and the sum `a[i] + a[j] + a[k]` is divisible by 3.", "identity": "A software engineer working on optimizing algorithms for a cybersecurity firm. They are tasked with testing and improving the performance of a new cryptographic analysis tool. As part of their job, they must design efficient methods to analyze number sequences for pattern recognition, specifically focusing on identifying sets of numbers that meet certain criteria, such as sums being divisible by specific numbers. They are currently working on a problem where they need to find unique triples in a generated sequence whose sum is divisible by 3, aiming to enhance the tool's efficiency and reliability under various conditions.", "persona": "INTP"}
{"realworld": "Problem: Develop a function named `bf` that accepts two parameters, `planet1` and `planet2`, which are strings representing names of planets in our solar system. The function should return a tuple of all planets whose orbits lie between `planet1` and `planet2`, sorted by their proximity to the Sun. If either `planet1` or `planet2` does not match any of the eight known planets (Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune), the function should return an empty tuple. Note that the solar system's planets are ordered from closest to farthest from the Sun as follows: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune. For instance, `bf(\"Jupiter\", \"Neptune\")` should return `(\"Saturn\", \"Uranus\")`, `bf(\"Earth\", \"Mercury\")` should return `(\"Venus\")`, and `bf(\"Mercury\", \"Uranus\")` should return `(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")`.", "identity": "A high school astronomy teacher is creating a lesson plan for their students to better understand the relative positions of the planets in our solar system. They want to include interactive exercises where students can input the names of two planets and instantly see which planets lie between them in their orbit around the Sun. To facilitate this, the teacher decides to write a Python function that will take the names of two planets as input and return a tuple of all planets located between them, sorted by their proximity to the Sun. This will help students visualize and learn about the solar system's structure more effectively.", "persona": "INTP"}
{"realworld": "Problem: Implement a function `sorted_list_sum(lst)` that takes a list of strings as input, removes strings with odd lengths, and returns a new list containing only the strings with even lengths, sorted in ascending order by their lengths. If two strings have the same length, they should be sorted alphabetically. The input list will always consist of strings and may contain duplicates. Assume that all words in the list will have the same length. Examples:\n- Input: `[\"aa\", \"a\", \"aaa\"]`\n  Output: `[\"aa\"]`\n- Input: `[\"ab\", \"a\", \"aaa\", \"cd\"]`\n  Output: `[\"ab\", \"cd\"]`", "identity": "Person: Sarah is a data analyst working on cleaning up a large dataset of customer reviews for her company. She needs to process these reviews and extract meaningful insights. One task she faces is to filter out reviews with odd lengths since they might be incomplete or not provide enough information. After filtering, she wants to sort the remaining reviews by their lengths and then alphabetically if the lengths are equal, to easily identify patterns or common issues mentioned by customers. This will help her team prioritize which reviews to analyze first based on their length and content. Sarah decides to write a Python function to automate this process, which she can apply to various subsets of the dataset.", "persona": "INTJ"}
{"realworld": "Problem: Prime Number Decision\n\nYou are tasked with creating a system that can help in quickly deciding whether a given number is a prime number or not. This system will be used by a financial institution to assign security levels to their transactions. If a transaction ID (a number) is found to be a prime number, it indicates high security and a special encryption key 'x' will be assigned to it. If the transaction ID is not a prime number, it indicates standard security and another encryption key 'y' will be assigned. Your task is to implement a function that takes a transaction ID 'n', and two encryption keys 'x' and 'y', and returns the appropriate encryption key based on whether 'n' is a prime number or not.", "identity": "Person: Financial Institution's Security Analyst\n\nDescription: A security analyst working at a financial institution who is responsible for implementing and maintaining security protocols for transactions. They need to ensure that each transaction is assigned an appropriate level of security based on its ID, which involves determining if the ID is a prime number to decide between high-security and standard security measures. The analyst has a background in mathematics and computer science, making them capable of understanding and implementing algorithms for prime number detection. They work closely with the IT department to integrate security systems and ensure the smooth operation of transaction processing while maintaining the highest level of security.", "persona": "INTP"}
{"realworld": "Problem: \nYou have been tasked with creating a function for an inventory management system that calculates the total cost of items that are sold in odd quantities. The system records the quantity of each item sold as a list of numbers. However, due to data entry errors, some entries may be negative or non-integer values and should be ignored. Your function should take this list as input and return the total cost by squaring and then summing up the quantities of items sold in odd numbers. For instance, if the quantities are [1, 3, 2, 0], the total cost would be calculated as 1^2 + 3^2 = 10. If all quantities are even or there are no valid entries, the function should return 0.", "identity": "Person: \nMeet Alex, a software developer working for a retail company. Alex's team is responsible for maintaining and improving the company's inventory management system. Recently, they've noticed discrepancies in their sales reports, particularly when calculating the total cost of items sold in odd quantities. The issue seems to stem from incorrect data entry, where some quantities are recorded as negative or non-integer values. To address this, Alex has been tasked with creating a new function that can accurately calculate the total cost based on the squared and summed quantities of items sold in odd numbers, while ignoring invalid entries. This will help the company improve its financial reporting and inventory control.", "persona": "INTJ"}
{"realworld": "Problem: \nYou are tasked with creating a function for a sports analytics company that compares the actual scores of a series of matches against user predictions. The function should take in two lists as arguments: one containing the actual scores of the matches, and the other containing the user's guesses for those matches. Both lists are of equal length, with each index representing a specific match. Your function should return a list of the same length indicating how accurate each guess was. A correct guess should be represented by a 0 in the output list, while incorrect guesses should be represented by the absolute difference between the guess and the actual score.\n\nFor instance:\n- If the actual scores were [1, 2, 3, 4, 5, 1] and the guesses were [1, 2, 3, 4, 2, -2], the function should return [0, 0, 0, 0, 3, 3].\n- If the actual scores were [0, 5, 0, 0, 0, 4] and the guesses were [4, 1, 1, 0, 0, -2], the function should return [4, 4, 1, 0, 0, 6].", "identity": "Person: \nMeet Alex, a data analyst working for a sports analytics company. Alex is responsible for developing algorithms to analyze various aspects of sports data, including match outcomes and user predictions. With the growing popularity of fantasy sports and betting platforms, the company has decided to enhance its prediction accuracy analysis tool. Alex is tasked with creating a function that evaluates the accuracy of user predictions against actual match scores. This will not only help in improving the prediction models but also engage users by providing them with insights into their guessing skills. Alex needs to ensure that the function works efficiently and accurately, handling different scenarios, such as matches with zero scores or negative guesses. By successfully completing this task, Alex can contribute significantly to enhancing user engagement and the overall analytical capabilities of the company.", "persona": "INTP"}
{"realworld": "Problem: \n\nYou have been assigned to develop a modular software system for a gourmet pizza restaurant. The main class of your system is named \"PizzaBuilder\", which allows the addition of various pizza toppings through extensions. Each topping extension is represented by a string, and you need to implement a function called `Strongest_Topping` that selects the most dominant topping based on its strength. The strength of a topping is calculated by subtracting the number of lowercase letters (SM) from the number of uppercase letters (CAP) in its name. Your task is to write a function that returns the name of the strongest topping in the format \"PizzaBuilder.StrongestToppingName\". In case of a tie in strength, the first topping in the list should be chosen.\n\nFor instance, given the \"PizzaBuilder\" class and a list of toppings: ['PePPERoni', 'Mozzarella', 'BROCCOLI'], the function should return 'PizzaBuilder.BROCCOLI' because 'BROCCOLI' has the highest strength (-3).", "identity": "Person: \nAlex is a software engineer working for a tech company that specializes in developing custom solutions for small businesses. One of his recent projects involves creating a modular software system for a gourmet pizza restaurant. The restaurant wants a system that can easily add new toppings and determine the strongest topping based on the criteria provided. Alex needs to implement the `Strongest_Topping` function to meet the restaurant's requirements. He is responsible for ensuring the code is efficient, modular, and meets the specific needs of the restaurant's menu management system.", "persona": "INTJ"}
{"realworld": "Problem: Implement a function `cycpattern_check(a, b)` that takes two strings as input and returns `True` if the second string or any of its cyclic permutations (rotations) is a substring of the first string. Otherwise, it should return `False`. A cyclic permutation of a string is obtained by moving characters from one end of the string to the other. For example, \"abc\" can be cyclically permuted to \"bca\", \"cab\", \"abc\", etc. \n\nExample:\n- `cycpattern_check(\"abcd\",\"abd\")` should return `False`.\n- `cycpattern_check(\"hello\",\"ell\")` should return `True`.\n- `cycpattern_check(\"whassup\",\"psus\")` should return `False`.\n- `cycpattern_check(\"abab\",\"baa\")` should return `True`.\n- `cycpattern_check(\"efef\",\"eeff\")` should return `False`.\n- `cycpattern_check(\"himenss\",\"simen\")` should return `True`.", "identity": "Person: Sarah is a software developer working on a project that involves analyzing patterns in large datasets. She needs to write an algorithm that can efficiently determine if a given pattern, or any of its cyclic permutations, appears as a substring within a larger dataset. This functionality is crucial for her data analysis tool, which aims to identify recurring motifs in sequences such as DNA strands or signal processing data.", "persona": "INTP"}
{"realworld": "Problem: You have been tasked with creating a function for a financial data analysis tool that processes large sets of numerical data. The function needs to analyze a given integer and determine how many digits are even and how many are odd. This will be used to identify patterns in transaction amounts or account numbers, which can help in detecting anomalies or potential fraud. The function should take an integer as input and return a tuple where the first element is the count of even digits and the second element is the count of odd digits. For example, if the input is -12, the function should return (1, 1), indicating there is one even digit and one odd digit. If the input is 123, it should return (1, 2), indicating one even digit and two odd digits.", "identity": "Person: Sarah is a data analyst working for a financial services company. She specializes in developing algorithms to detect unusual patterns in financial transactions that could indicate fraud. Sarah often works with large datasets containing transaction amounts and account numbers. To enhance her analysis capabilities, she needs a function that can quickly process these numbers and provide insights into the distribution of even and odd digits. This information can help her identify potential anomalies, such as unusually high occurrences of certain digits, which might suggest fraudulent activities.", "persona": "INTP"}
{"realworld": "Problem: Write a function that converts a given positive integer (between 1 and 1000) into its lowercase Roman numeral equivalent as a string. For instance, the number 19 should be converted to 'xix', 152 to 'clii', and 426 to 'cdxxvi'.", "identity": "A history teacher is creating a quiz for their class on ancient Rome. They want to include questions about Roman numerals but don't want to manually convert all the numbers themselves. To solve this, they decide to write a Python function that can automatically convert any positive integer between 1 and 1000 into its lowercase Roman numeral equivalent. This will save them time and ensure accuracy in the quiz questions.", "persona": "INTJ"}
{"realworld": "Problem: \nA civil engineer needs to determine if three support beams of given lengths can form a stable right-angled triangle for a bridge construction project. The engineer must ensure that the structure adheres to safety standards, which require at least one right angle in the triangle to provide optimal stability.", "identity": "Person: \nMeet Alex, a 35-year-old civil engineer working on a bridge construction project in a bustling city. With over a decade of experience in structural engineering, Alex is responsible for ensuring the safety and stability of the bridge's design. Today, Alex is faced with the challenge of determining whether three support beams, measuring 9 meters, 12 meters, and 15 meters in length, can be used to create a stable right-angled triangle. This configuration is crucial for providing the necessary support and adherence to safety standards. Alex must apply their knowledge of geometry and engineering principles to solve this problem efficiently.", "persona": "INTJ"}
{"realworld": "Problem: Given a list of menu items from various restaurants, write a function that identifies the dish with the highest number of unique ingredients. If multiple dishes have the same highest number of unique ingredients, return the one that comes first in alphabetical order. This can be useful for a food recommendation system that prioritizes dishes with a rich variety of ingredients or for users with dietary preferences seeking diverse options. For example:\n- find_max([\"Chicken Caesar Salad\", \"Tomato Soup\", \"Beef Bourguignon\"]) should return \"Beef Bourguignon\"\n- find_max([\"Pasta Primavera\", \"Risotto\", \"Polenta\"]) should return \"Pasta Primavera\"\n- find_max([\"BBQ Ribs\", \"Baked Beans\", \"Cornbread\"]) should return \"BBQ Ribs\"", "identity": "Person: Alex is a food enthusiast and a nutritionist who uses an app to track and analyze his meals. He's always on the lookout for dishes with a high variety of ingredients to ensure he gets a balanced intake of nutrients. When dining out, Alex uses a food recommendation feature in his app that suggests dishes based on their nutritional value. The app utilizes the `find_max` function to recommend the dish with the most unique ingredients from the restaurant's menu, helping Alex make healthier choices while enjoying new culinary experiences.", "persona": "INTJ"}
{"realworld": "Problem: \n\nA rabbit has already consumed a certain number of carrots during the day. To maintain its health and satisfy its hunger, it needs to eat a specific number of additional carrots before the end of the day. The rabbit has access to a stock of remaining carrots. Write a function `eat` that calculates the total number of carrots eaten by the rabbit and the number of carrots left in the stock after it has finished eating. If the stock does not have enough carrots, the rabbit will consume all available carrots but will remain hungry.\n\nThe function takes three parameters:\n- `number`: An integer representing the number of carrots the rabbit has already eaten (0 \u2264 number \u2264 1000).\n- `need`: An integer representing the number of additional carrots the rabbit needs to eat (0 \u2264 need \u2264 1000).\n- `remaining`: An integer representing the number of carrots left in the stock (0 \u2264 remaining \u2264 1000).\n\nThe function should return an array with two elements:\n1. The total number of carrots eaten by the rabbit after eating its required amount or all remaining carrots, whichever is less.\n2. The number of carrots left in the stock after the rabbit has eaten.\n\nExamples:\n- `eat(5, 6, 10)` returns `[11, 4]`.\n- `eat(4, 8, 9)` returns `[12, 1]`.\n- `eat(1, 10, 10)` returns `[11, 0]`.\n- `eat(2, 11, 5)` returns `[7, 0]`.", "identity": "Person: \nAlice is a dedicated rabbit owner who wants to ensure her pet rabbit, Thumper, maintains a healthy diet. She tracks how many carrots Thumper has already eaten during the day and how many more he needs for optimal nutrition. Alice also keeps a stock of carrots at home. To manage Thumper's diet efficiently, she decides to write a function to calculate the total number of carrots Thumper will have consumed by the end of the day and how many carrots will be left in her stock. This helps Alice plan future grocery trips and ensure Thumper never goes hungry.", "persona": "ISTJ"}
{"realworld": "Problem: Algebra Expression Evaluator\n\nGiven two lists, `operators` and `operands`, where `operators` contains strings representing basic algebraic operations (+, -, *, //, **) and `operands` contains non-negative integers. The task is to construct an algebraic expression using these operators and operands in the given order and evaluate the resulting expression. \n\nFor example, if `operators` is ['+', '*', '-'] and `operands` is [2, 3, 4, 5], the resulting expression would be 2 + 3 * 4 - 5, which evaluates to 9.\n\nConstraints:\n- The length of the `operators` list is always one less than the length of the `operands` list.\n- The `operands` list contains at least two elements.\n- The `operators` list contains at least one element.", "identity": "Person: High School Math Teacher\n\nDescription: A high school math teacher is preparing for an upcoming lesson on algebraic expressions. They want to create a dynamic way to generate and evaluate expressions to demonstrate the order of operations and how different combinations of operators and operands can affect the result. By using the given lists of operators and operands, the teacher can easily create various expressions and show their students how to correctly evaluate them. This interactive approach will help students better understand the concepts and improve their problem-solving skills in mathematics.", "persona": "INTJ"}
{"realworld": "Problem: Case Reversal and Conditional String Reversal\n\nGiven a string `s`, implement a function `solve(s)` that performs the following operations:\n\n1. If `s[i]` is a letter, reverse its case (lowercase to uppercase or vice versa).\n2. If the string `s` contains no letters at all, reverse the entire string.\n3. Return the modified string.\n\nExample 1:\n- Input: `\"1234\"`\n- Output: `\"4321\"`\n\nExample 2:\n- Input: `\"ab\"`\n- Output: `\"AB\"`\n\nExample 3:\n- Input: `\"#a@C\"`\n- Output: `\"#A@c\"`", "identity": "Person: Sarah, a software developer working on a user data processing module for a social media platform. She needs to ensure that certain user inputs are transformed according to specific rules before being stored in the database. In particular, she is tasked with modifying user nicknames based on the outlined case reversal and conditional string reversal criteria to maintain consistency across the platform's user base. This transformation is crucial for optimizing search functionalities and ensuring uniformity in user interface elements related to nicknames.", "persona": "INTJ"}
{"realworld": "Problem: Secure User Password Storage\n\nDescription: A common real-world problem is securely storing user passwords in a database. Storing plain text passwords is insecure and can lead to data breaches if the database is compromised. Instead, it is recommended to hash the passwords using a secure hashing algorithm like MD5 (though MD5 is now considered weak for cryptographic purposes, stronger algorithms like SHA-256 are recommended). When a user creates an account or changes their password, the system should take the provided password, hash it using the MD5 algorithm (or a stronger one), and store the hashed value in the database. Later, when the user logs in, the system hashes the entered password and compares it with the stored hash to verify the user's identity. This ensures that even if the database is breached, the actual passwords cannot be easily obtained by attackers.", "identity": "Person: Sarah, a software developer working on a new e-commerce platform. She is responsible for implementing the user authentication system, which includes securely storing user passwords. Sarah needs to ensure that the passwords are not stored in plain text to protect user data from potential breaches. She must choose and implement a secure hashing algorithm, such as SHA-256, to hash the passwords before storing them in the database. This will allow her to verify users' identities during login without exposing sensitive information.", "persona": "INTJ"}
{"realworld": "Problem: \nYou are tasked with creating a function for an inventory management system that identifies and lists all product quantities, represented by even numbers, within a specified range of stock levels. This function should take two positive integers as input, representing the minimum and maximum stock levels, and return a list of all even stock quantities found between these levels, in ascending order. If the input integers are in reverse order, the function should still correctly identify the even stock quantities in the correct range.\n\nFor instance:\n- If the minimum stock level is 2 and the maximum stock level is 8, the function should return a list of [2, 4, 6, 8].\n- If the minimum stock level is 8 and the maximum stock level is 2, the function should still return [2, 4, 6, 8].\n- If the minimum stock level is 10 and the maximum stock level is 14, the function should return an empty list since there are no even stock quantities in this range.", "identity": "A warehouse manager at a large retail company is responsible for maintaining accurate inventory records. They need to regularly check stock levels for various products and ensure that the inventory system is up-to-date. As part of their duties, they must create reports that list all products with even quantities within specific stock ranges. This helps them identify items that might be overstocked or understocked and make informed decisions about restocking or promotions. The manager decides to automate this process by implementing a function in their inventory management software that can quickly generate these lists based on given minimum and maximum stock levels.", "persona": "ISTJ"}
