{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers and return them in descending order.\n    \"\"\"\n    # Use nlargest from heapq to find the n largest elements\n    largest_n = heapq.nlargest(n, nums)\n    # Return the result sorted in descending order\n    return sorted(largest_n, reverse=True)\n\n# Function definition without assertions:\nheap_queue_largest"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers\n    xor_result = x ^ y\n    # Count the number of bits set to 1 in the result\n    bit_count = 0\n    while xor_result > 0:\n        bit_count += xor_result & 1\n        xor_result >>= 1\n    # Return True if exactly one bit differs, else False\n    return bit_count == 1\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(15, 8) == False\nassert differ_At_One_Bit_Pos(2, 4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x**2 for x in nums]\n\n# Test cases to verify the correctness of the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10, 20, 30]) == [100, 400, 900]\nassert square_nums([12, 15]) == [144, 225]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the first occurrence of the character\n    first_occ = s.find(char)\n    # Find the last occurrence of the character\n    last_occ = s.rfind(char)\n    # If the character is not found, return the original string\n    if first_occ == -1:\n        return s\n    # If the first and last occurrences are the same, adjust indices\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ+1:]\n    # Remove the first and last occurrences\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n\n# Test cases\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"abcda\", \"a\") == \"bcd\"\nassert remove_Occ(\"PHP\", \"P\") == \"H\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in matrix]\n    # Sort the pairs based on the sum of the rows\n    sorted_rows = sorted(row_sums, key=lambda x: x[0])\n    # Extract the sorted rows\n    return [row for _, row in sorted_rows]\n\n# Test cases\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    triangular_area = 0.5 * base * height\n    volume = triangular_area * length\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    # Check if the string contains sequences of lowercase letters joined by an underscore\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)*', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(char for char in s1 if char not in s2)\n\n# Test cases to verify the solution\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nassert test_duplicate([1,2,3,4,5]) == False\nassert test_duplicate([1,2,3,4,4]) == True\nassert test_duplicate([1,1,2,2,3,3,4,4,5]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # Check if n is a Woodall number\n    # A Woodall number is of the form n * 2^n - 1\n    # We solve n * 2^n - 1 = x for n to check if x is a Woodall number\n    \n    def is_perfect_power(n, base):\n        # Check if n is a power of base\n        p = 0\n        while base ** p < n:\n            p += 1\n        return base ** p == n\n    \n    for n in range(1, 32):  # Check within a reasonable range\n        woodall_number = n * 2**n - 1\n        if woodall_number == n:\n            return True\n    return False\n\n# Test cases\nis_woodall(383)\nis_woodall(254)\nis_woodall(200)"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr):\n    # Custom comparator to sort the numbers based on the largest possible value they contribute to\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n\n    # Convert all integers in the list to strings for comparison\n    str_arr = list(map(str, arr))\n    # Sort the array using the custom comparator\n    str_arr.sort(key=functools.cmp_to_key(compare))\n    # Join the sorted strings and convert to integer\n    # Use '0' as a check to handle cases where the highest number is made of zeros\n    result = ''.join(str_arr)\n    return int(result) if result[0] != '0' else 0\n\n# Test cases\nassert find_Max_Num([1, 2, 3]) == 321\nassert find_Max_Num([4, 5, 6, 1]) == 6541\nassert find_Max_Num([1, 2, 3, 9]) == 9321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)\n\n# Test cases to verify the correctness\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start+length]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == length:\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    min_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n    return min_num"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)\n\n# Test cases\nassert pos_count([1, -2, 3, -4]) == 2\nassert pos_count([3, 4, 5, -1]) == 3\nassert pos_count([1, 2, 3, 4]) == 4"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n            if j > 0:\n                bell[i][j] += bell[i-1][j]\n    return bell[n][n]\n\nbell_number(2)\nbell_number(10)\nbell_number(56)"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    decreasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    # Get the lengths of the main list and the sub list\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # Iterate through the main list to check for the sub list\n    for i in range(main_len - sub_len + 1):\n        # Check if the slice of the main list matches the sub list\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False\n\n# Test cases to verify the function\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([2,4,3,5,7],[4,3]) == True\nassert is_sublist([2,4,3,5,7],[1,6]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False  # We are not done yet\n        else:\n            gap = 1\n            sorted = True  # If there are no swaps this pass, we are done\n\n        # A single \"comb\" over the input list\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # Check if n can be expressed as the difference of two squares\n    # a^2 - b^2 = (a+b)(a-b) = n\n    # Iterate through possible values of a and find b\n    for a in range(1, int(n**0.5) + 1):\n        b_squared = a**2 - n\n        if b_squared >= 0:\n            b = int(b_squared**0.5)\n            if b**2 == b_squared:\n                return True\n    return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n            \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True\n\n# Test cases to verify the correctness of the function\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"]) == False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each tuple in the list\n    for t in tuples_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % k == 0 for x in t):\n            # If so, add the tuple to the result list\n            result.append(t)\n    \n    # Return the result list\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    num_str = str(number)\n    odd_sum = 0\n    even_sum = 0\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    difference = abs(odd_sum - even_sum)\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    # Initialize the base cases\n    if n == 1 or n == 2:\n        return 1\n    \n    # Create a list to store the sequence values\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2] = 1, 1\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    \n    # Return the nth value\n    return newman_conway[n]\n\n# Test assertions\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the three dictionaries into one\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Function definition provided above, no usage or assertions needed here."}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for s in strings:\n        if substring in s:\n            return True\n    return False\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == True"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(1, len(n_str) - 1, 2):\n        if n_str[i] != n_str[0] or n_str[i] == n_str[i + 1]:\n            return False\n    for i in range(2, len(n_str), 2):\n        if n_str[i] != n_str[2]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 5) == 3125"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the minimum value and the result variable\n    min_value = None\n    result = None\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if this is the first iteration or if the current tuple has a smaller second value\n        if min_value is None or tup[1] < min_value:\n            # Update the minimum value and the result\n            min_value = tup[1]\n            result = tup[0]\n    \n    # Return the first value of the tuple with the smallest second value\n    return result"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency_dict = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    if n < 9 or n == 11:\n        return n + 1\n\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\n# Test cases\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(1221) == 1331\nassert next_smallest_palindrome(120) == 121"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0 or m == n:\n        return 0\n    if m == 1:\n        return 1\n    if n == 1:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n# Test cases to verify the correctness of the function\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist, key=lambda x: x.strip().lower()) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return sum(1 for b in bool_list if b)\n\n# Assertions to verify the correctness of the function\nassert count([True, False, True]) == 2\nassert count([False, False]) == 0\nassert count([True, True, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine all three lists\n    combined_list = list1 + list2 + list3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list\n\n# Test cases\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    def rotate(s, n):\n        return s[-n % len(s):] + s[:-n % len(s)]\n    \n    def is_odd(num):\n        return int(num, 2) % 2 != 0\n    \n    seen = set()\n    count = 0\n    for _ in range(rotations):\n        if binary_str not in seen:\n            seen.add(binary_str)\n            if is_odd(binary_str):\n                count += 1\n        binary_str = rotate(binary_str, 1)\n    \n    return count\n\nodd_Equivalent(\"011001\", 6)\nodd_Equivalent(\"11011\", 5)\nodd_Equivalent(\"1010\", 4)"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Initialize a dictionary to count the occurrence of each element\n    element_count = {}\n    \n    # Iterate through each list in the nested lists\n    for sublist in nested_lists:\n        # Update the count for each element in the sublist\n        for element in sublist:\n            if element in element_count:\n                element_count[element] += 1\n            else:\n                element_count[element] = 1\n    \n    # Find the minimum length of the sublists to ensure commonality\n    min_length = min(len(sublist) for sublist in nested_lists)\n    \n    # Filter elements that appear in all sublists\n    common_elements = [element for element, count in element_count.items() if count == min_length]\n    \n    return common_elements\n\n# Function to test the correctness of the solution\ndef check_common_elements():\n    assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])\n    assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) == set([5, 23])\n    assert set(common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])) == set([4])\n\ncheck_common_elements()"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    for d in dict_list:\n        if d:\n            return False\n    return True\n\n# Test cases\nassert empty_dit([{}, {}, {}]) == True\nassert empty_dit([{}, {1, 2}, {}]) == False  # Note: {1, 2} is not a valid dictionary, it should be {1: 2}\nassert empty_dit([{}]) == True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))\n\n# Assertions to verify the correctness of the function\nassert tuple_to_int((1,2,3)) == 123\nassert tuple_to_int((4,5,6)) == 456\nassert tuple_to_int((5,6,7)) == 567"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(input_list):\n    result = []\n    for sublist in input_list:\n        float_sublist = []\n        for item in sublist:\n            try:\n                float_sublist.append(float(item))\n            except ValueError:\n                float_sublist.append(item)\n        result.append(float_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = float('-inf')\n    for t1, t2 in tuples:\n        product = abs(t1 * t2)\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test cases to verify the correctness of the function\nimport math\n\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10, 20), (15, 2), (5, 10)]), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]), 484, rel_tol=0.001)"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        s = 1  # Start with 1 because it's a divisor of every number\n        i = 2\n        while i * i <= x:\n            if x % i:\n                i += 1\n            else:\n                if i == (x // i):\n                    s += i\n                else:\n                    s += i + (x // i)\n                x //= i\n        return s\n\n    result = 0\n    for num in range(2, n + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            result += num\n    return result"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)\n\n# Test the function\nassert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2, 1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0, 2j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_str):\n    max_diff = 0\n    current_diff = 0\n    diff_map = {0: -1}\n    \n    for i, char in enumerate(binary_str):\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff in diff_map:\n            start_index = diff_map[current_diff]\n            current_length = i - start_index\n            max_diff = max(max_diff, current_length)\n        else:\n            diff_map[current_diff] = i\n    \n    return max_diff\n\n# Test cases to verify the solution\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)\n\n# Test the function\nassert sum_of_common_divisors(10, 15) == 6\nassert sum_of_common_divisors(100, 150) == 93\nassert sum_of_common_divisors(4, 6) == 3"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    result = [word for word in words if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Step 1: Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Step 2: Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Step 3: Check the sums of all rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Step 4: Check the sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Step 5: Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Step 6: Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(arr):\n    from collections import Counter\n    # \u4f7f\u7528Counter\u7edf\u8ba1\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\n    count = Counter(arr)\n    # \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u53ca\u5176\u6b21\u6570\n    max_count_element, _ = count.most_common(1)[0]\n    return max_count_element\n\n# \u6d4b\u8bd5\u7528\u4f8b\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18]) == 8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10]) == 20"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(s_list)\n\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n -= 1\n            if n and (n & (n - 1)) != 0:\n                return False\n    return n == 0\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    # Convert the flattened list into a set to remove duplicates\n    result_set = set(flattened_list)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sublist, k):\n        sublist[:k] = sublist[:k][::-1]\n    \n    n = len(arr)\n    while n > 1:\n        max_index = arr.index(max(arr[:n]))\n        if max_index != n - 1:\n            if max_index != 0:\n                flip(arr, max_index + 1)\n            flip(arr, n)\n        n -= 1\n    return arr\n\n# Assertions to verify the correctness of the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    return sum(x == y == z for x, y, z in zip(list1, list2, list3))\n\n# The assertion checks provided in the problem statement\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) == 4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) == 5"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    min_element = min(arr)\n    max_element = max(arr)\n    return abs(max_element - min_element)\n\n# Test cases to verify the correctness of the function\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2"}
{"task_id": "Mbpp/160", "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n    \n    # If n is not divisible by the gcd, no solution exists\n    if n % g != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find particular solutions\n    x0, y0, x1, y1 = 1, 0, 0, 1\n    while a != 0:\n        q, b, a = b // a, a, b % a\n        x0, x1 = x1, x0 - q * x1\n        y0, y1 = y1, y0 - q * y1\n    \n    # Scale the solution by n/g\n    x = x0 * (n // g)\n    y = y0 * (n // g)\n    \n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(source_list, elements_to_remove):\n    return [element for element in source_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))\n\n# The assertions provided in the prompt suggest the correctness of the function.\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    # Mapping of each lowercase letter to its position in the alphabet\n    alphabet_positions = {chr(i + 96): i for i in range(1, 27)}\n    \n    # Initialize the counter\n    count = 0\n    \n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Iterate through the characters and their indices\n    for index, char in enumerate(s):\n        # Check if the character's position matches its index in the string (plus 1)\n        if char in alphabet_positions and alphabet_positions[char] == index + 1:\n            count += 1\n            \n    return count\n\n# Test cases\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()\n\n# Test cases to verify the correctness\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(nums, start, end):\n    return sum(nums[start:end+1])\n\nsum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)\nsum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7)\nsum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10)"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    number_of_sides = 5\n    perimeter = number_of_sides * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    # Count the occurrences of the element in the array\n    count = arr.count(elem)\n    # Check if the count is more than n/2\n    return count > n // 2\n\n# Test cases to verify the correctness\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n    \n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n    \n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(\" \", char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\n# Test cases to verify the correctness\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) == set([100, 90, 80, 70, 60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) == set([100, 90, 80])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Test cases to verify the correctness of the function\nassert math.isclose(lateralsuface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4, 5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4, 10), 251.32000000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize a mask with even bits set to 1\n    mask = 0x55555555  # Binary: 0101...\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrence_dict = {}\n    for item in lst:\n        if item in occurrence_dict:\n            occurrence_dict[item] += 1\n        else:\n            occurrence_dict[item] = 1\n    return occurrence_dict\n\n# Test cases to verify the correctness\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (6, 3): 1}\nassert check_occurrences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(4, 2): 2, (3, 6): 2, (7, 4): 1}\nassert check_occurrences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(13, 2): 1, (11, 23): 1, (12, 25): 1, (25, 12): 1, (16, 23): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    from functools import lru_cache\n\n    @lru_cache(maxsize=None)\n    def count_sequences(current, remaining):\n        if remaining == 0:\n            return 1\n        total_sequences = 0\n        for next_val in range(current * 2, m + 1):\n            if next_val <= m:\n                total_sequences += count_sequences(next_val, remaining - 1)\n        return total_sequences\n\n    total = 0\n    for start in range(1, min(m, n) + 1):\n        total += count_sequences(start, n - 1)\n    return total\n\n# Test cases to verify the correctness of the function\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84"}
{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    if lst1:  # Check if the first list is not empty\n        lst1[-1:] = lst2  # Replace the last element with elements from the second list\n    else:\n        lst1.extend(lst2)  # If the first list is empty, just append all elements from the second list\n    return lst1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)\n\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"language\") == 8\nassert count_charac(\"words\") == 5"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize two lists to store the maximum sum till each index i\n    # for increasing and decreasing subsequences respectively\n    inc = [0] * n\n    dec = [0] * n\n    \n    # The maximum sum of increasing subsequence ending at first element is the element itself\n    inc[0] = arr[0]\n    \n    # Fill inc[] such that inc[i] stores the maximum sum of increasing subsequence ending with arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n        if inc[i] == 0:  # If no increasing subsequence is found, include only arr[i]\n            inc[i] = arr[i]\n    \n    # The maximum sum of decreasing subsequence starting at last element is the element itself\n    dec[n-1] = arr[n-1]\n    \n    # Fill dec[] such that dec[i] stores the maximum sum of decreasing subsequence starting with arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] >= arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n        if dec[i] == 0:  # If no decreasing subsequence is found, include only arr[i]\n            dec[i] = arr[i]\n    \n    # Find the maximum sum of bitonic subsequence by adding inc[i] and dec[i] and subtracting arr[i] since it gets counted twice\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n\n# Test cases\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3, 14, 16, 21, 23, 29, 30]) == 138"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = s.replace(\" \", \"\")  # Remove spaces\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n\n    # Initialize a list to keep track of prime status for each number\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n\n    # Use the Sieve of Eratosthenes algorithm\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n\n    # Count the number of primes\n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n\n    count = 2\n    a, b = 2, 5\n    while True:\n        c = 6 * b - a\n        a, b = b, c\n        if is_prime(c):\n            count += 1\n            if count == n:\n                return c\n\nnewman_prime(3)\nnewman_prime(4)\nnewman_prime(5)"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(x / y if y != 0 else float('inf') for x, y in zip(tuple1, tuple2))\n    return result\n\n# Test cases to verify the correctness of the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2.0, 2.0, 2.0, 3.0)\nassert division_elements((12, 6, 8, 16), (6, 3, 4, 4)) == (2.0, 2.0, 2.0, 4.0)\nassert division_elements((20, 14, 36, 18), (5, 7, 6, 9)) == (4.0, 2.0, 6.0, 2.0)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 0:\n        return 0\n    elif human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 2 * 10.5 + (human_age - 2) * 4\n\n# Test cases to verify the correctness of the function\nassert dog_age(12) == 61\nassert dog_age(15) == 73\nassert dog_age(24) == 109"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    # Initialize an empty list to store the resulting lists\n    result = [[] for _ in range(n)]\n    \n    # Iterate over the input list\n    for index, item in enumerate(lst):\n        # Determine the appropriate sublist based on the current index\n        sublist_index = index % n\n        # Append the item to the corresponding sublist\n        result[sublist_index].append(item)\n    \n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Assertions to verify the correctness of the function\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\n# Test cases to verify the correctness of the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    # Iterate over the even indices from 0 to n\n    for k in range(0, n+1, 2):\n        total_sum += comb(n, k)\n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 10), 502.64000000000004, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# The function is defined without the usage example."}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)\n\n# Test cases to verify the correctness of the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "from collections import Counter\n\ndef validate(n):\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True\n\n# Test the function\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for one instance of the array\n    max_kadane = kadane(arr)\n    \n    # Calculate the sum of the entire array\n    total_sum = sum(arr)\n    \n    # If the total sum is positive, the maximum sum can be obtained by adding\n    # the maximum sum of the prefix and suffix to (k-2) * total_sum + max_kadane\n    if total_sum > 0:\n        max_prefix_sum = max_suffix_sum = kadane(arr + arr)\n        return max(max_kadane, max_prefix_sum + (k-2) * total_sum + max_suffix_sum)\n    else:\n        # If the total sum is not positive, the maximum sum is either within one instance or across two instances\n        return max(max_kadane, kadane(arr + arr))\n\ndef kadane(arr):\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(numerator, denominator):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    return math.floor(numerator / denominator)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Initialize the maximum value as None\n    max_int = None\n    # Iterate through the list\n    for item in lst:\n        # Check if the current item is an integer\n        if isinstance(item, int):\n            # If it's an integer and either max_int is None or item is greater than max_int, update max_int\n            if max_int is None or item > max_int:\n                max_int = item\n    # Return the maximum integer found\n    return max_int"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"Flatten a given nested list structure.\"\"\"\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):  # Check if the element is a list\n            flat_list.extend(flatten_list(element))  # Recursively flatten the sublist\n        else:\n            flat_list.append(element)  # Append non-list elements directly\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    # Create a dictionary to store the aggregated values for each name\n    aggregates = {}\n    for name, value in lst:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    \n    # Find the name with the maximum aggregate value\n    max_name = max(aggregates, key=aggregates.get)\n    max_value = aggregates[max_name]\n    \n    return (max_name, max_value)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total_sequences = 0\n    # The number of ways to have k ones in the first n bits\n    # is the binomial coefficient C(n, k).\n    # For each k, the number of ways to have the same number of ones\n    # in the last n bits is also C(n, k).\n    # However, we need to ensure the sum of ones in both halves is equal.\n    for k in range(n + 1):\n        # Calculate binomial coefficient C(n, k)\n        binom_first_half = math.comb(n, k)\n        # Since the sum of ones in the first half must equal the sum of ones in the second half,\n        # the number of valid sequences is the square of the binomial coefficient.\n        total_sequences += binom_first_half * binom_first_half\n    return total_sequences\n\n# Assertions to verify the correctness of the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()), default=0)\n\n# Test cases to verify the correctness of the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a':1, 'b': {'c':'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        split_words = word.split()\n        for w in split_words:\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                # Since we need only two words starting with 'p', break after finding two\n                if len(result) == 2:\n                    return tuple(result)\n\n# Test cases\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\nassert start_withp([\"Python Programming\", \"Java Programming\"]) == ('Python', 'Programming')\nassert start_withp([\"Pqrst Pqr\", \"qrstuv\"]) == ('Pqrst', 'Pqr')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array\n    dp = [0] * n\n    \n    # Base case\n    dp[0] = arr[0]\n    \n    # Fill dp array up to i\n    for j in range(1, i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j] and dp[j] < dp[m] + arr[j]:\n                dp[j] = dp[m] + arr[j]\n    \n    # Find max sum including arr[k]\n    max_sum = arr[k]\n    for j in range(i + 1):\n        if arr[j] < arr[k] and max_sum < dp[j] + arr[k]:\n            max_sum = dp[j] + arr[k]\n    \n    return max_sum\n\n# Test cases\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"}
{"task_id": "Mbpp/308", "solution": "from heapq import nlargest\nfrom itertools import product\n\ndef large_product(list1, list2, k):\n    \"\"\"\n    Finds the k largest products from the Cartesian product of two lists.\n    \n    Args:\n    - list1: A list of integers.\n    - list2: Another list of integers.\n    - k: The number of largest products to return.\n    \n    Returns:\n    - A list containing the k largest products.\n    \"\"\"\n    # Generate all possible products using itertools.product\n    all_products = (x * y for x, y in product(list1, list2))\n    # Use heapq.nlargest to find the k largest products\n    result = nlargest(k, all_products)\n    return result\n\n# Test cases\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3) == [60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4) == [60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5) == [60, 54, 50, 48, 45]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b\n\n# Assertions to test the function\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\") == ('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\") == ('1', '5', '.', '1', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Assertions to verify the correctness of the function\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_str):\n    return [format_str.format(str(element)) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    result = []\n    for i in range(len(ids)):\n        nested_dict = {ids[i]: {names[i]: scores[i]}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    memo[n] = max(get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo), n)\n    return memo[n]\n\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\n# Function to check the correctness of the solution\ncheck_distinct((1, 4, 5, 6, 1, 4))\ncheck_distinct((1, 4, 5, 6))\ncheck_distinct((2, 3, 4, 5, 6))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, int):  # Check if the item is an integer\n            num = abs(item)  # Ensure the number is positive\n            while num > 0:\n                total_sum += num % 10  # Add the last digit to the total sum\n                num //= 10  # Remove the last digit\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    return len(set(tuples_list))\n\n# Code generated based on the problem statement and assertions provided."}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    # Convert the number to its binary representation and remove the '0b' prefix\n    binary = bin(n)[2:]\n    # Count the number of 1s in the binary representation\n    count_ones = binary.count('1')\n    # Check if the count of 1s is odd\n    return count_ones % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False"}
{"task_id": "Mbpp/407", "solution": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    # Convert the number to a sorted list of its digits\n    digits = sorted(list(str(n)))\n    \n    # Generate all permutations of the digits\n    perms = [''.join(p) for p in permutations(digits)]\n    \n    # Filter out permutations that are greater than the original number and convert them to integers\n    bigger_perms = [int(perm) for perm in perms if int(perm) > n]\n    \n    # Return the smallest permutation that is greater than the original number, or None if there are none\n    return min(bigger_perms) if bigger_perms else None\n\n# Function to check the correctness of the solution\ndef check_rearrange_bigger():\n    assert rearrange_bigger(12) == 21\n    assert rearrange_bigger(10) == None\n    assert rearrange_bigger(102) == 120\n\ncheck_rearrange_bigger()"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    # Return the minimum value from the filtered list\n    return min(numeric_values)\n\n# The function definition above does not require the usage to be shown."}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    set_seq2 = set(seq2)\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False\n\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3], [4, 5, 6]) == False\nassert overlapping([1, 4, 5], [1, 4, 5]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\n# Test the function with the provided assertions\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))\n\n# Test cases to verify the correctness\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function with the given assertions\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lists, element):\n    return sum(1 for sublist in lists if element in sublist)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the date string into year, month, and day\n    year, month, day = date_str.split('-')\n    # Reconstruct the date in dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        # Perform bitwise AND operation on each pair of elements\n        bit_and = t1[i] & t2[i]\n        # Count the number of set bits (1s) in the result\n        count_set_bits = bin(bit_and).count('1')\n        result.append(count_set_bits)\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The formula to find the directrix of a parabola y = a(x - h)^2 + k is k - 1/(4a)\n    # when the parabola opens vertically.\n    directrix = k - 1 / (4 * a)\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the first list into a set for O(1) lookup times\n    set1 = set(list1)\n    # Iterate through the second list and check if any element is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n\n# Test cases\nassert common_element([1,2,3,4,5], [5,6,7,8,9]) == True\nassert common_element([1,2,3,4,5], [6,7,8,9]) == False\nassert common_element(['a','b','c'], ['d','b','e']) == True"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + c) / 2\n\n# Test cases to verify the correctness of the function\nassert median_trapezium(15, 25, 35) == 20\nassert median_trapezium(10, 20, 30) == 15\nassert median_trapezium(6, 9, 4) == 7.5"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]\n\n# Test cases\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([-1, -2, 3, 4]) == [-1, -2]\nassert neg_nos([-7, -6, 8, 9]) == [-7, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen = set()\n    bidirectional_count = 0\n    for a, b in tuples:\n        if (b, a) in seen:\n            bidirectional_count += 1\n        seen.add((a, b))\n    return bidirectional_count\n\n# Test cases to verify the correctness of the function\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 3"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to a string and concatenate them\n    result = int(''.join(map(str, lst)))\n    return result\n\n# Test cases\nassert multiple_to_single([11, 33, 50]) == 113350\nassert multiple_to_single([-1, 2, 3, 4, 5, 6]) == -123456\nassert multiple_to_single([10, 15, 20, 25]) == 10152025"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match an adverb (usually ending with 'ly')\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, sentence)\n    \n    if match:\n        # Extract the start index, end index, and the matched adverb\n        start, end = match.start(), match.end()\n        adverb = sentence[start:end]\n        return (start, end, adverb)\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "from math import isclose\n\ndef positive_count(arr):\n    if not arr:\n        return 0\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)\n\n# Test the function\nassert isclose(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.538, rel_tol=0.001)\nassert isclose(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.692, rel_tol=0.001)\nassert isclose(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.555, rel_tol=0.001)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    result = tuple((a * c, b * d) for (a, b), (c, d) in zip(t1, t2))\n    return result\n\n# Final Code\ndef index_multiplication(t1, t2):\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    # Initialize the count to 0\n    count = 0\n    # Create a set from the tuple for O(1) lookups\n    tup_set = set(tup)\n    # Iterate through each element in the list\n    for elem in lst:\n        # If the element is in the tuple set\n        if elem in tup_set:\n            # Count the occurrences of the element in the tuple and add it to the total count\n            count += tup.count(elem)\n    return count\n\n# Test cases to verify the correctness of the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\nassert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    # Initialize the first three Perrin numbers\n    a, b, c = 3, 0, 2\n    sum_perrin = a + b + c\n    \n    # Calculate the remaining Perrin numbers up to n\n    for _ in range(3, n):\n        a, b, c = b, c, a + b\n        sum_perrin += c\n    \n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]\n\n# Test cases to verify the correctness of the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6) == ['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9) == ['exercises']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            sum_even += i\n    return sum_even\n\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Matches a word containing 'z' in the given text.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # Define a list of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = [char for char in s if char.islower()]\n    return ''.join(result)"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\n# The function `upper_ctr` is defined to count the number of uppercase characters in the string `s`.\n# It uses a generator expression within the `sum` function to iterate over each character in the string.\n# For each character, `c.isupper()` checks if the character is uppercase.\n# If `c.isupper()` returns True, `1` is added to the sum; otherwise, `0` is added."}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_prod = min_prod = result = nums[0]\n\n    for i in range(1, len(nums)):\n        choices = (nums[i], nums[i] * max_prod, nums[i] * min_prod)\n        max_prod = max(choices)\n        min_prod = min(choices)\n        result = max(result, max_prod)\n\n    return result\n\n# Test cases to verify the correctness of the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    n = len(nums)\n    if n < 2:\n        return 0\n    \n    # Initialize two lists to keep track of the maximum product ending at each index\n    # and the maximum product starting from each index.\n    max_end_here = [0] * n\n    max_start_here = [0] * n\n    \n    max_end_here[0] = max_start_here[0] = nums[0]\n    \n    # Forward pass to calculate the maximum product ending at each index.\n    for i in range(1, n):\n        max_end_here[i] = max(nums[i], max_end_here[i-1] * nums[i])\n    \n    # Backward pass to calculate the maximum product starting from each index.\n    for i in range(n-2, -1, -1):\n        max_start_here[i] = max(nums[i], max_start_here[i+1] * nums[i])\n    \n    # Calculate the maximum product of an increasing subsequence.\n    max_product = 1\n    i = 0\n    j = 1\n    while j < n:\n        if nums[j] > nums[i]:\n            max_product *= nums[j]\n            i = j\n        j += 1\n    \n    return max_product\n\n# Test cases\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product % n\n\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\nassert find_remainder([1, 1, 1], 1) == 0\nassert find_remainder([1, 2, 1], 2) == 0"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples1, tuples2):\n    # Create sets from the tuple lists to remove duplicates and allow set operations\n    set1 = set(map(frozenset, tuples1))\n    set2 = set(map(frozenset, tuples2))\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert the frozensets back to tuples\n    result = {tuple(pair) for pair in intersection}\n    \n    return result"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    # Sort the dictionary by its values in descending order\n    sorted_items = sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items\n\n# The assertion checks are already provided in the prompt, no need to repeat them here."}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\nassert find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7) == 12\nassert find_Odd_Pair([1, 2, 3], 3) == 2"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    len_diff = abs(len(str_num1) - len(str_num2))\n    max_len = max(len(str_num1), len(str_num2))\n    \n    # Equalize the lengths by padding the shorter number with zeros on the left\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    # Calculate the sum of the absolute differences of corresponding digits\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n\n# Function to test the correctness of the solution\ndef check_digit_distance():\n    assert digit_distance_nums(1, 2) == 1\n    assert digit_distance_nums(23, 56) == 6\n    assert digit_distance_nums(123, 256) == 7\n\ncheck_digit_distance()"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Combine the tuples\n    combined = tuple1 + tuple2\n    # Remove duplicates by converting to a set\n    unique_elements = set(combined)\n    # Convert back to a sorted tuple\n    return tuple(sorted(unique_elements))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    return max(len(sublist) for sublist in lists)\n\n# Test cases to verify the correctness of the function\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"') == ['python', 'program', 'language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"') == ['red', 'blue', 'green', 'yellow']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst):\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    # Create a frequency map to count occurrences of each number\n    freq_map = {}\n    for num in nums:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    \n    # Filter out numbers that occur more than once\n    result = [num for num in nums if freq_map[num] == 1]\n    \n    return result\n\n# The assertions provided in the problem statement\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    total_surface_area = 2 * base_area + side_area\n    return total_surface_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n    \n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets to use set operations\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find elements that are in either set1 or set2 but not in both\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the result back to a tuple\n    return tuple(dissimilar_elements)\n\n# Test cases to verify the correctness of the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            extracted = extract_even(item)\n            if extracted:  # Only add non-empty tuples\n                result.append(extracted)\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\n# Test cases to verify the correctness\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    lateral_area = base_edge * slant_height * 2\n    total_surface_area = base_area + lateral_area\n    return total_surface_area\n\n# Test cases\nassert surface_Area(3, 4) == 33\nassert surface_Area(4, 5) == 56\nassert surface_Area(1, 2) == 5"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    import math\n    start_sqrt = math.ceil(math.sqrt(start))\n    end_sqrt = math.floor(math.sqrt(end))\n    return [x**2 for x in range(start_sqrt, end_sqrt + 1)]\n\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]\nassert perfect_squares(50, 100) == [64, 81, 100]\nassert perfect_squares(100, 200) == [100, 121, 144, 169, 196]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(radius, angle):\n    # Convert polar coordinates (radius, angle) to rectangular coordinates (x, y)\n    x = radius * cmath.cos(angle)\n    y = radius * cmath.sin(angle)\n    \n    # Calculate the magnitude and phase for verification\n    magnitude = abs(complex(x, y))\n    phase = cmath.phase(complex(x, y))\n    \n    return ((magnitude, phase), complex(x, y))\n\n# Function to verify the correctness of the conversion\ndef check_polar_rect():\n    assert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2 + 2.4492935982947064e-16j))\n    assert polar_rect(4, 7) == ((8.06225774829855, 1.0516502125483738), (-2 + 2.4492935982947064e-16j))\n    assert polar_rect(15, 17) == ((22.67156809750927, 0.8478169733934057), (-2 + 2.4492935982947064e-16j))\n\ncheck_polar_rect()"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# The function `swap_List` is defined to interchange the first and last elements of a given list. It works by swapping the first element (`lst[0]`) with the last element (`lst[-1]`). This operation is performed using tuple unpacking, which allows for a straightforward swap without the need for a temporary variable. Finally, the modified list is returned."}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    result = 0\n    for i in range(n):\n        result += comb(n, i) * comb(n, i + 1)\n    return result\n\n# The assertions to verify the correctness of the function\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    # Check if the two binary numbers have the same number of 1s, if not, return None\n    if binary1.count('1') != binary2.count('1'):\n        return None\n    \n    # Count the number of swaps needed\n    swaps = 0\n    for b1, b2 in zip(binary1, binary2):\n        if b1 != b2:\n            swaps += 1\n    \n    # Since each swap can correct two mismatches, divide the total mismatches by 2\n    return swaps // 2\n\n# Test cases\nmin_Swaps(\"1101\", \"1110\")\nmin_Swaps(\"111\", \"000\")\nmin_Swaps(\"111\", \"110\")"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Ensure k is within the bounds of the combined length of both arrays\n    if k < 1 or k > len(arr1) + len(arr2):\n        return None\n    \n    # Initialize pointers for both arrays\n    index1, index2 = 0, 0\n    \n    # Loop until one of the arrays is exhausted\n    while True:\n        # If we have reached the end of arr1, return kth element from arr2\n        if index1 == len(arr1):\n            return arr2[index2 + k - 1]\n        # If we have reached the end of arr2, return kth element from arr1\n        if index2 == len(arr2):\n            return arr1[index1 + k - 1]\n        # If k is 1, return the minimum of the current elements\n        if k == 1:\n            return min(arr1[index1], arr2[index2])\n        \n        # Move pointers forward\n        mid = k // 2\n        newIndex1 = min(index1 + mid, len(arr1)) - 1\n        newIndex2 = min(index2 + mid, len(arr2)) - 1\n        \n        # Compare the middle elements\n        if arr1[newIndex1] <= arr2[newIndex2]:\n            # Adjust index1 and decrease k\n            k -= (newIndex1 - index1 + 1)\n            index1 = newIndex1 + 1\n        else:\n            # Adjust index2 and decrease k\n            k -= (newIndex2 - index2 + 1)\n            index2 = newIndex2 + 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to easily find the length (number of digits)\n    n_str = str(n)\n    # Calculate the number of digits\n    num_digits = len(n_str)\n    \n    # Initialize the sum of the digits raised to the power of the number of digits\n    sum_of_powers = 0\n    \n    # Iterate over each digit in the number\n    for digit in n_str:\n        # Convert the digit back to an integer and raise it to the power of the number of digits\n        sum_of_powers += int(digit) ** num_digits\n    \n    # Check if the calculated sum matches the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0\n\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Initialize the list of ludic numbers with the first number\n    ludics = [1]\n    \n    # Start from 2 and go up to n\n    candidates = list(range(2, n + 1))\n    \n    # Iterate through the candidates\n    while candidates:\n        # Pop the first element from candidates, which is the next ludic number\n        next_ludic = candidates.pop(0)\n        ludics.append(next_ludic)\n        \n        # Remove every ith element from candidates where i = next_ludic\n        candidates = [candidates[i] for i in range(len(candidates)) if (i + 1) % next_ludic != 0]\n    \n    return ludics\n\n# Test cases to verify the correctness\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None\n\n# Test cases\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a table to store Bell Numbers\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Initialize the table\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the last entry\n    return bell[n][0]\n\n# Assertions to verify the correctness\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    result = [elem for i, elem in enumerate(lst) if i != k]\n    return result"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n\n# Test cases to verify the correctness of the function\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]\n\n# Test cases to verify the correctness of the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total_sum = 0\n    for t in tuples:\n        for num in t:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    result = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result\n\n# The assertion checks (as per the problem statement)\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))) == [25.5, -18.0, 3.75]\nassert average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))) == [305.0, 342.5, 270.0, 232.5]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(x % y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)\n\n# Test cases to verify the correctness of the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    from collections import defaultdict\n\n    nums.sort()\n    dp = {}  # (num, max subset size including num)\n    for num in nums:\n        dp[num] = 1  # Initialize subset size as 1 (the number itself)\n        for factor in range(1, int(num ** 0.5) + 1):\n            if num % factor == 0:\n                factor2 = num // factor\n                if factor in dp and factor2 in dp:\n                    dp[num] = max(dp[num], 1 + dp[factor], 1 + dp[factor2])\n                elif factor in dp:\n                    dp[num] = max(dp[num], 1 + dp[factor])\n                elif factor2 in dp:\n                    dp[num] = max(dp[num], 1 + dp[factor2])\n\n    return max(dp.values())\n\n# Test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # Ensure list1 is the smaller list for optimization\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    \n    low, high = 0, len(list1)\n    half_len = (size + 1) // 2\n    \n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = half_len - partition1\n        \n        max_left1 = float('-inf') if partition1 == 0 else list1[partition1 - 1]\n        min_right1 = float('inf') if partition1 == len(list1) else list1[partition1]\n        \n        max_left2 = float('-inf') if partition2 == 0 else list2[partition2 - 1]\n        min_right2 = float('inf') if partition2 == len(list2) else list2[partition2]\n        \n        if max_left1 <= min_right2 and max_left2 <= min_right1:\n            if size % 2 == 0:\n                return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2\n            else:\n                return max(max_left1, max_left2)\n        elif max_left1 > min_right2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n\n# Test cases\nget_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\nget_median([2, 4, 8, 9], [7, 13, 19, 28], 4)\nget_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with its hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # Here, the base and height are both equal to the radius.\n    area = (1/2) * radius * radius\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(\" \", \"%20\")\n\n# Test cases to verify the correctness of the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [\n        [x-1, y-1], [x-1, y], [x-1, y+1],\n        [x, y-1], [x, y], [x, y+1],\n        [x+1, y-1], [x+1, y], [x+1, y+1]\n    ]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ', 1) if '_' in s else s.replace(' ', '_')\n\n# Test cases to verify the solution:\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    non_zero = [num for num in nums if num != 0]\n    zeros = len(nums) - len(non_zero)\n    return non_zero + [0] * zeros"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum\n\n# Test cases\nassert pair_xor_Sum([5,9,7,6], 4) == 47\nassert pair_xor_Sum([7,3,5], 3) == 12\nassert pair_xor_Sum([7,3], 2) == 4"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    # Wind Chill Formula: WCI = 13.12 + 0.6215T - 11.37V^0.16 + 0.3965TV^0.16\n    # where T is temperature in Celsius and V is wind speed in km/h.\n    # For simplicity and as per common wind chill charts, assume the formula is only valid for temperatures less than or equal to 10\u00b0C and wind speeds greater than 4.8 km/h.\n    if temperature > 10 or velocity < 4.8:\n        return temperature\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 20) == 19\nassert wind_chill(10, 8) == 6"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    stack = []\n    result = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop() if stack else result.append(char)\n        elif not stack:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Check if 'z' appears in the string excluding the first and last character\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)"}
{"task_id": "Mbpp/721", "solution": "from typing import List\n\ndef maxAverageOfPath(costs: List[List[int]]) -> float:\n    n = len(costs)\n    # Initialize DP table\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = costs[0][0]\n\n    # Fill DP table\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + costs[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + costs[i][j])\n\n    # Backtrack to find the path with the maximum average\n    max_sum = dp[-1][-1]\n    max_path_length = n + n - 1\n    max_avg = max_sum / max_path_length\n    return max_avg\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    # Initialize a counter for matching indices\n    match_count = 0\n    \n    # Iterate through the lists using a loop\n    for i in range(len(list1)):\n        # Check if the elements at the current index are equal\n        if list1[i] == list2[i]:\n            # Increment the match counter\n            match_count += 1\n            \n    # Return the final count of matching indices\n    return match_count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(tuple_of_numbers):\n    return tuple(tuple_of_numbers[i] * tuple_of_numbers[i + 1] for i in range(len(tuple_of_numbers) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]  # Initialize result with the first element\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height (l) using Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area using the formula: \u03c0 * r * l\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]+', ':', text)"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible start and end indices for subarrays\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            product = 1\n            # Calculate the product of elements in the current subarray\n            for i in range(start, end):\n                product *= arr[i]\n            # Add the product to the total sum\n            total_sum += product\n            \n    return total_sum\n\n# Test cases\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Step 1: Find the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Step 2: Create a mask to toggle middle bits\n    # The mask will have all bits set except the first and last\n    mask = ((1 << (num_bits - 2)) - 1) if num_bits > 2 else 0\n    \n    # Step 3: Toggle the middle bits using XOR operation\n    return n ^ mask\n\n# Test cases\ntoggle_middle_bits(9)\ntoggle_middle_bits(10)\ntoggle_middle_bits(11)\ntoggle_middle_bits(0b1000001)\ntoggle_middle_bits(0b1001101)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula to check if a triangular number has n digits\n    # is based on the properties of logarithms and triangular numbers.\n    # A triangular number T_n = n * (n + 1) / 2 has n digits if:\n    # 10^(n-1) <= n * (n + 1) / 2 < 10^n\n    # We solve the inequality to find the minimum n that satisfies it.\n    \n    # Lower bound of the inequality\n    lower_bound = math.sqrt(1 + 8 * 10 ** (n - 1)) - 1\n    lower_bound /= 2\n    \n    # Upper bound of the inequality\n    upper_bound = math.sqrt(1 + 8 * 10 ** n) - 1\n    upper_bound /= 2\n    \n    # Find the smallest integer n that satisfies the condition\n    min_index = math.ceil(lower_bound)\n    \n    return min_index\n\n# Assertions to verify the correctness\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Iterate over the tuple in steps of 2 to get key-value pairs\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):\n            result[tup[i]] = tup[i + 1]\n    \n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * (edge_length ** 2)\n\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Calculate the effective rotation\n    n = n % len(lst)\n    \n    # Split the list and concatenate in reverse order\n    return lst[-n:] + lst[:-n]\n\n# Test cases\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_its_digits(n):\n        for d in str(n):\n            if d == '0' or n % int(d) != 0:\n                return False\n        return True\n\n    return [n for n in range(startnum, endnum + 1) if is_divisible_by_its_digits(n)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = s[0]\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result += ' ' + s[i]\n        else:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    # Convert each string in the list to an integer, sort the list, then convert back to strings\n    sorted_strings = sorted(map(int, strings))\n    return sorted_strings\n\n# Test cases to verify the correctness of the function\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Start from the first non-leaf node (n//2 - 1) and go upwards to the root\n    for i in range(n // 2 - 1, -1, -1):\n        # Find the left and right child of node i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check if the current node is smaller than its left child (if exists)\n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        # Check if the current node is smaller than its right child (if exists)\n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    sorted_numbers = sorted(unique_numbers)\n    return sorted_numbers[1]\n\n# Test cases\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\nassert second_smallest([2, 2]) == None\nassert second_smallest([2, 2, 2]) == None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    # Create a dictionary to store the count of each string and its reverse\n    str_count = {}\n    # Initialize the count of reverse string pairs to 0\n    reverse_pair_count = 0\n    \n    # Iterate through each string in the list\n    for string in lst:\n        # Compute the reverse of the current string\n        reverse_string = string[::-1]\n        \n        # If the reverse string is already in the dictionary, it means we found a pair\n        if reverse_string in str_count:\n            reverse_pair_count += 1\n        \n        # Update the count of the current string in the dictionary\n        str_count[string] = str_count.get(string, 0) + 1\n    \n    return reverse_pair_count\n\n# Test cases to verify the correctness of the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^-?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    return len(set(nums)) == 1\n\n# Test cases\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Test cases to verify the function\nassert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1\nassert find_min_diff([4, 3, 2, 6], 4) == 1\nassert find_min_diff([30, 5, 20, 9], 4) == 4"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n\n# Test cases to verify the correctness of the function\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Initialize variables\n    count = 0\n    num = 1\n    while True:\n        # Check if the current number is polite\n        if not (num & (num - 1) == 0) and not (num == 1):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n# Test cases to verify the correctness\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    from collections import defaultdict\n    count_map = defaultdict(int)\n    pair_count = 0\n    \n    for num in nums:\n        complement = target_sum - num\n        pair_count += count_map[complement]\n        count_map[num] += 1\n    \n    return pair_count\n\n# Test cases\nget_pairs_count([1,1,1,1],2)\nget_pairs_count([1,5,7,-1,5],6)\nget_pairs_count([1,-2,3],1)\nget_pairs_count([-1,-2,3],-3)"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 15, 20, 30]\nassert Diff([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5]\nassert Diff([1, 2, 3], [6, 7, 1]) == [2, 3]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        # Generate the ith odd number\n        odd_number = 2 * i + 1\n        # Calculate its fourth power and add it to the total sum\n        total_sum += odd_number ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Mapping of closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    open_brackets = set(bracket_map.values())\n    \n    # Stack to keep track of opening brackets\n    stack = []\n    \n    for char in expression:\n        # If it's an opening bracket, push it onto the stack\n        if char in open_brackets:\n            stack.append(char)\n        # If it's a closing bracket\n        elif char in bracket_map:\n            # If stack is empty or top of the stack doesn't match the corresponding opening bracket, return False\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            # Pop the matching opening bracket from the stack\n            stack.pop()\n    \n    # If stack is empty, all brackets were matched; otherwise, return False\n    return not stack\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(text, substring):\n    index = text.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    # Check if every odd index contains an odd number\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False"}
{"task_id": "Mbpp/777", "solution": "from collections import Counter\n\ndef find_sum(lst):\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21\nassert find_sum([1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71\nassert find_sum([12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    temp = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    \n    result.append(temp)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples_list):\n    result = []\n    for i, (a1, b1) in enumerate(tuples_list):\n        for j, (a2, b2) in enumerate(tuples_list):\n            if i != j:\n                result.append((a1 + a2, b1 + b2))\n                result.append((a1 + b2, b1 + a2))\n    return list(set(result))\n\n# Test cases\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]))\nprint(find_combinations([(1, 2, 3), (3, 4, 5)]))\nprint(find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]))\nprint(find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]))"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n + 1, 2):\n            total_sum += sum(arr[i:j])\n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 1, 2]) == 15\nassert odd_length_sum([1, 7]) == 8"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v * 100\n    \n    s = (maxc - minc) / maxc\n    rc = (maxc - r) / (maxc - minc)\n    gc = (maxc - g) / (maxc - minc)\n    bc = (maxc - b) / (maxc - minc)\n    \n    if r == maxc:\n        h = bc - gc\n    elif g == maxc:\n        h = 2.0 + rc - bc\n    else:\n        h = 4.0 + gc - rc\n    \n    h = (h / 6.0) % 1.0\n    return h * 360, s * 100, v * 100\n\n# Test cases to verify the correctness of the function\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0) == (120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110) == (149.2682926829268, 95.34883720930233, 84.31372549019608)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    even = None\n    odd = None\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return None\n\n# Test cases\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == 2\nassert mul_even_odd([1,5,7,9,10]) == 10"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses\n    stripped = tuple_str[1:-1]\n    # Split the string by commas and convert each part to an integer\n    int_tuple = tuple(int(num.strip()) for num in stripped.split(','))\n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(nested_lists):\n    return len(nested_lists)\n\n# Test cases to verify the correctness of the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())\n\n# Test cases to verify the correctness\nassert return_sum({'a': 100, 'b': 200, 'c': 300}) == 600\nassert return_sum({'a': 25, 'b': 18, 'c': 45}) == 88\nassert return_sum({'a': 36, 'b': 39, 'c': 49}) == 124"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the range from l to r (inclusive)\n    for num in range(l, r + 1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n    \n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range [0, 31]\n    d %= 32\n    # Perform the left rotation\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))\n\n# Test cases\nassert left_rotate(16, 2) == 64\nassert left_rotate(10, 2) == 40\nassert left_rotate(99, 3) == 792\nassert left_rotate(0b0001, 3) == 0b1000\nassert left_rotate(0b0101, 3) == 0b101000\nassert left_rotate(0b11101, 3) == 0b11101000"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')\n\n# Test the function with assertions\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    # Count the number of equal numbers among the three given integers\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(-1, -2, -3) == 0\nassert test_three_equal(1, 2, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14 * 14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125 * 125)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n\n# Test cases to verify the correctness\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]\nassert max_sum_list([[2,3,1]]) == [2, 3, 1]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(t1 > t2 for t1, t2 in zip(tuple1, tuple2))\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True"}
