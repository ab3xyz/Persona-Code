{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return tuple(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers and return them in descending order.\n    \"\"\"\n    return heapq.nlargest(n, numbers)[::-1]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    \"\"\"\n    Check if two numbers differ at exactly one bit position.\n    \n    :param x: First number\n    :param y: Second number\n    :return: True if they differ at exactly one bit position, else False\n    \"\"\"\n    xor_result = x ^ y\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(text):\n    words = text.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(lst):\n    return [x ** 2 for x in lst]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    length = len(s)\n    for i in range(1, length):\n        if s == s[i:] + s[:i]:\n            return i\n    return length"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first = s.find(char)\n    last = s.rfind(char)\n    if first == -1:\n        return s\n    return s[:first] + s[first+1:last] + s[last+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [x for _, x in sorted(zip([sum(row) for row in matrix], matrix))]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    area = (base * height) / 2\n    return area * length"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    import re\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join(c for c in str1 if c not in str2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    from math import log2, floor\n    if n < 1: return False\n    w = int(floor(log2(n + 1)))\n    return (2**w * w - 1) == n"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num == 2 * reverse_num - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr):\n    from functools import cmp_to_key\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n    \n    arr = [str(i) for i in arr]\n    arr.sort(key=cmp_to_key(compare))\n    return int(''.join(arr))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3*n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            sub = s[i:i+length]\n            if sum(int(digit) for digit in sub) == length:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Initialize a 2D array with zeros\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Set the first element to 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the last entry of the last row\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 1\n    while i*i <= n:\n        j = int((n + i*i)**0.5)\n        if j*j - i*i == n:\n            return True\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_map = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_map:\n            if patterns[i] in pattern_map.values():\n                return False\n            pattern_map[colors[i]] = patterns[i]\n        elif pattern_map[colors[i]] != patterns[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    # Calculate the alternating sum of digits\n    odd_sum = 0\n    even_sum = 0\n    for i, digit in enumerate(str(n)):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    return (odd_sum - even_sum) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total = sum(ord(c) for c in s) % 26\n    return chr(total + 65)  # Assuming to get the result within A-Z range, 65 is ASCII for 'A'"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1 or n == 2:\n        return n - 1\n    p = [0, 1, 1] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        p[i] = p[p[i-1]] + p[i - p[i-1]]\n    return p[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 1) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, strng):\n    for item in lst:\n        if strng in item:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    for i in range(len(str_n) - 1):\n        if i % 2 == 0:\n            if str_n[i] != str_n[0]:\n                return False\n        else:\n            if str_n[i] == str_n[0]:\n                return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    return min(len(sublist) for sublist in lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "from collections import Counter\ndef frequency_lists(lists):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lists for item in sublist]\n    # Count the frequency of each element\n    return dict(Counter(flat_list))"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_num):\n    \"\"\"\n    Convert a decimal number to its binary representation as a string with no leading zeros.\n    \"\"\"\n    if decimal_num == 0:\n        return '0'\n    binary_str = ''\n    while decimal_num > 0:\n        binary_str = str(decimal_num % 2) + binary_str\n        decimal_num //= 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return sorted(arr)[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 1:\n        return 1 if m == 0 else 0\n    if m < 0 or m >= n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return sum(1 for item in bool_list if item == True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(lst1, lst2, lst3):\n    combined = lst1 + lst2 + lst3\n    combined.sort()\n    return combined"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    count = 0\n    length = len(binary_str)\n    for i in range(rotations):\n        if int(binary_str, 2) % 2 != 0:\n            count += 1\n        binary_str = binary_str[length-1] + binary_str[:length-1]\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    return s.isdigit()"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    for d in dict_list:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(input_list):\n    result = []\n    for sublist in input_list:\n        float_sublist = [float(item) if item.replace('.', '', 1).isdigit() else item for item in sublist]\n        result.append(tuple(float_sublist) if isinstance(sublist, tuple) else float_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        # Check if mid is even or odd and pair it with next or previous element\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "from typing import List, Tuple\n\ndef max_product_tuple(tuples: List[Tuple[int, int]]) -> float:\n    \"\"\" Finds the maximum absolute product of two numbers in each tuple within a list of tuples.\n    \"\"\"\n    return max(abs(x * y) for x, y in tuples)"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        result = 1\n        i = 2\n        while i * i <= x:\n            if x % i:\n                i += 1\n            else:\n                if i * (x // i) == x:\n                    result *= (i ** 2 - 1)\n                    result //= (i - 1)\n                else:\n                    result *= (i ** 2 - 1)\n                    result //= (i - 1)\n                    result *= ((x // i) ** 2 - 1)\n                    result //= ((x // i) - 1)\n                x //= i\n        if x > 1:\n            result *= (x ** 2 - 1)\n            result //= (x - 1)\n        return result - x\n\n    amicable_sum = 0\n    for num in range(2, n + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n    return amicable_sum // 2"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real, imag):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number represented by its real and imaginary parts.\n    \n    :param real: Real part of the complex number.\n    :param imag: Imaginary part of the complex number.\n    :return: The angle in radians.\n    \"\"\"\n    return math.atan2(imag, real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_str):\n    max_diff = 0\n    count = 0\n    diff_dict = {0: -1}\n    for i, char in enumerate(binary_str):\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n\n        if count in diff_dict:\n            current_diff = i - diff_dict[count]\n            max_diff = max(max_diff, current_diff)\n        else:\n            diff_dict[count] = i\n            \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(x, y):\n    common_divisors_sum = 0\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n\n    target_sum = sum(matrix[0])\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(matrix[i]) != target_sum or sum(row[i] for row in matrix) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    from collections import Counter\n    freq_counter = Counter(lst)\n    max_freq = max(freq_counter.values())\n    return freq_counter.most_common(1)[0][0] if max_freq > 1 else None"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2*n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    \n    if non_zero_count == 0:\n        return math.nan\n    \n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number can be represented as the sum of non-zero powers of 2.\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Count the number of 1s in the binary representation\n    count_ones = binary.count('1')\n    \n    # If the count of 1s is equal to the length of the binary string, it means\n    # the number can be represented as a sum of non-zero powers of 2\n    return count_ones == len(binary) and count_ones > 0\n\n# Test the function with provided data points\n# Note: These are not part of the generated code, just for verification\n# assert is_Sum_Of_Powers_Of_Two(10) == True\n# assert is_Sum_Of_Powers_Of_Two(7) == False\n# assert is_Sum_Of_Powers_Of_Two(14) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set([item for sublist in lst for item in sublist])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    def flip(sublist, k):\n        return sublist[:k][::-1] + sublist[k:]\n\n    n = len(lst)\n    while n > 1:\n        max_index = lst.index(max(lst[:n]))\n        if max_index != n - 1:\n            lst = flip(lst, max_index + 1)\n            lst = flip(lst, n)\n        n -= 1\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(lst1, lst2, lst3):\n    return sum(x == y == z for x, y, z in zip(lst1, lst2, lst3))"}
{"task_id": "Mbpp/143", "solution": "def find_lists(t):\n    return len([item for item in t if isinstance(item, list)])"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    min_val = arr[0]\n    max_diff = 0\n    \n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num - min_val > max_diff:\n            max_diff = num - min_val\n            \n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def gcd_extended(x, y):\n        if x == 0:\n            return (y, 0, 1)\n        else:\n            g, x1, y1 = gcd_extended(y % x, x)\n            return (g, y1 - (y // x) * x1, x1)\n\n    g, x, y = gcd_extended(a, b)\n    if n % g != 0:\n        return None\n    else:\n        x = x * (n // g)\n        y = y * (n // g)\n        return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, elements_to_remove):\n    return [element for element in main_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    def get_divisors_sum(n):\n        return sum(i for i in range(1, n // 2 + 1) if n % i == 0)\n    \n    return get_divisors_sum(num1) == get_divisors_sum(num2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if alphabet.index(s[i]) == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    even_count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                even_count += 1\n    return even_count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    return input_string.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return all(isinstance(x, type(t[0])) for x in t)"}
{"task_id": "Mbpp/223", "solution": ""}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize result\n    result = 0\n    \n    # Iterate over each bit position\n    for i in range(0, 32, 2):\n        # Set even bit\n        result |= (1 << i)\n    \n    # Return the result\n    return n | result"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    from collections import Counter\n    normalized_lst = [tuple(sorted(t)) for t in lst]\n    return dict(Counter(normalized_lst))"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return len(s) * (len(s) + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    from math import comb\n    \n    def count_sequences(target, length):\n        if length == 1:\n            return 1\n        total = 0\n        for i in range(1, min(target, 2**(length-1)) + 1):\n            total += count_sequences(target, length - 1, i)\n        return total if length > 2 else total + (target >= 2**(length-1))\n    \n    return count_sequences(m, n)\n\n# The provided solution might not be optimal and could be improved with dynamic programming,\n# but it serves as a direct answer to the given constraints."}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[:-1] = list1\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    root = math.ceil(math.sqrt(n))\n    return root ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS for each element\n    for i in range (1 , n):\n        for j in range (0 , i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1 :\n                lis[i] = lis[j]+1\n    \n    # Compute LDS for each element\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j]+1\n    \n    # Find maximum value of lis[i] + lds[i] - 1\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, lis[i] + lds[i] - 1)\n    \n    return max_sum\n\n# The provided function is intended to be used with numerical inputs as specified."}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = s.replace(\" \", \"\")  # Remove spaces\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, elem):\n    return tup.count(elem)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(item, int) for item in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(e1, e2) for e1, e2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    a, b = 2, 5\n    count = 2\n    while True:\n        a, b = b, 2 * b**2 - a\n        count += 1\n        if is_prime(b) and count == n:\n            return b"}
{"task_id": "Mbpp/261", "solution": "def division_elements(t1, t2):\n    return tuple([t1[i] / t2[i] for i in range(len(t1))])"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, l):\n    return (lst[:l], lst[l:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return 15 * (human_age ** 0.5) + 31 if human_age <= 7 else 80 + 5 * (human_age - 7)"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return (n * (2 * n - 1))"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += (2*i)**5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def comb(n, k):\n        res = 1\n        for i in range(k):\n            res *= (n - i)\n            res //= (i + 1)\n        return res\n\n    sum_even = 0\n    for i in range(0, n + 1, 2):\n        sum_even += comb(n, i)\n\n    return sum_even"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {k: v for k, v in input_dict.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    for i, elem in enumerate(tup):\n        if isinstance(elem, tuple):\n            return i\n    return 0"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (4*n - 3)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    return all(x == elem for x in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    return \"abb\" in text or \"abbb\" in text"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_so_far = max_ending_here = arr[0]\n        for i in range(1,n):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far,max_ending_here)\n        return max_so_far\n\n    def max_sum_circular(arr):\n        max_kadane = kadane(arr)\n\n        max_wrap = 0\n        for i in range(n):\n            max_wrap += arr[i]\n            arr[i] = -arr[i]\n\n        max_wrap = max_wrap + kadane(arr)\n\n        if (max_wrap > max_kadane):\n            return max_wrap\n        else:\n            return max_kadane\n\n    # If k is 1 then return maximum subarray sum\n    if k == 1:\n        return max_sum_circular(arr)\n\n    # Calculate sum of the array elements.\n    array_sum = 0\n    for i in range(n):\n        array_sum += arr[i]\n\n    # If k is greater than 1 and array sum is positive then answer is\n    # maximum of following.\n    # a) Maximum subarray sum when one instance of array is considered.\n    # b) Maximum circular sum of the array.\n    # c) Sum of the whole array multiplied by k.\n    if (array_sum > 0):\n        return max(max_sum_circular(arr), array_sum * k)\n\n    # If array sum is not positive and k is more than 1 then answer is\n    # maximum circular sum plus (k-2)*array_sum\n    else:\n        return max(max_sum_circular(arr), max_sum_circular(arr) + (k - 2) * array_sum)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = -1\n    max_list = None\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(numerator, denominator):\n    return numerator // denominator"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max([item for item in lst if isinstance(item, (int, float))])"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_count_split_inv(left, right):\n        i = j = inv_count = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged += left[i:]\n        merged += right[j:]\n        return merged, inv_count\n\n    def sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, x = sort_and_count(arr[:mid])\n        right, y = sort_and_count(arr[mid:])\n        merged, z = merge_count_split_inv(left, right)\n        return merged, x + y + z\n\n    _, count = sort_and_count(arr)\n    return count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    agg_dict = {}\n    for name, score in lst:\n        if name in agg_dict:\n            agg_dict[name] += score\n        else:\n            agg_dict[name] = score\n    max_name = max(agg_dict, key=agg_dict.get)\n    return (max_name, agg_dict[max_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    import math\n    return math.comb(2*n, n) / (2**n)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()), default=0)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        split_words = word.split()\n        for w in split_words:\n            if w[0].lower() == 'p':\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for j in range(1, n):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j] and dp[m] + arr[j] > dp[j]:\n                dp[j] = dp[m] + arr[j]\n                \n    max_sum = 0\n    for m in range(i):\n        if arr[m] < arr[k]:\n            max_sum = max(max_sum, dp[m])\n            \n    return max_sum + arr[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(lst1, lst2, n):\n    from itertools import product\n    prod_lst = [a*b for a, b in product(lst1, lst2)]\n    return sorted(prod_lst, reverse=True)[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    return tuple(input_string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if n & (n - 1) == 0:  # check if n is power of 2\n        return n | (n >> 1)\n    else:\n        while n & (n - 1) != 0:\n            n &= n - 1\n        return n | (n >> 1)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    lucas_n_minus_1 = 1\n    lucas_n_minus_2 = 2\n    for _ in range(2, n + 1):\n        current_lucas = lucas_n_minus_1 + lucas_n_minus_2\n        lucas_n_minus_2 = lucas_n_minus_1\n        lucas_n_minus_1 = current_lucas\n\n    return current_lucas"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_string):\n    return [format_string.format(item) for item in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    return [{id_: {name: score}} for id_, name, score in zip(ids, names, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo: return memo[n]\n    if n < 2: return n\n    memo[n] = max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a - b) * (c - a) >= 0:\n        return a\n    elif (b - a) * (c - b) >= 0:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, int):\n            for digit in str(abs(item)):\n                total_sum += int(digit)\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    return len(set(tuple(sorted(t)) for t in lst))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n & 1 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    length = len(digits)\n\n    # Start from the end of the number and find the first digit that is smaller than the digit next to it.\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, then the digits are in descending order and there's no bigger arrangement.\n        return None\n\n    # Find the smallest digit on the right side of (i-th digit) that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Sort the digits after the (i+1)-th position\n    digits[i + 1:] = sorted(digits[i + 1:])\n\n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    min_product = lst[0][0] * lst[0][1]\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numbers = [x for x in lst if isinstance(x, (int, float))]\n    # Return the minimum value if the list is not empty, else return None\n    return min(numbers) if numbers else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return bool(set(seq1) & set(seq2))"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2]) if arr[-1] * arr[-2] > arr[0] * arr[1] else (arr[0], arr[1])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_sum = sum(round(num) for num in numbers)\n    return rounded_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        total_sum += even_num ** 3\n    return total_sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t):\n    return '-'.join(map(str, t))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [word[-1] for word in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] > temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(x & y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The formula for the directrix of a parabola (y = a(x - h)^2 + k) is k - 1/(4a)\n    # Note: For vertical parabolas, the directrix is a horizontal line, hence the formula.\n    return k - 1/(4*a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b) / 2 + c"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x < num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the negative numbers.\n    \"\"\"\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 1])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples_list):\n    count = 0\n    seen = set()\n    for t in tuples_list:\n        if t in seen or (t[1], t[0]) in seen:\n            count += 1\n        else:\n            seen.add(t)\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to string and concatenate them\n    result = int(''.join(str(i) for i in lst))\n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b(ly|ment)\\b.*?\\b', sentence)\n    if match:\n        adverb = match.group(0).split()[0]\n        start_pos = match.start()\n        end_pos = start_pos + len(adverb)\n        return (start_pos, end_pos, adverb)\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side):\n    return 6 * side ** 2"}
{"task_id": "Mbpp/442", "solution": "from math import isclose\n\ndef positive_count(arr):\n    positive_nums = sum(1 for num in arr if num > 0)\n    return round(positive_nums / len(arr), 3) if arr else 0"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a[0]*b[0], a[1]*b[1]) for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(el) for el in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    return [i ** 3 for i in lst]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n == 0: return 0\n    a, b, c = 3, 0, 2\n    sum_perrin = 3 + 2\n    for _ in range(2, n):\n        a, b, c = b, c, a+b\n        sum_perrin += c\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            sum_even += i\n    return sum_even"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    return month in thirty_one_days_months"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list_of_lists):\n    if not list_of_lists:  # check if the list is empty\n        return []\n    min_length = len(list_of_lists[0])\n    min_list = list_of_lists[0]\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(st):\n    return sum(1 for c in st if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(colors):\n    result = []\n    for r in range(len(colors) + 1):\n        for subset in combinations(colors, r):\n            result.append(list(subset))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_prod = min_prod = result = nums[0]\n\n    for i in range(1, len(nums)):\n        choices = (nums[i], nums[i] * max_prod, nums[i] * min_prod)\n        max_prod = max(choices)\n        min_prod = min(choices)\n\n        result = max(result, max_prod)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    n = len(nums)\n    dp = [0] * n\n    dp[0], max_product = nums[0], nums[0]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], (dp[j] * nums[i]) if j > 0 else nums[i])\n        max_product = max(max_product, dp[i])\n        \n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for number in arr:\n        product *= number % n\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return lst == list(range(min(lst), max(lst) + 1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(lst1, lst2):\n    set1 = {tuple(sorted(t)) for t in lst1}\n    set2 = {tuple(sorted(t)) for t in lst2}\n    return set1 & set2"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dct):\n    return sorted(dct.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = (n*(n+1)//2)**2\n    sum_of_numbers = (n*(n+1))//2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    odd_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) & 1:\n                odd_count += 1\n    return odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str_num1, str_num2 = str(num1), str(num2)\n    len_diff = abs(len(str_num1) - len(str_num2))\n    max_len = max(len(str_num1), len(str_num2))\n    \n    # Equalize lengths by padding shorter number with zeros at the beginning\n    str_num1 = '0' * len_diff + str_num1 if len(str_num1) < len(str_num2) else str_num1\n    str_num2 = '0' * len_diff + str_num2 if len(str_num2) < len(str_num1) else str_num2\n    \n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1).union(set(tuple2))\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Returns the length of the longest sublist within the provided list of lists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(word):\n    return [char for char in word]"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    counts = {}\n    result = []\n    for num in lst:\n        if num not in counts:\n            counts[num] = 1\n            result.append(num)\n        else:\n            counts[num] += 1\n            if num in result:\n                result.remove(num)\n    return result"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    return prod(set(numbers))\n\nfrom math import prod"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area of a cylinder using the formula:\n    # A = 2 * pi * r * (r + h)\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(mixed_tuple):\n    result = []\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge/2)**2 + height**2)\n    lateral_area = (base_edge * slant_height) * 4\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    import math\n    squares = []\n    for i in range(math.ceil(math.sqrt(start)), math.floor(math.sqrt(end)) + 1):\n        squares.append(i * i)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular (Cartesian) coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return both complex and tuple representations\n    return ((r, theta), x + y*1j)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    sum_product = 0\n    for k in range(n):\n        sum_product += comb(n, k) * comb(n, k + 1)\n    return sum_product"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    parts = ip_address.split('.')\n    non_zero_parts = [str(int(part)) for part in parts]\n    return '.'.join(non_zero_parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return abs(first_even - first_odd) if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return None\n\n    ones_str1 = str1.count('1')\n    ones_str2 = str2.count('1')\n\n    if ones_str1 != ones_str2:\n        return None\n\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swaps += 1\n\n    return swaps // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n    \"\"\"\n    len1 = len(arr1)\n    len2 = len(arr2)\n    index1 = 0\n    index2 = 0\n    \n    for _ in range(k - 1):\n        if index1 < len1 and (index2 >= len2 or arr1[index1] < arr2[index2]):\n            index1 += 1\n        else:\n            index2 += 1\n            \n    if index1 < len1 and (index2 >= len2 or arr1[index1] < arr2[index2]):\n        return arr1[index1]\n    else:\n        return arr2[index2]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert integer to a string to easily iterate over digits\n    str_n = str(n)\n    # Calculate the length of the number\n    k = len(str_n)\n    # Initialize sum\n    sum_of_powers = 0\n    # Iterate over each digit\n    for digit in str_n:\n        # Add the digit raised to the power of k to the sum\n        sum_of_powers += int(digit) ** k\n    # Check if sum equals the input number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = (n * (n + 1)) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic = list(range(1, n + 1))\n    index = 1\n    while index < len(ludic):\n        i = index + ludic[index]\n        while i < len(ludic):\n            del ludic[i]\n            if i < len(ludic):\n                i += ludic[index]\n            else:\n                break\n        index += 1\n    return ludic"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split(' ')[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [x for i, x in enumerate(lst) if i != k]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(i) for i in zip(*lst)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(lst):\n    total = 0\n    for tup in lst:\n        for num in tup:\n            total += num\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = ''\n    chars = ''\n    for char in s:\n        if char.isdigit():\n            nums += char\n        else:\n            chars += char\n    return chars + nums"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    nums.sort()\n    dp = [1] * len(nums)\n    idx = [i for i in range(len(nums))]\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 and gcd(nums[i], nums[j]) == nums[j]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    idx[i] = j\n                    \n    max_len = max(dp)\n    max_idx = dp.index(max_len)\n    \n    subset = []\n    while max_len > 0:\n        subset.append(nums[max_idx])\n        max_idx = idx[max_idx]\n        max_len -= 1\n        \n    return len(subset)"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    i = 0 \n    j = 0 \n    m1 = -1\n    m2 = -1\n    count = 0\n\n    for _ in range(2 * n):\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        if arr1[i] < arr2[j]:\n            if count == n:\n                m1 = m2\n                m2 = arr1[i]\n            i += 1\n        else:\n            if count == n:\n                m1 = m2\n                m2 = arr2[j]\n            j += 1\n\n        if i < n and j < n:\n            if arr1[i] < arr2[j]:\n                if count == n:\n                    m1 = m2\n                    m2 = arr1[i]\n                i += 1\n            else:\n                if count == n:\n                    m1 = m2\n                    m2 = arr2[j]\n                j += 1\n\n    return (m1 + m2) / 2.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [pow(i, n) for i in lst]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(text):\n    return text.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(r):\n    if r < 0:\n        return None\n    # The area of the largest triangle that can be inscribed in a semicircle \n    # with radius r is given by 1/2 * base * height = 1/2 * (2r) * r = r^2.\n    return r ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [\n        [i, j] for i in range(x - 1, x + 2)\n        for j in range(y - 1, y + 2)\n    ]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ').swapcase().replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    non_zero = [x for x in arr if x != 0]\n    zeros = [0] * (len(arr) - len(non_zero))\n    return non_zero + zeros"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost, sale):\n    return cost == sale"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    import math\n    # The formula for wind chill index is: \n    # WCI = 13.12 + 0.6215T -  11.37V^0.16 + 0.3965TV^0.16\n    # where T is temperature in Celsius and V is wind speed in km/h.\n    # This formula is typically valid for temperatures of 10\u00b0C and lower, \n    # and wind speeds of at least 4.8 km/h.\n    # For simplicity and based on given test cases, we will use this formula directly.\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names starting with a lowercase letter and sum the lengths of the remaining names\n    filtered_names = [name for name in names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    stack = []\n    result = \"\"\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        elif not stack:\n            result += char\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number using the formula:\n    Nonagonal number: N_n = n * (7*n - 5) / 2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    return any(c == 'z' for c in text[1:-1])"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the elements of the array up to the given position k.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_):\n    return tup + (dict_,)"}
{"task_id": "Mbpp/721", "solution": "from typing import List\n\ndef maxAverageOfPath(matrix: List[List[int]]) -> float:\n    N = len(matrix)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(N):\n        for j in range(N):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n    total_sum = dp[-1][-1]\n    return total_sum / (N * 2 - 1)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {student: data for student, data in students.items() if data[0] >= min_height and data[1] >= min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(lst1, lst2):\n    return sum(1 for a, b in zip(lst1, lst2) if a == b)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)  # Slant height\n    return math.pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        total_sum += (arr[i] * (i+1) * (n-i))\n        \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask that has all middle bits set\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the middle bits using XOR operation\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    left = 0\n    right = len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula derived from the problem statement is:\n    # index = ceil((sqrt(8*10^(n-1) + 1) - 1) / 2)\n    return math.ceil((math.sqrt(8 * math.pow(10, (n-1)) + 1) - 1) / 2)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * (edge_length ** 2)"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)  # To handle rotations greater than the length of the list\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_its_digits(number):\n        for digit in str(number):\n            if digit == '0' or number % int(digit) != 0:\n                return False\n        return True\n\n    return [number for number in range(startnum, endnum + 1) if is_divisible_by_its_digits(number)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    result = text[0]\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result += ' ' + text[i]\n        else:\n            result += text[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    for i in range(int(n/2)-1, -1, -1):\n        j = 2 * i + 1\n        while j < n:\n            if j + 1 < n and arr[j+1] < arr[j]:\n                j += 1\n                \n            if arr[i] > arr[j]:\n                return False\n            \n            j = 2 * j + 1\n                \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    j_prev_prev = 0\n    j_prev = 1\n    for _ in range(2, n + 1):\n        j_current = 2 * j_prev + j_prev_prev\n        j_prev_prev = j_prev\n        j_prev = j_current\n\n    return j_current"}
{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.remove(min(unique_numbers))\n    return min(unique_numbers)"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    reverse_map = {word: word[::-1] for word in lst}\n    count = 0\n    for word in lst:\n        if word in reverse_map and reverse_map[word] in lst:\n            count += 1\n    return count // 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the occurrences of sublists within a list and returns a dictionary\n    with tuples representing the sublists as keys and their counts as values.\n    \"\"\"\n    from collections import Counter\n    return dict(Counter(tuple(sub) for sub in lst))"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Check if the string s represents a decimal number with a precision of exactly 2.\n    \"\"\"\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    thirty_days_months = {4, 6, 9, 11}\n    return month_number in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if (arr[i+1] - arr[i] < min_diff):\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_numbers = [0]\n    i = 1\n    while len(polite_numbers) < n + 1:\n        for j in range(i):\n            if i + polite_numbers[j] > len(polite_numbers):\n                polite_numbers.append(i + polite_numbers[j])\n    return polite_numbers[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    seen = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += seen[complement]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    # Combine both lists\n    combined = list1 + list2\n    # Use a dictionary to count occurrences\n    counts = {}\n    for item in combined:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    # Filter items that appear only once\n    unique_items = [item for item in combined if counts[item] == 1]\n\n    return unique_items"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = set([\"(\", \"[\", \"{\"])\n    closing_to_opening = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing_to_opening:\n            if not stack or stack.pop() != closing_to_opening[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join([word for word in s.split() if len(word) != k])"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(text, substring):\n    index = text.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2): \n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(arr):\n    unique_elements = {x for x in arr if arr.count(x) == 1}\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    sub_list = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sub_list.append(lst[i])\n        else:\n            result.append(sub_list)\n            sub_list = [lst[i]]\n    \n    result.append(sub_list)\n    \n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples_list):\n    result = []\n    for i in range(1, len(tuples_list) + 1):\n        for combo in combinations(tuples_list, i):\n            sums = tuple(sum(x) for x in zip(*combo))\n            result.append(sums)\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(0, n):\n        total_sum += ((i+1) * (n-i) + 1) // 2 * arr[i]\n\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v * 100\n    s = (maxc - minc) / maxc\n    rc = (maxc - r) / (maxc - minc)\n    gc = (maxc - g) / (maxc - minc)\n    bc = (maxc - b) / (maxc - minc)\n    if r == maxc:\n        h = bc - gc\n    elif g == maxc:\n        h = 2.0 + rc - bc\n    else:\n        h = 4.0 + gc - rc\n    h = (h / 6.0) % 1.0\n    return h * 360, s * 100, v * 100"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even and odd else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(int(i) for i in s[1:-1].split(', '))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= val:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(arr, string):\n    return tuple(arr + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2): # Start from index 0, checking every 2nd element\n        if lst[i] % 2 != 0:         # If the number at the even index is not even\n            return False            # Return False immediately\n    return True                     # If we finish the loop without finding any odd numbers at even indices, return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for element in input_tuple:\n        if not isinstance(element, tuple):\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    n = len(arr)\n    i = n - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = '^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(x for x in range(l, r + 1) if x % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    return min(x == y, y == z, x == z) + 2 * (x == y == z)"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n        if product % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_len = 0\n    current_len = 0\n    for char in s:\n        if char.isupper():\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t2, t1))"}
