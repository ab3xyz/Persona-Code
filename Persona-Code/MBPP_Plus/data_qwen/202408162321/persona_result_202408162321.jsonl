{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return tuple(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Determines if a given number n is not a prime number.\n    \n    Parameters:\n    - n (int): The number to check.\n    \n    Returns:\n    - bool: True if n is not a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Finds the n largest integers from the given list of numbers and returns them in descending order.\n    \n    :param numbers: List of integers.\n    :param n: Number of largest integers to return.\n    :return: A list of n largest integers in descending order.\n    \"\"\"\n    # Use nlargest from heapq to find the n largest elements efficiently\n    largest_n = heapq.nlargest(n, numbers)\n    \n    # Return the result in descending order\n    return sorted(largest_n, reverse=True)\n\n# Example usage:\n# result = heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n# print(result)  # Output: [85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers to find differing bits\n    xor_result = x ^ y\n    \n    # Check if the XOR result is a power of 2 (only one bit set)\n    return xor_result and not (xor_result & (xor_result - 1))"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(text):\n    \"\"\"\n    Finds all words which are at least 4 characters long in the given string.\n    \n    Parameters:\n    text (str): The input string to search for words.\n    \n    Returns:\n    list: A list of words that are at least 4 characters long.\n    \"\"\"\n    # Split the string into words\n    words = text.split()\n    \n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s: str) -> int:\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n    \n    Parameters:\n    s (str): The input string to rotate.\n    \n    Returns:\n    int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    if len(s) <= 1:\n        return 1\n    \n    rotations = 1\n    temp = s\n    \n    while rotations < len(s):\n        # Rotate the string by one position\n        temp = temp[-1] + temp[:-1]\n        \n        if temp == s:\n            return rotations\n        \n        rotations += 1\n    \n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the first and last occurrence of the character\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n\n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n\n    # Remove the first and last occurrence of the character\n    # Adjust indices if the same character appears both at the beginning and the end\n    if first_occurrence == 0 and last_occurrence == len(s) - 1:\n        return s[first_occurrence + 1:last_occurrence]\n    elif first_occurrence == 0:\n        return s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    elif last_occurrence == len(s) - 1:\n        return s[first_occurrence + 1:last_occurrence]\n    else:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and pair it with the row index\n    row_sums = [(sum(row), idx) for idx, row in enumerate(matrix)]\n    \n    # Sort the rows based on their sums\n    sorted_rows = sorted(row_sums, key=lambda x: x[0])\n    \n    # Reconstruct the matrix in sorted order\n    sorted_matrix = [matrix[idx] for _, idx in sorted_rows]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_volume(base, height, length):\n    # Calculate the area of the base triangle\n    base_area = (base * height) / 2\n    # Calculate the volume of the triangular prism\n    volume = base_area * length\n    return volume\n\n# Example usage (not part of the function)\nprint(find_volume(10, 8, 6))  # Expected output: 240"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    # Create a set of unique characters from s2 for efficient lookup\n    chars_to_remove = set(s2)\n    \n    # Use a list comprehension to filter out unwanted characters\n    result = [char for char in s1 if char not in chars_to_remove]\n    \n    # Join the list back into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Checks if the given array of integers contains any duplicate elements.\n    \n    :param arr: List of integers\n    :return: True if there are duplicates, False otherwise\n    \"\"\"\n    # Using a set to track unique elements\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if a given number n is a Woodall number.\n    \n    A Woodall number is a number of the form W_n = n * 2^n - 1 for some n.\n    This function determines if the given number is a Woodall number.\n    \"\"\"\n    x = 1\n    while x * 2**x - 1 < n:\n        x += 1\n    return x * 2**x - 1 == n"}
{"task_id": "Mbpp/56", "solution": "def check(number):\n    reversed_number = int(str(number)[::-1])\n    return number == 2 * reversed_number - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits based on a custom comparison to form the largest number\n    from functools import cmp_to_key\n    def compare(x, y):\n        return int(y + x) - int(x + y)\n\n    str_digits = [str(digit) for digit in digits]\n    str_digits.sort(key=cmp_to_key(compare))\n    \n    # Handle the case where the highest digit is 0 to avoid leading zeros\n    if str_digits[0] == '0':\n        return 0\n    \n    # Join the sorted digits to form the largest number\n    largest_num = ''.join(str_digits)\n    return int(largest_num)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate through all possible substrings\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            \n            # Check if the sum equals the length of the substring\n            if current_sum == j - i + 1:\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    # Initialize the first element as the smallest\n    smallest = numbers[0]\n    \n    # Iterate through the list to find the smallest number\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    \n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to 0\n    max_diff = 0\n    \n    # Iterate through each pair in the list\n    for pair in pairs:\n        # Calculate the difference for the current pair\n        diff = pair[1] - pair[0]\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Counts the number of positive numbers in a given list.\n\n    :param numbers: List of integers.\n    :return: Count of positive numbers in the list.\n    \"\"\"\n    return sum(1 for num in numbers if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number, which represents the number of ways to partition a set of n elements.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap for the next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Checks if the given number n can be represented as the difference of two squares.\n    \n    :param n: Integer to check\n    :return: Boolean indicating if n can be represented as the difference of two squares\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        low = i * i\n        high = n + (i * i)\n        if (n + (i * i)) ** 0.5 == int((n + (i * i)) ** 0.5):\n            return True\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    # Mapping colors to patterns\n    color_to_pattern = {}\n    \n    if len(colors) != len(patterns):\n        return False\n\n    for color, pattern in zip(colors, patterns):\n        # Check if the color has already been mapped\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            # Check if the pattern is already assigned to another color\n            if pattern in color_to_pattern.values():\n                return False\n            color_to_pattern[color] = pattern\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    \"\"\"\n    Check if the given number is divisible by 11.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return number % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    ascii_sum = sum(ord(char) for char in s)\n    return chr(ascii_sum % 26)"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    \"\"\"\n    Compute the n-th number in the Newman-Conway sequence.\n    The sequence is defined as follows:\n    P(1) = 1, P(2) = 1,\n    For all n > 2, P(n) = P(P(n - 1)) + P(n - P(n - 1)).\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n\n    # Initialize the sequence array with base cases.\n    newman_conway = [0, 1, 1] + [0] * (n - 2)\n\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n\n    return newman_conway[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 3 + 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the dictionaries using dictionary unpacking\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first_digit = str_n[0]\n    second_digit = str_n[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(2, len(str_n)):\n        if i % 2 == 0 and str_n[i] != first_digit:\n            return False\n        elif i % 2 != 0 and str_n[i] != second_digit:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    # Initialize the minimum value and the corresponding first element\n    min_value = lst[0][1]\n    min_element = lst[0][0]\n\n    # Iterate through the list to find the tuple with the smallest second value\n    for item in lst:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_element = item[0]\n\n    return min_element"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    min_length = len(lists[0])\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "from collections import defaultdict\nfrom itertools import chain\n\ndef frequency_lists(list_of_lists):\n    # Initialize a default dictionary to keep track of frequencies\n    freq_dict = defaultdict(int)\n    \n    # Flatten the list of lists using itertools.chain\n    for item in chain(*list_of_lists):\n        freq_dict[item] += 1\n    \n    # Convert the defaultdict back to a regular dict for the output\n    return dict(freq_dict)"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Converts a given decimal number to its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if decimal_number == 0:\n        return '0'\n    \n    binary_string = ''\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_string = str(remainder) + binary_string\n        decimal_number = decimal_number // 2\n    \n    return binary_string"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def next_number(x):\n        x += 1\n        while not is_palindrome(x):\n            x += 1\n        return x\n\n    if n < 10:\n        return n + 1\n    else:\n        return next_number(n - 1)"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Finds the kth element in the given array using 1-based indexing.\n    \n    Parameters:\n    arr (list): The input list of numbers.\n    k (int): The 1-based index of the element to retrieve.\n    \n    Returns:\n    int: The kth element in the array.\n    \"\"\"\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component except the first one if it's the first component\n    # and join them together.\n    return components[0].capitalize() + ''.join(x.capitalize() for x in components[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 1 or m == 0 or m == n - 1:\n        return 1\n    else:\n        return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings in the given list of lists in alphabetical order.\n    \n    Parameters:\n    - list_of_lists: A list containing sublists of strings\n    \n    Returns:\n    - A new list of lists with each sublist sorted alphabetically\n    \"\"\"\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of True values in the given list.\n    \n    :param lst: List of boolean values.\n    :return: Integer count of True values.\n    \"\"\"\n    return sum(lst)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine all three lists\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    \"\"\"\n    Counts the number of rotations where the binary string represents an odd number.\n    \n    :param binary_str: A binary string.\n    :param rotations: Number of times to rotate the string.\n    :return: Count of rotations resulting in an odd number.\n    \"\"\"\n    count = 0\n    length = len(binary_str)\n    for _ in range(rotations):\n        # Check if the current string represents an odd number\n        if binary_str[0] == '1':\n            count += 1\n        # Rotate the string\n        binary_str = binary_str[-1:] + binary_str[:-1]\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in given nested lists.\n    \n    Args:\n    nested_lists (list of list of int): A list containing multiple lists of integers.\n    \n    Returns:\n    list: A list containing the common elements found in all the sublists.\n    \"\"\"\n    if not nested_lists:\n        return []\n    \n    # Convert the first sublist to a set for comparison\n    common_elements = set(nested_lists[0])\n    \n    # Intersect the set with each subsequent sublist\n    for sublist in nested_lists[1:]:\n        common_elements &= set(sublist)\n        \n        # If the common set is empty, no need to continue\n        if not common_elements:\n            break\n    \n    return list(common_elements)\n\n# Example usage (not part of the function)\n# print(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Checks if the input string s represents an integer.\n    \n    Args:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if s represents an integer, False otherwise.\n    \"\"\"\n    # Check if the string is empty or has only a sign\n    if len(s) == 0 or (len(s) == 1 and s in ('+', '-')):\n        return False\n    \n    # Check if the string is an integer\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    \"\"\"\n    Check if all dictionaries in the given list are empty.\n    \n    Args:\n    lst (list): A list of dictionaries.\n    \n    Returns:\n    bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for d in lst:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(nested_list):\n    result = []\n    for sublist in nested_list:\n        float_sublist = [float(item) if item.replace('.', '', 1).isdigit() else item for item in sublist]\n        result.append(float_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    \"\"\"\n    Converts a given string into a list of strings split on the space character.\n    \n    :param input_string: A string to be converted.\n    :return: A list of strings split from the input string.\n    \"\"\"\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        # Check if the mid is on the correct position\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "from typing import List, Tuple\nimport math\n\ndef max_product_tuple(pairs: List[Tuple[int, int]]) -> float:\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    \n    Args:\n    pairs: A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n    The maximum absolute product as a float.\n    \"\"\"\n    max_product = -math.inf\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            product1 = pairs[i][0] * pairs[j][0]\n            product2 = pairs[i][0] * pairs[j][1]\n            product3 = pairs[i][1] * pairs[j][0]\n            product4 = pairs[i][1] * pairs[j][1]\n            \n            max_product = max(max_product, abs(product1), abs(product2), abs(product3), abs(product4))\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        s = 1  # Start with 1 because it's always a divisor\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                s += i\n                if i != x // i:\n                    s += x // i\n        return s\n\n    amicable_sum = 0\n    for num in range(2, n + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(complex_number):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number.\n    \n    Parameters:\n    - complex_number: A complex number.\n    \n    Returns:\n    - The angle (phase) of the complex number in radians.\n    \"\"\"\n    # Extract real and imaginary parts\n    real_part = complex_number.real\n    imag_part = complex_number.imag\n    \n    # Calculate the angle using atan2 for correct quadrant handling\n    angle = math.atan2(imag_part, real_part)\n    \n    return angle"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_str):\n    max_diff = 0\n    current_diff = 0\n    count_dict = {0: -1}\n    \n    for i, char in enumerate(binary_str):\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff > max_diff:\n            max_diff = current_diff\n        \n        if current_diff in count_dict:\n            continue\n        else:\n            count_dict[current_diff] = i\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    common_gcd = gcd(x, y)\n    return sum_divisors(common_gcd)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    return x * y"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    result = [word for word in words if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n\n    # Check if it's a square matrix\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum or sum(matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check for unique numbers\n    flat_list = [item for sublist in matrix for item in sublist]\n    if len(set(flat_list)) != n * n:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    max_freq = -1\n    max_item = None\n    for item, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    \"\"\"\n    Reverses only the vowels in the given string s.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        # Move left pointer until a vowel is found\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        # Move right pointer until a vowel is found\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        # Swap the vowels\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        left, right = left + 1, right - 1\n    \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    \n    if non_zero_count == 0:\n        return float('inf') if zero_count > 0 else 0.0\n    \n    ratio = zero_count / non_zero_count\n    return ratio"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number can be represented as the sum of non-zero powers of 2.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary_str = bin(n)[2:]\n    \n    # Count the number of '1's in the binary representation\n    count_ones = binary_str.count('1')\n    \n    # If the count of '1's is greater than 1, it means the number cannot be represented\n    # as the sum of non-zero powers of 2 (since each power of 2 contributes a single '1').\n    return count_ones <= 1"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculates the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    \"\"\"\n    Flattens a list of lists into a single set of unique numbers.\n    \n    :param list_of_lists: A list where each element is a tuple of numbers.\n    :return: A set containing all unique numbers from the input tuples.\n    \"\"\"\n    result_set = set()\n    for sublist in list_of_lists:\n        for number in sublist:\n            result_set.add(number)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    \"\"\"\n    Sorts an array using the pancake sort algorithm.\n    \"\"\"\n    def flip(sub_arr, k):\n        # Flip the first k elements of the current sub-array\n        sub_arr[:k] = sub_arr[:k][::-1]\n\n    def find_max_in_sub_arr(sub_arr, n):\n        # Find the index of the maximum element in sub_arr[0..n-1]\n        max_index = 0\n        for i in range(n):\n            if sub_arr[i] > sub_arr[max_index]:\n                max_index = i\n        return max_index\n\n    end = len(arr)\n    while end > 1:\n        max_index = find_max_in_sub_arr(arr, end)\n\n        if max_index != end - 1:\n            # Flip the max element to the beginning if it's not already there\n            if max_index != 0:\n                flip(arr, max_index + 1)\n            # Flip the max element to its correct position\n            flip(arr, end)\n\n        # Reduce the size of the current sub-array by one\n        end -= 1\n\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position across three given lists.\n    \"\"\"\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(t):\n    # Initialize the count of lists found in the tuple\n    list_count = 0\n    \n    # Iterate through each element in the tuple\n    for element in t:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Increment the count if the element is a list\n            list_count += 1\n            \n    # Return the total count of lists found\n    return list_count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Initialize minimum value and maximum difference\n    min_val = arr[0]\n    max_diff = 0\n    \n    # Iterate through the array to find the minimum value and maximum difference\n    for num in arr:\n        # Update the minimum value if the current number is less than the current minimum\n        min_val = min(min_val, num)\n        \n        # Calculate the difference between the current number and the minimum value found so far\n        diff = num - min_val\n        \n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n\n# Example usage (not part of the function)\n# max_Abs_Diff((2,1,5,3))\n# max_Abs_Diff((9,3,2,5,1))\n# max_Abs_Diff((3,2,1))"}
{"task_id": "Mbpp/160", "solution": "def extended_euclidean(a, b):\n    if a == 0:\n        return b, 0, 1\n    else:\n        g, x, y = extended_euclidean(b % a, a)\n        return g, y - (b // a) * x, x\n\ndef find_solution(a, b, n):\n    # Find gcd and coefficients for ax + by = gcd(a, b)\n    gcd, x, y = extended_euclidean(a, b)\n    \n    # Check if n is divisible by gcd\n    if n % gcd != 0:\n        return None\n    \n    # Scale the solution\n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Removes all elements from lst that are present in elements_to_remove.\n    \n    :param lst: List from which elements will be removed.\n    :param elements_to_remove: List containing elements to be removed from lst.\n    :return: A new list with the elements removed.\n    \"\"\"\n    # Convert elements_to_remove to a set for O(1) lookups\n    elements_set = set(elements_to_remove)\n    \n    # Use list comprehension to filter out elements present in elements_set\n    return [element for element in lst if element not in elements_set]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": ""}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i, char in enumerate(s, start=1):\n        if ord(char) - ord('a') + 1 == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs that xor to an even number is the sum of:\n    # - Combinations of even numbers (even ^ even = even)\n    # - Combinations of odd numbers (odd ^ odd = even)\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32  # This line is for handling 64-bit integers\n    return n + 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Calculate the sum of numbers in a list within a specified range.\n\n    :param numbers: List of integers.\n    :param start_index: Starting index of the range.\n    :param end_index: Ending index of the range.\n    :return: Sum of numbers within the specified range.\n    \"\"\"\n    # Validate input parameters\n    if not isinstance(numbers, list) or not all(isinstance(x, int) for x in numbers):\n        raise ValueError(\"Input 'numbers' must be a list of integers.\")\n    if not isinstance(start_index, int) or not isinstance(end_index, int):\n        raise ValueError(\"Indices 'start_index' and 'end_index' must be integers.\")\n    if start_index < 0 or end_index >= len(numbers):\n        raise IndexError(\"Indices are out of bounds.\")\n    if start_index > end_index:\n        raise ValueError(\"Start index cannot be greater than end index.\")\n\n    # Calculate the sum of the specified range\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    return input_string.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    return all(isinstance(x, type(tup[0])) for x in tup)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Determines if the given element is the majority element in the sorted array.\n    The majority element is the one that appears more than n/2 times in the array.\n    \n    :param arr: List[int] - A sorted list of integers.\n    :param n: int - The length of the array.\n    :param element: int - The element to check for majority status.\n    :return: bool - True if the element is the majority, False otherwise.\n    \"\"\"\n    # Find the first occurrence of the element using binary search\n    def find_first_occurrence(arr, element):\n        low, high = 0, n - 1\n        result = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                result = mid\n                high = mid - 1  # Move left to find the first occurrence\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n\n    # Find the last occurrence of the element using binary search\n    def find_last_occurrence(arr, element):\n        low, high = 0, n - 1\n        result = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                result = mid\n                low = mid + 1  # Move right to find the last occurrence\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n\n    first_occurrence = find_first_occurrence(arr, element)\n    if first_occurrence == -1:\n        return False  # Element not found\n\n    last_occurrence = find_last_occurrence(arr, element)\n    count = last_occurrence - first_occurrence + 1\n    return count > n / 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate negative and positive numbers from the first n elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n\n    # Concatenate the lists, preserving the relative order\n    rearranged = negatives + positives + arr[n:]\n\n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Sets all even bits of a given number n.\n    \n    Args:\n    n (int): The input number whose even bits are to be set.\n    \n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n    # Start with a mask that has all even bits set\n    even_bit_mask = 0xAAAAAAAA  # Binary: 10101010 10101010 10101010 10101010\n    \n    # Apply the mask to n using bitwise OR to set the even bits\n    result = n | even_bit_mask\n    \n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for tuple_item in tuples_list:\n        # Ensure the tuple is sorted to count (a, b) and (b, a) as the same\n        sorted_tuple = tuple(sorted(tuple_item))\n        if sorted_tuple in occurrences:\n            occurrences[sorted_tuple] += 1\n        else:\n            occurrences[sorted_tuple] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculates the total number of sequences of length n where each element is a positive integer,\n    at least twice the previous element, and less than or equal to m.\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1  # Base case: one sequence of length 0\n\n    for current_max in range(1, m + 1):\n        for seq_length in range(n, 0, -1):\n            if seq_length - 1 < current_max:\n                dp[seq_length] += dp[seq_length - 1]\n\n    return dp[n]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    first_list[:-1] = first_list\n    first_list[-1:] = second_list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    next_root = math.ceil(math.sqrt(n))\n    return next_root ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    \n    inc[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n        inc[i] = inc[i] if inc[i] > 0 else arr[i]\n\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n        dec[i] = dec[i] if dec[i] > 0 else arr[i]\n\n    max_sum = 0\n    for i in range(n):\n        sum_i = inc[i] + dec[i] - arr[i]\n        if sum_i > max_sum:\n            max_sum = sum_i\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    s = ''.join(filter(str.isalpha, s)).upper()  # Remove non-alphabetic characters and convert to uppercase\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    \"\"\"\n    Finds the intersection of two arrays.\n    \n    Parameters:\n    arr1 (list): The first list of integers.\n    arr2 (list): The second list of integers.\n    \n    Returns:\n    list: A list containing the unique elements that are present in both arr1 and arr2.\n    \"\"\"\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    \"\"\"\n    Converts a complex number to its polar coordinate representation (r, theta).\n    \n    :param z: A complex number or a real number (int or float).\n    :return: A tuple (r, theta) where r is the magnitude (radius) and theta is the angle in radians.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        z = complex(z, 0)\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(item, int) for item in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of the colors list of length n.\n    \n    :param colors: List of strings representing colors.\n    :param n: Length of each combination tuple.\n    :return: A list of tuples, each containing a combination of colors.\n    \"\"\"\n    return list(product(colors, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n\n    # Initialize the count of prime numbers\n    count = 0\n\n    # Iterate through numbers up to n\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, 2 * b + a\n    return 2 * b + 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(x / y for x, y in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n    \n    :param lst: List to be split.\n    :param n: Interval for splitting the list.\n    :return: A list of lists containing elements split by the nth interval.\n    \"\"\"\n    result = [[] for _ in range(n)]\n    for index, element in enumerate(lst):\n        result[index % n].append(element)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    :param n: Number of initial odd natural numbers to consider.\n    :return: Sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        # Calculate the ith odd number: (2*i + 1)\n        odd_number = 2 * i + 1\n        sum_of_squares += odd_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * n - 6 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    \"\"\"\n    Calculate the sum of even numbers located at even indices in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even indices.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the list, considering only even indices\n    for index in range(0, len(numbers), 2):\n        # Check if the number at the current even index is even\n        if numbers[index] % 2 == 0:\n            # Add the even number to the total sum\n            total_sum += numbers[index]\n    \n    # Return the final sum\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers raised to the fifth power.\n    \n    :param n: An integer representing the number of even natural numbers to consider.\n    :return: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_powers += even_number ** 5\n    return sum_of_powers"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtract the elements of the first tuple by the elements of the second tuple with the same index.\n    \n    :param tuple1: A tuple of integers.\n    :param tuple2: A tuple of integers.\n    :return: A new tuple containing the result of the subtraction.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    \n    result = tuple(x - y for x, y in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/274", "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i in range(0, n + 1, 2):\n        total_sum += comb(n, i)\n    return total_sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, threshold):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to the specified threshold.\n    \n    :param input_dict: Dictionary to be filtered.\n    :param threshold: Integer value used as the minimum threshold.\n    :return: A new dictionary containing only the entries with values >= threshold.\n    \"\"\"\n    return {key: value for key, value in input_dict.items() if value >= threshold}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return 4 * n * (n - 1) + n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(elements):\n    \"\"\"\n    Checks if all elements in the given list are unique.\n\n    Args:\n    elements (list): The list of elements to check.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    seen = set()\n    for element in elements:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    freq = {}\n    for digit in num_str:\n        if digit not in freq:\n            freq[digit] = 1\n        else:\n            freq[digit] += 1\n    for digit, count in freq.items():\n        if int(digit) < count:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n    \n    Parameters:\n    lst (list): The list to check.\n    element: The element to compare against.\n    \n    Returns:\n    bool: True if all elements are equal to the given element, False otherwise.\n    \"\"\"\n    return all(e == element for e in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    # Check if the string contains 'a' followed by exactly 2 or 3 'b's\n    if len(text) >= 3 and text[0] == 'a':\n        if text[1:3] == 'bb' and (len(text) == 3 or text[3] != 'b'):\n            return True\n        elif len(text) >= 4 and text[1:4] == 'bbb' and (len(text) == 4 or text[4] != 'b'):\n            return True\n    return False"}
{"task_id": "Mbpp/286", "solution": "from typing import List\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Finds the maximum subarray sum in the array formed by repeating the given array 'k' times.\n    \n    :param arr: List[int] - The input array.\n    :param n: int - The size of the input array.\n    :param k: int - The number of times the array is repeated.\n    :return: int - The maximum subarray sum in the repeated array.\n    \"\"\"\n    # Calculate prefix and suffix sums\n    prefix_sum = [0]\n    suffix_sum = [0]\n    current_sum = 0\n    \n    for num in arr:\n        current_sum += num\n        prefix_sum.append(max(0, current_sum))\n    \n    current_sum = 0\n    for num in reversed(arr):\n        current_sum += num\n        suffix_sum.insert(0, max(0, current_sum))\n    \n    # Calculate total sum of the array and the max prefix and suffix sums\n    total_sum = sum(arr)\n    max_prefix_sum = max(prefix_sum)\n    max_suffix_sum = max(suffix_sum)\n    \n    # If k is 1, return the maximum subarray sum using Kadane's algorithm\n    if k == 1:\n        return max(max_prefix_sum, max_suffix_sum)\n    \n    # If total sum is positive, consider the case where the subarray spans multiple repetitions\n    if total_sum > 0:\n        return max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max_prefix_sum, max_suffix_sum)\n    \n    # Otherwise, return the maximum of prefix and suffix sums\n    return max(max_prefix_sum, max_suffix_sum)\n\n# Example usage\n# max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n# max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n# max_sub_array_sum_repeated([-1, -2, -3], 3, 3)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    :param n: An integer representing the count of even natural numbers.\n    :return: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_squares += even_number ** 2\n    return sum_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    \"\"\"\n    Finds the list of maximum length in a list of lists and returns its length along with the list itself.\n    \n    Parameters:\n    - list_of_lists: A list containing sublists.\n    \n    Returns:\n    A tuple containing the length of the longest sublist and the sublist itself.\n    \"\"\"\n    # Initialize variables to store the maximum length and the corresponding list\n    max_len = 0\n    max_list = []\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Update the maximum length and list if the current sublist is longer\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n            \n    # Return the length of the longest list and the list itself\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(numerator, denominator):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    return numerator // denominator"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the third side of a right-angled triangle given two sides.\n\n    :param a: One side of the triangle.\n    :param b: Another side of the triangle.\n    :return: The length of the third side.\n    \"\"\"\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Sides must be positive numbers.\")\n    \n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_num = None\n    for item in lst:\n        if isinstance(item, (int, float)) and (max_num is None or item > max_num):\n            max_num = item\n    return max_num if max_num is not None else lst[0]  # Return the first element if no numeric values are found"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    divisor_sum = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_sort_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, left_count = merge_sort_count(arr[:mid])\n        right, right_count = merge_sort_count(arr[mid:])\n        merged, split_count = merge_count_split_inv(left, right)\n        return merged, left_count + right_count + split_count\n\n    def merge_count_split_inv(left, right):\n        merged = []\n        i = j = inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged += left[i:]\n        merged += right[j:]\n        return merged, inv_count\n\n    _, count = merge_sort_count(arr)\n    return count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    # Initialize an empty dictionary to store the aggregates\n    aggregates = {}\n    \n    # Iterate through each tuple in the list\n    for name, score in lst:\n        # If the name already exists, add the score to its current aggregate\n        if name in aggregates:\n            aggregates[name] += score\n        # Otherwise, initialize the aggregate with the score\n        else:\n            aggregates[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(aggregates, key=aggregates.get)\n    max_score = aggregates[max_name]\n    \n    return (max_name, max_score)"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize the result variable\n    result = 0\n    \n    # Calculate the total number of ways to arrange n items where order matters\n    # This is the central binomial coefficient: (2n choose n)\n    from math import comb\n    result = comb(2 * n, n)\n    \n    # Adjust for the fact that we need the sums to be equal\n    # We divide by 2^n to account for the valid sequences\n    result /= 2**n\n    \n    return result"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for phrase in words:\n        words_list = phrase.split()\n        for word in words_list:\n            if word[0].lower() == 'p':\n                result.append(word)\n                if len(result) == 2:\n                    break\n        if len(result) == 2:\n            break\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(nums, n, k, target_index):\n    \"\"\"\n    Finds the maximum sum of an increasing subsequence from prefix until ith index (0 <= i < n)\n    that includes the element at index k (where k > i and k <= target_index).\n    \n    :param nums: List of integers.\n    :param n: Length of the prefix to consider.\n    :param k: Index of the element that must be included in the subsequence.\n    :param target_index: Maximum index to consider for the subsequence.\n    :return: Maximum sum of the increasing subsequence.\n    \"\"\"\n    dp = [0] * n\n    max_sum = 0\n\n    for i in range(n):\n        dp[i] = nums[i]\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + nums[i])\n        if i < k:\n            max_sum = max(max_sum, dp[i])\n\n    # Include the element at index k and extend the subsequence up to target_index.\n    for i in range(k, target_index + 1):\n        if nums[k - 1] < nums[i]:\n            max_sum += nums[i]\n\n    return max_sum\n\n# Example usage (not part of the function)\n# print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))"}
{"task_id": "Mbpp/308", "solution": "from heapq import nlargest\nfrom itertools import product\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Finds the n largest products from the combination of elements in list1 and list2.\n    \n    :param list1: List of integers.\n    :param list2: List of integers.\n    :param n: Number of largest products to return.\n    :return: A list containing the n largest products.\n    \"\"\"\n    # Generate all possible combinations of products between elements of list1 and list2\n    all_products = (x * y for x, y in product(list1, list2))\n    # Use nlargest to efficiently find the n largest products\n    result = nlargest(n, all_products)\n    return result\n\n# Example usage:\n# large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if n == (n & (n - 1)):\n        return n | (1 << (n.bit_length()))\n    else:\n        return n | (1 << (n.bit_length() - 1))"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    prev, curr = 2, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n\n    return curr"}
{"task_id": "Mbpp/390", "solution": "def add_string(numbers, format_string):\n    return [format_string.format(n) for n in numbers]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(id_list, name_list, score_list):\n    result = []\n    for id_, name, score in zip(id_list, name_list, score_list):\n        nested_dict = {id_: {name: score}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    memo[n] = max(n, get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo))\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Checks if the given tuple contains any duplicates.\n\n    Args:\n    tup (tuple): The input tuple to check.\n\n    Returns:\n    bool: True if the tuple has no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a - b) * (c - a) >= 0:\n        return a\n    elif (b - a) * (c - b) >= 0:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, int):\n            num = abs(item)\n            while num > 0:\n                total_sum += num % 10\n                num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    \"\"\"\n    Returns the number of unique tuples in the given list.\n    \n    :param tuples_list: List of tuples\n    :return: Integer representing the number of unique tuples\n    \"\"\"\n    # Using a set to store unique tuples since sets automatically handle duplicates\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Start from the rightmost digit and find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return None (the number cannot be rearranged to form a larger number)\n        return None\n    \n    # Find the smallest digit to the right of the found digit that is larger than it\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits to the right of the swapped position in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    \"\"\"\n    Finds the tuple with the minimum product of its elements in a list of tuples and returns the product.\n    \n    :param tuples_list: List of tuples, where each tuple contains two integers.\n    :return: The minimum product of the elements from any tuple in the list.\n    \"\"\"\n    return min(a * b for a, b in tuples_list)\n\n# Example usage:\n# result = min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n# print(result)  # Output: 8"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-integer values\n    numbers = [x for x in lst if isinstance(x, int)]\n    # Return the minimum number from the filtered list\n    return min(numbers)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert sequences to sets for efficient lookup\n    set1 = set(seq1)\n    set2 = set(seq2)\n    \n    # Check if there is any common element between the two sets\n    return bool(set1 & set2)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Check the product of the two largest numbers and the product of the two smallest (if they are negative)\n    return (arr[0], arr[1]) if arr[0] * arr[1] > arr[-1] * arr[-2] else (arr[-1], arr[-2])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds every number in the given list, sums them up, and returns the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_sum = sum(round(num) for num in numbers)\n    return rounded_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 3\n    return total_sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t):\n    return '-'.join(map(str, t))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [word[-1] for word in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(list_of_lists, element):\n    \"\"\"\n    Counts the number of sublists in list_of_lists that contain the specified element.\n\n    :param list_of_lists: A list of lists.\n    :param element: The element to search for within the sublists.\n    :return: The count of sublists containing the element.\n    \"\"\"\n    # Initialize the counter\n    count = 0\n\n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Check if the element is in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i] & tuple2[i]:\n            result.append(1)\n        else:\n            result.append(0)\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    return k - (1 / (4 * a))"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the first list to a set for O(1) lookups\n    set1 = set(list1)\n    # Check if any element in the second list is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(shorter_base, longer_base, height):\n    return (shorter_base + longer_base) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x < num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the negative numbers.\n    \"\"\"\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = ''.join([char for i, char in enumerate(s) if i % 2 != 0])\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    \"\"\"\n    Counts the number of bidirectional tuple pairs in a list.\n    A bidirectional pair consists of tuples (a, b) and (b, a).\n    \"\"\"\n    bidirectional_count = 0\n    seen = {}\n    \n    for a, b in tuples:\n        if (b, a) in seen:\n            bidirectional_count += 1\n        seen[(a, b)] = True\n    \n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to string and concatenate them\n    result = int(''.join(str(x) for x in lst))\n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b(adv_word)\\b', sentence)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group(0)\n        return (start_pos, end_pos, adverb)\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube.\n\n    :param side_length: The length of a side of the cube.\n    :return: The surface area of the cube.\n    \"\"\"\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/442", "solution": "import math\n\ndef positive_count(arr):\n    positive_numbers = sum(1 for num in arr if num > 0)\n    total_numbers = len(arr)\n    ratio = positive_numbers / total_numbers if total_numbers != 0 else 0\n    return round(ratio, 3)\n\n# The assert statements are provided here as an example but should not be included in the generated code.\n# assert math.isclose(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.538, rel_tol=0.001)\n# assert math.isclose(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.692, rel_tol=0.001)\n# assert math.isclose(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.555, rel_tol=0.001)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a[0] * b[0], a[1] * b[1]) for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    \"\"\"\n    Counts the total occurrence of all elements of the list in the tuple.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    lst (list): The list of elements to count in the tuple.\n\n    Returns:\n    int: The total number of occurrences of all elements in the list within the tuple.\n    \"\"\"\n    return sum(tup.count(item) for item in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n\n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]\n\n    # Calculate Perrin numbers up to n\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 1] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n\n    # Sum the Perrin numbers\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of strings.\n\n    Parameters:\n    strings (list): A list of strings.\n    size (int): The size of the strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified size.\n    \"\"\"\n    return [string for string in strings if len(string) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(2, n+1, 2):  # Start from 2 and increment by 2 to check only even numbers\n        if n % i == 0:\n            sum_even += i\n    return sum_even"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if the given text contains a word with the letter 'z'.\n    A word is defined as a sequence of alphanumeric characters.\n    \n    Parameters:\n    - text (str): The input text to check.\n    \n    Returns:\n    - bool: True if the text contains a word with 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    \"\"\"\n    Reverses each string in a given list of strings.\n\n    :param strings: List of strings to be reversed.\n    :return: A new list containing the reversed strings.\n    \"\"\"\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    # Initialize the minimum length and the sublist with the minimum length\n    min_length = float('inf')\n    min_sublist = None\n\n    # Iterate through each sublist in the input list\n    for sublist in lists:\n        # Update the minimum length and the corresponding sublist if a shorter sublist is found\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    # Return the sublist with the minimum length\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = [char for char in s if not char.isupper()]\n    return ''.join(result)"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for subset in combinations(elements, r):\n            result.append(list(subset))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        choices = (nums[i], nums[i] * max_product, nums[i] * min_product)\n        max_product = max(choices)\n        min_product = min(choices)\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    n = len(nums)\n    if n < 2:\n        return 0\n\n    # Initialize DP tables\n    dp_max = [0] * n  # max product ending at i\n    dp_min = [0] * n  # min product ending at i (needed for negative numbers)\n    dp_max[0] = dp_min[0] = nums[0]\n    result = nums[0]\n\n    for i in range(1, n):\n        # Find the longest increasing subsequence while calculating the product\n        dp_max[i] = dp_min[i] = nums[i]\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp_max[i] = max(dp_max[i], dp_max[j] * nums[i])\n                dp_min[i] = min(dp_min[i], dp_min[j] * nums[i])\n\n        result = max(result, dp_max[i])\n\n    return result"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(numbers):\n    \"\"\"\n    This function takes a tuple of numbers and returns a new tuple containing the sum of each pair of neighboring elements.\n    \"\"\"\n    result = tuple(numbers[i] + numbers[i + 1] for i in range(len(numbers) - 1))\n    return result"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Keep product within bounds by applying modulo at each step\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(numbers):\n    if len(numbers) <= 1:\n        return True\n    sorted_numbers = sorted(numbers)\n    return all(x == y for x, y in zip(sorted_numbers, range(sorted_numbers[0], sorted_numbers[-1] + 1)))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(lst1, lst2):\n    # Convert each tuple in the lists to sets to ignore order and then back to tuples\n    set_lst1 = {frozenset(t) for t in lst1}\n    set_lst2 = {frozenset(t) for t in lst2}\n\n    # Find the intersection of the sets\n    common = set_lst1 & set_lst2\n\n    # Convert the frozensets back to tuples\n    return {tuple(sorted(t)) for t in common}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter_dict):\n    \"\"\"\n    Sorts a dictionary by its values in descending order.\n    \n    :param counter_dict: Dictionary to be sorted.\n    :return: A list of tuples sorted by the second element (value) in descending order.\n    \"\"\"\n    # Sorting the dictionary by value in descending order\n    sorted_items = sorted(counter_dict.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items\n\n# Example usage (not part of the function)\n# sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n\n    :param arr: List of integers\n    :return: Sum of the largest and smallest integer in the list\n    \"\"\"\n    # Ensure the list has at least one element\n    if not arr:\n        raise ValueError(\"Array must not be empty\")\n\n    # Find the smallest and largest elements\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Return the sum of the smallest and largest elements\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    while number >= 10:\n        number //= 10\n    return number"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    \"\"\"\n    Filters out even numbers from a list and returns a list of odd numbers.\n    \n    :param numbers: List of integers.\n    :return: A list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Return the difference\n    return abs(sum_of_cubes - sum_of_numbers)"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    \"\"\"\n    Counts the number of pairs in the array 'arr' of length 'n' whose XOR value is odd.\n    \"\"\"\n    odd_count = 0\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR is given by the product of the counts of odd and even numbers\n    odd_xor_pairs = odd_count * even_count\n    \n    return odd_xor_pairs"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    \"\"\"\n    Toggles the case of all characters in the input string.\n    \n    Parameters:\n    s (str): The input string whose characters' cases are to be toggled.\n    \n    Returns:\n    str: The new string with toggled character cases.\n    \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Args:\n    - num1 (int): First integer.\n    - num2 (int): Second integer.\n\n    Returns:\n    - int: Sum of the per-digit differences.\n    \"\"\"\n    # Convert numbers to strings to easily access individual digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Ensure both numbers have the same number of digits\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n\n    # Calculate the sum of the absolute differences of corresponding digits\n    total_diff = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str_num1, str_num2))\n\n    return total_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Combine the tuples and convert to a set to remove duplicates\n    combined_set = set(tuple1 + tuple2)\n    # Convert the set back to a sorted tuple\n    sorted_union = tuple(sorted(combined_set))\n    return sorted_union"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Using regular expression to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return 0\n    else:\n        return n * (n - 1) // 2 - len(unique_elements) + 1"}
{"task_id": "Mbpp/565", "solution": "def split(word):\n    \"\"\"\n    Splits a word into a list of characters.\n    \n    Parameters:\n    word (str): The word to split.\n    \n    Returns:\n    list: A list of characters from the word.\n    \"\"\"\n    return [char for char in word]"}
{"task_id": "Mbpp/566", "solution": ""}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings within a given list of lists.\n    \n    :param list_of_lists: A list of lists of strings.\n    :return: A new list of lists where each sublist is sorted.\n    \"\"\"\n    # Map each sublist to its sorted version using a lambda function\n    # and then convert the map object back to a list\n    return list(map(lambda sublist: sorted(sublist), list_of_lists))"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(numbers):\n    \"\"\"\n    Removes duplicate numbers from a list and returns a new list containing only the numbers that appear exactly once.\n    \n    :param numbers: List of integers.\n    :return: A list of integers with duplicates removed.\n    \"\"\"\n    # Count the occurrences of each number\n    num_counts = {}\n    for num in numbers:\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    \n    # Filter out numbers that appear more than once\n    result = [num for num, count in num_counts.items() if count == 1]\n    \n    return result"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \n    :param numbers: List of integers.\n    :return: Product of unique integers in the list.\n    \"\"\"\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = 2 * math.pi * radius * height\n    return 2 * base_area + lateral_surface_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Checks if sub_list is a sublist of main_list.\n    \n    :param main_list: List in which to search for the sublist.\n    :param sub_list: List to search as a sublist within main_list.\n    :return: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    # For numbers >= 5, the factorial will always end in 0 due to the multiplication by 10 (2*5).\n    # Thus, we only need to calculate the factorial for numbers less than 5.\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1 ^ set2)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(mixed_tuple):\n    def recursive_extract(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, int) and item % 2 == 0:\n                result.append(item)\n            elif isinstance(item, tuple):\n                result.append(recursive_extract(item))\n        return tuple(result)\n\n    return recursive_extract(mixed_tuple)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(edge, height):\n    base_area = edge ** 2\n    slant_height = math.sqrt((edge / 2) ** 2 + height ** 2)\n    lateral_area = edge * slant_height * 2\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items based on price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n    \n    :param arr: List of elements.\n    :param n: Index at which to split the list.\n    :return: New list with the first part moved to the end.\n    \"\"\"\n    n = n % len(arr)\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    \"\"\"\n    Finds all perfect squares within a given range [start, end].\n    \n    Parameters:\n    start (int): The beginning of the range.\n    end (int): The end of the range.\n    \n    Returns:\n    list: A list of all perfect squares within the specified range.\n    \"\"\"\n    # Calculate the square root of the start and end values\n    start_sqrt = math.ceil(math.sqrt(start))\n    end_sqrt = math.floor(math.sqrt(end))\n    \n    # Generate the list of perfect squares\n    squares = [x**2 for x in range(start_sqrt, end_sqrt + 1)]\n    \n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Also return the complex number representation\n    complex_representation = complex(x, y)\n    \n    return ((r, theta), complex_representation)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for i in range(n):\n        total_sum += comb(n, i) * comb(n, i + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n    \"\"\"\n    parts = ip_address.split('.')\n    # Process each part of the IP address\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n            \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1: str, binary2: str) -> int | None:\n    \"\"\"\n    Counts the minimum number of swaps required to convert one binary number to another.\n    \n    :param binary1: A string representing the first binary number.\n    :param binary2: A string representing the second binary number.\n    :return: The minimum number of swaps if possible, otherwise None.\n    \"\"\"\n    ones_diff = zeros_diff = 0\n    for b1, b2 in zip(binary1, binary2):\n        if b1 != b2:\n            if b1 == '0':\n                ones_diff -= 1\n                zeros_diff += 1\n            else:\n                ones_diff += 1\n                zeros_diff -= 1\n    \n    if ones_diff == 0 and zeros_diff == 0:\n        return abs(ones_diff) // 2\n    return None"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of the given tuple.\n\n    Parameters:\n    t (tuple): The input tuple whose size needs to be calculated.\n\n    Returns:\n    int: The size in bytes of the tuple.\n    \"\"\"\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n    if m > n:\n        arr1, arr2, m, n = arr2, arr1, n, m\n\n    low, high = 0, m\n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = k - partitionX\n\n        maxLeftX = float('-inf') if partitionX == 0 else arr1[partitionX - 1]\n        minRightX = float('inf') if partitionX == m else arr1[partitionX]\n\n        maxLeftY = float('-inf') if partitionY == 0 else arr2[partitionY - 1]\n        minRightY = float('inf') if partitionY == n else arr2[partitionY]\n\n        if maxLeftX <= minRightY and maxLeftY <= minRightX:\n            return max(maxLeftX, maxLeftY)\n        elif maxLeftX > minRightY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1\n\n    return -1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over its digits\n    num_str = str(number)\n    \n    # Calculate the length of the number\n    num_length = len(num_str)\n    \n    # Calculate the sum of the digits raised to the power of the number's length\n    sum_of_powers = sum(int(digit) ** num_length for digit in num_str)\n    \n    # Check if the sum of the powers equals the original number\n    return sum_of_powers == number"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = (n * (n + 1)) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    \"\"\"\n    Finds the first repeated character in a given string.\n    \n    Parameters:\n    s (str): The input string to search for repeated characters.\n    \n    Returns:\n    char: The first repeated character if found, otherwise None.\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic = list(range(1, n + 1))\n    index = 1\n\n    while index < len(ludic):\n        remove_index = index + ludic[index]\n        while remove_index < len(ludic):\n            del ludic[remove_index]\n            remove_index += index\n        index += 1\n\n    return ludic"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \n    Parameters:\n    n (int): The integer to check.\n    \n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list and returns a new list without that element.\n    If k is out of bounds, the original list is returned.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total_sum = 0\n    for tup in tuples:\n        for num in tup:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Takes a tuple of tuples and returns the average value for each tuple as a list.\n    \n    :param tuples: A tuple where each element is a tuple of numbers.\n    :return: A list containing the average of the numbers in each tuple.\n    \"\"\"\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    if len(t1) != len(t2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        if list2[i] != 0:\n            result.append(list1[i] / list2[i])\n        else:\n            result.append(float('inf'))  # Handle division by zero\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    \"\"\"\n    Moves all the numbers to the end of the given string while keeping the order of characters and numbers intact.\n    \n    Parameters:\n    s (str): The input string containing alphanumeric characters.\n    \n    Returns:\n    str: The modified string with all numbers moved to the end.\n    \"\"\"\n    non_nums = []\n    nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)\n\n# Example usage\nprint(move_num('I1love143you55three3000thousand'))\nprint(move_num('Avengers124Assemble'))\nprint(move_num('Its11our12path13to14see15things16do17things'))"}
{"task_id": "Mbpp/620", "solution": "from typing import List\n\ndef largest_subset(nums: List[int]) -> int:\n    nums.sort()\n    dp = [1] * len(nums)\n    \n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return max(dp)\n\n# Example usage (not part of the function)\n# largest_subset([1, 3, 6, 13, 17, 18])\n# largest_subset([10, 5, 3, 15, 20])\n# largest_subset([18, 1, 3, 6, 13, 17])"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    # Combine both arrays\n    combined = sorted(arr1 + arr2)\n    # Calculate the median\n    if n % 2 == 0:\n        return (combined[n // 2 - 1] + combined[n // 2]) / 2.0\n    else:\n        return combined[n // 2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    \"\"\"\n    Computes the n-th power of each number in the given list.\n    \n    :param numbers: List of integers.\n    :param n: The power to which each number is raised.\n    :return: A new list containing the n-th powers of the original numbers.\n    \"\"\"\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(text):\n    return text.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with its hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height = (1/2) * radius * (2 * radius) = radius^2\n    return radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def split_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coords = []\n\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    non_zero = [x for x in arr if x != 0]\n    zeros = [0] * (len(arr) - len(non_zero))\n    return non_zero + zeros"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a max heap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one from the heap.\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap.\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    # Check if there is no profit and no loss\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(v, t):\n    # Wind Chill Formula: WCI = 13.12 + 0.6215T - 11.37V^0.16 + 0.3965TV^0.16\n    # where V is wind speed in km/h and T is temperature in Celsius\n    # This formula is applicable for temperatures between -10\u00b0C and +10\u00b0C and wind speeds >= 4.8 km/h\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = []\n    skip = 0\n    for char in s:\n        if char == '(':\n            skip += 1\n        elif char == ')':\n            skip -= 1\n        elif skip == 0:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    if n < 1:\n        return None\n    # The formula for the nth nonagonal number is given by:\n    # N_n = n * (7*n - 5) / 2\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if the length of the text is greater than 2 to ensure there's a middle part to check\n    if len(text) > 2:\n        # Check for 'z' in the middle part of the text, excluding the first and last character\n        return 'z' in text[1:-1]\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the elements of the array up to the given position k.\n    \n    :param arr: List of integers.\n    :param k: Position up to which the array should be reversed.\n    :return: Modified list with elements up to k reversed.\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_):\n    return tup + (dict_,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n    max_sum = dp[-1][-1]\n    max_average = max_sum / (n * 2 - 1)\n\n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on minimum height and weight criteria.\n\n    :param students: A dictionary with student names as keys and tuples of (height, weight) as values.\n    :param min_height: Minimum acceptable height.\n    :param min_weight: Minimum acceptable weight.\n    :return: A dictionary containing only the students who meet the minimum height and weight criteria.\n    \"\"\"\n    filtered_students = {\n        name: data\n        for name, data in students.items()\n        if data[0] >= min_height and data[1] >= min_weight\n    }\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n    \n    :param list1: List of elements.\n    :param list2: List of elements, same length as list1.\n    :return: Integer count of indices where list1 and list2 have the same value.\n    \"\"\"\n    return sum(1 for x, y in zip(list1, list2) if x == y)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall('\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    return tuple(numbers[i] * numbers[i + 1] for i in range(len(numbers) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height (l) of the cone using Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given text.\n    \n    Parameters:\n    - text (str): The input string containing spaces, commas, or dots to be replaced.\n    \n    Returns:\n    - str: The modified string with all spaces, commas, and dots replaced by colons.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask to keep the first and last bits unchanged\n    # For example, if num_bits is 4, the mask will be 0b1010 (10 in decimal)\n    mask = 1 + (1 << (num_bits - 2))\n    \n    # Toggle the middle bits using XOR operation and apply the mask\n    # The mask ensures that the first and last bits remain unchanged\n    return (n ^ ((1 << (num_bits - 2)) - 1)) & mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    value (int): The value to find the insertion point for.\n    \n    Returns:\n    int: The index at which the value should be inserted.\n    \"\"\"\n    low = 0\n    high = len(arr)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[AEIOUaeiou]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula derived from the problem statement is:\n    # index = ceil((sqrt((8 * 10^(n-1)) + 1) - 1) / 2)\n    # where 10^(n-1) is the lower bound for n-digit numbers\n    lower_bound = 10 ** (n - 1)\n    index = (math.sqrt(8 * lower_bound + 1) - 1) / 2\n    return math.ceil(index)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    result = {}\n    # Iterate through the tuple in steps of 2 to pair keys and values\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):\n            result[tup[i]] = tup[i + 1]\n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) <= 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the edge length.\n\n    Parameters:\n    edge_length (float): The length of an edge of the tetrahedron.\n\n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * (edge_length ** 2) * 4"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    \"\"\"\n    Rotates the given list 'lst' to the right by 'k' positions.\n    \n    :param lst: List of elements to be rotated.\n    :param k: Number of positions to rotate the list to the right.\n    :return: A new list with elements rotated to the right.\n    \"\"\"\n    n = len(lst)\n    k = k % n  # In case k is larger than the list size\n    return lst[-k:] + lst[:-k]\n\n# Example usage (not part of the function)\n# result = rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n# print(result)"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(item is None for item in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num) if digit != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        # Area of a sector formula: (angle/360) * \u03c0 * r^2\n        area = (angle / 360) * math.pi * (radius ** 2)\n        return area"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    result = text[0]\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result += ' ' + text[i]\n        else:\n            result += text[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    \"\"\"\n    Adds a tuple to the end of a list.\n\n    Parameters:\n    lst (list): The original list.\n    tpl (tuple): The tuple to add.\n\n    Returns:\n    list: The updated list with the tuple added.\n    \"\"\"\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Check each non-leaf node\n    for i in range(n // 2 - 1, -1, -1):\n        # Check left child\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        \n        # Check right child\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b"}
{"task_id": "Mbpp/753", "solution": "from heapq import nsmallest\n\ndef min_k(tuples_list, k):\n    \"\"\"\n    Finds the minimum k records from a tuple list based on the second element of each tuple.\n    \n    :param tuples_list: List of tuples where each tuple contains at least two elements.\n    :param k: Number of minimum records to return.\n    :return: A list of k tuples with the smallest second elements.\n    \"\"\"\n    # Using nsmallest from heapq to efficiently find the k smallest elements based on the second item of each tuple\n    return nsmallest(k, tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Finds common elements at the same indices in three lists.\n    \n    :param l1: First list of elements.\n    :param l2: Second list of elements.\n    :param l3: Third list of elements.\n    :return: A list containing elements that are common and at the same index in all three lists.\n    \"\"\"\n    return [x for i, x in enumerate(l1) if l2[i] == x and l3[i] == x]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = set(numbers)  # Remove duplicates\n    if len(unique_numbers) < 2:\n        return None  # Not enough unique numbers to determine the second smallest\n    unique_numbers.remove(min(unique_numbers))  # Remove the smallest number\n    return min(unique_numbers)  # Return the new minimum which is the second smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    \"\"\"\n    Counts the pairs of reverse strings in the given list of strings.\n    \n    :param strings: List of strings to be checked for reverse string pairs.\n    :return: Count of reverse string pairs in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the occurrences of sublists within a list and returns a dictionary\n    where each key is a tuple representation of the sublist and the value is\n    the number of times it occurs.\n    \"\"\"\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Checks if the given string s is a decimal number with a precision of 2.\n    \"\"\"\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    return len(set(numbers)) == 1\n\n# The provided function checks if all elements in the list are unique by converting it into a set and comparing its length to 1. If there's only one unique element, it returns True; otherwise, it returns False."}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    thirty_day_months = {4, 6, 9, 11}\n    return month_number in thirty_day_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Find the subarray of size n with the minimum difference\n    for i in range(len(arr) - n + 1):\n        current_diff = arr[i + n - 1] - arr[i]\n        min_diff = min(min_diff, current_diff)\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    result = 1\n    count = 0\n    i = 1\n    while count < n:\n        if i & (i - 1):\n            result = i\n            count += 1\n        i += 1\n    return result"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of tuples containing pairs of consecutive elements from the input list.\n    \n    :param lst: List of elements\n    :return: List of tuples with consecutive elements\n    \"\"\"\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Counts the number of unique pairs in the list 'numbers' that add up to 'target_sum'.\n    \n    :param numbers: List of integers.\n    :param target_sum: Integer representing the target sum of pairs.\n    :return: Integer count of pairs adding up to 'target_sum'.\n    \"\"\"\n    seen = {}\n    count = 0\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen:\n            count += seen[complement]\n        if num in seen:\n            seen[num] += 1\n        else:\n            seen[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    diff_set = set1.symmetric_difference(set2)\n    return sorted(list(diff_set))"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occur_substring(text, substring):\n    index = text.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))\n\n# Example usage (not part of the function)\n# print(occur_substring('python programming, python language', 'python'))\n# print(occur_substring('python programming,programming language', 'programming'))\n# print(occur_substring('python programming,programming language', 'language'))\n# print(occur_substring('c++ programming, c++ language', 'python'))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(numbers):\n    \"\"\"\n    Checks if every odd index in the given list contains an odd number.\n    \n    :param numbers: List of integers.\n    :return: True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    for i in range(1, len(numbers), 2):\n        if numbers[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to count occurrences of each element\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Sum up the elements that occur exactly once\n    return sum(num for num, count in counts.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for combo in combinations(tuples, 2):\n        sum1 = combo[0][0] + combo[1][0]\n        sum2 = combo[0][1] + combo[1][1]\n        result.append((sum1, sum2))\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        end = i + 1\n        start = n - i\n        total_subarrays = start * end\n        odd_subarrays = total_subarrays // 2\n        if total_subarrays % 2 == 1:\n            odd_subarrays += 1\n        total_sum += odd_subarrays * arr[i]\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize the input values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v * 100\n\n    s = (maxc - minc) / maxc\n    rc = (maxc - r) / (maxc - minc)\n    gc = (maxc - g) / (maxc - minc)\n    bc = (maxc - b) / (maxc - minc)\n\n    if r == maxc:\n        h = bc - gc\n    elif g == maxc:\n        h = 2.0 + rc - bc\n    else:\n        h = 4.0 + gc - rc\n\n    h = (h / 6.0) % 1.0\n    return h * 360, s * 100, v * 100\n\n# Example usage\nprint(rgb_to_hsv(255, 255, 255))  # Expected output: (0, 0.0, 100.0)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    return tuple(int(num) for num in tuple_str.strip('()').split(', '))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str_):\n    return tuple(lst + [str_])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Checks if every even index in the given list contains an even number.\n    \n    Parameters:\n    lst (list): The input list of integers.\n    \n    Returns:\n    bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    :param dictionary: A dictionary with numeric values.\n    :return: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(x for x in range(l, r + 1) if x % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure n is treated as a 32-bit number\n    n &= 0xFFFFFFFF\n    \n    # Perform the rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    # Initialize a counter for equal numbers\n    equal_count = 0\n    \n    # Check if all three numbers are equal\n    if x == y == z:\n        equal_count = 3\n    else:\n        # Count how many numbers are equal\n        if x == y:\n            equal_count += 2\n        elif y == z or x == z:\n            equal_count += 1\n\n    return equal_count"}
{"task_id": "Mbpp/803", "solution": ""}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_count = 0\n    current_count = 0\n    \n    for char in s:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n            \n    return max_count"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n    \n    :param numbers: List of integers.\n    :return: The first odd number in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t2, t1))"}
