{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert the tuples to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of both sets\n    return list(set1.intersection(set2))\n\n# Function to verify the correctness of the solution\ndef check_similar_elements():\n    assert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))\n\n# Run the check function\ncheck_similar_elements()"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(nums, n):\n    import heapq\n    return heapq.nlargest(n, nums)\n\nheap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers to find the bits that are different\n    xor_result = x ^ y\n    # Count the number of 1s in the binary representation of the xor result\n    count = 0\n    while xor_result > 0:\n        count += xor_result & 1\n        xor_result >>= 1\n    # If count is 1, they differ at exactly one bit position\n    return count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    # Concatenate the string with itself\n    temp = s + s\n    # Length of the string\n    n = len(s)\n    # Loop to check rotations\n    for i in range(1, n):\n        # Check if substring matches original string\n        if temp[i : i + n] == s:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the index of the first occurrence\n    first_occ = s.find(char)\n    if first_occ == -1:\n        return s  # Char not found\n    \n    # Find the index of the last occurrence\n    last_occ = s.rfind(char)\n    \n    # Construct the new string\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the row sums and pair each with its index\n    row_sums = [(sum(row), idx) for idx, row in enumerate(matrix)]\n    # Sort the pairs based on the row sums\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    # Reconstruct the matrix based on the sorted indices\n    sorted_matrix = [matrix[idx] for _, idx in sorted_row_sums]\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return (0.5 * base * height) * length\n\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    import re\n    # The pattern looks for strings that start and end with one or more lowercase letters, \n    # which are connected in the middle with an underscore and optionally one or more lowercase letters.\n    pattern = r\"^[a-z]+_[a-z]*$\"\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    # Create a set for characters in the second string for O(1) lookups\n    chars_in_str2 = set(str2)\n    # Build a new string with characters not in the second string\n    return ''.join(char for char in str1 if char not in chars_in_str2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(nums):\n    # \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u6765\u8ddf\u8e2a\u5df2\u51fa\u73b0\u7684\u6570\u5b57\n    seen = set()\n    # \u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\n    for num in nums:\n        # \u5982\u679c\u5143\u7d20\u5df2\u7ecf\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u627e\u5230\u4e86\u91cd\u590d\u9879\n        if num in seen:\n            return True\n        # \u5426\u5219\u5c06\u8be5\u5143\u7d20\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n        seen.add(num)\n    # \u5982\u679c\u5faa\u73af\u7ed3\u675f\u6ca1\u6709\u627e\u5230\u91cd\u590d\u9879\uff0c\u5219\u8fd4\u56de False\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    from math import log, floor\n    \n    # Check if n-2 is a power of 2\n    def is_power_of_two(x):\n        return (x > 0) and ((x & (x - 1)) == 0)\n    \n    # Find k such that 2^k - k - 1 = n\n    for k in range(1, floor(log(n + 2, 2)) + 1):\n        if is_power_of_two(n + k + 1) and (n + k + 1) >> k == 1:\n            return True\n    return False\n\n# Function to test the correctness of is_woodall function\ndef check():\n    assert is_woodall(383) == True\n    assert is_woodall(263) == False\n    assert is_woodall(1599) == True\n    assert is_woodall(162767) == True\n    assert is_woodall(1) == False\n\ncheck()"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num != 2 * reverse_num - 1"}
{"task_id": "Mbpp/57", "solution": "from itertools import permutations\n\ndef find_Max_Num(digits):\n    # Generate all possible permutations of the digits\n    all_perms = permutations(digits)\n    \n    # Convert each tuple of digits into an integer and find the maximum\n    max_num = max(int(''.join(map(str, perm))) for perm in all_perms)\n    \n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # Check if the two integers have opposite signs\n    return (x < 0) != (y < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    def get_substrings(string):\n        substrings = []\n        for i in range(len(string)):\n            for j in range(i + 1, len(string) + 1):\n                substrings.append(string[i:j])\n        return substrings\n    \n    substrings = get_substrings(s)\n    valid_substrings = []\n    \n    for substring in substrings:\n        sum_of_digits = sum(int(digit) for digit in substring)\n        if sum_of_digits == len(substring):\n            valid_substrings.append(substring)\n    \n    return len(valid_substrings)"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    return min(nums)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Calculate the difference for each pair and keep track of the maximum difference found\n    max_diff = float('-inf')\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Function to assert the correctness of the solution\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    # Initialize a counter for positive numbers\n    count = 0\n    # Iterate through the list of numbers\n    for num in numbers:\n        # If the number is greater than 0, increment the counter\n        if num > 0:\n            count += 1\n    # Return the final count\n    return count\n\n# Test the function\nassert pos_count([1, -2, 3, -4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Initialize a 2D array to store Bell Numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    # Fill Bell triangle using Bell Number properties\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    # Return the last value of bell[n][n]\n    return bell[n][n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    return False\n\n# Check function to verify the correctness of the solution\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([1,2,3,4,5],[2,3]) == True\nassert is_sublist([5,6,7,8,9],[7,8]) == True\nassert is_sublist([10,20,30,40,50],[10,20,30,40,50]) == True\nassert is_sublist([1,2,3,4,5],[5,6]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    len_first_tuple = len(tuples_list[0])\n    for t in tuples_list:\n        if len(t) != len_first_tuple:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False  # We are not done yet\n        else:\n            gap = 1\n            sorted = True  # If there are no swaps this pass, we are done\n\n        # A single \"comb\" over the input list\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 1\n    while (i*i < n):\n        j = 1\n        while (j*j <= n + i*i):\n            if (i*i + j*j == n):\n                return True\n            j += 1\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            if pattern in color_to_pattern.values():\n                return False\n            color_to_pattern[color] = pattern\n        elif color_to_pattern[color] != pattern:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    # Convert the number to a string for easy manipulation\n    str_n = str(n)\n    # Initialize sums for odd and even positions\n    odd_sum = 0\n    even_sum = 0\n    \n    # Loop through the number, summing digits in odd and even positions separately\n    for i, digit in enumerate(str_n):\n        if i % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    # Check if the difference between the sums is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\ntetrahedral_number(5)"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # \u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u7b26\u7684ASCII\u503c\u4e4b\u548c\n    ascii_sum = sum(ord(c) for c in s)\n    # \u5bf926\u53d6\u6a21\u540e\uff0c\u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\n    return chr(ascii_sum % 26 + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    sequence = [0, 1, 1] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n    return sequence[n]\n\nsequence = newman_conway\nassert sequence(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 1) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the dictionaries\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1\n\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# Testing the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(list_str, substr):\n    for item in list_str:\n        if substr in item:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3: return False\n    for i in range(0, len(str_n)-1, 2):\n        if str_n[i] != str_n[0] or (i+1 < len(str_n) and str_n[i+1] != str_n[1]): \n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Find the tuple with the smallest second value and return its first value\n    return min(tuples_list, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    # Initialize the minimum length as the length of the first list\n    min_length = len(lists[0])\n    \n    # Iterate through all the lists\n    for lst in lists:\n        # If the current list's length is less than the minimum, update the minimum\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    # Return the minimum length found\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Function output based on the provided instructions:\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "from collections import Counter\ndef frequency_lists(lists):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lists for item in sublist]\n    # Count the frequency of each element\n    freq_dict = dict(Counter(flat_list))\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "from math import isclose\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    num = n + 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n# Example check\nnext_smallest_palindrome(99)"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component except the first one if it's the beginning of the string.\n    # Then join them together.\n    return components[0].capitalize() + ''.join(x.title() for x in components[1:]) \n\n# The function definition ends here, the assertion provided in the docstring is for understanding the expected functionality."}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0 or m == n: return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return lst.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_to_add, tuple_to_add_to):\n    # Convert the tuple to a list for easy appending\n    tuple_list = list(tuple_to_add_to)\n    # Append the elements of the list_to_add to tuple_list\n    tuple_list.extend(list_to_add)\n    # Convert back to a tuple and return\n    return tuple(tuple_list)\n\n# Function to demonstrate the solution based on the assertion provided\n# assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine the lists\n    combined_list = list1 + list2 + list3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    def rotate(s, n):\n        return s[-n % len(s):] + s[:-n % len(s)]\n    \n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 != 0\n    \n    unique_rotations = set()\n    for _ in range(rotations):\n        binary_string = rotate(binary_string, 1)\n        unique_rotations.add(binary_string)\n    \n    return sum(is_odd(rotation) for rotation in unique_rotations)"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Find the intersection of all sublists\n    common_elements = set(nested_lists[0]).intersection(*nested_lists[1:])\n    return list(common_elements)\n\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Check if the string s represents an integer.\n    \"\"\"\n    # Attempt to convert the string to an integer\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Example assertion based on the provided docstring\nassert check_integer(\"python\") == False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Join the tuple elements without any separator and convert to int\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(list_of_lists):\n    converted_list = []\n    for tuple in list_of_lists:\n        float_tuple = tuple\n        for i in range(len(tuple)):\n            try:\n                float_tuple = tuple[:i] + (float(tuple[i]),) + tuple[i+1:]\n            except ValueError:\n                pass\n        converted_list.append(float_tuple)\n    return converted_list"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    # Initialize result\n    result = 0\n    \n    # XOR all the elements in the array\n    for element in arr:\n        result ^= element\n    \n    # The result contains the single occurrence number\n    return result"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            prod1 = abs(tuples[i][0] * tuples[j][0])\n            prod2 = abs(tuples[i][0] * tuples[j][1])\n            prod3 = abs(tuples[i][1] * tuples[j][0])\n            prod4 = abs(tuples[i][1] * tuples[j][1])\n            max_product = max(max_product, prod1, prod2, prod3, prod4)\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        result = 1  # Start with 1 because it's a divisor for all x > 1\n        sqrt_x = int(x ** 0.5)\n        for i in range(2, sqrt_x + 1):\n            if x % i == 0:\n                result += i\n                if i != x // i:  # Add the divisor pair if they are not the same\n                    result += x // i\n        return result\n\n    amicable_sum = 0\n    for num in range(2, n + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n    return amicable_sum // 2  # Each pair is counted twice, so divide by 2"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(complex_num):\n    return math.atan2(complex_num.imag, complex_num.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    current_diff = 0\n    count = dict.fromkeys(['0', '1'], 0)\n\n    for char in s:\n        count[char] += 1\n        current_diff = count['0'] - count['1']\n        if current_diff < 0:\n            count = dict.fromkeys(['0', '1'], 0)\n            count[char] += 1\n            current_diff = count['0'] - count['1']\n        max_diff = max(max_diff, current_diff)\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": ")\ndef sum(x, y):\n    # Find the smaller number between x and y\n    min_num = min(x, y)\n    common_divisors_sum = 0\n\n    # Loop from 1 to the smallest number\n    for i in range(1, min_num + 1):\n        if x % i == 0 and y % i == 0:\n            common_divisors_sum += i\n\n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Calculate the sum of the first row to set as target sum\n    target_sum = sum(matrix[0])\n    \n    # Check the sums of rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check the sums of columns\n    for col in range(len(matrix)):\n        column_sum = sum(matrix[row][col] for row in range(len(matrix)))\n        if column_sum != target_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if main_diagonal_sum != target_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_count = max(list(counts.values()))\n    max_items = [item for item, count in counts.items() if count == max_count]\n    return min(max_items)\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n            \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    return zero_count / non_zero_count if non_zero_count != 0 else float('inf')"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1\n        else:\n            n //= 2\n        if n % 4 == 0 and n != 0: return False\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    # Create an empty set to store unique numbers\n    unique_numbers = set()\n    \n    # Iterate through each list in the list of lists\n    for sublist in list_of_lists:\n        # Add all numbers in the current list to the set, automatically handling duplicates\n        unique_numbers.update(sublist)\n    \n    # Convert the set back to a list if needed, but return it as a set as per the problem statement\n    return list(unique_numbers)\n\n# Final code based on the problem-solving process\ndef extract_singly(list_of_lists):\n    return [number for sublist in list_of_lists for number in sublist]"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, i):\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n\ndef pancake_sort(arr):\n    n = len(arr)\n    while n > 1:\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        if max_index != n - 1:\n            if max_index != 0:\n                flip(arr, max_index)\n            flip(arr, n - 1)\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\ncount_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n# Assert statement to check the correctness of the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n    return max_diff\n\nmax_Abs_Diff((2,1,5,3))"}
{"task_id": "Mbpp/160", "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    # Calculate the greatest common divisor of a and b\n    g = gcd(a, b)\n    \n    # If n is not divisible by the gcd, no solution exists\n    if n % g != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find x and y\n    old_r, r = a, b\n    old_s, s = 1, 0\n    old_t, t = 0, 1\n    \n    while r != 0:\n        quotient = old_r // r\n        old_r, r = r, old_r - quotient * r\n        old_s, s = s, old_s - quotient * s\n        old_t, t = t, old_t - quotient * t\n    \n    # Scale up the solution by n/g\n    x = old_s * (n // g)\n    y = old_t * (n // g)\n    \n    # Return the solution as a tuple\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list_full, list_to_remove):\n    return [element for element in list_full if element not in list_to_remove]\n\n# Assert statement to check the correctness of the function\n# assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    sum = 0\n    for i in range(0, n // 2 + 1):\n        sum += n - 2 * i\n    return sum"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(n1, n2):\n    def sum_divisors(n):\n        return sum([i for i in range(1, n // 2 + 1) if n % i == 0])\n    return sum_divisors(n1) == sum_divisors(n2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if ord(s[i]) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(arr):\n    even_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                even_count += 1\n    return even_count\n\nfind_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)\n\nassert frequency([1,2,3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\n# Output based on the given example\nperimeter_pentagon(5)"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    return input_string.count('std')\n\n# Output based on the provided assertion\nprint(count_occurance(\"letstdlenstdporstd\"))"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    # Get the first element's type\n    first_type = type(tup[0])\n    \n    # Check if all elements in the tuple are of the same type\n    for elem in tup:\n        if type(elem) is not first_type:\n            return False\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    # Find the first occurrence of elem\n    first = find_occurrence(arr, n, elem, True)\n    \n    # If the element is not found, return False\n    if first == -1:\n        return False\n    \n    # Check if the last occurrence of elem is beyond n/2 index\n    last = find_occurrence(arr, n, elem, False)\n    \n    # Calculate the total occurrences of elem\n    total_occurrences = last - first + 1\n    \n    # Check if the total occurrences are more than n/2\n    return total_occurrences > n // 2\n\ndef find_occurrence(arr, n, elem, find_first):\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            result = mid\n            if find_first:\n                high = mid - 1  # Look on left side for the first occurrence\n            else:\n                low = mid + 1   # Look on right side for the last occurrence\n        elif arr[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    # Using string slicing to get characters at even index (0 based indexing)\n    return input_string[::2]\n\n# Function to test the provided solution\ndef test_odd_values_string():\n    test_case = 'abcdef'\n    expected_result = 'ace'\n    assert odd_values_string(test_case) == expected_result, \"The function did not work as expected.\"\n\ntest_odd_values_string()"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(x, y, z):\n    return min(x, y, z)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives + arr[n:]\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(\" \", str(char))"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Slice the list to get the first n elements\n    result = sorted_lst[:n]\n    return result"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize result\n    result = 0\n    \n    # Set even bits of n\n    i = 2\n    while i <= n:\n        result |= (1 << i)\n        i += 2\n    \n    return result | n\n\n# Function to test the result\neven_bit_set_number(10)"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    occurrence_dict = {}\n    for tup in lst:\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        else:\n            occurrence_dict[tup] = 1\n    return occurrence_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return sum(len(s) - i for i in range(len(s)))"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    memo = {}\n\n    def dp(current_max, length):\n        if current_max == 0 or length == 0:\n            return 0\n        if (current_max, length) in memo:\n            return memo[(current_max, length)]\n        if length == 1:\n            return current_max\n        total = 0\n        for i in range(1, current_max + 1):\n            total += dp(i // 2, length - 1)\n        memo[(current_max, length)] = total\n        return total\n\n    return dp(m, n)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    if first_list and second_list:  # Ensure both lists are not empty\n        first_list[-1:] = second_list  # Replace the last element of the first list with the elements of the second list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)\n\n# Testing the function\nprint(count_charac(\"python programming\"))"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the square root of the given number\n    sqrt = math.sqrt(n)\n    \n    # If the square root is an integer, then n is a perfect square\n    # We need the next perfect square, so we add 1 to the square root\n    if int(sqrt) == sqrt:\n        return (int(sqrt) + 1) ** 2\n    \n    # If not, find the next integer greater than the square root\n    # and return its square\n    return (int(sqrt) + 1) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    inc = [0]*n\n    dec = [0]*n\n    \n    inc[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n        inc[i] = inc[i] if inc[i] > 0 else arr[i]\n\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n        dec[i] = dec[i] if dec[i] > 0 else arr[i]\n\n    maxSum = 0\n    for i in range(n):\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n        \n    return maxSum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = s.replace(\" \", \"\")  # Remove spaces from the string\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert both lists to sets to remove duplicates and for O(1) look-up times\n    set1 = set(arr1)\n    set2 = set(arr2)\n\n    # Find the intersection of the two sets\n    intersection = list(set1 & set2)\n\n    return intersection\n\n\n# No need to provide the usage of the code, per the instruction."}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    polar_coordinates = cmath.polar(complex_number)\n    return polar_coordinates"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(1 for item in lst if isinstance(item, int))\n\n# The function is defined to iterate through the list and count the number of integer elements. It uses a generator expression within the sum function to accumulate the count of elements that are of type int."}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(color_list, n):\n    return list(product(color_list, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(elem1, elem2) for elem1, elem2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 5\n    ns = [1, 5]\n    for i in range(2, n):\n        next_val = 6 * ns[i-1] - ns[i-2] + 2\n        ns.append(next_val)\n    return ns[-1]\n\n# Function to check the correctness of the generated function.\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(x / y for x, y in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    # First two years of a dog's life count as 10.5 dog years each\n    dog_years = 10.5 * min(human_age, 2)\n    # After the first two years, each additional year counts as 4 dog years\n    if human_age > 2:\n        dog_years += 4 * (human_age - 2)\n    return dog_years\n\n# Final code\ndef dog_age(human_age):\n    return 10.5 * min(human_age, 2) + 4 * max(0, human_age - 2)"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    split_lists = [lst[i::n] for i in range(n)]\n    return split_lists"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    total = 0\n    for i in range(n):\n        # The ith odd number can be represented as 2*i + 1\n        total += (2*i + 1)**2\n    return total"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n**2 - 6 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(character):\n    return ord(character)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    total = 0\n    for index, number in enumerate(numbers):\n        if index % 2 == 0 and number % 2 == 0:\n            total += number\n    return total"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum += even_number ** 5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize sum\n    sum = 0\n    # Calculate sum of even index binomial coefficients\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# The final code\ndef count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (9 * n - 7) // 2"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(elements):\n    return len(elements) == len(set(elements))\n\n# Asserting the function with the provided data point\nassert all_unique([1,2,3]) == True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = [a - b for a, b in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to easily iterate over digits\n    num_str = str(num)\n    \n    # Create a frequency dictionary for the digits\n    freq_dict = {digit: num_str.count(digit) for digit in num_str}\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in freq_dict.items():\n        if int(digit) < freq:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    return all(item == elem for item in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    # Checking for 'a' followed by exactly two 'b's\n    if \"abb\" in text:\n        return True\n    # Checking for 'a' followed by exactly three 'b's\n    elif \"aabbb\" in text:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for one occurrence of the array\n    def max_sub_array_sum(arr):\n        max_so_far = arr[0]\n        curr_max = arr[0]\n        for i in range(1, n):\n            curr_max = max(arr[i], curr_max + arr[i])\n            max_so_far = max(max_so_far, curr_max)\n        return max_so_far\n    \n    # Calculate the sum of the array elements\n    arr_sum = sum(arr)\n    \n    # If the sum of the entire array is positive or zero, the maximum subarray sum would be the whole repeated array sum\n    if arr_sum > 0 or arr_sum == 0:\n        return max_sub_array_sum(arr) * k\n    \n    # If not, find the maximum subarray sum crossing the start and end points\n    max_sum_crossing_start = max_sub_array_sum(arr[-1::-1])\n    max_sum_crossing_end = max_sub_array_sum(arr)\n    total_max = max_sum_crossing_start + max_sum_crossing_end\n    \n    if k == 1:\n        return max(total_max, max_sub_array_sum(arr))\n    elif arr_sum < 0:\n        return max(total_max, max_sub_array_sum(arr), max_sub_array_sum(arr) + arr_sum * (k - 2))\n    else:\n        return total_max\n\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    # Find the list with the maximum length\n    max_len = -1\n    max_list = None\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)\n\n# Function to be generated based on the above reasoning process\ndef max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]):\n    max_len = -1\n    max_list = None\n    for lst in [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(numerator, denominator):\n    return math.floor(numerator / denominator)"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(a, b):\n    import math\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_num = None\n    for item in lst:\n        if isinstance(item, (int, float)) and (max_num is None or item > max_num):\n            max_num = item\n    return max_num"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total\n\n# The function sum_div is defined to calculate the sum of all divisors of a number excluding itself. It iterates from 1 to half of the given number (since no divisor can be larger than n/2 except the number itself), checks if it is a divisor, and adds it to the total sum if it is. Finally, it returns the total sum of divisors."}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_count_split_inv(left, right):\n        i, j = 0, 0\n        inv_count = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    def count_inv(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, left_inv = count_inv(arr[:mid])\n        right, right_inv = count_inv(arr[mid:])\n        merged, split_inv = merge_count_split_inv(left, right)\n        total_inv = left_inv + right_inv + split_inv\n        return merged, total_inv\n\n    _, total_inversions = count_inv(arr)\n    return total_inversions"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    # Create a dictionary to store the sum of values for each name\n    aggregates = {}\n    for name, value in lst:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    \n    # Find the name with the maximum aggregate value\n    max_name = max(aggregates, key=aggregates.get)\n    \n    return (max_name, aggregates[max_name])\n\n# Output the final code only\ndef max_aggregate(lst):\n    aggregates = {}\n    for name, value in lst:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    # Using central binomial coefficient formula (2n choose n) to calculate the count\n    return math.comb(2 * n, n) / 2 ** n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + max((dict_depth(v) for v in d.values()))\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words_list):\n    result = ()\n    for item in words_list:\n        split_items = item.split()\n        for word in split_items:\n            if word.startswith('P') or word.startswith('p'):\n                result += (word, )\n                # Only need two words that start with 'p'\n                if len(result) == 2:\n                    return result\n    return result"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    for j in range(i + 1):\n        dp[j] = arr[j]\n    for j in range(i + 1, n):\n        for l in range(j):\n            if arr[j] > arr[l] and dp[j] < arr[j] + dp[l]:\n                dp[j] = arr[j] + dp[l]\n        if j == k:\n            return dp[k]\n    return -1\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    import itertools\n    # Generate all possible combinations of elements from both lists\n    products = [x * y for x, y in itertools.product(list1, list2)]\n    # Sort the products in descending order\n    sorted_products = sorted(products, reverse=True)\n    # Return the first n elements\n    return sorted_products[:n]\n\n# Function call\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3))"}
{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    return tuple(input_string)\n\n# Check the function with the provided example\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Check if the number is a power of two, return the next power of two if true\n    if (n & (n - 1)) == 0:\n        return n << 1\n    \n    # Set the leftmost unset bit\n    unset_bit_position = 0\n    while (n & (1 << unset_bit_position)) != 0:\n        unset_bit_position += 1\n    \n    # Set the found unset bit\n    return n | (1 << unset_bit_position)\n\n# Function to test the solution with provided data points\ndef assert_function():\n    test_cases = [(10, 14), (16, 17), (23, 27)]\n    for n, expected in test_cases:\n        result = set_left_most_unset_bit(n)\n        if result != expected:\n            print(f\"Test failed for input {n}. Expected {expected}, got {result}\")\n            return\n    print(\"All tests passed.\")\n\n# Running the assert function to verify the solutions\nassert_function()"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Initialize the first two Lucas numbers\n    lucas_prev_prev = 2\n    lucas_prev = 1\n    \n    # Handle the first two numbers specifically\n    if n == 0:\n        return lucas_prev_prev\n    elif n == 1:\n        return lucas_prev\n    \n    # Calculate the n-th Lucas number\n    for _ in range(2, n + 1):\n        lucas_current = lucas_prev_prev + lucas_prev\n        # Update the previous two numbers\n        lucas_prev_prev = lucas_prev\n        lucas_prev = lucas_current\n        \n    return lucas_current"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(item) for item in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    return [{''.join(k): {names[i]: scores[i]}) for i, k in enumerate(ids)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = [0] * (n + 1)\n    \n    def f(n):\n        if n < 2:\n            return n\n        if memo[n]:\n            return memo[n]\n        memo[n] = max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n        return memo[n]\n    \n    return f(n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Function test\nprint(first_non_repeating_character(\"abcabc\"))"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return float(b)\n    elif (b <= a <= c) or (c <= a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        while num > 0:\n            digit = num % 10\n            total_sum += digit\n            num //= 10\n    return total_sum\n\n# The generated function computes the sum of digits of each number in the given list."}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n\n# Function to be used for the assertion\nextract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    # \u8ba1\u7b97\u7ed9\u5b9a\u6570\u5b57n\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    # \u5982\u679c1\u7684\u4e2a\u6570\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56deFalse\uff1b\u5982\u679c\u662f\u5947\u6570\uff0c\u5219\u8fd4\u56deTrue\n    return count % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of integers\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Start from the rightmost digit and find the first digit that is smaller than the digit next to it\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, no larger permutation is possible\n        return -1\n    \n    # Find the smallest digit on the right side of (i-th digit) that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits after the (i+1)-th position\n    digits[i + 1:] = sorted(digits[i + 1:])\n    \n    # Convert the list back to an integer\n    return int(''.join(digits))\n\nrearrange_bigger(12)"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = tuples[0][0] * tuples[0][1]\n    for tuple in tuples:\n        product = tuple[0] * tuple[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    # Find and return the minimum value\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    # Create an empty list to store even numbers\n    even_numbers = []\n    # Iterate through the list of numbers\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If the number is even, append it to the even_numbers list\n            even_numbers.append(number)\n    # Return the list of even numbers\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence into a set for O(1) lookups\n    set_seq2 = set(seq2)\n    # Check if any item in seq1 exists in set_seq2\n    return any(item in set_seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])\n\n# The function implementation above is incorrect for cases where the array could contain negative numbers, \n# which might lead to a higher product if paired together. Let's correct it:\n\ndef max_Product(arr):\n    arr.sort()\n    return (arr[0], arr[1]) if arr[0] * arr[1] > arr[-1] * arr[-2] else (arr[-1], arr[-2])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(list_of_lists):\n    # Initialize max_length and max_list variables\n    max_length = 0\n    max_list = []\n\n    # Iterate through each list in the given list of lists\n    for sublist in list_of_lists:\n        # Check if the current sublist's length is greater than the stored max_length\n        if len(sublist) > max_length:\n            # Update max_length and max_list\n            max_length = len(sublist)\n            max_list = sublist\n\n    # Return the list with the maximum length\n    return max_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 3\n    return total_sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    # Joining tuple elements with '-'\n    return '-'.join(map(str, tup))\n\n# Function implementation\ndef concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the date string into year, month, and day\n    year, month, day = date_str.split('-')\n    \n    # Reconstruct the date string in the new format\n    return f\"{day}-{month}-{year}\"\n\n# Final code\ndef change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    result = tuple(a & b for a, b in zip(t1, t2))\n    return result\n\nprint(and_tuples((10, 4, 6, 9), (5, 2, 3, 3)))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The directrix of a parabola given in the form (y-k) = a*(x-h)^2 is calculated using the formula: \n    # directrix: y = k - (1 / (4 * a))\n    return k - (1 / (4 * a))\n\n# \u6d4b\u8bd5\u7528\u4f8b\nprint(parabola_directrix(5, 3, 2))"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the second list into a set for O(1) lookups\n    set_list2 = set(list2)\n    # Iterate through the first list and check if any element is in the second list's set\n    for element in list1:\n        if element in set_list2:\n            return True\n    # If no common elements were found, return False\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b) / 2 - c\n\n# The above function is incorrect, it should be:\ndef median_trapezium(a, b, c):\n    return (a + b) / 2 + c / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if element >= num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(num):\n    return num % 10\n\n# Output the function directly as per the requirement:\nlast_Digit = lambda num: num % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"Return a list of negative numbers from the given list.\"\"\"\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = [s[i] for i in range(len(s)) if i % 2 != 0]\n    return \"\".join(result)"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    # Create a dictionary to store the count of each forward and backward pair\n    pair_counts = {}\n    \n    # Iterate through the list of tuples\n    for t in tuples:\n        # Increment the count for the forward pair\n        pair_counts[t] = pair_counts.get(t, 0) + 1\n        # Increment the count for the backward pair\n        pair_counts[t[::-1]] = pair_counts.get(t[::-1], 0) + 1\n    \n    # Count the bidirectional pairs\n    bidirectional_count = sum(count // 2 for count in pair_counts.values() if count % 2 == 0)\n    \n    return bidirectional_count\n\n# Output the final code\ndef count_bidirectional(tuples):\n    pair_counts = {}\n    for t in tuples:\n        pair_counts[t] = pair_counts.get(t, 0) + 1\n        pair_counts[t[::-1]] = pair_counts.get(t[::-1], 0) + 1\n    bidirectional_count = sum(count // 2 for count in pair_counts.values() if count % 2 == 0)\n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to string and join them together\n    result = int(\"\".join(str(x) for x in lst))\n    return result"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    import re\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return None\n\n# Example usage:\n# assert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "solution": ""}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_numbers = sum(1 for num in arr if num > 0)\n    return round(positive_numbers / len(arr), 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuples1, tuples2):\n    result = tuple((a*b, b*a) for (a, b), (c, d) in zip(tuples1, tuples2))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    counter = 0\n    for elem in lst:\n        counter += tup.count(elem)\n    return counter"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    perrin = [3, 0, 2]\n    sum_perrin = 5\n    for i in range(3, n):\n        next_perrin = perrin[1] + perrin[0]\n        perrin[0], perrin[1], perrin[2] = perrin[1], perrin[2], next_perrin\n        sum_perrin += next_perrin\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    total = 0\n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            total += i\n    return total\n\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if the given string contains a word with the letter 'z'.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    # Initialize the minimum length and result sublist\n    min_length = len(lists[0])\n    min_sublist = lists[0]\n    \n    # Iterate through each sublist in the list\n    for sublist in lists:\n        # If the current sublist's length is less than the minimum length found so far\n        if len(sublist) < min_length:\n            # Update the minimum length and the result sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = \"\"\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_overall = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], temp * arr[i], min_product * arr[i])\n\n        max_overall = max(max_overall, max_product)\n\n    return max_overall"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    mod = 1\n    for i in arr:\n        mod = (mod * (i % n)) % n\n    return mod"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    return all(nums[i] + 1 == nums[i + 1] for i in range(len(nums) - 1))\n\n# Testing the function with provided data point\nassert check_Consecutive([1,2,3,4,5]) == True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples1, tuples2):\n    set1 = {frozenset(t) for t in tuples1}\n    set2 = {frozenset(t) for t in tuples2}\n    intersection = set1 & set2\n    return {tuple(sorted(t)) for t in intersection}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n\n# Assert statement to check the correctness of the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    # Return their sum\n    return max_val + min_val\n\n# Function to test the correctness of the generated function\ndef check():\n    assert big_sum([1, 2, 3]) == 4\n    assert big_sum([-1, -2, -3]) == -4\n    assert big_sum([5, 5, 5]) == 10\n    assert big_sum([10, -20, 0, 30]) == 30\n\ncheck()"}
{"task_id": "Mbpp/477", "solution": "def is_lower(string):\n    return string.lower()\n\nassert is_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    # Initialize an empty result string\n    result = ''\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Append it to the result if it is\n            result += char\n    \n    return result\n\n# Final code based on the reasoning\ndef remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    while number >= 10:\n        number = number // 10\n    return number"}
{"task_id": "Mbpp/554", "solution": "def Split(int_list):\n    return [num for num in int_list if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # \u8ba1\u7b97\u524dn\u4e2a\u81ea\u7136\u6570\u7684\u7acb\u65b9\u548c\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # \u8ba1\u7b97\u524dn\u4e2a\u81ea\u7136\u6570\u7684\u548c\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    # \u8fd4\u56de\u4e24\u8005\u7684\u5dee\u503c\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    # Count of odd and even numbers in the array\n    odd_count = 0\n    even_count = 0\n    \n    # Counting odd and even numbers\n    for i in range(n):\n        if (arr[i] & 1): \n            odd_count += 1\n        else: \n            even_count += 1\n            \n    # The number of pairs with odd XOR value will be \n    # all combinations of (odd,even)\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert numbers to strings for easy digit extraction\n    str_num1, str_num2 = str(num1), str(num2)\n    \n    # Initialize the sum of differences\n    diff_sum = 0\n    \n    # Iterate over the digits of both numbers\n    for d1, d2 in zip(str_num1.zfill(max(len(str_num1), len(str_num2))), \n                      str_num2.zfill(max(len(str_num1), len(str_num2)))):\n        # Add the absolute difference between digits to diff_sum\n        diff_sum += abs(int(d1) - int(d2))\n        \n    return diff_sum\n\n# Check with provided data point\ndigit_distance_nums(1, 2)"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Combine the tuples and convert to a set to remove duplicates\n    combined_set = set(tuple1 + tuple2)\n    # Convert the set back to a sorted tuple\n    return tuple(sorted(combined_set))\n\n# Testing the function\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    return max(len(sublist) for sublist in sublists)"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    # Initialize count to 0\n    count = 0\n    \n    # Create a set from the list to remove duplicates\n    unique_lst = set(lst)\n    \n    # If there are duplicates, the number of pairs will be affected\n    # Calculate the number of possible pairs with unique elements\n    # For each element in the list, if it's not a duplicate, it can pair with n-1 other elements\n    # Since pairs are unordered, each pair is counted twice, so divide by 2\n    if len(lst) != len(unique_lst):\n        count = (len(unique_lst) * (len(unique_lst) - 1)) // 2\n    else:\n        count = (n * (n - 1)) // 2\n\n    return count\n\n# Final code output (as per instruction, no explanation provided)\ndef count_Pairs(lst, n):\n    unique_lst = set(lst)\n    return (len(unique_lst) * (len(unique_lst) - 1)) // 2 if len(lst) != len(unique_lst) else (n * (n - 1)) // 2"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum to 0\n    digit_sum = 0\n    \n    # Convert the number to a string to easily iterate over each digit\n    str_n = str(n)\n    \n    # Iterate over each character in the string representation of n\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the calculated sum\n    return digit_sum"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lists):\n    result = []\n    seen = set()\n    for num in lists:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Testing the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/574", "solution": "def surfacearea_cylinder(radius, height):\n    import math\n    base_area = math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    return 2 * base_area + side_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    map_last_digit = [1, 1, 2, 6, 4]\n    if n < 5:\n        return map_last_digit[n]\n    else:\n        # The pattern repeats every 4 numbers starting from 5\n        return (last_Digit_Factorial(n % 4 + 4) if n % 4 != 0 else 4) * 6 % 10\n\n# Testing the function with provided data point\nprint(last_Digit_Factorial(4))"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))\n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    result = ()\n    for item in t:\n        if isinstance(item, tuple):\n            nested = extract_even(item)\n            if nested:  # only add non-empty tuples\n                result += (nested,)\n        elif item % 2 == 0:\n            result += (item,)\n    return result"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = ((base_edge / 2) ** 2 + height ** 2) ** 0.5\n    lateral_area = (base_edge * slant_height) * 4\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return False if d else True"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0], catalan[1] = 1, 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Calculate the square root of the start number and round up to the nearest whole number\n    # This is the smallest number whose square will be in the range\n    i = int(start ** 0.5)\n    if i * i < start:\n        i += 1\n    \n    # Loop from the calculated starting point to the square root of the end number\n    for i in range(i, int(end**0.5) + 1):\n        square = i * i\n        # If the square is within the given range, add it to the list\n        if square <= end:\n            squares.append(square)\n    \n    return squares\n\n# Function to test the correctness of the solution\ndef check(start, end):\n    print(f\"Perfect squares between {start} and {end}: {perfect_squares(start, end)}\")\n\n# Test the function with provided data points\ncheck(1, 30)"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular (Cartesian) coordinates\n    rect = cmath.rect(r, theta)\n    return ((r, theta), rect)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Function output\nprint(swap_List([12, 35, 9, 56, 24]))"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    return sum(comb(n, i) * comb(n, i + 1) for i in range(n))"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    # Split the IP address by '.'\n    parts = ip_address.split('.')\n    # Process each part to remove leading zeros\n    parts = [str(int(part)) for part in parts]\n    # Join the processed parts back together\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n            \n        if first_even is not None and first_odd is not None:\n            break\n\n    return first_even - first_odd\n\n# Testing the function with provided data point\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    \"\"\"\n    Counts the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    diff_count = sum(b1 != b2 for b1, b2 in zip(binary1, binary2))\n    return diff_count // 2 + diff_count % 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    pa = min(k // 2, len1)\n    pb = k - pa\n    if arr1[pa - 1] < arr2[pb - 1]:\n        return find_kth(arr1[pa:], arr2, k - pa)\n    elif arr1[pa - 1] > arr2[pb - 1]:\n        return find_kth(arr1, arr2[pb:], k - pb)\n    else:\n        return arr1[pa - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to string to get the length (number of digits)\n    num_str = str(n)\n    length = len(num_str)\n    \n    # Initialize sum\n    sum_of_powers = 0\n    \n    # Compute the sum of the digits raised to the power of the number of digits\n    for digit in num_str:\n        sum_of_powers += int(digit) ** length\n    \n    # Check if the computed sum is equal to the input number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    average = sum_n / n\n    return sum_n, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n# assert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Step 1: Initialize the list of ludic numbers with all integers from 1 to n\n    ludic_numbers = list(range(1, n + 1))\n    \n    # Step 2: Start with the first number in the list (which is 1)\n    index = 0\n    \n    # Step 3: While the current index is within the bounds of the list\n    while index < len(ludic_numbers):\n        # Step 4: Remove every element starting from the current index and at a distance of the current element's value\n        del ludic_numbers[index+1::ludic_numbers[index]]\n        \n        # Step 5: Move to the next index\n        index += 1\n\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    import math\n    radian = degree * (math.pi / 180)\n    return radian"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\nfind_literals('The quick brown fox jumps over the lazy dog.', 'fox')"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    # Initialize the Bell Triangle with the first row\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    # Fill the Bell Triangle\n    for i in range(1, n+1):\n        # Explicitly fill the first element of each row\n        bell[i][0] = bell[i-1][i-1]\n\n        # Fill the rest of the elements of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # The nth Bell number is the first element of the nth row\n    return bell[n][0]\n\n# Function to test the bell_number function\ndef test_bell_number():\n    assert bell_number(2) == 2, \"Test case 1 failed\"\n    print(\"All test cases passed!\")\n\ntest_bell_number()"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [elem for i, elem in enumerate(lst) if i != k-1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    # Unzipping the list of lists\n    result = list(zip(*lst))\n    # Converting tuples back to lists\n    return [list(x) for x in result]\n    \n# Testing the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total_sum = 0\n    for t in tuples:\n        for num in t:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages\n\n# Test the function with provided data point\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 2.5]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(t1 % t2 for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    num_buf = \"\"\n    for char in s:\n        if char.isdigit():\n            num_buf += char\n        else:\n            if num_buf:\n                nums.append(num_buf)\n                num_buf = \"\"\n            chars.append(char)\n    if num_buf:  # append any remaining numbers\n        nums.append(num_buf)\n\n    result = ''.join(chars) + ''.join(nums)\n    return result"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    dp = {}\n    \n    def dfs(num):\n        if num in dp: return dp[num]\n        max_size = 1\n        for i in range(len(nums)):\n            if nums[i] < num and num % nums[i] == 0:\n                max_size = max(max_size, dfs(nums[i]) + 1)\n        dp[num] = max_size\n        return max_size\n    \n    for num in nums:\n        dfs(num)\n        \n    return max(dp.values())\n\nlargest_subset([1, 3, 6, 13, 17, 18])"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size//2 - 1] + merged_list[size//2]) / 2\n    else:\n        return merged_list[size//2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [num ** n for num in lst] \n\n# Testing the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(text):\n    return text.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The area of the largest triangle that can be inscribed in a semicircle is given by (1/2)*base*height.\n    # For the largest triangle, the base is the diameter of the semicircle and the height is the radius.\n    return 0.5 * (2 * radius) * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    # Replace all spaces in the input_string with '%20'\n    return input_string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')\n\n# Validation check\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    non_zero_elements = [x for x in arr if x != 0]\n    zero_count = len(arr) - len(non_zero_elements)\n    return non_zero_elements + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum += arr[i] ^ arr[j]\n    return sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i): \n    largest = i \n    l = 2 * i + 1     \n    r = 2 * i + 2     \n\n    if l < n and arr[i] < arr[l]: \n        largest = l \n\n    if r < n and arr[largest] < arr[r]: \n        largest = r \n\n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i] \n\n        heapify(arr, n, largest) \n\ndef heap_sort(arr):\n    n = len(arr) \n\n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]  \n        heapify(arr, i, 0) \n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    return amount == cost"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    # Wind Chill formula: WCI = 13.12 + 0.6215T - 11.37 V^0.16 + 0.3965T V^0.16\n    # where T is the air temperature in Celsius and V is the wind speed in km/hr.\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)\n\n# Note: The provided assertion is incorrect based on the typical wind chill formula,\n# as a temperature of 35\u00b0C would not result in a wind chill index of 40 with a wind speed of 120 km/h.\n# The typical wind chill model applies to temperatures below 10\u00b0C (50\u00b0F) and wind speeds exceeding 4.8 km/h."}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter names that start with an uppercase letter\n    filtered_names = [name for name in names if name[0].isupper()]\n    # Calculate the total length of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    start = -1\n    end = -1\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == '(':\n            start = i\n        elif s[i] == ')':\n            end = i\n            break\n    if start != -1 and end != -1:\n        result = s[:start] + s[end+1:]\n    else:\n        result = s\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7*n - 5) // 2\n\n# function to find the nth nonagonal number\ndef nth_nonagonal_number(n):\n    return is_nonagonal(n)\n\n# check\nprint(nth_nonagonal_number(10))"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(word):\n    # Check if the length of the word is greater than 2 to ensure it has middle characters\n    if len(word) > 2:\n        # Start checking from the second character until the second last character\n        return 'z' in word[1:-1]\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the array up to position k\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\n# Function implementation based on the problem-solving process:\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "from typing import List\nfrom heapq import heappush, heappop\n\ndef maxAverageOfPath(matrix: List[List[int]]) -> float:\n    # Define the directions we can move (right and down)\n    directions = [(0, 1), (1, 0)]\n    n = len(matrix)\n    # Priority queue to store (negative average, steps, cost, y-position, x-position)\n    pq = [(-matrix[0][0], 1, -matrix[0][0], 0, 0)]\n    # Matrix to store the maximum cost at each position\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    while pq:\n        neg_avg, steps, neg_cost, y, x = heappop(pq)\n        # Calculate the actual average and cost\n        avg = -neg_avg\n        cost = -neg_cost\n        \n        # If we are at the bottom-right corner, return the average\n        if y == n - 1 and x == n - 1:\n            return avg\n        \n        # Explore neighbors\n        for dy, dx in directions:\n            ny, nx = y + dy, x + dx\n            if 0 <= ny < n and 0 <= nx < n:\n                new_cost = cost + matrix[ny][nx]\n                new_steps = steps + 1\n                new_neg_avg = - (new_cost / new_steps)\n                # Only update if this path has a better cost than previously seen\n                if new_cost > -dp[ny][nx]:\n                    dp[ny][nx] = -new_cost\n                    heappush(pq, (new_neg_avg, new_steps, -new_cost, ny, nx))\n    \n    # If no path is found (should not happen given the problem constraints)\n    return -1"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for x, y in zip(list1, list2) if x == y)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    result = []\n    start = None\n    for i, char in enumerate(s):\n        if char == '\"' and (i == 0 or s[i - 1] != \"\\\\\"):\n            if start is not None:\n                result.append(s[start + 1:i])\n                start = None\n            else:\n                start = i\n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(nums):\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result\n\nconsecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching to the left\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0 \n    n = len(arr) \n  \n    # Pick starting point \n    for i in range(0, n): \n        prod = 1\n        # Pick ending point \n        for j in range(i, n): \n            # multiply current item with previous product \n            prod *= arr[j] \n            total_sum += prod \n  \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Step 1: Find the number of bits in n.\n    num_bits = n.bit_length()\n    \n    # Step 2: Create a mask that has all bits set except the first and last.\n    # For this, we create a mask with all bits set (2^num_bits - 1), then clear the first and last bit.\n    mask = (1 << (num_bits - 1)) - 1  # Sets all bits\n    mask &= ~(1)                     # Clears the first bit\n    if num_bits > 1:\n        mask &= ~((1 << (num_bits - 1)))  # Clears the last bit if more than one bit\n    \n    # Step 3: Toggle the middle bits using XOR operation between n and mask.\n    result = n ^ mask\n    \n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Check function with the provided data point\nassert left_insertion([1,2,4,5], 6) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    # Using regex to check if the string starts with a vowel\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula derived to find the index is: ceil ((sqrt(8*10^(n-1) + 1) - 1) / 2)\n    return math.ceil((math.sqrt(8 * math.pow(10, (n - 1)) + 1) - 1) / 2)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1\n\n# Function to check the solution with provided data points\n# assert all_Characters_Same(\"python\") == False"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * (edge_length ** 2)\n\n# Function to calculate the area of a tetrahedron\n# Given an edge length, it returns the area\n# Formula: sqrt(3) * a^2 where a is the edge length"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Calculate the effective rotation\n    n = n % len(lst)\n    # Slice the list and reorder\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(data_tuple):\n    return any(item is None for item in data_tuple) \n\n# This function checks for None values in a given tuple and returns True if there is at least one None value, otherwise False."}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_its_digits(number):\n        for digit in str(number):\n            if int(digit) == 0 or number % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_its_digits(num)]\n\n# Function call to verify the solution with provided data point\ndivisible_by_digits(1, 22)"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    import re\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", text)\n\ncapital_words_spaces(\"Python\") == 'Python'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    # Convert each string in the list to an integer, sort the list, then convert back to string\n    sorted_strings = sorted(int(num_str) for num_str in strings)\n    return [str(num) for num in sorted_strings]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    for i in range(int(n/2 - 1), -1, -1):\n        j = 2 * i + 1\n        while j < n:\n            if j + 1 < n and arr[j+1] < arr[j]:\n                j += 1\n            if arr[i] > arr[j]:\n                return False\n            j *= 2\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return (2**n - (-1)**n) // 3"}
{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1] if len(unique_numbers) > 1 else None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    # Create a dictionary to store the count of reverse pairs\n    count_dict = {}\n    # Initialize the result counter\n    result = 0\n    \n    # Iterate through the list of strings\n    for word in lst:\n        # Check if the reverse of the word is in the dictionary\n        if word[::-1] in count_dict:\n            # If it is, increment the result by the count of its reverse\n            result += count_dict[word[::-1]]\n        \n        # Update or add the word's count in the dictionary\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    \n    return result"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    from collections import defaultdict\n    counts = defaultdict(int)\n    for sublist in lst:\n        counts[tuple(sublist)] += 1\n    return dict(counts)"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float_val = float(s)\n        if str(float_val) == s and s.count('.') == 1 and s.endswith('0'):\n            return True\n        elif s.count('.') == 1 and s.endswith(('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n# The final function without reasoning\ndef is_decimal(s):\n    parts = s.split('.')\n    if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n    return len(parts[1]) == 2"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # List of months with 30 days\n    months_with_30_days = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list\n    return month in months_with_30_days"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # First sort the array to bring elements closer\n    arr.sort()\n\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    # Loop through the array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Test the function with provided data point\nassert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Step 1: Initialize variables to keep track of the current number and count of polite numbers found\n    current_number = 0\n    polite_count = 0\n    \n    # Step 2: Loop until we find the n-th polite number\n    while True:\n        # Step 3: Check if the current number is a polite number\n        if is_bit_set(current_number):\n            # Step 4: If it is a polite number, increment the count\n            polite_count += 1\n            # Step 5: If we have found the n-th polite number, return it\n            if polite_count == n:\n                return current_number\n        \n        # Step 6: Move to the next number\n        current_number += 1\n\n# Helper function to check if a number can be expressed as the sum of distinct powers of 2 (polite number)\ndef is_bit_set(number):\n    # A number is polite if its binary representation has more than one '1'\n    return number > 0 and bin(number).count('1') > 1\n\n# Function to test the correctness of the solution\ndef test_is_polite():\n    assert is_polite(1) == 3\n    assert is_polite(2) == 5\n    assert is_polite(3) == 6\n    assert is_polite(4) == 7\n    assert is_polite(5) == 9\n    assert is_polite(6) == 10\n    assert is_polite(7) == 11\n\ntest_is_polite()"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\npair_wise([1,1,2,3,3,4,4,5])"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in numbers:\n        # Check if the complement (target_sum - num) exists in the dictionary\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n        # Update the frequency of the current number in the dictionary\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count\n\n# Function to test the correctness of get_pairs_count\ndef check_function():\n    assert get_pairs_count([1,1,1,1],2) == 6, \"Test case 1 failed\"\n    assert get_pairs_count([1,5,7,-1],6) == 2, \"Test case 2 failed\"\n    assert get_pairs_count([1,1,1,1,1],2) == 10, \"Test case 3 failed\"\n\ncheck_function()"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [num for num in list1 if num not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Define the mapping of open and close parentheses\n    bracket_map = {'(': ')', '[': ']', '{': '}'}\n    open_brackets = set(['(', '[', '{'])\n    stack = []\n\n    for char in expression:\n        if char in open_brackets:  # If it's an opening bracket, push to stack\n            stack.append(char)\n        elif stack and char == bracket_map[stack[-1]]:  # If it's a closing bracket, pop from stack if matches\n            stack.pop()\n        else:  # If it's an unmatched closing bracket\n            return False\n\n    # If stack is empty, all brackets were matched\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(text, substring):\n    positions = []\n    index = -1\n    while True:\n        index = text.find(substring, index + 1)\n        if index == -1:\n            break\n        positions.append((index, index + len(substring)))\n    \n    if not positions:\n        return None\n    \n    # Return the substring and its start and end positions\n    return (substring, *positions[0])\n\n# Test the function with provided data point\nprint(occurance_substring('python programming, python language', 'python'))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    # Check every odd index for an odd number\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(arr):\n    # Create a dictionary to track the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Sum up the elements that have a count of 1 (non-repeated)\n    return sum(num for num, count in count_dict.items() if count == 1)\n\n# Test the function with provided data point\nassert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst: return []\n    result = [[lst[0]]]\n    for element in lst[1:]:\n        if result[-1][-1] == element:\n            result[-1].append(element)\n        else:\n            result.append([element])\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples_list):\n    # Extracting the tuples\n    tuples = [tuple(t) for t in tuples_list]\n    \n    # Find all possible combinations of tuples\n    result = set()\n    for i in range(1, len(tuples) + 1):\n        for subset in combinations(tuples, i):\n            sum_tuple = (sum(x[0] for x in subset), sum(x[1] for x in subset))\n            result.add(sum_tuple)\n    \n    return list(result)"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        total_sum += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total_sum\n\nassert odd_length_sum([1, 2, 4]) == 14"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx * 100\n    return round(h, 2), round(s*100, 2), round(v, 2)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        elif odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else None\n\n# Testing\nprint(mul_even_odd([1,3,5,7,4,1,6,8]))  # Expected output: 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    tuple_str = tuple_str.strip().strip('()')\n    int_tuple = tuple(map(int, tuple_str.split(',')))\n    return int_tuple\n\n# Function output\nprint(tuple_str_int(\"(7, 8, 9)\"))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= val:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    This function checks if the input string contains an 'a' followed by exactly three 'b's.\n    \"\"\"\n    pattern = r\"ab{3}\\b\"  # 'a' followed by exactly three 'b's and asserts it is the end of the word\n    return bool(re.search(pattern, text))\n\n# assertion based on the provided example\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return lst + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2): \n        if lst[i] % 2 != 0: \n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for item in input_tuple:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\nremove_nested((1, 5, 7, (4, 6), 10))"}
{"task_id": "Mbpp/792", "solution": "def count_list(nested_lists):\n    return len(nested_lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, elem):\n    low, high = 0, len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict):\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(num for num in range(l, r + 1) if num % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Perform the rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")\n\n# Output the final code only:\ndef remove_all_spaces(string):\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    # Initialize count as 0\n    count = 0\n    # Check x equals to y and z\n    if x == y and y == z:\n        count = 3\n    # If not all are equal, check for any two being equal\n    elif x == y or x == z or y == z:\n        count = 2\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    else:\n        root = int(n**0.5)\n        return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_len = 0\n    current_len = 0\n    for char in s:\n        if char.isupper():\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n\n# Testing the function with provided data point\nassert first_odd([1,3,5]) == 1"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    for i in range(len(tup2)):\n        if tup1[i] < tup2[i]:\n            return False\n    return True"}
