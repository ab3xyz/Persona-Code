{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return [value for value in list1 if value in list2]"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(lst, n):\n    import heapq\n    return heapq.nlargest(n, lst)\n\n# Example usage (Not part of the function)\n# heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    # XOR the two numbers to find the bits that are different\n    xor_result = a ^ b\n    # Count the number of bits set to 1 in the result\n    count = 0\n    while xor_result > 0:\n        count += xor_result & 1\n        xor_result >>= 1\n    # If the count is exactly 1, they differ at one bit position only\n    return count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(lst):\n    return [x ** 2 for x in lst]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n    \"\"\"\n    original_s = s\n    rotations = 0\n    length = len(s)\n    \n    while True:\n        s = s[1:] + s[0]  # Rotate left\n        rotations += 1\n        if s == original_s:\n            return rotations\n        if rotations >= length:\n            return length  # If it has cycled through all positions without match\n\n# The following line is not part of the function and is for demonstration purposes only.\n# assert find_Rotations(\"aaaa\") == 1"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    s = s[s.find(char) + 1 :] if char in s else s\n    s = s[: s.rfind(char)] if char in s else s\n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [row for _, row in sorted(((sum(row), row) for row in matrix))]\n\n# This function sorts the input matrix based on the sum of its rows in ascending order."}
{"task_id": "Mbpp/14", "solution": "def find_Volume(length, base, height):\n    return (length * base * height) / 2"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    import re\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join(c for c in str1 if c not in str2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    import math\n    for k in range(1, int(math.log2(n)) + 2):\n        if n == (k * 2**k) - 1:\n            return True\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num == 2 * reverse_num - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr):\n    from functools import cmp_to_key\n\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n\n    arr = [str(i) for i in arr]\n    arr.sort(key=cmp_to_key(compare))\n    return int(''.join(arr)) if arr[0] != '0' else 0\n\n# Test the function with provided data points\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x > 0) ^ (y > 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return 3*n*n - 2*n\n\n# Testing the function with provided data point\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    \"\"\"\n    Counts the number of substrings where the sum of the digits equals the length of the substring.\n    \"\"\"\n    def get_sum(sub):\n        return sum(int(digit) for digit in sub)\n    \n    count = 0\n    n = len(s)\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            sub = s[i:i+length]\n            if get_sum(sub) == length:\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Test case\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Create a 2D array to store Bell Numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n \n    return bell[n][n-1]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return all(len(t) == len(tuples[0]) for t in tuples)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted_arr = False\n\n    while not sorted_arr:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted_arr = False\n        else:\n            gap = 1\n            sorted_arr = True\n\n        # A single \"comb\" over the input array\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted_arr = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        a = i * i\n        b = n - a\n        if (int(b**0.5))**2 == b:\n            return True\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    pattern_map = {}\n    for i in range(len(colors)):\n        if colors[i] not in pattern_map:\n            if patterns[i] in pattern_map.values():\n                return False\n            pattern_map[colors[i]] = patterns[i]\n        elif pattern_map[colors[i]] != patterns[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    return [t for t in lst if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    \"\"\"Check if a number is divisible by 11.\"\"\"\n    return n % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total = sum(ord(c) for c in s)\n    return chr((total % 26) + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return newman_conway(newman_conway(n-1)) + newman_conway(n-newman_conway(n-1))\n\ndef sequence(n):\n    return newman_conway(n)"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 3 + 1) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1 if n > 1 else None"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    return max(len(word) for word in words)\n\n# Testing the function\nassert len_longest_word([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    for item in lst:\n        if substring in item:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    for i in range(len(str_n) - 1):\n        if i % 2 == 0:\n            if str_n[i] != str_n[0]:\n                return False\n        else:\n            if str_n[i] != str_n[1]:\n                return False\n    return str_n[0] != str_n[1]"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    return min(len(sublist) for sublist in lists)\n\n# Test case\nassert Find_Min_Length([[1],[1,2]]) == 1"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary_str = ''\n    while decimal_number > 0:\n        binary_str = str(decimal_number % 2) + binary_str\n        decimal_number //= 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    i = n - 1\n    while not is_palindrome(i):\n        i -= 1\n    return i if i >= 0 else n + 1\n\n# Checking the provided data point\nprint(next_smallest_palindrome(99))"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    arr.sort()\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 1 and m == 0:\n        return 1\n    if n <= 0 or m < 0 or m >= n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return sum(1 for item in bool_list if item == True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_to_add, tuple_to_append):\n    return tuple_to_append + tuple(list_to_add)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_lists(lst1, lst2, lst3):\n    combined = lst1 + lst2 + lst3\n    combined.sort()\n    return combined"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s.count('1') % 2 != 0:\n            count += 1\n        s = s[-1:] + s[:-1]\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    if s.lstrip().rstrip().isdigit() or (s[0] in ['-', '+'] and s[1:].lstrip().rstrip().isdigit()):\n        return True\n    return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [(float(i) if i.replace('.', '', 1).isdigit() else i) for sublist in lst for i in sublist]\n\n# Check function with provided data point\nassert list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        # Check if the mid is on even or odd position and pair is equal\n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 == 1 and arr[mid] == arr[mid - 1]):\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]\n\n# Test the function\nassert search([1,1,2,2,3]) == 3"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for tuple_item in tuples_list:\n        product = abs(tuple_item[0] * tuple_item[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Example check\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])"}
{"task_id": "Mbpp/123", "solution": "def divisors_sum(n):\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef amicable_numbers_sum(n):\n    amicable_sum = 0\n    for num in range(2, n + 1):\n        div_sum = divisors_sum(num)\n        if div_sum > num and div_sum <= n:\n            if divisors_sum(div_sum) == num:\n                amicable_sum += num + div_sum\n    return amicable_sum // 2  # Each pair is counted twice"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(complex_num):\n    return math.atan2(complex_num.imag, complex_num.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_str):\n    max_diff = 0\n    current_diff = 0\n    for char in binary_str:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n\n        if current_diff > max_diff:\n            max_diff = current_diff\n        # Reset current_diff when it becomes negative as we want to start counting again from next 0.\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(x, y):\n    divisors_sum = 0\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\n# test the function with provided data point\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n\n    # Calculate the sum of the first row to use it as a reference\n    magic_sum = sum(matrix[0])\n\n    # Check rows and columns sums\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum or sum(row[i] for row in matrix) != magic_sum:\n            return False\n\n    # Check diagonals sums\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    # Check all numbers are unique and within expected range\n    flattened = [num for row in matrix for num in row]\n    if sorted(flattened) != list(range(1, n * n + 1)):\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    max_count = max(list(counter.values()))\n    max_freq_items = [item for item, freq in counter.items() if freq == max_count]\n    \n    # If multiple items have the same maximum frequency, return the first one\n    return max_freq_items[0]"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n\n# Test the function with provided data point\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2*n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    if non_zero_count == 0:\n        return float('inf')  # Avoid division by zero\n    \n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1\n        n //= 2\n    return n == 0"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    return {number for sublist in list_of_lists for number in sublist}"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(arr, i):\n        start = 0\n        while start < i:\n            arr[start], arr[i] = arr[i], arr[start]\n            start += 1\n            i -= 1\n\n    n = len(arr)\n    while n > 1:\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        if max_index != n - 1:\n            if max_index != 0:\n                flip(arr, max_index)\n            flip(arr, n - 1)\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    return sum(isinstance(i, list) for i in tup)"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n\n    min_val = arr[0]\n    max_diff = 0\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        else:\n            max_diff = max(max_diff, abs(num - min_val))\n\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(aa, bb):\n        lastremainder, remainder = abs(aa), abs(bb)\n        x, lastx, y, lasty = 0, 1, 1, 0\n        while remainder:\n            lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)\n            x, lastx = lastx - quotient*x, x\n            y, lasty = lasty - quotient*y, y\n        return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)\n\n    g, x, y = extended_gcd(a,b)\n    if n % g:\n        return None  # No solution exists\n    return (x * (n // g)) % (b // g), (y * (n // g)) % (a // g)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, elements_to_remove):\n    return [x for x in main_list if x not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(n1, n2):\n    def sum_divisors(n):\n        return sum([i for i in range(1, n // 2 + 1) if n % i == 0])\n    \n    return sum_divisors(n1) == sum_divisors(n2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if ord(s[i]) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()\n\n# Test case\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return len(set(map(type, t))) == 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    return ''.join([input_string[i] for i in range(0, len(input_string), 2)])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize result (For LSB set)\n    result = 1\n\n    # Set even bits for all even positions\n    i = 2\n    while i < n:\n        result |= (1 << i)\n        i += 2\n\n    # XOR the result with original number to set even bits\n    return n | result\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    occurrence_dict = {}\n    for item in lst:\n        if item in occurrence_dict:\n            occurrence_dict[item] += 1\n        else:\n            occurrence_dict[item] = 1\n    return occurrence_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    from functools import lru_cache\n    \n    @lru_cache(maxsize=None)\n    def count_sequences(current_max, length):\n        if length == 0:\n            return 1\n        total_sequences = 0\n        for next_val in range(current_max * 2, m + 1):\n            total_sequences += count_sequences(next_val, length - 1)\n        return total_sequences\n\n    return sum(count_sequences(i, n - 1) for i in range(1, m + 1))\n\n# Example check (This part is not part of the solution, just for verification)\nif __name__ == \"__main__\":\n    assert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    first_list[-1:] = second_list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    root = math.ceil(math.sqrt(n))\n    return root ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize LIS and LDS arrays\n    lis = [1] * n\n    lds = [1] * n\n    \n    # Compute LIS for each element\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n                \n    # Compute LDS for each element\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n                \n    # Find maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, lis[i] + lds[i] - 1)\n        \n    return max_sum\n\n# Test case\nprint(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]))  # Expected output: 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    def dp(s, i, j, memo):\n        if i > j: return 0\n        if i == j: return 1\n        if (i, j) not in memo:\n            if s[i] == s[j]:\n                memo[(i, j)] = 2 + dp(s, i+1, j-1, memo)\n            else:\n                memo[(i, j)] = max(dp(s, i+1, j, memo), dp(s, i, j-1, memo))\n        return memo[(i, j)]\n\n    s = \"\".join(ch for ch in s if ch.isalpha()).upper()\n    return dp(s, 0, len(s) - 1, {})\n\n# Check function to verify the correctness of the solution\ndef check():\n    assert lps(\"TENS FOR TENS\") == 5\n    assert lps(\"RACECAR\") == 7\n    assert lps(\"ABCD\") == 1\n    assert lps(\"A man a plan a canal Panama\") == 13\n\ncheck()"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, elem):\n    return tup.count(elem)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n        while not is_prime(b):\n            a, b = b, 2 * b + a\n    return b"}
{"task_id": "Mbpp/261", "solution": "def division_elements(t1, t2):\n    return tuple([a/b for a, b in zip(t1, t2)])"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    dog_years = 15 + (human_age - 2) * 4\n    return dog_years\n\n# Test case\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6*n*(n-1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(v for i, v in enumerate(lst) if i % 2 == 0 and v % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def binomial_coeff(n, k):\n        res = 1\n        if (k > n - k):\n            k = n - k\n        for i in range(k):\n            res *= (n - i)\n            res //= (i + 1)\n        return res\n\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += binomial_coeff(n, k)\n    return sum_even"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {k: v for k, v in input_dict.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for elem in t:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (9*n - 7) // 2"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    from collections import Counter\n    \n    num_str = str(num)\n    freq = Counter(num_str)\n    \n    for digit, count in freq.items():\n        if int(digit) < count:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    return all(x == elem for x in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    return bool(re.search(r'a[b]{2}|a[b]{3}', text))\n\n# No example usage provided as per instruction."}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def max_sub_array_sum(arr, n):\n        max_so_far = arr[0]\n        curr_max = arr[0]\n        for i in range(1, n):\n            curr_max = max(arr[i], curr_max + arr[i])\n            max_so_far = max(max_so_far, curr_max)\n        return max_so_far\n\n    # Calculate maximum subarray sum for one repetition\n    max_k_times = max_sub_array_sum(arr, n)\n\n    # Calculate prefix and suffix sums\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    suffix_sum[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i]\n\n    for i in range(n - 2, -1, -1):\n        suffix_sum[i] = suffix_sum[i + 1] + arr[i]\n\n    # Sum of all elements in the array\n    total_sum = prefix_sum[n - 1]\n\n    if k == 1:\n        return max_k_times\n\n    # If sum of the whole array is positive, then the maximum sum is the sum of the whole array repeated (k-2) times plus the maximum of prefix and suffix sums.\n    if total_sum > 0:\n        return max(max_k_times, total_sum * (k - 2) + max(prefix_sum[n - 1], suffix_sum[0]))\n\n    # If the sum of the whole array is not positive, then the answer will be the maximum of prefix and suffix sums.\n    return max(max_k_times, prefix_sum[n - 1] + suffix_sum[0])\n\n# Example usage\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output: 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = -1\n    max_list = None\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(numerator, denominator):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    return math.floor(numerator / denominator)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    # Assuming a and b are the two sides adjacent to the right angle,\n    # the third side (hypotenuse) can be calculated using Pythagoras' theorem.\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_num = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_num is None or item > max_num:\n                max_num = item\n    return max_num"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_sort(count, arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(count, arr, temp_arr, left, mid)\n            inv_count += merge_sort(count, arr, temp_arr, mid + 1, right)\n            inv_count += merge(count, arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge(count, arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for loop_var in range(left, right + 1):\n            arr[loop_var] = temp_arr[loop_var]\n\n        return inv_count\n\n    return merge_sort(0, arr, [0]*len(arr), 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    d = {}\n    for name, score in lst:\n        if name in d:\n            d[name] += score\n        else:\n            d[name] = score\n    return max(d.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    total_ways = 0\n    for k in range(n + 1):\n        total_ways += math.comb(n, k) ** 2\n    return total_ways"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        split_words = word.split()\n        for w in split_words:\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0]*n\n    for j in range(n):\n        if j == i:\n            dp[j] = arr[j]\n            continue\n        if arr[j] > arr[i] and j > i and j <= k:\n            dp[j] = max(dp[j-1], dp[i] + arr[j])\n        else:\n            dp[j] = max(dp[j-1], arr[j])\n    return dp[k]\n\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    from heapq import nlargest\n    products = [x * y for x in list1 for y in list2]\n    return nlargest(n, products)"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    return tuple(input_string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Check if the number is a power of two, return n-1 if true\n    if (n & (n - 1)) == 0:\n        return n - 1\n    \n    # Set the leftmost unset bit\n    n |= (n >> 1)\n    \n    return n\n\n# Test the function with the provided data point\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    lucas_n_minus_1 = 2\n    lucas_n_minus_2 = 1\n\n    for _ in range(2, n + 1):\n        current_lucas = lucas_n_minus_1 + lucas_n_minus_2\n        lucas_n_minus_2 = lucas_n_minus_1\n        lucas_n_minus_1 = current_lucas\n\n    return current_lucas"}
{"task_id": "Mbpp/390", "solution": "def add_string(numbers, format_str):\n    return [format_str.format(n) for n in numbers]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*args):\n    return [{args[0][i]: {args[1][i]: args[2][i]}} for i in range(len(args[0]))]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    memo[n] = max(get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo), n)\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\n# Test case\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Test case\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif c >= b:\n            return c\n        else:\n            return b\n    else:\n        if c >= b:\n            return b\n        elif c >= a:\n            return c\n        else:\n            return a"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for num in lst:\n        while num > 0:\n            total_sum += num % 10\n            num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    # Calculate the XOR of all bits in the number\n    # If the result is 0, the parity is even; otherwise, it's odd.\n    return bin(n).count('1') % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    n_list = list(str(n))\n    length = len(n_list)\n    \n    i = length - 2\n    while i >= 0:\n        if n_list[i] < n_list[i + 1]:\n            break\n        i -= 1\n    \n    if i == -1:\n        return -1\n\n    for j in range(length - 1, i, -1):\n        if n_list[j] > n_list[i]:\n            n_list[i], n_list[j] = n_list[j], n_list[i]\n            break\n\n    n_list[i+1:] = reversed(n_list[i+1:])\n    return int(\"\".join(n_list))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            product = tuples_list[i][0] * tuples_list[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    numeric_values = [i for i in lst if isinstance(i, (int, float))]\n    return min(numeric_values)\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Check if there is any common element between two sequences\n    return any(i in seq2 for i in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n\n    # Initialize the maximum and second maximum values\n    max_val = max(arr[0], arr[1])\n    sec_max_val = min(arr[0], arr[1])\n\n    # Initialize the minimum and second minimum values\n    min_val = min(arr[0], arr[1])\n    sec_min_val = max(arr[0], arr[1])\n\n    # Traverse through the array starting from the second index\n    for i in range(2, n):\n        # Update the maximum and second maximum values\n        if arr[i] > max_val:\n            sec_max_val = max_val\n            max_val = arr[i]\n        elif arr[i] > sec_max_val:\n            sec_max_val = arr[i]\n\n        # Update the minimum and second minimum values\n        if arr[i] < min_val:\n            sec_min_val = min_val\n            min_val = arr[i]\n        elif arr[i] < sec_min_val:\n            sec_min_val = arr[i]\n\n    # Return the pair with the highest product\n    return (max_val, sec_max_val) if max_val * sec_max_val > min_val * sec_min_val else (min_val, sec_min_val)\n\n# Check function with provided data point\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(lst):\n    total = sum([round(num) for num in lst])\n    return total * len(lst)"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        sum += even_number ** 3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [word[-1] for word in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(x & y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return c - (b**2 + 1) / (4 * a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return not set(list1).isdisjoint(set(list2))"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b) / 2\n\n# Example usage:\n# print(median_trapezium(15, 25, 35))"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x < num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 1])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples_list):\n    count_dict = {}\n    count = 0\n    for item in tuples_list:\n        if item[0] < item[1]:\n            forward = item\n            backward = (item[1], item[0])\n        else:\n            forward = (item[1], item[0])\n            backward = item\n        \n        if forward in count_dict:\n            count_dict[forward] += 1\n        else:\n            count_dict[forward] = 1\n\n        if backward in count_dict:\n            count += 1\n\n    return count // 2"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(\"\".join(str(i) for i in lst))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    words = sentence.split()\n    for word in words:\n        if word.endswith('ly') and not word == 'only':\n            start_index = sentence.index(word)\n            end_index = start_index + len(word)\n            return (start_index, end_index, word)\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side):\n    return 6 * side ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_nums = [num for num in arr if num > 0]\n    return len(positive_nums) / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a*b, c*d) for (a, c), (b, d) in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(element) for element in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    return [i ** 3 for i in lst]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 1:\n        return 0\n    perrin = [0, 2, 3]\n    sum_perrin = 2\n    for i in range(3, n + 1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n        sum_perrin += perrin[i]\n    return sum_perrin\n\n# Example check\nprint(cal_sum(9))"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(2, n+1):\n        if (n % i == 0) and (i % 2 == 0):\n            sum_even += i\n    return sum_even"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    \"\"\"\n    Check if the given month number contains 31 days.\n\n    :param month: Integer representing the month (1-12)\n    :return: Boolean indicating if the month has 31 days\n    \"\"\"\n    thirty_one_day_months = [1, 3, 5, 7, 8, 10, 12]\n    return month in thirty_one_day_months"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    return min(lst, key=len)\n\n# Testing the function\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(st):\n    return sum(1 for c in st if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    \n    first_element = [lst[0]]\n    without_first = combinations_list(lst[1:])\n    with_first = [[lst[0]] + each for each in without_first]\n    \n    return with_first + without_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_prod = min_prod = result = nums[0]\n\n    for i in range(1, len(nums)):\n        choices = (nums[i], nums[i] * max_prod, nums[i] * min_prod)\n        max_prod = max(choices)\n        min_prod = min(choices)\n        \n        result = max(result, max_prod)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0: return 0\n\n    dp = [1] * n\n    product = [1] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n        product[i] = arr[i]\n\n        for j in range(i):\n            if arr[j] < arr[i]:\n                if dp[j]*arr[i] > product[i]:\n                    product[i] = dp[j]*arr[i]\n        dp[i] = product[i]\n\n    return max(product)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr,n):\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return lst == list(range(min(lst), max(lst)+1))\n\n# Test case\nassert check_Consecutive([1,2,3,4,5]) == True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(lst1, lst2):\n    set1 = {tuple(sorted(t)) for t in lst1}\n    set2 = {tuple(sorted(t)) for t in lst2}\n    return set1 & set2"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dct):\n    return sorted(dct.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def to_lower_case(input_str):\n    return input_str.lower()\n\n# check function to verify the correctness of the solution\ndef check_solution():\n    assert to_lower_case(\"InValid\") == \"invalid\", \"Test case 1 failed\"\n    assert to_lower_case(\"HelloWorLD\") == \"helloworld\", \"Test case 2 failed\"\n    assert to_lower_case(\"123ABC\") == \"123abc\", \"Test case 3 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    while number >= 10:\n        number //= 10\n    return number"}
{"task_id": "Mbpp/554", "solution": "def split_odd_numbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    odd_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) & 1:\n                odd_count += 1\n    return odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(a, b):\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(a), str(b)))\n\n# Since the provided condition requires only a single test case, here's an additional part to handle different length numbers properly:\ndef digit_distance_nums_full(a, b):\n    max_length = max(len(str(a)), len(str(b)))\n    a_str, b_str = str(a).zfill(max_length), str(b).zfill(max_length)\n    return sum(abs(int(x) - int(y)) for x, y in zip(a_str, b_str))\n\n# Using the second version that handles different lengths:\ndigit_distance_nums = digit_distance_nums_full"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    union_set = set(t1) | set(t2)\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [x[1:-1] for x in s.split('\"')[1::2]]"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(word):\n    return [char for char in word]"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    unique_nums = set()\n    for num in lst:\n        if lst.count(num) == 1:\n            unique_nums.add(num)\n    return list(unique_nums)"}
{"task_id": "Mbpp/573", "solution": "from functools import reduce\nfrom math import prod\n\ndef unique_product(lst):\n    return prod(set(lst))\n\n# Example test case\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius ** 2\n    lateral_surface_area = 2 * math.pi * radius * height\n    return 2 * base_area + lateral_surface_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        return -1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        # Keeping only the last digit in fact at each step\n        fact = fact % 10 \n    return fact"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(mixed_tuple):\n    result = []\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            item = extract_even(item)\n            if item or isinstance(item, tuple):  # Keep empty tuples\n                result.append(item)\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    base_area = base_edge ** 2\n    lateral_area = 2 * base_edge * ( (base_edge/2)**2 + height**2 )**0.5\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] = catalan[i] + catalan[j] * catalan[i-j-1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds all perfect squares between two given numbers (inclusive).\n    \"\"\"\n    squares = []\n    for i in range(int(start**0.5), int(end**0.5) + 1):\n        square = i * i\n        if start <= square <= end:\n            squares.append(square)\n    return squares\n\n# Test case\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    return ((r * cmath.cos(theta)), (r * cmath.sin(theta)))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    sum_product = 0\n    for i in range(n):\n        sum_product += comb(n, i) * comb(n, i + 1)\n    return sum_product"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return abs(first_even - first_odd) if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    # Counters for '1's and '0's not matching in the same position\n    ones = zeros = 0\n    \n    for i in range(len(binary1)):\n        if binary1[i] != binary2[i]:\n            if binary1[i] == '0':\n                zeros += 1\n            else:\n                ones += 1\n    \n    # Swapping a '1' and a '0' can be done in one operation\n    return (ones + zeros) // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    p1 = p2 = 0\n    for _ in range(k):\n        if p1 >= len(arr1):\n            return arr2[p2 + k - 1]\n        elif p2 >= len(arr2):\n            return arr1[p1 + k - 1]\n        elif arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return min(arr1[p1], arr2[p2])"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to string to find the length (number of digits)\n    num_str = str(n)\n    len_num = len(num_str)\n    \n    # Calculate the sum of the digits each raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** len_num for digit in num_str)\n    \n    # Check if the sum equals the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test case\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic = list(range(1, n+1))\n    i = 1\n    while ludic[i] * ludic[i] <= n:\n        for j in range(i + ludic[i], len(ludic), ludic[i]):\n            if ludic[j]:\n                ludic[j] = 0\n        while not ludic[i]:\n            i += 1\n        i += 1\n    return [x for x in ludic if x]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split(' ')[::-1])\n\n# Check function to verify the correctness of the solution\nassert reverse_words(\"python program\") == \"program python\", \"Test case failed!\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test the function with provided data point\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [x for i, x in enumerate(lst) if i != k]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(i) for i in zip(*lst)]\n\n# Example usage would be:\n# assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n# But you requested only the function."}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuples):\n    total_sum = 0\n    for t in tuples:\n        for number in t:\n            total_sum += number\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    idx_map = [0] * (2 * nums[-1] + 1)\n\n    for i in range(len(nums)):\n        idx_map[nums[i] * 2] = i\n\n    max_len = 1\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if idx_map[nums[i] % nums[j]] > j:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n\n    return max_len"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return (max(list1[0], list2[0]) + min(list1[0], list2[0])) / 2.0\n    elif n == 2:\n        return (max(list1[0], list2[0]) + min(list1[1], list2[1]) + min(list1[0], list2[0]) + max(list1[1], list2[1])) / 4.0\n\n    m1 = list1[n//2]\n    m2 = list2[n//2]\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(list1[n//2:], list2[:n//2+1], n//2+1)\n        else:\n            return get_median(list1[n//2:], list2[:n//2], n//2)\n    else:\n        if n % 2 == 0:\n            return get_median(list1[:n//2+1], list2[n//2:], n//2+1)\n        else:\n            return get_median(list1[:n//2], list2[n//2:], n//2)"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [i**n for i in lst]"}
{"task_id": "Mbpp/624", "solution": "def to_upper_case(input_string):\n    return input_string.upper()\n\n# check function with provided data point\nassert to_upper_case(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The area of the largest triangle that can be inscribed in a semicircle with radius r is given by r^2.\n    return radius ** 2\n\n# check function with provided data points\nassert triangle_area(-1) == None"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n# Testing the function with the provided assert statement\nassert find_even_numbers([1,2,3,4,5]) == [2,4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [\n        [i, j] for i in range(x - 1, x + 2)\n        for j in range(y - 1, y + 2)\n        if not (i == x and j == y)\n    ]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [i for i in lst if i != 0] + [0] * lst.count(0)"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums):\n    total_sum = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            total_sum += nums[i] ^ nums[j]\n    return total_sum"}
{"task_id": "Mbpp/635", "solution": "import heapq\n\ndef heap_sort(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(len(lst))]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount_spent, amount_received):\n    return amount_spent == amount_received"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    # The formula to calculate wind chill index.\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# test the function\nassert(sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16)"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = \"\"\n    skip = 0\n    for char in s:\n        if char == '(':\n            skip += 1\n        elif char == ')':\n            skip -= 1\n        elif skip == 0:\n            result += char\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    if n <= 0:\n        return False\n    return (9 * n * n - 7 * n) / 2\n\n# Example check function call\n# This should return 325 for the 10th nonagonal number\nprint(is_nonagonal(10))"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    return any(c == 'z' for c in text[1:-1])"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the elements of the array up to the given position k.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_to_add):\n    return tup + (dict_to_add,)"}
{"task_id": "Mbpp/721", "solution": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    if n == 0:\n        return 0.0\n    \n    dp = [[0.0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    # Initialize first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Initialize first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Calculate the maximum average\n    max_sum = dp[n-1][n-1]\n    return max_sum / n / n\n\n# Check function with provided data point\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {student: info for student, info in students.items() if info[0] >= min_height and info[1] >= min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for x, y in zip(list1, list2) if x == y)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extracts substrings that are enclosed in double quotes from the given text.\n    \"\"\"\n    return re.findall(r'\"(.*?)\"', text)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == num:\n            result = mid\n            right = mid - 1  # Move left to find the first occurrence\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n            \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # create a mask with all middle bits set\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # toggle the middle bits using XOR operation\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula derived from the problem statement\n    index = math.ceil((math.sqrt(8*10**(n-1) + 1) - 1)/2)\n    return int(index)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(n):\n        for d in str(n):\n            if d == '0' or n % int(d) != 0:\n                return False\n        return True\n\n    return [n for n in range(startnum, endnum + 1) if is_divisible(n)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    import re\n    return re.sub(r\"([A-Z])\", r\" \\1\", text)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Iterate through the array from the parent nodes to check the heap property\n    for i in range(int(n/2)):\n        # If left child is greater than parent\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        # If right child exists and is greater than parent\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0: return 0\n    if n == 1: return 1\n\n    j_minus_1 = 0\n    j = 1\n\n    for _ in range(2, n + 1):\n        j_new = (2 * j) + j_minus_1\n        j_minus_1 = j\n        j = j_new\n\n    return j"}
{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [val for val in zip(l1, l2, l3) if len(set(val)) == 1]\n\n# Testing the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = set(numbers)  # Remove duplicates\n    if len(unique_numbers) < 2:\n        return None  # Not enough unique numbers\n    unique_numbers.remove(min(unique_numbers))  # Remove the smallest\n    return min(unique_numbers)  # The next smallest is now the second smallest\n\n# Test case\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in lst:\n        if i[::-1] in lst:\n            count += 1\n    # Avoid counting each pair twice\n    return count // 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    from collections import Counter\n    return dict(Counter(tuple(sub) for sub in lst))"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        val = float(s)\n        if '.' in s:\n            decimal_part = s.split('.')[1]\n            return len(decimal_part) == 2\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    \"\"\"\n    Checks if the given month number (1-12) has 30 days.\n    \"\"\"\n    thirty_days_months = [4, 6, 9, 11]\n    return month in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr,n):\n    # Sort the given array\n    arr.sort()\n\n    # Initialize the minimum difference value to the maximum possible integer value\n    min_diff = float('inf')\n\n    # Traverse the array elements\n    for i in range(n-1):\n        # Update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, arr[i+1] - arr[i])\n\n    return min_diff\n\n# Test the function\ndef check():\n    assert find_min_diff([1,5,3,19,18,25],6) == 1\n    assert find_min_diff([30, 5, 20, 9], 4) == 4\n    assert find_min_diff([1, 19, -4, 31, 38, 25, 100], 7) == 5\n\ncheck()"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    result = 0\n    k = 1\n    while n > 0:\n        result += (1 << k)\n        k += 1\n        n -= 1\n    return result"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    seen = {}\n    count = 0\n    for number in numbers:\n        complement = target_sum - number\n        if complement in seen:\n            count += seen[complement]\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    return count\n\n# Testing the function with provided data point\nassert get_pairs_count([1,1,1,1],2) == 6"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    opening = set(['(', '[', '{'])\n    matches = set([('(', ')'), ('[', ']'), ('{', '}')])\n    stack = []\n\n    for paren in expression:\n        if paren in opening:\n            stack.append(paren)\n        else:\n            if not stack:\n                return False\n            last_open = stack.pop()\n            if (last_open, paren) not in matches:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(text, substring):\n    index = text.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(arr):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    return sum(num for num, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    sub_list = []\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if sub_list:\n                result.append(sub_list)\n            sub_list = [lst[i]]\n        else:\n            sub_list.append(lst[i])\n    if sub_list:\n        result.append(sub_list)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(lst):\n    result = []\n    for i in range(1, len(lst) + 1):\n        for subset in combinations(lst, i):\n            sum_first_elements = sum(x[0] for x in subset)\n            sum_second_elements = sum(x[1] for x in subset)\n            result.append((sum_first_elements, sum_second_elements))\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        subarray_sum = 0\n        for j in range(i, n):\n            subarray_sum += arr[j]\n            if (j - i + 1) % 2 != 0:  # Check if the length of the subarray is odd\n                total_sum += subarray_sum\n                \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx * 100\n    v = mx * 100\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even and odd else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    return tuple(int(i) for i in tuple_str[1:-1].split(\", \"))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= val:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    if re.search(r\"ab{3}\\b\", text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2): # start from index 0, step by 2\n        if lst[i] % 2 != 0: # Check if the number at even index is not even\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for i in input_tuple:\n        if not isinstance(i, tuple):\n            result.append(i)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len([item for item in lst if isinstance(item, list)])"}
{"task_id": "Mbpp/793", "solution": "def last(arr, elem):\n    if elem in arr:\n        return len(arr) - 1 - arr[::-1].index(elem)\n    else:\n        return -1\n\n# Testing\nassert last([1,2,3],1) == 0"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = '^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict):\n    return sum(dict.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(x for x in range(l, r+1) if x % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return ((n << d) & (2**32 - 1)) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(text):\n    return text.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": ""}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n        if product % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(input_str):\n    max_len = 0\n    current_len = 0\n    for i in range(len(input_str)):\n        if input_str[i].isupper():\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n\n# Test case\nassert first_odd([1,3,5]) == 1"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))"}
