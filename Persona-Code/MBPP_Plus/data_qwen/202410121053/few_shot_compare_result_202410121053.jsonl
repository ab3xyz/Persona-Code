{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return [element for element in list1 if element in list2]"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    heapq.heapify(nums)\n    result = heapq.nlargest(n, nums)\n    return sorted(result, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    return bin(x ^ y).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    rotations = 1\n    original_s = s\n    while rotations <= len(s):\n        s = s[1:] + s[0]\n        if s == original_s:\n            return rotations\n        rotations += 1\n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    s = s.lstrip(char)\n    s = s.rstrip(char)\n    return s[1:-1] if s.startswith(char) and s.endswith(char) else s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [row for _, row in sorted((sum(row), row) for row in matrix)]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(length, width, height):\n    return length * width * height"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    return \"_\" in s and all(c.islower() or c == \"_\" for c in s)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    from math import sqrt\n    if n < 1:\n        return False\n    for k in range(1, int(sqrt(n)) + 1):\n        if (k * (2 * k - 1)) == n:\n            return True\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n != 2 * reverse_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Rearranges the digits to form the largest possible number.\n    \"\"\"\n    # Convert each digit to string for easy comparison\n    digits = [str(d) for d in digits]\n    # Sort the digits based on a custom comparison logic\n    digits.sort(key=lambda x, y: x+y, reverse=True)\n    # Join the sorted digits to form the largest number\n    max_num = int(''.join(digits))\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return x * y < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i+length]\n            if sum(int(digit) for digit in substring) == length:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    return min(nums)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    lengths = set(len(t) for t in tuples_list)\n    return len(lengths) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(n):\n        for j in range(i):\n            if (i * i - j * j) == n:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "from itertools import zip_longest\n\ndef is_samepatterns(colors, patterns):\n    zipped = zip_longest(colors, patterns, fillvalue=None)\n    mapped_tuples = map(lambda pair: pair[0] == pair[1], zipped)\n    return all(mapped_tuples)"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    result = []\n    for tup in lst:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n): return n % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    val = 0\n    for char in s:\n        val += ord(char)\n    val %= 26\n    return chr(val + 97)  # 97 is the ASCII value of 'a'"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n == 1 or n == 2:\n        return 1\n    nc = [0, 1, 1] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        nc[i] = nc[nc[i - 1]] + nc[i - nc[i - 1]]\n    return nc[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 3 + 3)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1, 2):\n        if num_str[i] != num_str[i-1] or num_str[i+1] != num_str[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    return min(tuples_list, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    min_length = len(list_of_lists[0])\n    for sublist in list_of_lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    freq_dict = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    e = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    e[0][0] = 1\n    for i in range(1, n + 1):\n        e[i][0] = 0\n        for j in range(1, i + 1):\n            e[i][j] = (j * e[i - 1][j]) + ((i - j + 1) * e[i - 1][j - 1])\n    return e[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    return lst.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_lists(list1, list2, list3):\n    combined = list1 + list2 + list3\n    combined.sort()\n    return combined"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        ones_count = s.count('1')\n        if ones_count % 2 != 0:\n            odd_count += 1\n        s = s[-1:] + s[:-1]  # Rotate string\n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"Check if the string s represents an integer.\"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [(float(i), float(j)) for i, j in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(pairs):\n    max_product = float('-inf')\n    for pair in pairs:\n        product = abs(pair[0] * pair[1])\n        max_product = max(max_product, product)\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        result = 1  # Start with 1 because it's a divisor for all x > 1\n        sqrt_x = int(x ** 0.5)\n        for i in range(2, sqrt_x + 1):\n            if x % i == 0:\n                result += i\n                if i != x // i:\n                    result += x // i\n        return result\n\n    total_sum = 0\n    for num in range(2, n + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(complex_num):\n    return cmath.phase(complex_num)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_str):\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for char in binary_str:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = abs(zero_count - one_count)\n        max_diff = max(max_diff, diff)\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    common_divisors_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    return x * y"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(square):\n    n = len(square)\n    if n == 0:\n        return False\n    total = sum(square[0])\n    # Check rows and columns\n    for row in square:\n        if sum(row) != total:\n            return False\n    for col in range(n):\n        col_sum = sum(square[row][col] for row in range(n))\n        if col_sum != total:\n            return False\n    # Check diagonals\n    if sum(square[i][i] for i in range(n)) != total or sum(square[i][n - 1 - i] for i in range(n)) != total:\n        return False\n    return True"}
{"task_id": "Mbpp/130", "solution": "from collections import Counter\n\ndef max_occurrences(lst):\n    counter = Counter(lst)\n    max_count = max(counter.values())\n    max_freq_items = [item for item, count in counter.items() if count == max_count]\n    return min(max_freq_items)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count if non_zero_count else float('inf')\n    return ratio"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if n == 1:\n                return True\n            else:\n                return False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    result = []\n    for tuple in list_of_tuples:\n        result.extend(tuple)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    for cur_size in range(len(arr), 1, -1):\n        max_index = 0\n        for i in range(1, cur_size):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        arr = reverse(arr, 0, max_index)\n        arr = reverse(arr, 0, cur_size - 1)\n    return arr\n\ndef reverse(arr, i, j):\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    return tup.count((1,)) * 2  # This line is incorrect and should be revised to correctly count lists."}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    min_element = arr[0]\n    for num in arr:\n        if num - min_element > max_diff:\n            max_diff = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    def extended_gcd(x, y):\n        if y == 0:\n            return (1, 0)\n        else:\n            q, r = divmod(x, y)\n            z0, z1 = extended_gcd(y, r)\n            return (z1, z0 - q * z1)\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (x * (n // g), y * (n // g))"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list_full, list_remove):\n    return [item for item in list_full if item not in list_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(x, y):\n    def get_divisors(n):\n        divs = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.append(i)\n                if n // i != i:  # Include the complement divisor if it's not the square root\n                    divs.append(n // i)\n        return divs\n\n    return sum(get_divisors(x)) + x == sum(get_divisors(y)) + y"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if ord(s[i]) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 if n == 1 else 2**(n - 1).bit_length())"}
{"task_id": "Mbpp/168", "solution": "def frequency(arr, num):\n    return arr.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    return len(set(map(type, tup))) == 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    arr[:n] = negatives + positives\n    return arr"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", str(char))"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(nums, n):\n    nums.sort(reverse=True)\n    return nums[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize result (Having first bit set)\n    res = 1\n  \n    # Left shift \"res\" until it is smaller than or equal to \"n\"\n    while res <= n:\n        # Set even positioned bit\n        res = res << 2\n  \n    # Return the final value after setting even positioned bits\n    return res - 1"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    occurrence_dict = {}\n    for tup in lst:\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        else:\n            occurrence_dict[tup] = 1\n    return occurrence_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return sum(len(s) - i for i in range(len(s)))"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = i\n    for j in range(2, n + 1):\n        for i in range(1, m + 1):\n            for k in range(1, i + 1):\n                if 2 * k <= i:\n                    dp[i][j] += dp[k][j - 1]\n    return dp[m][n]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if list1 and list2:\n        list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    import math\n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n:  # Check if n is a perfect square\n        root += 1\n    return int(root + 0.5) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    inc = [0] * n\n    dec = [0] * n\n    \n    inc[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n        inc[i] = inc[i] if inc[i] > 0 else arr[i]\n\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n        dec[i] = dec[i] if dec[i] > 0 else arr[i]\n\n    max_sum = 0\n    for i in range(n):\n        sum = inc[i] + dec[i] - arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            \n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s_len = len(s)\n    dp = [[0] * s_len for _ in range(s_len)]\n    for i in range(s_len - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, s_len):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][s_len - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(array1, array2):\n    return list(set(array1) & set(array2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.extend([element, item])\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    return cmath.polar(complex_number)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(colors, n):\n    return [tuple(p) for p in product(colors, repeat=n)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    primes = [2]\n    for num in range(3, n, 2):\n        if all(num % p != 0 for p in primes if p * p <= num):\n            primes.append(num)\n    return len(primes)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    nw_sequence = [1, 1]\n    for i in range(2, n + 1):\n        nw_sequence.append(2 * nw_sequence[i - 1] + nw_sequence[i - 2])\n    return nw_sequence[n] if is_prime(nw_sequence[n]) else None"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(x / y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    dog_years = human_age * 5 + (human_age - 1) * 4\n    return dog_years"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    split_lists = [[] for _ in range(n)]\n    for i, elem in enumerate(lst):\n        split_lists[i % n].append(elem)\n    return split_lists"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i**2\n    return total"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n**2 - 6 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum_fifth_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_fifth_powers += even_number ** 5\n    return sum_fifth_powers"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for i in range(0, n+1, 2):\n        sum_even += binom(n, i)\n    return sum_even\n\nfrom math import comb as binom"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dict_input, n):\n    return {k: v for k, v in dict_input.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def decagonal_number(n):\n    return n * (4 * n - 3)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    str_num = str(num)\n    for digit in str_num:\n        if str_num.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(x == element for x in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    pattern = \"abb|abbb\"\n    import re\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    max_k_times = max_1_time = curr_max = curr_sum = sum(arr)\n    for i in range(n):\n        curr_sum += arr[i]  # Sum of first two instances to start with\n        curr_max = max(curr_max, curr_sum)\n        if curr_sum > 0:\n            max_1_time = max(max_1_time, curr_sum)\n    max_k_times = max(max_k_times, max_1_time * (k - 2) + curr_max * 2)\n    return max_k_times if k > 1 else max_1_time"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = -1\n    max_list = []\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(numerator, denominator):\n    return numerator // denominator"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_num = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_num is None or item > max_num:\n                max_num = item\n    return max_num"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    d = {}\n    for name, agg in lst:\n        if name in d:\n            d[name] += agg\n        else:\n            d[name] = agg\n    max_name = max(d, key=d.get)\n    return (max_name, d[max_name])"}
{"task_id": "Mbpp/300", "solution": "from math import comb\n\ndef count_binary_seq(n):\n    count = 0\n    for k in range(n + 1):\n        count += comb(2 * n, n + k)\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    words_list = [word.strip() for phrase in words for word in phrase.split(\" \") if word.startswith('P')]\n    return (words_list[0], words_list[1]) if len(words_list) >= 2 else None"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    dp[0] = arr[0]\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[j] > arr[l] and dp[j] < dp[l] + arr[j]:\n                dp[j] = dp[l] + arr[j]\n    max_sum = 0\n    for m in range(i + 1, k):\n        max_sum = max(max_sum, dp[m])\n    return max_sum + arr[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    results = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            results.append(list1[-(i+1)] * list2[-(j+1)])\n    results.sort(reverse=True)\n    return results[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    unset_bit_pos = 0\n    while (n & (1 << unset_bit_pos)) != 0:\n        unset_bit_pos += 1\n    return n | (1 << unset_bit_pos)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while (power * 2) <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_number = [0] * (n + 1)\n    lucas_number[0] = 2\n    lucas_number[1] = 1\n    for i in range(2, n + 1):\n        lucas_number[i] = lucas_number[i - 1] + lucas_number[i - 2]\n    return lucas_number[n]"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_string):\n    return [format_string.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*lists):\n    if not lists:\n        return []\n    result = []\n    for i in range(len(lists[0])):\n        nested_dict = {}\n        for j in range(len(lists)):\n            nested_dict.update({lists[0][i]: {lists[1][i]: lists[2][i]}})\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = [0] * (n + 1)\n    def f(n):\n        if n < 2:\n            return n\n        if memo[n]:\n            return memo[n]\n        memo[n] = max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n        return memo[n]\n    return f(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a - b) * (c - a) >= 0:\n        return a\n    elif (b - a) * (c - b) >= 0:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for num in lst:\n        while num > 0:\n            total_sum += num % 10\n            num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    return len(set(tuple(sorted(sub)) for sub in lst))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Start from the end of the number and look for the first digit that is smaller than the digit next to it\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number cannot be rearranged to be bigger\n        return -1\n    \n    # Find the smallest digit on the right side of (i-th digit) that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits after the (i+1)-th position\n    digits[i + 1:] = sorted(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0]*tuples[j][0] + tuples[i][1]*tuples[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(value in seq2 for value in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n    return pair"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    print(result)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        sum += even_number ** 3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The standard form of a parabola equation is (x-h)^2 = 4a(y-k) or (y-k)^2 = 4a(x-h)\n    # The directrix of a parabola y = a(x-h)^2 + k is y = k - 1/(4a)\n    # The directrix of a parabola x = a(y-k)^2 + h is x = h - 1/(4a)\n    # Given a, h and k, we assume the parabola is vertical (y = a(x-h)^2 + k)\n    return k - 1/(4*a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(element in list2 for element in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x < num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return \"\".join([s[i] for i in range(len(s)) if i % 2 != 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    counter = 0\n    seen = set()\n    for t in tuples:\n        if t[::-1] in seen:\n            counter += 1\n        seen.add(t)\n    return counter"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    result = int(\"\".join(map(str, lst)))\n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        start, end = match.start(), match.end()\n        adverb = sentence[start:end]\n        return (start, end, adverb)"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_count = sum(1 for num in arr if num > 0)\n    return positive_count / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    result = tuple((a*b, b*a) for (a, c), (b, d) in zip(tup1, tup2))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for elem in lst:\n        count += tup.count(elem)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    perrin = [0, 2, 3]\n    sum_perrin = 2 + 3\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(values, size):\n    return [value for value in values if len(value) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(num):\n    sum_even = 0\n    for i in range(2, num+1, 2):\n        if num % i == 0:\n            sum_even += i\n    return sum_even"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    min_length = float('inf')\n    min_list = []\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    def generate_combinations(start, combination):\n        result.append(combination.copy())\n        for i in range(start, len(elements)):\n            combination.append(elements[i])\n            generate_combinations(i + 1, combination)\n            combination.pop()\n    \n    result = []\n    generate_combinations(0, [])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_prod = min_prod = result = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max Prod * arr[i], min_prod * arr[i], arr[i]\n        min_prod = min(max_prod * arr[i], min_prod * arr[i], arr[i])\n        max_prod = temp\n\n        if max_prod > result:\n            result = max_prod\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    arr.sort()\n    n = len(arr)\n    max_product = 1\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        if product > max_product:\n            max_product = product\n        else:\n            product = arr[i]\n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for i in arr:\n        result = (result * (i % n)) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    nums.sort()\n    return all(b - a == 1 for a, b in zip(nums, nums[1:]))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples1, tuples2):\n    set1 = set(map(lambda x: tuple(sorted(x)), tuples1))\n    set2 = set(map(lambda x: tuple(sorted(x)), tuples2))\n    return set1 & set2"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n): return int(str(abs(n))[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) & 1 == 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(num1), str(num2)))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1 + tuple2)\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    values = []\n    start = 0\n    while True:\n        start = s.find('\"', start) + 1\n        if start == 0:\n            break\n        end = s.find('\"', start)\n        if end == -1:\n            break\n        values.append(s[start:end])\n        start = end + 1\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    unique_nums = []\n    seen = set()\n    for num in lst:\n        if num not in seen and lst.count(num) == 1:\n            unique_nums.append(num)\n        seen.add(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "from functools import reduce\nfrom collections import Counter\n\ndef unique_product(arr):\n    counter = Counter(arr)\n    unique_nums = [num for num, freq in counter.items() if freq == 1]\n    return reduce(lambda x, y: x * y, unique_nums, 1)"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    return 2 * base_area + side_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit *= i\n        last_digit = last_digit % 10\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3): interleaved_list = [] for i in range(len(list1)): interleaved_list.extend([list1[i], list2[i], list3[i]]) return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for elem in nested_tuple:\n        if isinstance(elem, tuple):\n            result.append(tuple(extract_even(elem)))\n        elif isinstance(elem, int) and elem % 2 == 0:\n            result.append(elem)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    lateral_area = 2 * base_edge * (height**0.5)\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(1, int(end**0.5) + 1):\n        square = i * i\n        if square >= start and square <= end:\n            squares.append(square)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(x, y):\n    rect = cmath.rect(x, y)\n    polar = cmath.polar(rect)\n    return polar, rect"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    sum_result = 0\n    for i in range(n):\n        sum_result += binom(n, i) * binom(n, i + 1)\n    return sum_result"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    parts = ip_address.split('.')\n    result = '.'.join(str(int(part)) for part in parts)\n    return result"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return abs(first_even - first_odd) if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binaryNum1, binaryNum2):\n    swapCount = 0\n    for i in range(len(binaryNum1)):\n        if binaryNum1[i] != binaryNum2[i]:\n            swapCount += 1\n    return swapCount // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = 0\n    j = 0\n    while True:\n        if i + 1 >= len(arr1):\n            return arr2[j + k - 1]\n        elif j + 1 >= len(arr2):\n            return arr1[i + k - 1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        mid_val_1 = arr1[i + k // 2 - 1] if (i + k // 2 - 1) < len(arr1) else float(\"inf\")\n        mid_val_2 = arr2[j + k // 2 - 1] if (j + k // 2 - 1) < len(arr2) else float(\"inf\")\n        if mid_val_1 < mid_val_2:\n            k -= k // 2\n            i += k // 2\n        else:\n            k -= k // 2\n            j += k // 2"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    order = len(str(n))\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return sum == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    average_n = sum_n / n\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    return degree * (3.141592653589793/180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n): bell = [[0 for i in range(n+1)] for j in range(n+1)] bell[0][0] = 1 for i in range(1, n+1): bell[i][0] = bell[i-1][i-1] for j in range(1, i+1): bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    result = [[], []]\n    for pair in lst:\n        result[0].append(pair[0])\n        result[1].append(pair[1])\n    return result"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total_sum = 0\n    for tup in tuples:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(x % y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    num_buf = \"\"\n    for char in s:\n        if char.isdigit():\n            num_buf += char\n        else:\n            if num_buf:\n                nums.append(num_buf)\n                num_buf = \"\"\n            chars.append(char)\n    if num_buf:  # append remaining numbers if any\n        nums.append(num_buf)\n    \n    return ''.join(chars + nums)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    n = len(a)\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1\n    for i in range(n - 2, -1, -1):\n        mxm = 0\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    i = 0  # Initial index of first array\n    j = 0  # Initial index of second array\n    m1 = -1\n    m2 = -1\n    count = 0\n    if n <= 0:\n        return 0\n    while count < n // 2 + 1:\n        count += 1\n        if i == n:\n            m2 = arr2[0] if count == n // 2 + 1 else m1\n            break\n        elif j == n:\n            m2 = arr1[0] if count == n // 2 + 1 else m1\n            break\n        if arr1[i] < arr2[j]:\n            m1 = m2  # Keep track of last median\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2  # Keep track of last median\n            m2 = arr2[j]\n            j += 1\n    if n % 2 == 0:\n        return (m1 + m2) / 2\n    else:\n        return m2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The area of the largest triangle that can be inscribed in a semicircle is always a right-angled triangle with its hypotenuse as the diameter of the semicircle.\n    # Therefore, the base and height of this triangle are both equal to the radius of the semicircle.\n    # The area of the triangle is therefore (1/2)*base*height = (1/2)*radius*radius.\n    return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    coordinates_list = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                coordinates_list.append([i, j])\n    return coordinates_list"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    non_zero_ptr = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zero_ptr], arr[i] = arr[i], arr[non_zero_ptr]\n            non_zero_ptr += 1\n    return arr"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum * 2  # Since each pair is counted twice in the process"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(v, t):\n    # Wind Chill Formula: WCI = 13.12 + 0.6215T - 11.37V^0.16 + 0.3965TV^0.16\n    # where T is the temperature in Celsius and V is the wind speed in km/h.\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_names(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    stack = []\n    result = \"\"\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        elif not stack:\n            result += char\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7*n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    return len(text) > 2 and 'z' in text[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    start = 0\n    end = k - 1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[N-1][N-1] / (N * N)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    filtered_students = {}\n    for student, data in student_data.items():\n        if data[0] >= min_height and data[1] >= min_weight:\n            filtered_students[student] = data\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation marks(s):\n    results = []\n    start = None\n    for index, char in enumerate(s):\n        if char == '\\\"':\n            if start is None:\n                start = index + 1\n            else:\n                results.append(s[start:index])\n                start = None\n    return results"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if result and result[-1] == item:\n            continue\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            first_occurrence = mid\n            right = mid - 1  # Continue searching to the left\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return first_occurrence"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n            \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    n_bits = n.bit_length()\n    mask = (1 << (n_bits - 1)) - 1  # Create a mask with all bits set to 1 except the first one\n    mask &= ~(1 << (n_bits - 1))   # Clear the last bit of the mask\n    mask ^= (1 << (n_bits - 2)) - 1  # Toggle the middle bits\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    match = re.search(r'^[aeiouAEIOU]', s)\n    return bool(match)"}
{"task_id": "Mbpp/739", "solution": "import math\ndef find_Index(n):\n    start = 10**(n-1)\n    end = (start * 2) - 1\n    discriminant = (8*start) + 1\n    index = int((-1 + math.sqrt(discriminant)) / 2)\n    while discriminant <= end:\n        discriminant = (8*index) + 1\n        index = int((-1 + math.sqrt(discriminant)) / 2)\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    dict = {}\n    for i in range(0, len(tup)-1, 2):\n        dict[tup[i]] = tup[i+1]\n    return dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def check(n):\n        for d in str(n):\n            if d == '0' or n % int(d) != 0:\n                return False\n        return True\n    return [n for n in range(startnum, endnum + 1) if check(n)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    words = []\n    current_word = \"\"\n    for char in s:\n        if char.isupper() and current_word:\n            words.append(current_word)\n            current_word = \"\"\n        current_word += char\n    words.append(current_word)\n    return ' '.join(words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    return sorted(list(map(int, strings)), key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(int(n/2)):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n): \n    if n == 0: return 0\n    if n == 1: return 1\n    j1, j2 = 0, 1\n    for _ in range(2, n + 1):\n        jacobsthal = 2 * j2 + j1\n        j1, j2 = j2, jacobsthal\n    return jacobsthal"}
{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_nums = list(set(numbers))\n    unique_nums.sort()\n    return unique_nums[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    from collections import Counter\n    # Convert each sublist in the list to a tuple and count their occurrences\n    counter = Counter(tuple(sublist) for sublist in lst)\n    # Return the counter as a dictionary\n    return dict(counter)"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float_s = float(s)\n        return str(float_s) == s and s.count('.') == 1 and s[:-3].isdigit() and s[-2:].isdigit()\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    thirty_days_months = [4, 6, 9, 11]\n    return month_number in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    count = 0\n    num = 1\n    while True:\n        if num & (num - 1):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_counts = {}\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [num for num in list1 if num not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for letter in expression:\n        if letter in mapping.values():\n            stack.append(letter)\n        elif letter in mapping.keys():\n            if stack == [] or mapping[letter] != stack.pop():\n                return False\n    return stack == []"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_str, sub_str):\n    positions = []\n    index = main_str.find(sub_str)\n    while index != -1:\n        positions.append(index)\n        index = main_str.find(sub_str, index + 1)\n    if not positions:\n        return None\n    return (sub_str, positions[0], positions[0] + len(sub_str))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(arr):\n    num_count = {}\n    sum_unique = 0\n    for num in arr:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for num, count in num_count.items():\n        if count == 1:\n            sum_unique += num\n    return sum_unique"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    sub_list = []\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] == lst[i - 1]:\n            sub_list.append(lst[i])\n        else:\n            result.append(sub_list)\n            sub_list = [lst[i]]\n    result.append(sub_list)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tpl_lst):\n    combinations = set()\n    for i in range(len(tpl_lst)):\n        for j in range(i + 1, len(tpl_lst)):\n            sum_tuple = (tpl_lst[i][0] + tpl_lst[j][0], tpl_lst[i][1] + tpl_lst[j][1])\n            combinations.add(sum_tuple)\n    return list(combinations)"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(1, n+1, 2):  # Iterate with odd lengths only\n        for j in range(n-i+1):\n            total_sum += sum(arr[j:j+i])\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx * 100\n    return h, s*100, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    tuple_str = tuple_str.replace(\"(\", \"\").replace(\")\", \"\")\n    str_list = tuple_str.split(\", \")\n    return tuple(int(num) for num in str_list)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= val:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\\b\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, txt):\n    return lst + (txt,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(nums):\n    for i in range(0, len(nums), 2):  # Iterate through the list, starting from index 0, stepping by 2\n        if nums[i] % 2 != 0:  # Check if the number at the even index is not even\n            return False  # If it's not even, return False\n    return True  # If all numbers at even indices are even, return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, elem):\n    low, high = 0, len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = '^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    sum_odd = 0\n    for i in range(l, r + 1):\n        if i % 2 != 0:\n            sum_odd += i\n    return sum_odd"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    return ((num << d) | (num >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n): \n    if n < 1: \n        return False\n    x = n \n    while x * x > n: \n        x = (x + n // x) // 2\n    return x * x == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_len = 0\n    current_len = 0\n    for char in s:\n        if char.isupper():\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuples, k):\n    return k in tuples"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    return all(x < y for x, y in zip(tup1, tup2))"}
