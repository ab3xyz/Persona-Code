{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return [element for element in list1 if element in list2]"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(nums, n):\n    import heapq\n    largest_n = heapq.nlargest(n, nums)\n    return sorted(largest_n, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    return bin(x ^ y).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s: str) -> int:\n    original_str = s\n    for i in range(1, len(s)):\n        s = s[1:] + s[0]\n        if s == original_str:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    s = s[::-1]\n    s = s.lstrip(char).rstrip(char)\n    return s[::-1]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(length, width, height):\n    return 0.5 * length * width * height"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    import re\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    import math\n    for k in range(1, int(math.log2(n)) + 2):\n        if n == k * 2**k - 1:\n            return True\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num == 2 * reverse_num - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr):\n    from functools import cmp_to_key\n    str_arr = [str(i) for i in arr]\n    key = cmp_to_key(lambda x, y: 1 if x+y < y+x else -1)\n    str_arr.sort(key=key)\n    return int(''.join(str_arr))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return 3*n**2 - 2*n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    def is_valid(sub):\n        return sum(map(int, filter(str.isdigit, sub))) == len(sub)\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_valid(s[i:j]):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    return max(pair[1] - pair[0] for pair in pairs)"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    increasing = decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] > array[i-1]:\n            decreasing = False\n        elif array[i] < array[i-1]:\n            increasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    str_main = ''.join(map(str, main_list))\n    str_sub = ''.join(map(str, sub_list))\n    return str_sub in str_main"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return all(len(t) == len(tuples[0]) for t in tuples)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap, sorted = 1, True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 1\n    while (i * i <= n):\n        if (i * i == n):\n            return True\n        else:\n            j = 1\n            while (j < i):\n                if ((i * i - j * j) == n):\n                    return True\n                j += 1\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(arr, patterns):\n    if len(arr) != len(patterns):\n        return False\n    pattern_map, arr_map = {}, {}\n    for idx in range(len(arr)):\n        if arr[idx] not in arr_map and patterns[idx] not in pattern_map:\n            arr_map[arr[idx]] = patterns[idx]\n            pattern_map[patterns[idx]] = arr[idx]\n        elif arr[idx] in arr_map and arr_map[arr[idx]] != patterns[idx]:\n            return False\n        elif patterns[idx] in pattern_map and pattern_map[patterns[idx]] != arr[idx]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    # Calculate alternating sum\n    alt_sum = sum((-1)**i * int(digit) for i, digit in enumerate(str(n)))\n    # Check if the result is divisible by 11\n    return alt_sum % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4 / 3) * math.pi * radius**3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    val = 0\n    for char in s:\n        val += ord(char)\n    return chr(val % 26 + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    memo = [0, 1, 1]\n    for i in range(3, n + 1):\n        memo.append(memo[memo[i - 1]] + memo[i - memo[i - 1]])\n    return memo[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 3 + 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3: return False\n    for i in range(1, len(str_n)-1, 2):\n        if str_n[i-1] != str_n[i+1] or str_n[i] == str_n[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    return min(tuples_list, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    return min(len(sublist) for sublist in lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "from collections import Counter\ndef frequency_lists(lists):\n    return dict(Counter(element for sublist in lists for element in sublist))"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    import math\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return '0'\n    binary_str = ''\n    while decimal_num > 0:\n        binary_str = str(decimal_num % 2) + binary_str\n        decimal_num //= 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    if n < 9 or n in (11,):\n        return n + 1\n    length = len(str(n))\n    mid = (length - 1) // 2\n    start = int('1' + '0' * (length - 1))\n    for i in range(start, n + 1):\n        if is_palindrome(i):\n            return i + 1\n    base = int(str(n)[:mid+1])\n    for i in range(base + 1, 10**mid):\n        left = str(i)\n        right = left[-2::-1] if length % 2 else left[::-1]\n        cand = int(left + right)\n        if cand > n:\n            return cand\n    return 10 ** length + 1"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 1:\n        return 1\n    if m == 0 or m >= n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    return sum(1 for item in lst if item == True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_to_add, tuple_to_add_to):\n    return tuple_to_add_to + tuple(list_to_add)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(lst1, lst2, lst3):\n    combined_list = lst1 + lst2 + lst3\n    combined_list.sort()\n    return combined_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    def count_odds(s):\n        return sum(1 for _ in filter(lambda x: int(x, 2) % 2 == 1, s))\n\n    n = len(binary_str)\n    rotation_set = set()\n\n    for i in range(rotations):\n        binary_str = binary_str[-1] + binary_str[:-1]\n        if binary_str not in rotation_set:\n            rotation_set.add(binary_str)\n\n    return count_odds(rotation_set)"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    return s.isdigit() or (s[0] in ['-', '+'] and s[1:].isdigit())"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(lst):\n    for d in lst:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [(float(i) if i.replace('.', '', 1).isdigit() else i) for sublist in lst for i in sublist]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = float('-inf')\n    for t1 in tuples:\n        for t2 in tuples:\n            product = abs(t1[0] * t2[1])\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        result = 1  # Start with 1 because it's a divisor for all x > 1\n        sqrt_x = int(x ** 0.5)\n        for i in range(2, sqrt_x + 1):\n            if x % i == 0:\n                result += i\n                if i != x // i:\n                    result += x // i\n        return result\n\n    amicable_sum = 0\n    for i in range(2, n + 1):\n        partner = sum_of_divisors(i)\n        if partner > i and sum_of_divisors(partner) == i:\n            amicable_sum += i\n\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(complex_num):\n    return math.atan2(complex_num.imag, complex_num.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    current_diff = 0\n    count = {'0': 0, '1': 0}\n\n    for char in s:\n        count[char] += 1\n        current_diff = count['0'] - count['1']\n        max_diff = max(max_diff, current_diff)\n\n        if current_diff < 0:\n            count = {'0': 0, '1': 0}\n            current_diff = 0\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum(x, y):\n    common_divisors_sum = 0\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, *words):\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n    total = sum(matrix[0])\n    # Check rows and columns\n    for i in range(n):\n        if sum(matrix[i]) != total or sum(row[i] for row in matrix) != total:\n            return False\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != total or sum(matrix[i][n - 1 - i] for i in range(n)) != total:\n        return False\n    return True"}
{"task_id": "Mbpp/130", "solution": "from collections import Counter\n\ndef max_occurrences(lst):\n    freq = Counter(lst)\n    return freq.most_common(1)[0][0]"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero = sum(1 for num in arr if num == 0)\n    non_zero = sum(1 for num in arr if num != 0)\n    return zero / non_zero if non_zero != 0 else 0"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n -= 1\n            if n & (n - 1) != 0 and n != 1:\n                return False\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    result = []\n    for sublist in list_of_lists:\n        for item in sublist:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    for cur_size in range(len(arr), 1, -1):\n        max_index = 0\n        for i in range(1, cur_size):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        arr = flip(arr, max_index + 1)\n        arr = flip(arr, cur_size)\n    return arr\n\ndef flip(arr, i):\n    start = 0\n    while start < i - 1 - start:\n        arr[start], arr[i - 1 - start] = arr[i - 1 - start], arr[start]\n        start += 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    return sum(x == y == z for x, y, z in zip(list1, list2, list3))"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    return sum(isinstance(i, list) for i in tup)"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    def extended_gcd(x, y):\n        if y == 0:\n            return (1, 0)\n        else:\n            q, r = divmod(x, y)\n            (s, t) = extended_gcd(y, r)\n            return (t, s - q * t)\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (x * (n // g), y * (n // g))"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, elements_to_remove):\n    return [element for element in main_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(x, y):\n    def sum_divisors(n):\n        return sum(i for i in range(1, n // 2 + 1) if n % i == 0)\n    \n    return sum_divisors(x) == sum_divisors(y)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if ord(s[i]) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return all(type(item) == type(t[0]) for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    return input_string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(\" \", str(char))"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize result\n    result = 0\n    \n    # Iterate over every bit position\n    for i in range(0, 32, 2):\n        # Set even bits by shifting 1 to the current position and doing OR operation\n        result |= (1 << i)\n    \n    # Return the result\n    return result & n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    occurrence_dict = {}\n    for tup in lst:\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        else:\n            occurrence_dict[tup] = 1\n    return occurrence_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return sum(len(s) - i for i in range(len(s)))"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    memo = {}\n\n    def dp(current_position, previous_element):\n        if current_position == n:\n            return 1\n        if previous_element == 0 or current_position > n:\n            return 0\n        if (current_position, previous_element) in memo:\n            return memo[(current_position, previous_element)]\n\n        total_sequences = 0\n        for i in range(previous_element * 2, m + 1):\n            total_sequences += dp(current_position + 1, i)\n\n        memo[(current_position, previous_element)] = total_sequences\n        return total_sequences\n\n    return dp(0, 0)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    first_list[-1:] = second_list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    root = math.isqrt(n)\n    if root ** 2 == n:\n        return (root + 1) ** 2\n    else:\n        return root ** 2 if root ** 2 > n else (root + 1) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    inc = [0]*n \n    dec = [0]*n \n    \n    inc[0] = arr[0] \n    for i in range(1, n): \n        for j in range(i): \n            if (arr[i] > arr[j] and inc[i] < inc[j] + arr[i]): \n                inc[i] = inc[j] + arr[i] \n        if (inc[i] == 0): \n            inc[i] = arr[i] \n            \n    dec[n-1] = arr[n-1] \n    for i in range(n-2, -1, -1): \n        for j in range(n-1, i, -1): \n            if (arr[i] > arr[j] and dec[i] < dec[j] + arr[i]): \n                dec[i] = dec[j] + arr[i] \n        if (dec[i] == 0): \n            dec[i] = arr[i]\n    \n    max_sum = inc[0] + dec[0] - arr[0]\n    for i in range(1, n): \n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i]) \n  \n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = s.replace(\" \", \"\")  # Remove spaces from the string\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    return cmath.polar(complex_num)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(item, int) for item in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(color_list, n):\n    return list(product(color_list, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(elem1, elem2) for elem1, elem2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(x):\n        if x < 2: return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0: return False\n        return True\n\n    if n == 1: return 1\n    num, found = 1, 1\n    while found < n:\n        num += 2\n        if is_prime(num) and is_prime((num**2 - 2) // 4):\n            found += 1\n    return num"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return 15 * human_age if human_age <= 1 else 15 + (human_age - 1) * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    split_lists = [lst[i::n] for i in range(n)]\n    return split_lists"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum((2 * i - 1)**2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return n * (3 * n - 1) // 2"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(character):\n    return ord(character)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    total = 0\n    for index, number in enumerate(numbers):\n        if index % 2 == 0 and number % 2 == 0:\n            total += number\n    return total"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum += even_number ** 5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    import math\n    \n    sum_even = 0\n    for i in range(0, n+1, 2):\n        sum_even += math.comb(n, i)\n        \n    return sum_even"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    return sum(1 for _ in tup if isinstance(_, tuple)) + len([elem for elem in tup if not isinstance(elem, tuple)])"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return 4 * n ** 2 - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    from collections import Counter\n    num_str = str(num)\n    counter = Counter(num_str)\n    for digit, freq in counter.items():\n        if int(digit) < freq:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    return all(x == elem for x in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    return \"abb\" in text or \"bbb\" in text"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    max_k_times = k * max_sub_array_sum(arr)\n    if k == 1:\n        return max(max_k_times, max_sub_array_sum(arr + arr))\n    else:\n        max_1_time = max_sub_array_sum(arr)\n        max_cross = max_prefix_sum(arr) + max_suffix_sum(arr)\n        sum_array = sum(arr)\n        if sum_array > 0:\n            return max(max_k_times, max_cross + (k - 2) * sum_array)\n        else:\n            return max(max_k_times, max_cross)\n\ndef max_sub_array_sum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n\ndef max_prefix_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef max_suffix_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)-1, -1, -1):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum((2*i)**2 for i in range(1, n+1))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_list = max(lists, key=len, default=[])\n    return (len(max_list), max_list)"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(numerator, denominator):\n    return math.floor(numerator / denominator)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_num = None\n    for item in lst:\n        if isinstance(item, (int, float)) and (max_num is None or item > max_num):\n            max_num = item\n    return max_num"}
{"task_id": "Mbpp/295", "solution": ")\ndef sum_div(n):\n    divisors = [i for i in range(1, n // 2 + 1) if n % i == 0]\n    return sum(divisors)"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    d = {}\n    for name, score in lst:\n        if name in d:\n            d[name] += score\n        else:\n            d[name] = score\n    return max(d.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(2 * n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, 2 * n + 1):\n        for j in range(min(i, n) + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    return sum(dp[2 * n][k] for k in range(n + 1))"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        split_words = word.split()\n        for w in split_words:\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    dp[i] = arr[i]\n    for j in range(i+1, k):\n        if arr[j] > arr[i]:\n            dp[j] = max(dp[j-1], arr[i] + arr[j])\n        else:\n            dp[j] = dp[j-1]\n    return dp[k-1] + arr[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    import itertools\n    from heapq import nlargest\n    return nlargest(n, (x * y for x, y in itertools.product(list1, list2)))"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n + 1)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    prev, curr = 2, 1\n    for _ in range(3, n + 1):\n        prev, curr = curr, prev + curr\n    return curr"}
{"task_id": "Mbpp/390", "solution": "def add_string(numbers, format_string):\n    return [format_string.format(number) for number in numbers]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*lists):\n    if not lists:\n        return []\n    result = []\n    keys = lists[0]\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {}}\n        for j in range(1, len(lists)):\n            for k in range(len(lists[j])):\n                if i == k:\n                    nested_dict[keys[i]].update({lists[j][k]: lists[j+1][k] if j+1 < len(lists) else None})\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = [0] * (n + 1)\n    \n    def max_sum(n):\n        if n < 2:\n            return n\n        if memo[n] != 0:\n            return memo[n]\n        memo[n] = max(n, max_sum(n // 2) + max_sum(n // 3) + max_sum(n // 4) + max_sum(n // 5))\n        return memo[n]\n    \n    return max_sum(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return b\n    elif (b <= a <= c) or (c <= a <= b):\n        return a\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for num in lst:\n        while num > 0:\n            total_sum += num % 10\n            num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    return len(set(tuple(sorted(t)) for t in lst))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of integers\n    digits = list(str(n))\n    length = len(digits)\n\n    # Start from the right, find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, it means the digits are in descending order and we cannot form a bigger number by rearrangement\n        return -1\n\n    # Find the smallest digit on the right side of (i) which is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Sort the digits after the position (i) and append to the result\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n\n    # Convert list of integers back to integer\n    return int(\"\".join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            product = tuples_list[i][0] * tuples_list[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(value in seq2 for value in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        total_sum += even_number ** 3\n    return total_sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    parts = date_str.split('-')\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The standard form of a parabola equation is (x-h)^2 = 4a(y-k) or (y-k)^2 = 4a(x-h)\n    # The directrix of a parabola y = a(x - h)^2 + k is y = k - 1/(4a)\n    # The directrix of a parabola x = a(y - k)^2 + h is x = h - 1/(4a)\n    # Assuming the parabola is vertical (the first form), calculate the directrix\n    return k - 1/(4*a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(element in list2 for element in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b) / 2 if a + b == c else (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x <= num for x in arr) == False"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(num):\n    return num % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    counter = 0\n    seen = {}\n    for t in tuples:\n        rev_t = t[::-1]\n        if rev_t in seen:\n            counter += 1\n        seen[t] = True\n    return counter"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(\"\".join(map(str, lst)))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Define the pattern to match adverbs (usually ending with 'ly')\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Find the first adverb in the sentence\n    match = re.search(pattern, sentence)\n    \n    if match:\n        # If an adverb is found, return its position and the word itself\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group()\n        return (start_pos, end_pos, adverb)\n    else:\n        # If no adverb is found, return None\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_numbers = [num for num in arr if num > 0]\n    return len(positive_numbers) / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a*b, b*a) for (a, b) in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    perrin = [3, 0, 2] + [0] * (n-3)\n    sum_perrin = 5  # Initial sum of the first three Perrin numbers\n    for i in range(3, n):\n        perrin[i] = perrin[i-2] + perrin[i-3]\n        sum_perrin += perrin[i]\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            sum_even += i\n    return sum_even"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Matches a word containing 'z'.\n    \"\"\"\n    pattern = r\"\\b\\w*z\\w*\\b\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    return month in thirty_one_days_months"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    min_length = float('inf')\n    min_list = []\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lists):\n    return [sublist[0] for sublist in lists]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for subset in combinations(elements, r):\n            result.append(list(subset))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], temp * arr[i], min_product * arr[i])\n        \n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    n = len(nums)\n    dp = [1] * n\n    forward = [1] * n\n    backward = [1] * n\n    \n    for i in range(n):\n        dp[i] = nums[i]\n        if i > 0:\n            forward[i] = forward[i-1] * nums[i] if nums[i] > nums[i-1] else 1\n        \n    for i in reversed(range(n-1)):\n        dp[i] = nums[i]\n        if nums[i] < nums[i+1]:\n            backward[i] = backward[i+1] * nums[i]\n        else:\n            backward[i] = 1\n            \n    max_product = 0\n    for i in range(n):\n        product = forward[i] * backward[i] * nums[i]\n        if product > max_product:\n            max_product = product\n            \n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * (num % n)) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    return all(nums[i] + 1 == nums[i + 1] for i in range(len(nums) - 1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(lst1, lst2):\n    set1 = {tuple(sorted(t)) for t in lst1}\n    set2 = {tuple(sorted(t)) for t in lst2}\n    return set1 & set2"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": ""}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())"}
{"task_id": "Mbpp/479", "solution": "def first_digit(num):\n    while num >= 10:\n        num //= 10\n    return num"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                odd_count += 1\n    return odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    return sum(abs(int(a) - int(b)) for a, b in zip(str(num1), str(num2)))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    current_max = arr[0]\n    for i in range(1, n):\n        current_max = max(arr[i], current_max + arr[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    return tuple(sorted(set(t1 + t2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lists):\n    unique_nums = set()\n    duplicates = set()\n    for num in lists:\n        if num in unique_nums:\n            duplicates.add(num)\n            unique_nums.remove(num)\n        else:\n            unique_nums.add(num)\n    return list(unique_nums)"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    return functools.reduce(lambda x, y: x * y, set(numbers), 1)"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Surface Area of a cylinder formula: 2 * pi * radius * (radius + height)\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(l1, l2):\n    len_l1 = len(l1)\n    len_l2 = len(l2)\n\n    for i in range(len_l1 - len_l2 + 1):\n        if l1[i:i+len_l2] == l2:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n        if fact % 10 == 0:\n            return 0\n    return fact % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    all_elements = set(tuple1 + tuple2)\n    common_elements = set(tuple1).intersection(set(tuple2))\n    dissimilar_elements = all_elements - common_elements\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    result = ()\n    for item in t:\n        if isinstance(item, int) and item % 2 == 0:\n            result += (item,)\n        elif isinstance(item, tuple):\n            result += (extract_even(item),)\n    return result"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = ((base_edge / 2) ** 2 + height ** 2) ** 0.5\n    lateral_area = (base_edge * slant_height) * 4\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return False if d else True"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    squares = []\n    for i in range(math.ceil(math.sqrt(start)), math.floor(math.sqrt(end)) + 1):\n        square = i * i\n        if start <= square <= end:\n            squares.append(square)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    rect = cmath.rect(r, theta)\n    return ((r, theta), rect)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    from math import comb\n    \n    return sum(comb(n, i) * comb(n, i + 1) for i in range(n))"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    return '.'.join(str(int(part)) for part in ip_address.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(a, b):\n    ones, diff = 0, 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            if a[i] == '1':\n                ones += 1\n            else:\n                diff += ones > 0\n                ones -= ones > 0\n    return diff + ones // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(a_tuple):\n    return sys.getsizeof(a_tuple)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    p1, p2 = 0, 0\n    while True:\n        if p1 == len(arr1):\n            return arr2[p2 + k - 1]\n        if p2 == len(arr2):\n            return arr1[p1 + k - 1]\n        if k == 1:\n            return min(arr1[p1], arr2[p2])\n\n        new_k = k // 2\n        p1_new = min(p1 + new_k, len(arr1)) - 1\n        p2_new = min(p2 + new_k, len(arr2)) - 1\n        if arr1[p1_new] <= arr2[p2_new]:\n            k -= (p1_new - p1 + 1)\n            p1 = p1_new + 1\n        else:\n            k -= (p2_new - p2 + 1)\n            p2 = p2_new + 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert n to a string to easily get the length (number of digits)\n    n_str = str(n)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** len(n_str) for digit in n_str)\n    # Return True if the sum equals the original number, False otherwise\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = (n * (n + 1)) // 2\n    average = sum_n / n\n    return sum_n, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic = list(range(1, n + 1))\n    i = 1\n    while i < len(ludic):\n        remove_idx = list(range(i + ludic[i], len(ludic), ludic[i]))\n        for idx in reversed(remove_idx):\n            ludic.pop(idx)\n        i += 1\n    return ludic"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [x for i, x in enumerate(lst) if i != k-1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total_sum = 0\n    for tup in tuples:\n        for num in tup:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    result = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    dp = {}\n    \n    def dfs(num):\n        if num in dp: return dp[num]\n        max_len = 1\n        for i in range(len(nums)):\n            if nums[i] < num and num % nums[i] == 0:\n                max_len = max(max_len, 1 + dfs(nums[i]))\n        dp[num] = max_len\n        return dp[num]\n    \n    for num in nums:\n        dfs(num)\n        \n    return max(dp.values())"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        return (merged_list[size//2 - 1] + merged_list[size//2]) / 2\n    else:\n        return merged_list[size//2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(text):\n    return text.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The largest triangle that can be inscribed in a semicircle with radius r is a right triangle with its hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is 1/2 * base * height. Here, the base and height are both equal to the radius.\n    # Therefore, the area is 1/2 * radius * radius.\n    return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    non_zero = [x for x in arr if x != 0]\n    zeros = [0] * (len(arr) - len(non_zero))\n    return non_zero + zeros"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums):\n    \"\"\"\n    Calculate the sum of XOR of all pairs in the list.\n    \"\"\"\n    sum_xor = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            sum_xor += nums[i] ^ nums[j]\n    return sum_xor"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    return amount == cost"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(v, t):\n    # Assuming standard wind chill formula, though it typically uses wind speed in mph and temperatures in Fahrenheit.\n    # Given the parameters, converting the wind speed to miles per hour (from km/h) and temperatures to Fahrenheit (from Celsius)\n    v_mph = v * 0.621371  # Convert velocity from km/h to mph\n    t_f = t * (9/5) + 32  # Convert temperature from Celsius to Fahrenheit\n    \n    wci = 35.74 + 0.6215*t_f - 35.75*(v_mph**0.16) + 0.4275*t_f*(v_mph**0.16)\n    \n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_names(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    start = -1\n    end = -1\n    for i, char in enumerate(s[0]):\n        if char == '(':\n            if start == -1:\n                start = i\n        elif char == ')':\n            end = i\n            break\n    return s[0][:start] + s[0][end+1:]"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7*n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(word):\n    return len(word) > 2 and 'z' in word[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    if n == 1:\n        return cost[0][0]\n\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n\n    # Initialize the first row and column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Backtrack to find the path\n    i, j = n-1, n-1\n    path = [dp[n-1][n-1]]\n    while i > 0 or j > 0:\n        if i == 0:\n            path.append(dp[0][j-1])\n            j -= 1\n        elif j == 0:\n            path.append(dp[i-1][0])\n            i -= 1\n        else:\n            if dp[i-1][j] > dp[i][j-1]:\n                path.append(dp[i-1][j])\n                i -= 1\n            else:\n                path.append(dp[i][j-1])\n                j -= 1\n\n    return sum(path) / len(path)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall('\"(\\w+)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t_i * t_i_plus_1 for t_i, t_i_plus_1 in zip(t[:-1], t[1:]))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(nums):\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            result.append(nums[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)  # slant height\n    return math.pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching to the left\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0 \n    n = len(arr) \n  \n    for i in range(n): \n        total_sum += (arr[i] * (i+1) * (n-i)) \n   \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Find the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Generate a mask that has all bits set except the first and last\n    # For example, if num_bits is 4, mask will be 01110 in binary\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the middle bits using XOR operation\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The lower bound for the number of digits 'n' in a triangular number is found by solving\n    # the inequality: (sqrt(8*10^(n-1) + 1) - 1) / 2 >= x\n    # We round up to get the smallest integer 'x' that satisfies the condition\n    return math.ceil((math.sqrt(8 * math.pow(10, n - 1) + 1) - 1) / 2)"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(item is None for item in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(n):\n        for d in str(n):\n            if d == '0' or n % int(d) != 0:\n                return False\n        return True\n\n    return [n for n in range(startnum, endnum + 1) if is_divisible(n)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    import re\n    return re.sub(r\"([A-Z][^A-Z]*)\", r\" \\1\", text).lstrip(\" \")"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(int(n/2)-1, -1, -1):\n        j = 2 * i + 1\n        while j < n:\n            if j + 1 < n and arr[j+1] < arr[j]:\n                j += 1\n            if arr[i] > arr[j]:\n                return False\n            j *= 2\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0: return 0\n    if n == 1: return 1\n    j1, j2 = 0, 1\n    for _ in range(2, n + 1):\n        j = (2 * j2) + j1\n        j1, j2 = j2, j\n    return j2"}
{"task_id": "Mbpp/753", "solution": "import heapq\n\ndef min_k(tuples_list, k):\n    return heapq.nsmallest(k, tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.remove(min(unique_numbers))\n    return min(unique_numbers)"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    result = {}\n    for sublst in lst:\n        tuple_sublst = tuple(sublst)\n        if tuple_sublst in result:\n            result[tuple_sublst] += 1\n        else:\n            result[tuple_sublst] = 1\n    return result"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        val = float(s)\n        if s.count('.') == 1 and len(s) - s.index('.') - 1 == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    thirty_days_months = [4, 6, 9, 11]\n    return month in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr,n):\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(0, n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_number = 0\n    i = 1\n    count = 0\n    while count < n:\n        j = 1\n        while j * j <= i:\n            if i % j == 0:\n                if i // j == j:\n                    polite_number = i\n                    count += 1\n                    break\n                else:\n                    polite_number = i\n                    count += 1\n                    break\n            j += 1\n        i += 1\n    return polite_number"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_counts = {}\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [num for num in list1 if num not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = set([\"(\", \"[\", \"{\"])\n    closing_to_opening = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    \n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing_to_opening:\n            if not stack or stack.pop() != closing_to_opening[char]:\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    return ' '.join(word for word in words if len(word) != k)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(arr):\n    num_count = {}\n    total_sum = 0\n    for num in arr:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for num, count in num_count.items():\n        if count == 1:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst: return []\n    result = [[lst[0]]]\n    for element in lst[1:]:\n        if result[-1][-1] == element:\n            result[-1].append(element)\n        else:\n            result.append([element])\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tpl_lst):\n    result = []\n    for pair1, pair2 in combinations(tpl_lst, 2):\n        result.extend([(pair1[0] + pair2[0], pair1[1] + pair2[1]),\n                       (pair1[0] + pair2[1], pair1[1] + pair2[0])])\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        total_sum += (n - i) * (i + 1) * arr[i]\n    return total_sum // 2"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx * 100\n    return round(h, 2), round(s, 2), round(v, 2)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(int(i) for i in s[1:-1].split(', '))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= val:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    This function checks if the input string contains an 'a' followed by exactly three 'b's.\n    \n    :param text: The string to be checked.\n    :return: True if the pattern is found, False otherwise.\n    \"\"\"\n    pattern = r\"ab{3}\\b\"  # Pattern: 'a' followed by exactly three 'b's and asserts position at end of a word\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for element in input_tuple:\n        if not isinstance(element, tuple):\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, elem):\n    low, high = 0, len(arr) - 1\n    ans = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            ans = mid\n            low = mid + 1\n        elif arr[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return ans"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dic):\n    return sum(dic.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(x for x in range(l, r+1) if x % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    d = d % 32\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    return min(a == b, b == c, a == c) + 2 * (a == b == c)"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_len = 0\n    current_len = 0\n    for char in s:\n        if char.isupper():\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    for a, b in zip(tup1, tup2):\n        if a <= b:\n            return False\n    return True"}
