{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Use nlargest from heapq to find the n largest elements\n    largest_n = heapq.nlargest(n, nums)\n    return largest_n\n\n# Example usage:\n# heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers\n    xor_result = x ^ y\n    \n    # Check if the result has exactly one bit set\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_occurrences(s, char):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(char)\n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # If the first and last occurrences are the same, only remove one instance\n    if first_index == last_index:\n        return s[:first_index] + s[first_index+1:]\n    \n    # Remove the first and last occurrences of the character\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n\n# Example usage:\nremove_occurrences(\"hello\", \"l\")"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in matrix]\n    # Sort the rows based on their sums\n    sorted_rows = sorted(row_sums, key=lambda x: x[0])\n    # Extract the sorted rows\n    return [row for _, row in sorted_rows]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    triangular_area = 0.5 * base * height\n    volume = triangular_area * length\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    return bool(re.match(r'^[a-z]+(_[a-z]+)*$', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(char for char in s1 if char not in s2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # A Woodall number is of the form n * 2^n - 1\n    # We need to check if there exists an integer k such that n = k * 2^k - 1\n    \n    # Start with k = 1 and increment until n < k * 2^k\n    k = 1\n    while k * (2 ** k) - 1 <= n:\n        if k * (2 ** k) - 1 == n:\n            return True\n        k += 1\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr):\n    # Convert each integer in the list to a string\n    arr = list(map(str, arr))\n    \n    # Custom sort function to compare two numbers by their concatenated values\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n    \n    # Sort the array using the custom comparison function\n    arr.sort(key=functools.cmp_to_key(compare))\n    \n    # Join the sorted strings to form the largest number\n    largest_num = ''.join(arr)\n    \n    # Handle the case where the largest number is '0' (e.g., [0, 0])\n    if largest_num[0] == '0':\n        return 0\n    \n    return int(largest_num)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    def sum_digits(substring):\n        return sum(int(digit) for digit in substring if digit.isdigit())\n    \n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if sum_digits(substring) == len(substring):\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = float('-inf')\n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False  # We are not done yet\n        else:\n            gap = 1\n            sorted = True  # If there are no swaps this pass, we are done\n\n        # A single \"comb\" over the input list\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # Check if n can be written as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        if (i**2 - n) >= 0 and ((i**2 - n)**0.5).is_integer():\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n            \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = [tuple for tuple in tuples_list if all(element % k == 0 for element in tuple)]\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4 / 3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    p = [0] * (n + 1)\n    p[1], p[2] = 1, 1\n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    return p[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the dictionaries using dictionary unpacking\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first_digit = str_n[0]\n    second_digit = str_n[1]\n    for i in range(2, len(str_n)):\n        if i % 2 == 0 and str_n[i] != first_digit:\n            return False\n        elif i % 2 != 0 and str_n[i] != second_digit:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(list_of_lists):\n    frequency_dict = {}\n    for sublist in list_of_lists:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def next_number(x):\n        x += 1\n        while not is_palindrome(x):\n            x += 1\n        return x\n\n    return next_number(n + 1)"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 1:\n        return 1 if m == 0 else 0\n    if m == 0 or m >= n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return sum(1 for b in bool_list if b is True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    # Initialize a counter for odd numbers\n    odd_count = 0\n    \n    # Loop through each rotation\n    for i in range(rotations):\n        # Convert the binary string to an integer\n        num = int(binary_str, 2)\n        \n        # Check if the number is odd\n        if num % 2 == 1:\n            odd_count += 1\n        \n        # Rotate the binary string by moving the first character to the end\n        binary_str = binary_str[-1] + binary_str[:-1]\n    \n    return odd_count\n\n# Example usage\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3\nprint(odd_Equivalent(\"11011\", 5))   # Expected output: 4\nprint(odd_Equivalent(\"1010\", 4))    # Expected output: 2"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Initialize a set to store the common elements\n    common_elements = set(nested_lists[0])\n    \n    # Iterate through the rest of the nested lists\n    for lst in nested_lists[1:]:\n        # Update the set of common elements by taking the intersection with the current list\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for sublist in lst:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)\n        result.append(converted_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "from typing import List, Tuple\nimport math\n\ndef max_product_tuple(pairs: List[Tuple[int, int]]) -> float:\n    max_product = -math.inf\n    for pair in pairs:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        total = 1  # Start with 1 because it's always a divisor\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                total += i\n                if i != x // i:\n                    total += x // i\n        return total\n    \n    amicable_sum = 0\n    for num in range(2, n + 1):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count = 0\n    prefix_sum = [0]\n    \n    # Create a prefix sum array to track the difference between 1s and 0s\n    for char in binary_string:\n        count += 1 if char == '1' else -1\n        prefix_sum.append(count)\n        \n    # Iterate through the prefix sum array to find the maximum difference\n    for i in range(len(prefix_sum)):\n        for j in range(i + 1, len(prefix_sum)):\n            current_diff = prefix_sum[j] - prefix_sum[i]\n            max_diff = max(max_diff, abs(current_diff))\n            \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    result = [word for word in words if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0 or any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n\n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check diagonal sums\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    from collections import Counter\n    # Count the occurrences of each item in the list\n    counts = Counter(lst)\n    # Find the item(s) with the maximum frequency\n    max_freq = max(counts.values())\n    # Return the item with the maximum frequency\n    # If there are multiple items with the same maximum frequency, return the first one encountered\n    for item, freq in counts.items():\n        if freq == max_freq:\n            return item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        # Check if the last bit is set\n        if (n & 1) == 0:\n            return False\n        # Remove the last bit set\n        n = n - (n & -n)\n    return n == 0"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    # Convert the flattened list into a set to remove duplicates\n    result_set = set(flattened_list)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        return sub_arr[:k][::-1] + sub_arr[k:]\n\n    n = len(arr)\n    while n > 1:\n        # Find the index of the maximum element in arr[0:n]\n        max_idx = arr.index(max(arr[:n]))\n        # Bring the maximum element to the front if it's not already there\n        if max_idx != 0:\n            arr = flip(arr, max_idx + 1)\n        # Now flip the maximum element to its correct position\n        arr = flip(arr, n)\n        # Reduce the size of the current array slice by one\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    return sum(x == y == z for x, y, z in zip(list1, list2, list3))"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    min_val = arr[0]\n    max_diff = 0\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        else:\n            max_diff = max(max_diff, abs(num - min_val))\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "from math import gcd\n\ndef find_solution(a, b, n):\n    # Extended Euclidean Algorithm to find x and y\n    if a == 0:\n        if b == 0:\n            return None\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    \n    x0, y0 = 1, 0\n    x1, y1 = 0, 1\n    while b != 0:\n        q, a, b = a // b, b, a % b\n        x0, x1 = x1, x0 - q * x1\n        y0, y1 = y1, y0 - q * y1\n    \n    if n % a != 0:\n        return None\n    \n    x = x0 * (n // a)\n    y = y0 * (n // a)\n    \n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(source_list, elements_to_remove):\n    return [element for element in source_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    def sum_of_divisors(n):\n        divisor_sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if char in alphabet and alphabet.index(char) == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                even_count += 1\n    return even_count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    number_of_sides = 5\n    perimeter = number_of_sides * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Find the first occurrence of the element using binary search\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == element:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the element is not found, return False\n    if first_occurrence == -1:\n        return False\n\n    # Check if the element appears more than n/2 times\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == element:\n        return True\n    return False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n    \n    if c < min_val:\n        min_val = c\n    \n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists while preserving order\n    negative_elements = [x for x in arr[:n] if x < 0]\n    non_negative_elements = [x for x in arr[:n] if x >= 0]\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize a mask with even bits set to 1\n    mask = 0xAAAAAAAA  # Binary: 10101010 10101010 10101010 10101010\n    # Apply the mask to n using bitwise OR\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for tuple_item in tuples_list:\n        sorted_tuple = tuple(sorted(tuple_item))\n        if sorted_tuple in occurrences:\n            occurrences[sorted_tuple] += 1\n        else:\n            occurrences[sorted_tuple] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    from math import comb\n\n    # Function to calculate the number of valid sequences\n    def count_sequences(m, n):\n        # Base case: If n is 0, there's only one sequence - the empty sequence\n        if n == 0:\n            return 1\n        # Initialize the count to 0\n        count = 0\n        # Iterate through all possible starting elements\n        for start in range(1, min(m, 2**(n-1)) + 1):\n            # Calculate the remaining elements needed\n            remaining = n - 1\n            # Calculate the maximum possible value for the last element\n            max_last = m\n            # Adjust the maximum possible value based on the start value\n            while start * (2 ** remaining) <= max_last:\n                max_last = start * (2 ** remaining)\n                remaining -= 1\n            # Calculate the number of ways to choose the remaining elements\n            count += comb(max_last - start, remaining)\n        return count\n\n    return count_sequences(m, n)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    if first_list and second_list:\n        first_list[:-1] = first_list[:-1] + second_list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    root = math.isqrt(n)\n    next_root = root + 1\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize two arrays to store the maximum sum till each index i\n    # for increasing and decreasing subsequences respectively\n    inc = [0] * n\n    dec = [0] * n\n    \n    # The maximum sum of increasing subsequence ending at the first element is the element itself\n    inc[0] = arr[0]\n    \n    # Fill inc[] such that inc[i] stores the maximum sum of increasing subsequence ending with arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n        if inc[i] == 0:  # If no increasing subsequence is found, include only arr[i]\n            inc[i] = arr[i]\n    \n    # The maximum sum of decreasing subsequence starting at the last element is the element itself\n    dec[n-1] = arr[n-1]\n    \n    # Fill dec[] such that dec[i] stores the maximum sum of decreasing subsequence starting with arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n        if dec[i] == 0:  # If no decreasing subsequence is found, include only arr[i]\n            dec[i] = arr[i]\n    \n    # Find the maximum sum of bitonic subsequence by adding inc[i] and dec[i] for all index i and subtracting arr[i] as it gets counted twice\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n\n# Function definition complete"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    s = s.replace(\" \", \"\").upper()  # Remove spaces and convert to uppercase\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table in a bottom-up manner\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n\n    for current in range(2, int(n ** 0.5) + 1):\n        if sieve[current]:\n            for multiple in range(current*current, n, current):\n                sieve[multiple] = False\n\n    return sum(sieve)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a1, b1), max(a2, b2)) for (a1, a2), (b1, b2) in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    \n    a, b = 2, 5\n    count = 2\n    while count < n:\n        c = 4 * b - a + 2\n        a, b = b, c\n        count += 1 if is_prime(c) else 0\n    return b"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(x / y if y != 0 else float('inf') for x, y in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    # Initialize an empty list to hold the resulting lists\n    result = [[] for _ in range(n)]\n    \n    # Iterate through the input list\n    for i, item in enumerate(lst):\n        # Determine the index in the result list where the current item should be placed\n        index = i % n\n        result[index].append(item)\n    \n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * n - 6 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for k in range(0, n + 1, 2):\n        total_sum += comb(n, k)\n    return total_sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    for i, element in enumerate(tup):\n        if isinstance(element, tuple):\n            return i\n    return 0"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "from collections import Counter\n\ndef validate(n):\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    max_kadane = kadane(arr)\n    max_prefix_sum, max_suffix_sum, total_sum = prefix_suffix_sum(arr)\n    \n    if k == 1:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n    else:\n        max_total = max_prefix_sum + (total_sum * (k - 2)) + max_suffix_sum\n        return max(max_kadane, max_total)\n\ndef kadane(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef prefix_suffix_sum(arr):\n    prefix_sum = 0\n    max_prefix_sum = float('-inf')\n    suffix_sum = 0\n    max_suffix_sum = float('-inf')\n    total_sum = 0\n    \n    # Calculate max prefix sum\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    \n    # Calculate max suffix sum\n    for i in range(len(arr) - 1, -1, -1):\n        suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    \n    # Calculate total sum\n    for i in range(len(arr)):\n        total_sum += arr[i]\n    \n    return max_prefix_sum, max_suffix_sum, total_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(numerator, denominator):\n    return math.floor(numerator / denominator)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out non-integer values from the list\n    numbers = [x for x in lst if isinstance(x, int)]\n    # Return the maximum value from the filtered list\n    return max(numbers)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for loop_var in range(left, right + 1):\n        arr[loop_var] = temp_arr[loop_var]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    aggregate_dict = {}\n    for name, value in lst:\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        else:\n            aggregate_dict[name] = value\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return max_name, aggregate_dict[max_name]"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    # Calculate the total number of valid sequences using combinatorial methods\n    count = 0\n    for k in range(n + 1):\n        # Number of ways to choose k ones in the first n bits\n        first_n_ways = math.comb(n, k)\n        # Number of ways to choose k ones in the last n bits\n        last_n_ways = math.comb(n, k)\n        # Total ways for this particular k\n        count += first_n_ways * last_n_ways\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values()), default=0)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        split_words = word.split()\n        for w in split_words:\n            if w.startswith('P') or w.startswith('p'):\n                result.append(w)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[k] = arr[k]\n\n    for j in range(k + 1, n):\n        if arr[j] > arr[k] and dp[j] < dp[k] + arr[j]:\n            dp[j] = dp[k] + arr[j]\n\n    max_sum = arr[k]\n    for j in range(k + 1, i + 1):\n        max_sum = max(max_sum, dp[j])\n\n    return max_sum\n\n# Example usage:\n# max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)"}
{"task_id": "Mbpp/308", "solution": "from heapq import nlargest\nfrom itertools import product\n\ndef large_product(list1, list2, k):\n    # Generate all possible products using itertools.product\n    all_products = (x * y for x, y in product(list1, list2))\n    # Find the k largest products using heapq.nlargest\n    return nlargest(k, all_products)\n\n# Example usage:\n# result = large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n# print(result)  # Output: [60, 54, 50]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    lucas_0 = 2\n    lucas_1 = 1\n    \n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(str(element)) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    result = []\n    for i in range(len(ids)):\n        nested_dict = {ids[i]: {names[i]: scores[i]}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    memo[n] = max(n, get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo))\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    total_sum = 0\n    for item in lst:\n        if isinstance(item, int):\n            total_sum += sum_digits(item)\n    \n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    return len(set(tuples_list))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Start from the rightmost digit and find the first digit that is smaller than the digit next to it\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, no larger permutation is possible\n        return None\n    \n    # Find the smallest digit on the right side of (i-th digit) that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the (i+1)-th position\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values from the list\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # Return the minimum value if there are any numeric values, else return None\n    return min(numeric_values) if numeric_values else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Removes odd numbers from a given list and returns a new list containing only even numbers.\n    \n    :param numbers: List of integers.\n    :return: A new list containing only the even numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    set_seq2 = set(seq2)\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t):\n    return '-'.join(map(str, t))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    result = []\n    for elem1, elem2 in zip(tuple1, tuple2):\n        # Perform bitwise AND operation\n        and_result = elem1 & elem2\n        result.append(and_result)\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The formula for the directrix of a parabola y = a(x - h)^2 + k is y = k - 1/(4a)\n    directrix = k - 1 / (4 * a)\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(element in list2 for element in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + c) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen = set()\n    bidirectional_count = 0\n    \n    for t in tuples:\n        forward = tuple(sorted(t))\n        if forward in seen:\n            bidirectional_count += 1\n        else:\n            seen.add(forward)\n    \n    return bidirectional_count\n\n# Example usage (not part of the function)\n# print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]))"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to a string and concatenate them\n    result = ''.join(str(num) for num in lst)\n    # Convert the concatenated string back to an integer\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match adverbs (typically ending with 'ly')\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, sentence)\n    \n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        adverb = match.group()\n        return (start_index, end_index, adverb)\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "import math\n\ndef positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    result = tuple(\n        (a1 * b1, a2 * b2)\n        for (a1, a2), (b1, b2) in zip(t1, t2)\n    )\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    perrin = [3, 0, 2] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        perrin[i] = perrin[i - 2] + perrin[i - 3]\n    return sum(perrin[:n+1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    return [string for string in strings if len(string) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sum_of_even_factors(n):\n    sum_factors = 0\n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            sum_factors += i\n    return sum_factors\n\n# Function to test the correctness of the sum_of_even_factors function\ndef check_sum_of_even_factors():\n    assert sum_of_even_factors(18) == 26\n    assert sum_of_even_factors(30) == 48\n    assert sum_of_even_factors(6) == 8\n\n# Uncomment the line below to run the test cases\n# check_sum_of_even_factors()"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    def generate_combinations(index, current_combination, all_combinations):\n        all_combinations.append(list(current_combination))\n        for i in range(index, len(elements)):\n            current_combination.append(elements[i])\n            generate_combinations(i + 1, current_combination, all_combinations)\n            current_combination.pop()\n\n    all_combinations = []\n    generate_combinations(0, [], all_combinations)\n    return all_combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        choices = (nums[i], nums[i] * max_product, nums[i] * min_product)\n        max_product = max(choices)\n        min_product = min(choices)\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {k: v for k, v in dictionary.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    # Initialize DP tables\n    dp_max = [0] * n  # Tracks the maximum product ending at each index\n    dp_prev = [-1] * n  # Tracks the previous index in the subsequence\n\n    # Compute the maximum product and previous index for each element\n    for i in range(n):\n        dp_max[i] = nums[i]\n        for j in range(i):\n            if nums[j] < nums[i] and dp_max[j] * nums[i] > dp_max[i]:\n                dp_max[i] = dp_max[j] * nums[i]\n                dp_prev[i] = j\n\n    # Find the index of the maximum product\n    max_index = dp_max.index(max(dp_max))\n\n    # Reconstruct the subsequence\n    subsequence = []\n    while max_index != -1:\n        subsequence.append(nums[max_index])\n        max_index = dp_prev[max_index]\n\n    # Calculate the product of the subsequence\n    product = 1\n    for num in reversed(subsequence):\n        product *= num\n\n    return product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples1, tuples2):\n    # Convert each tuple in the lists to a set to handle unordered pairs\n    set_tuples1 = {frozenset(t) for t in tuples1}\n    set_tuples2 = {frozenset(t) for t in tuples2}\n    \n    # Find the intersection of the sets\n    common_sets = set_tuples1 & set_tuples2\n    \n    # Convert the frozensets back to tuples, ensuring the order is consistent\n    result = {tuple(sorted(s)) for s in common_sets}\n    \n    return result"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    if n == 0:\n        return 0\n    while n >= 10:\n        n = n // 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings to easily access individual digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Ensure both strings have the same length by padding with zeros on the left if necessary\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of the absolute differences of corresponding digits\n    digit_distance_sum = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n    \n    return digit_distance_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Combine the tuples and convert to a set to remove duplicates\n    combined_set = set(tuple1) | set(tuple2)\n    # Convert the set back to a sorted tuple\n    return tuple(sorted(combined_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "from collections import Counter\n\ndef count_Pairs(arr):\n    # Count the occurrences of each element in the list\n    element_counts = Counter(arr)\n    \n    # Calculate the number of unique pairs\n    unique_pairs_count = 0\n    for count in element_counts.values():\n        # If an element occurs only once, it can pair with all other elements\n        if count == 1:\n            unique_pairs_count += len(arr) - count\n        # If an element occurs more than once, calculate the unique pairs\n        elif count > 1:\n            unique_pairs_count += (len(arr) - count) - (count - 1)\n    \n    # Since each pair is counted twice, divide by 2\n    return unique_pairs_count // 2"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    num_count = {}\n    result = []\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    for num, count in num_count.items():\n        if count == 1:\n            result.append(num)\n    \n    return result"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    if sub_len > main_len:\n        return False\n    \n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(tuple(extract_even(item)))\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    lateral_area = 0.5 * 4 * base_edge * slant_height\n    total_surface_area = base_area + lateral_area\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    start_sqrt = math.ceil(math.sqrt(start))\n    end_sqrt = math.floor(math.sqrt(end))\n    return [x**2 for x in range(start_sqrt, end_sqrt + 1)]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates (r, theta) to rectangular coordinates\n    real_part = r * cmath.cos(theta)\n    imag_part = r * cmath.sin(theta)\n    \n    # Return both the tuple (r, theta) and the complex number\n    return ((r, theta), complex(real_part, imag_part))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 0:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for i in range(n):\n        total_sum += comb(n, i) * comb(n, i + 1)\n    return total_sum\n\n# The provided assertions\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    parts = ip.split('.')\n    parts = [str(int(part)) for part in parts]\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    count1 = binary1.count('1')\n    count2 = binary2.count('1')\n    \n    if count1 != count2:\n        return None\n    \n    swaps = 0\n    i = 0\n    j = 0\n    \n    while i < len(binary1) and j < len(binary2):\n        if binary1[i] != binary2[j]:\n            if binary1[i] == '0':\n                # Find the next '1' in binary1 to swap\n                k = i + 1\n                while k < len(binary1) and binary1[k] != '1':\n                    k += 1\n                if k < len(binary1):\n                    # Swap '0' with '1'\n                    binary1 = binary1[:i] + '1' + binary1[i+1:k] + '0' + binary1[k+1:]\n                    swaps += 1\n                else:\n                    return None\n            else:\n                # Move to the next bit in binary2\n                j += 1\n        else:\n            # Move both pointers forward\n            i += 1\n            j += 1\n    \n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    index1, index2 = 0, 0\n    while True:\n        # If one of the arrays is empty, return kth element from the other array\n        if index1 == len(arr1):\n            return arr2[index2 + k - 1]\n        if index2 == len(arr2):\n            return arr1[index1 + k - 1]\n        if k == 1:\n            return min(arr1[index1], arr2[index2])\n\n        # Move halfway through the remaining elements in each array\n        half_k = k // 2\n        new_index1 = min(index1 + half_k, len(arr1)) - 1\n        new_index2 = min(index2 + half_k, len(arr2)) - 1\n        pivot1, pivot2 = arr1[new_index1], arr2[new_index2]\n\n        # Adjust indices based on the comparison of pivots\n        if pivot1 <= pivot2:\n            k -= (new_index1 - index1 + 1)\n            index1 = new_index1 + 1\n        else:\n            k -= (new_index2 - index2 + 1)\n            index2 = new_index2 + 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to easily find the length (number of digits)\n    num_str = str(n)\n    num_length = len(num_str)\n    \n    # Initialize the sum of the digits raised to the power of the number of digits\n    sum_of_powers = 0\n    \n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer and raise it to the power of the number of digits\n        sum_of_powers += int(digit) ** num_length\n    \n    # Check if the sum of the powers equals the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic_numbers = list(range(1, n + 1))\n    index = 1\n    \n    while index < len(ludic_numbers):\n        remove_index = index\n        while remove_index < len(ludic_numbers):\n            remove_index += index\n            if remove_index < len(ludic_numbers):\n                del ludic_numbers[remove_index]\n        index += 1\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Function to find the nth Bell number\ndef bell_Number(n):\n    return bell_number(n)"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [element for index, element in enumerate(lst) if index != k - 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    total_sum = 0\n    for tup in tuples:\n        for num in tup:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)"}
{"task_id": "Mbpp/620", "solution": "from math import gcd\nfrom collections import defaultdict\n\ndef largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    index_map = {}\n\n    for i, num in enumerate(nums):\n        index_map[num] = i\n\n    for i, num in enumerate(nums):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 or nums[j] % nums[i] == 0:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n\n    return max(dp)\n\n# Example usage\nprint(largest_subset([1, 3, 6, 13, 17, 18]))  # Output: 4\nprint(largest_subset([10, 5, 3, 15, 20]))     # Output: 3\nprint(largest_subset([18, 1, 3, 6, 13, 17]))  # Output: 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    i = 0  # Initial index for arr1\n    j = 0  # Initial index for arr2\n    m1 = -1  # To store the first median\n    m2 = -1  # To store the second median\n\n    for count in range(1, n + 1):\n        if i != n and (j == n or arr1[i] < arr2[j]):\n            m1 = m2  # Update m2\n            m2 = arr1[i]  # Update m1\n            i += 1\n        else:\n            m1 = m2  # Update m2\n            m2 = arr2[j]  # Update m1\n            j += 1\n\n    return (m1 + m2) / 2.0\n\n# Example usage\nget_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with its hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height.\n    # Here, the base and height are both equal to the radius.\n    return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [\n        [x-1, y-1], [x-1, y], [x-1, y+1],\n        [x, y-1], [x, y], [x, y+1],\n        [x+1, y-1], [x+1, y], [x+1, y+1]\n    ]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ', 1)"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    non_zero = [num for num in nums if num != 0]\n    zeros = [0] * (len(nums) - len(non_zero))\n    return non_zero + zeros"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a max heap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one from the heap.\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap.\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    import math\n    # Wind chill formula: WCI = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16\n    # Note: This formula is valid for temperatures between -58\u00b0F and 41\u00b0F (-50\u00b0C to 5\u00b0C) and wind speeds above 4.8 km/h.\n    if temperature > 10 or velocity < 4.8:\n        return temperature\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if name[0].isupper()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = \"\"\n    inside_parentheses = False\n    for char in s:\n        if char == '(':\n            inside_parentheses = True\n        elif char == ')':\n            inside_parentheses = False\n        elif not inside_parentheses:\n            result += char\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(word):\n    # Check if the length of the word is greater than 2 to ensure there is a middle\n    if len(word) > 2:\n        # Check for 'z' in the substring excluding the first and last characters\n        return 'z' in word[1:-1]\n    else:\n        # If the word is too short, return False\n        return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    \n    # Initialize DP table\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    # Fill DP table\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    \n    # Calculate maximum sum\n    max_sum = dp[n-1][n-1]\n    \n    # Calculate minimum steps\n    min_steps = 2 * n - 2\n    \n    # Calculate maximum average\n    max_avg = max_sum / min_steps\n    \n    return max_avg\n\n# Example usage\nprint(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for x, y in zip(list1, list2) if x == y)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for item in lst[1:]:\n        if item != result[-1]:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n            \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Find the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask to keep the first and last bits unchanged\n    # For example, if num_bits is 4, the mask will be 0b1010 (10 in decimal)\n    mask = 1 + (1 << (num_bits - 2))\n    \n    # Create a mask to toggle the middle bits\n    # For example, if num_bits is 4, the toggle_mask will be 0b0100 (4 in decimal)\n    toggle_mask = ((1 << (num_bits - 2)) - 1) ^ ((1 << (num_bits - 2)) >> 1)\n    \n    # Toggle the middle bits using XOR\n    result = (n & mask) | (toggle_mask ^ (n & toggle_mask))\n    \n    return result\n\n# Example usage\nprint(toggle_middle_bits(9))  # Output: 15\nprint(toggle_middle_bits(10))  # Output: 12\nprint(toggle_middle_bits(11))  # Output: 13\nprint(toggle_middle_bits(0b1000001))  # Output: 0b1111111\nprint(toggle_middle_bits(0b1001101))  # Output: 0b1110011"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula to find the index of the smallest triangular number with n digits\n    # is derived from the properties of triangular numbers and logarithms.\n    # The index i can be found using the formula:\n    # i = ceil((sqrt(8 * 10^(n-1) + 1) - 1) / 2)\n    lower_bound = 10 ** (n - 1)\n    index = math.ceil((math.sqrt(8 * lower_bound + 1) - 1) / 2)\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    result = {}\n    # Iterate through the tuple in steps of 2 to pair keys and values\n    for i in range(0, len(tup) - 1, 2):\n        result[tup[i]] = tup[i + 1]\n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    if not lst or k <= 0:\n        return lst\n    \n    n = len(lst)\n    k = k % n  # Handle rotation greater than the list length\n    \n    return lst[-k:] + lst[:-k]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(n):\n        for digit in str(n):\n            if digit == '0' or n % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = s[0]\n    for i in range(1, len(s)):\n        if s[i].isupper():\n            result += ' ' + s[i]\n        else:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    # Convert each string in the list to an integer and sort the list numerically\n    sorted_list = sorted(map(int, strings))\n    return sorted_list"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Start from the first non-leaf node and go upwards\n    for i in range(n // 2 - 1, -1, -1):\n        # Check all children of node i\n        for j in [2 * i + 1, 2 * i + 2]:\n            if j < n and arr[i] > arr[j]:\n                return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, b + 2 * a\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuples, k):\n    # Sort the list of tuples based on the second element (value) in ascending order\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_tuples[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = set(numbers)  # Remove duplicates\n    if len(unique_numbers) < 2:\n        return None\n    sorted_numbers = sorted(unique_numbers)\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    reverse_map = {string: string[::-1] for string in strings}\n    count = 0\n    for string in strings:\n        if reverse_map[string] in strings:\n            count += 1\n    return count // 2  # Each pair is counted twice\n\n# Example usage\nprint(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))\nprint(count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]))\nprint(count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]))"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^-?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_number = 1\n    count = 0\n    i = 1\n    while True:\n        if not (i & (i - 1) == 0):  # Check if i is not a power of 2\n            polite_number += i\n            count += 1\n            if count == n:\n                return polite_number\n        i += 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    from collections import defaultdict\n    \n    # Dictionary to store the frequency of each number\n    freq = defaultdict(int)\n    \n    # Count the frequency of each number in the list\n    for num in nums:\n        freq[num] += 1\n    \n    count = 0  # Initialize result\n    \n    # Iterate through each element and find pairs\n    for num in nums:\n        complement = target_sum - num\n        count += freq[complement]\n        \n        # If complement and num are same, then decrement count\n        if complement == num:\n            count -= 1\n    \n    # Divide count by 2 to get the actual result\n    return count // 2"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2] + [item for item in list2 if item not in list1]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total_sum += odd_number ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = set([\"(\", \"[\", \"{\"])\n    closing_to_opening = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing_to_opening:\n            if not stack or stack.pop() != closing_to_opening[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(text, substring):\n    index = text.find(substring)\n    if index == -1:\n        return None\n    else:\n        return (substring, index, index + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "from collections import Counter\n\ndef find_sum(lst):\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for i in range(1, len(tuples) + 1):\n        for combo in combinations(tuples, i):\n            sums = tuple(sum(pair) for pair in zip(*combo))\n            result.append(sums)\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        end = i + 1\n        start = n - i\n        total_contrib = (start * end + 1) // 2\n        total_sum += arr[i] * total_contrib\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize the RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    \n    # Calculate Hue\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    \n    # Calculate Saturation\n    if max_color == 0:\n        s = 0\n    else:\n        s = (delta / max_color) * 100\n    \n    # Calculate Value\n    v = max_color * 100\n    \n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    even = None\n    odd = None\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split the string by commas\n    stripped_str = tuple_str.strip(\"()\")\n    elements = stripped_str.split(\", \")\n    \n    # Convert each element to an integer and create a tuple\n    int_tuple = tuple(int(element) for element in elements)\n    \n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(nested_lists):\n    return len(nested_lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range [0, 31]\n    d %= 32\n    # Perform the left rotation\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    # Count the number of equal numbers among the three given integers\n    count = 0\n    if a == b == c:\n        count = 3\n    elif a == b or a == c or b == c:\n        count = 2\n    return count"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    # Initialize the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list in the list of lists\n    for lst in lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        \n        # Update the maximum sum and the list with the maximum sum if needed\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n            \n    return max_sum_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(t1 > t2 for t1, t2 in zip(tuple1, tuple2))"}
