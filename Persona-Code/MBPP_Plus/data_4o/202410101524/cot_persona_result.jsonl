{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a sorted tuple to maintain order\n    return tuple(sorted(shared_elements))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(numbers):\n    squared_numbers = [num ** 2 for num in numbers]\n    return squared_numbers\n\n# Test cases\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10, 20, 30]) == [100, 400, 900]\nassert square_nums([12, 15]) == [144, 225]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the first occurrence of the character\n    first_index = s.find(char)\n    # Find the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    if first_index == last_index:\n        # If there's only one occurrence, remove it\n        return s[:first_index] + s[first_index+1:]\n    else:\n        # Remove both first and last occurrences\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n\n# Test cases\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"abcda\", \"a\") == \"bcd\"\nassert remove_Occ(\"PHP\", \"P\") == \"H\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume\n\n# Test the function with the given assertions\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    # Define the regular expression pattern\n    pattern = r'^[a-z]+_[a-z]+$'\n    \n    # Use re.match to check if the string matches the pattern\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    # Convert str2 into a set for fast lookup\n    chars_to_remove = set(str2)\n    \n    # Use a list comprehension to filter out characters in str1 that are not in str2\n    result = [char for char in str1 if char not in chars_to_remove]\n    \n    # Join the list into a string and return\n    return ''.join(result)\n\n# Test cases\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        if woodall_number > number:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Step 1: Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Step 2: Combine the sorted digits into a single number\n    max_num_str = ''.join(map(str, sorted_digits))\n    \n    # Step 3: Convert the string to an integer and return\n    return int(max_num_str)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)\n\n# Test cases\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible starting points\n    for start in range(n):\n        digit_sum = 0\n        \n        # Iterate over all possible ending points\n        for end in range(start, n):\n            # Add the current digit to the sum\n            digit_sum += int(s[end])\n            \n            # Calculate the length of the current substring\n            length = end - start + 1\n            \n            # Check if the sum of digits equals the length\n            if digit_sum == length:\n                count += 1\n    \n    return count\n\n# Test cases\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    if not numbers:\n        return None  # or raise an exception if preferred\n    \n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n# Test cases\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\nassert smallest_num([5]) == 5\nassert smallest_num([]) == None  # or handle as per requirement"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n# Test cases\nassert pos_count([1, -2, 3, -4]) == 2\nassert pos_count([3, 4, 5, -1]) == 3\nassert pos_count([1, 2, 3, 4]) == 4"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Initialize a list to store Bell numbers\n    bell = [0] * (n + 1)\n    bell[0] = 1  # B(0) = 1\n    \n    # Compute Bell numbers using dynamic programming\n    for i in range(1, n + 1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * binomial_coefficient(i - 1, j)\n    \n    return bell[n]\n\ndef binomial_coefficient(n, k):\n    # Calculate binomial coefficient C(n, k)\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    if len(array) <= 1:\n        return True\n    \n    is_non_decreasing = True\n    is_non_increasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] < array[i - 1]:\n            is_non_decreasing = False\n        if array[i] > array[i - 1]:\n            is_non_increasing = False\n    \n    return is_non_decreasing or is_non_increasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    if not sublist:\n        return True\n    if len(sublist) > len(main_list):\n        return False\n    \n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    def get_next_gap(gap):\n        # Shrink factor of 1.3\n        gap = int(gap / 1.3)\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # Check if the number is odd\n    if n % 2 == 1:\n        return True\n    # Check if the number is even and divisible by 4\n    elif n % 4 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    \n    map1_to_2 = {}\n    map2_to_1 = {}\n    \n    for item1, item2 in zip(list1, list2):\n        if item1 in map1_to_2:\n            if map1_to_2[item1] != item2:\n                return False\n        else:\n            map1_to_2[item1] = item2\n        \n        if item2 in map2_to_1:\n            if map2_to_1[item2] != item1:\n                return False\n        else:\n            map2_to_1[item2] = item1\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6\n\n# Assertions to verify the correctness of the function\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4/3) * math.pi * radius**3\n\n# Test cases\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence array with base cases\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    \n    # Calculate the sequence values iteratively\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n\n# Test cases\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\n# Test cases\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Test cases\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the dictionaries using dictionary unpacking\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency_dict = {}\n    for element in lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1\n\n# Test cases\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\nassert closest_num(0) == -1\nassert closest_num(-5) == -6"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, target_substring):\n    for string in string_list:\n        if target_substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Check if the number has at least three digits\n    if len(num_str) < 3:\n        return False\n    \n    # Identify the first two distinct digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # If the first two digits are the same, it's not undulating\n    if first_digit == second_digit:\n        return False\n    \n    # Check the alternation pattern\n    for i in range(2, len(num_str)):\n        expected_digit = first_digit if i % 2 == 0 else second_digit\n        if num_str[i] != expected_digit:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b\n\n# Test cases\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 5) == 3125"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the variable to store the tuple with the smallest second value\n    min_tuple = None\n    \n    # Iterate through each tuple in the list\n    for current_tuple in tuples_list:\n        # If min_tuple is None or the current tuple's second value is smaller\n        if min_tuple is None or current_tuple[1] < min_tuple[1]:\n            # Update min_tuple to the current tuple\n            min_tuple = current_tuple\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n\n# Test the function\nassert Find_Min_Length([[1], [1, 2]]) == 1\nassert Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2\nassert Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]]) == 3\nassert Find_Min_Length([]) == 0\nassert Find_Min_Length([[1, 2, 3], [], [1]]) == 0"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "from collections import defaultdict\n\ndef frequency_lists(lists):\n    # Step 1: Flatten the list of lists\n    flattened_list = [item for sublist in lists for item in sublist]\n    \n    # Step 2: Count the frequency of each element\n    frequency_dict = defaultdict(int)\n    for item in flattened_list:\n        frequency_dict[item] += 1\n    \n    # Step 3: Return the frequency dictionary\n    return dict(frequency_dict)"}
{"task_id": "Mbpp/98", "solution": "from functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length\n\n# Test the function\nimport math\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        s = str(x)\n        return s == s[::-1]\n    \n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\n# Test cases\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(1221) == 1331\nassert next_smallest_palindrome(120) == 121"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]\n\n# Test assertions\nassert kth_element([12, 3, 5, 7, 19], 2) == 3\nassert kth_element([17, 24, 8, 23], 3) == 8\nassert kth_element([16, 21, 25, 36, 4], 4) == 36"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Initialize a 2D list to store Eulerian numbers\n    eulerian = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: a(0, 0) = 1\n    eulerian[0][0] = 1\n    \n    # Fill the table using the recursive formula\n    for i in range(1, n + 1):\n        for j in range(min(i, m + 1)):\n            if j == 0:\n                eulerian[i][j] = 1\n            else:\n                eulerian[i][j] = (i - j) * eulerian[i - 1][j - 1] + (j + 1) * eulerian[i - 1][j]\n    \n    return eulerian[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(boolean_list):\n    return sum(boolean_list)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    # Convert the list to a tuple and concatenate with the original tuple\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Step 1: Combine the lists\n    combined_list = list1 + list2 + list3\n    \n    # Step 2: Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    # Step 3: Return the sorted list\n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    n = len(binary_string)\n    odd_count = 0\n    \n    # We only need to consider n rotations, as rotating n times returns to the original string\n    for i in range(n):\n        # Rotate the string by i positions\n        rotated_string = binary_string[i:] + binary_string[:i]\n        \n        # Convert the rotated binary string to an integer\n        num = int(rotated_string, 2)\n        \n        # Check if the number is odd\n        if num % 2 == 1:\n            odd_count += 1\n    \n    return odd_count\n\n# Test assertions\nassert odd_Equivalent(\"011001\", 6) == 3\nassert odd_Equivalent(\"11011\", 5) == 4\nassert odd_Equivalent(\"1010\", 4) == 2"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Start with the set of the first sublist\n    common_elements = set(nested_lists[0])\n    \n    # Intersect with each subsequent sublist\n    for sublist in nested_lists[1:]:\n        common_elements.intersection_update(sublist)\n    \n    # Convert the set back to a list\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"1\") == True\nassert check_integer(\"12345\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"12.3\") == False\nassert check_integer(\"0\") == True\nassert check_integer(\" 123 \") == True\nassert check_integer(\"\") == False\nassert check_integer(\" \") == False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dicts):\n    return all(len(d) == 0 for d in dicts)\n\n# Test cases\nassert empty_dit([{},{},{}]) == True\nassert empty_dit([{1,2},{},{}]) == False\nassert empty_dit([{}]) == True\nassert empty_dit([]) == True\nassert empty_dit([{1: 'a'}, {}]) == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tpl):\n    # Convert each integer in the tuple to a string and join them\n    concatenated_string = ''.join(str(num) for num in tpl)\n    # Convert the concatenated string to an integer\n    return int(concatenated_string)"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(list_of_lists):\n    result = []\n    for sublist in list_of_lists:\n        converted_sublist = []\n        for element in sublist:\n            try:\n                # Attempt to convert the element to a float\n                converted_element = float(element)\n            except ValueError:\n                # If conversion fails, keep the element as is\n                converted_element = element\n            converted_sublist.append(converted_element)\n        result.append(converted_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(pairs):\n    max_product = float('-inf')  # Initialize to negative infinity\n    for a, b in pairs:\n        product = abs(a * b)  # Calculate the absolute product\n        if product > max_product:\n            max_product = product  # Update max_product if current product is greater\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    visited = set()\n    \n    for num in range(2, limit):\n        if num in visited:\n            continue\n        \n        sum1 = sum_of_divisors(num)\n        if sum1 != num and sum1 < limit:\n            sum2 = sum_of_divisors(sum1)\n            if sum2 == num:\n                amicable_sum += num + sum1\n                visited.add(num)\n                visited.add(sum1)\n    \n    return amicable_sum\n\n# Assertions for testing\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Transform the binary string into an array of +1 and -1\n    transformed = [1 if char == '0' else -1 for char in binary_string]\n    \n    # Initialize variables for Kadane's algorithm\n    max_diff = float('-inf')\n    current_sum = 0\n    \n    # Apply Kadane's algorithm\n    for value in transformed:\n        current_sum += value\n        if current_sum > max_diff:\n            max_diff = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b\n\n# Test cases\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32\nassert multiply_int(0, 5) == 0\nassert multiply_int(-3, 3) == -9\nassert multiply_int(-4, -5) == 20"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    return [word for word in sentence.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the magic constant using the first row\n    magic_constant = sum(matrix[0])\n    \n    # Check each row\n    for row in matrix:\n        if sum(row) != magic_constant:\n            return False\n    \n    # Check each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_constant:\n            return False\n    \n    # Check the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    \n    # Check the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n    \n    # If all checks pass, it is a magic square\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    \n    # Count the frequency of each item in the list\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_count = 0\n    max_item = None\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    # Collect all vowels in the string\n    vowel_list = [char for char in s if char in vowels]\n    # Reverse the collected vowels\n    vowel_list.reverse()\n    \n    # Reconstruct the string with reversed vowels\n    result = []\n    vowel_index = 0\n    for char in s:\n        if char in vowels:\n            # Replace with the next vowel from the reversed list\n            result.append(vowel_list[vowel_index])\n            vowel_index += 1\n        else:\n            # Keep the non-vowel character unchanged\n            result.append(char)\n    \n    # Join the list into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n\n\n# Test the function with assertions\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    # Convert number to binary and check if it contains only '1's and '0's\n    binary_representation = bin(n)[2:]  # Get binary representation without '0b' prefix\n    return all(c in '01' for c in binary_representation)\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Assertions to test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    result_set = set()\n    for sublist in list_of_lists:\n        for number in sublist:\n            result_set.add(number)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        # Find the index of the largest element in the unsorted portion\n        max_index = max(range(size), key=arr.__getitem__)\n        \n        # If the largest element is not already at the end of the unsorted portion\n        if max_index != size - 1:\n            # Bring the largest element to the front if it's not already there\n            if max_index != 0:\n                flip(arr, max_index + 1)\n            \n            # Move the largest element to its correct position\n            flip(arr, size)\n    \n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Ensure all lists are of the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n    \n    # Initialize the counter\n    count = 0\n    \n    # Iterate through the lists\n    for i in range(len(list1)):\n        # Compare elements at the same position\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    # Return the count of identical items\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element\n\n# Test cases\nassert max_Abs_Diff((2, 1, 5, 3)) == 4\nassert max_Abs_Diff((9, 3, 2, 5, 1)) == 8\nassert max_Abs_Diff((3, 2, 1)) == 2"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    # Scale the solution (x, y) to the equation ax + by = gcd to ax + by = n\n    scale = n // gcd\n    return (x * scale, y * scale)\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    set2 = set(list2)  # Convert list2 to a set for O(1) average time complexity lookups\n    return [element for element in list1 if element not in set2]\n\n# Test cases\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total_sum = 0\n    i = 0\n    while n - 2 * i > 0:\n        total_sum += n - 2 * i\n        i += 1\n    return total_sum\n\n# Test cases\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    sum_a = sum_of_divisors(a)\n    sum_b = sum_of_divisors(b)\n    return sum_a == sum_b"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    # Convert the string to lowercase\n    s = s.lower()\n    # Initialize a counter for matching characters\n    count = 0\n    # Iterate over the string with index\n    for index, char in enumerate(s):\n        # Calculate the expected position in the alphabet (1-based index)\n        expected_position = ord(char) - ord('a') + 1\n        # Check if the character's position matches its alphabet position\n        if expected_position == index + 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate pairs\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    # Total pairs that XOR to an even number\n    return even_pairs + odd_pairs\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    if (n & (n - 1)) == 0:\n        return n\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32  # This line is for handling larger integers in Python\n    return n + 1\n\n# Test cases\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0\nassert frequency([1, 2, 2, 3, 3, 3, 4], 3) == 3\nassert frequency([0, 1, 2, 3, 1, 2], 1) == 2"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    # Ensure indices are within the bounds of the list\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid indices\")\n    \n    # Slice the list from start_index to end_index (inclusive)\n    sublist = numbers[start_index:end_index + 1]\n    \n    # Calculate and return the sum of the sublist\n    return sum(sublist)"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n    \n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Helper function to find the first occurrence of the element\n    def find_first_occurrence(arr, n, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < element:\n                low = mid + 1\n            elif arr[mid] > element:\n                high = mid - 1\n            else:\n                if mid == 0 or arr[mid - 1] != element:\n                    return mid\n                else:\n                    high = mid - 1\n        return -1\n\n    # Helper function to find the last occurrence of the element\n    def find_last_occurrence(arr, n, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < element:\n                low = mid + 1\n            elif arr[mid] > element:\n                high = mid - 1\n            else:\n                if mid == n - 1 or arr[mid + 1] != element:\n                    return mid\n                else:\n                    low = mid + 1\n        return -1\n\n    # Find the first occurrence of the element\n    first_index = find_first_occurrence(arr, n, element)\n    \n    # If the element is not found, it cannot be the majority\n    if first_index == -1:\n        return False\n    \n    # Calculate the last possible index for the element to be a majority\n    last_possible_index = first_index + n // 2\n    \n    # Find the last occurrence of the element\n    last_index = find_last_occurrence(arr, n, element)\n    \n    # Check if the last occurrence is at or beyond the last possible index\n    return last_index >= last_possible_index"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n    \n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n    \n    return min_val\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(19, 15, 18) == 15\nassert min_of_three(-10, -20, -30) == -30"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replacement_char):\n    return ''.join(replacement_char if char == ' ' else char for char in input_string)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Handle edge cases\n    if n <= 0:\n        return []\n    if n >= len(lst):\n        return sorted(lst, reverse=True)\n    \n    # Sort the list in descending order and return the first n elements\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the base of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test cases\nassert math.isclose(lateralsurface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsurface_cylinder(4, 5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsurface_cylinder(4, 10), 251.32000000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side):\n    return side ** 3\n\n# Test cases\nassert volume_cube(3) == 27\nassert volume_cube(2) == 8\nassert volume_cube(5) == 125"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming a 32-bit integer\n        mask |= (1 << i)\n    \n    # Set the even bits of the number using the mask\n    return n | mask\n\n# Test cases\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    \n    for tup in tuples_list:\n        # Normalize the tuple by sorting it\n        normalized_tup = tuple(sorted(tup))\n        \n        # Count the occurrences of each normalized tuple\n        if normalized_tup in occurrences:\n            occurrences[normalized_tup] += 1\n        else:\n            occurrences[normalized_tup] = 1\n    \n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Memoization dictionary\n    memo = {}\n\n    def count_sequences(prev, length):\n        # Base case: if the sequence is of length n, count it as a valid sequence\n        if length == n:\n            return 1\n        \n        # Check if the result is already computed\n        if (prev, length) in memo:\n            return memo[(prev, length)]\n        \n        total_count = 0\n        # Start from max(1, 2 * prev) to ensure the current element is at least twice the previous\n        for current in range(max(1, 2 * prev), m + 1):\n            total_count += count_sequences(current, length + 1)\n        \n        # Store the result in memoization dictionary\n        memo[(prev, length)] = total_count\n        return total_count\n\n    # Start the sequence with any number from 1 to m\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    \n    return total_sequences\n\n# Test cases\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Remove the last element of list1\n    list1 = list1[:-1]\n    # Append elements of list2 to list1\n    list1.extend(list2)\n    # Return the modified list1\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize the increasing and decreasing subsequence sum arrays\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the increasing subsequence sum array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Fill the decreasing subsequence sum array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    # Create a 2D array to store the length of longest palindromic subsequence\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table\n    for cl in range(2, n + 1):  # cl is the length of the substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # The result is in the top right corner of the table\n    return dp[0][n - 1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the first array to a set for O(1) lookups\n    set1 = set(arr1)\n    # Use a list comprehension to find common elements\n    intersection = [element for element in arr2 if element in set1]\n    return intersection\n\n# Test cases\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])) == set([1, 2, 8, 9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])) == set([3, 5, 7, 9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])) == set([10])"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    # Calculate the magnitude\n    r = abs(z)\n    # Calculate the angle\n    theta = cmath.phase(z)\n    # Return the polar coordinates as a tuple\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(elements, n):\n    if n == 0:\n        return [()]\n    else:\n        combinations = []\n        for element in elements:\n            for smaller_combination in combinations_colors(elements, n - 1):\n                combinations.append((element,) + smaller_combination)\n        return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Implement the Sieve of Eratosthenes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)\n\n# Test cases\nassert count_primes_nums(5) == 2\nassert count_primes_nums(10) == 4\nassert count_primes_nums(100) == 25"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Initialize an empty list to store the result tuples\n    result = []\n    \n    # Iterate over the pairs of tuples from both input tuples\n    for t1, t2 in zip(tuple1, tuple2):\n        # Create a new tuple with the maximum elements from the corresponding positions\n        max_tuple = (max(t1[0], t2[0]), max(t1[1], t2[1]))\n        # Append the new tuple to the result list\n        result.append(max_tuple)\n    \n    # Convert the result list back to a tuple of tuples and return\n    return tuple(result)"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Base cases\n    S0, S1 = 1, 1\n    count = 0\n    index = 1\n    \n    while True:\n        if index == 1:\n            current = S0\n        elif index == 2:\n            current = S1\n        else:\n            current = 2 * S1 + S0\n            S0, S1 = S1, current\n        \n        if is_prime(current):\n            count += 1\n            if count == n:\n                return current\n        \n        index += 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length.\")\n    \n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in tuple elements.\")\n        result.append(a // b)\n    \n    return tuple(result)\n\n# Test cases\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Ensure L is not negative\n    if L < 0:\n        L = 0\n    # Split the list using slicing\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        sublist = lst[i::n]\n        result.append(sublist)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2\n\n# Test the function with assertions\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(9) == 324\nassert lateralsurface_cube(10) == 400"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Test cases\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    # Return the ASCII value using the ord() function\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    total_sum = 0\n    for index, number in enumerate(numbers):\n        if index % 2 == 0 and number % 2 == 0:\n            total_sum += number\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    \n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [tup[-1] for tup in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    # Ensure both inputs are tuples and have the same length\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform element-wise subtraction\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even_indices = 0\n    for k in range(0, n + 1, 2):\n        sum_even_indices += math.comb(n, k)\n    return sum_even_indices\n\n# Test assertions\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    # Calculate the volume using the formula V = \u03c0 * r^2 * h\n    volume = math.pi * (radius ** 2) * height\n    return volume\n\n# Assertions to test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 10), 502.64000000000004, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n    \n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n    \n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(input_tuple):\n    count = 0\n    for element in input_tuple:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n\n\n# Test the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    for index, value in enumerate(array):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    \n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Step 1: Find the maximum subarray sum using Kadane's algorithm\n    max_kadane = kadane(arr)\n\n    # Step 2: Calculate the total sum of the array\n    total_sum = sum(arr)\n\n    # Step 3: Calculate the maximum prefix sum and maximum suffix sum\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current_prefix_sum = current_suffix_sum = 0\n\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    # Step 4: Calculate the maximum sum considering multiple repetitions\n    if k == 1:\n        return max_kadane\n    else:\n        max_combined = max_prefix_sum + max_suffix_sum + (k - 2) * total_sum\n        return max(max_kadane, max_combined)\n\n# Test cases\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares\n\n# Test assertions\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    # Determine which side is the hypotenuse\n    if side1 > side2:\n        hypotenuse = side1\n        other_side = side2\n    else:\n        hypotenuse = side2\n        other_side = side1\n    \n    # Calculate the third side\n    if hypotenuse**2 > other_side**2:\n        third_side = math.sqrt(hypotenuse**2 - other_side**2)\n    else:\n        third_side = math.sqrt(other_side**2 + hypotenuse**2)\n    \n    return third_side\n\n# Assertions for testing\nassert math.isclose(otherside_rightangle(7, 8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3, 4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7, 15), 16.55294535724685, rel_tol=0.001)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = float('-inf')  # Start with the smallest possible number\n    for item in lst:\n        if isinstance(item, int):  # Check if the item is an integer\n            if item > max_value:  # Compare with the current max value\n                max_value = item  # Update max value if current item is greater\n    return max_value\n\n# Assertions for testing\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n    \n    # Iterate through all possible divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(data):\n    # Step 1: Initialize a dictionary to store aggregate scores\n    aggregates = {}\n    \n    # Step 2: Iterate through the list of tuples\n    for name, score in data:\n        # Step 3: Update the dictionary with the aggregate scores\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    \n    # Step 4: Determine the maximum aggregate\n    max_name = None\n    max_score = 0\n    for name, score in aggregates.items():\n        if score > max_score:\n            max_name = name\n            max_score = score\n    \n    # Step 5: Return the result\n    return (max_name, max_score)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range(n + 1):\n        binom_coeff = math.comb(n, k)\n        total_count += binom_coeff * binom_coeff\n    return total_count\n\n# Test assertions\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict))\n\n# Test cases\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a': 1, 'b': {'c': 'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4: 'Mon'}}}) == 3"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    # List to store words starting with 'p'\n    p_words = []\n    \n    # Iterate over each string in the list\n    for string in word_list:\n        # Split the string into words\n        words = string.split()\n        \n        # Check each word\n        for word in words:\n            # Check if the word starts with 'p' (case-insensitive)\n            if word.lower().startswith('p'):\n                # Add to the list of 'p' words\n                p_words.append(word)\n                \n            # If we have found two words, return them as a tuple\n            if len(p_words) == 2:\n                return tuple(p_words)\n    \n    # If fewer than two words are found, return what we have (though not expected per problem statement)\n    return tuple(p_words)\n\n# Test assertions\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\nassert start_withp([\"Python Programming\", \"Java Programming\"]) == ('Python', 'Programming')\nassert start_withp([\"Pqrst Pqr\", \"qrstuv\"]) == ('Pqrst', 'Pqr')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the dp array\n    dp = [0] * n\n    \n    # Fill the dp array for elements up to index i\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Find the maximum sum of subsequence that can be extended to include arr[k]\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Step 2: Generate all possible products\n    products = [a * b for a in list1 for b in list2]\n    \n    # Step 3: Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Step 4: Select the top n largest products\n    largest_products = products[:n]\n    \n    # Step 5: Return the result\n    return largest_products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b\n\n# Test the function\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If the number is 0, the left-most unset bit is the first bit\n    if n == 0:\n        return 1\n    \n    # Initialize a variable to track the position of the bit\n    position = 0\n    \n    # Iterate through the bits of the number\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0  # or 1, depending on how you want to handle n < 1\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Test assertions\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, sub_keys, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {sub_keys[i]: values[i]}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n == 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    \n    # Calculate the sum of the recursive calls\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # Determine the maximum value\n    result = max(n, sum_parts)\n    \n    # Store the result in the memoization dictionary\n    memo[n] = result\n    \n    return result\n\n# Test assertions\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    # Convert the tuple to a set to remove duplicates\n    unique_elements = set(input_tuple)\n    # Compare the length of the set with the original tuple\n    return len(unique_elements) == len(input_tuple)"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if not s:\n        return \"Invalid\"\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, int):\n            abs_number = abs(number)\n            digit_sum = sum(int(digit) for digit in str(abs_number))\n            total_sum += digit_sum\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for t in tuples_list:\n        # Sort the tuple to handle unordered pairs\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b\n\n# Test cases\nassert minimum(1, 2) == 1\nassert minimum(-5, -4) == -5\nassert minimum(0, 0) == 0"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Step 1: Find the pivot point\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no pivot is found, return None\n    if i == -1:\n        return None\n    \n    # Step 2: Find the smallest larger digit to the right of the pivot\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Step 3: Swap the pivot with the smallest larger digit\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Sort the suffix\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Step 5: Convert back to integer and return\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out only numeric values (int and float)\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # Check if there are any numeric values\n    if not numeric_values:\n        return None  # or raise an exception if preferred\n    \n    # Return the minimum value from the numeric values\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n# Test cases\nassert remove_odd([1, 2, 3]) == [2]\nassert remove_odd([2, 4, 6]) == [2, 4, 6]\nassert remove_odd([10, 20, 3]) == [10, 20]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    # Step 1: Round each number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Step 2: Sum the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Step 3: Multiply the sum by the length of the list\n    result = total_sum * len(numbers)\n    \n    # Step 4: Return the result\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\n# Test the function with the provided assertions\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple):\n    # Convert each element to a string and join them with a hyphen\n    return '-'.join(map(str, input_tuple))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function with assertions\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(sublists, element):\n    count = 0\n    for sublist in sublists:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Step 2: Split the input string into year, month, and day\n    year, month, day = date_str.split('-')\n    \n    # Step 3: Reorder the components to form dd-mm-yyyy\n    new_date_format = f\"{day}-{month}-{year}\"\n    \n    # Step 5: Return the result\n    return new_date_format"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the x-coordinate of the vertex\n    h = -b / (2 * a)\n    # Calculate the y-coordinate of the vertex\n    k = a * h**2 + b * h + c\n    # Calculate the directrix\n    directrix = k - (1 / (4 * a))\n    # Return the directrix as an integer\n    return int(directrix * 100)\n\n# Assertions to test the function\nassert parabola_directrix(5, 3, 2) == -198\nassert parabola_directrix(9, 8, 4) == -2336\nassert parabola_directrix(2, 4, 6) == -130"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the first list to a set for efficient lookup\n    set1 = set(list1)\n    \n    # Iterate through the second list and check for common elements\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If no common element is found, return False\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    # Calculate the median length of the trapezium\n    median = (a + b) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([char for index, char in enumerate(s) if index % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    pair_count = {}\n    \n    for a, b in pairs:\n        sorted_pair = tuple(sorted((a, b)))\n        if sorted_pair in pair_count:\n            pair_count[sorted_pair] += 1\n        else:\n            pair_count[sorted_pair] = 1\n    \n    bidirectional_count = 0\n    for count in pair_count.values():\n        if count > 1:\n            bidirectional_count += 1\n    \n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    if not numbers:\n        return 0\n    # Convert each number to a string\n    str_numbers = [str(abs(num)) for num in numbers]\n    # Concatenate the strings\n    result_str = ''.join(str_numbers)\n    # Convert the concatenated string back to an integer\n    result = int(result_str)\n    # If the first number was negative, make the result negative\n    if numbers[0] < 0:\n        result = -result\n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Use regex to split the sentence into words, keeping track of punctuation\n    words = re.finditer(r'\\b\\w+\\b', sentence)\n    \n    for match in words:\n        word = match.group()\n        start_pos = match.start()\n        end_pos = match.end() - 1\n        \n        # Check if the word is an adverb (ends with 'ly')\n        if word.endswith('ly'):\n            return (start_pos, end_pos, word)\n    \n    # If no adverb is found, return None or an appropriate value\n    return None\n\n# Test cases\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 6, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\") == (0, 8, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 12, 'unfortunately')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area\n\n# Test the function with assertions\nassert surfacearea_cube(5) == 150\nassert surfacearea_cube(3) == 54\nassert surfacearea_cube(10) == 600"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = tuple((a * c, b * d) for (a, b), (c, d) in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [n**3 for n in numbers]\n\n# Test cases\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10, 20, 30]) == [1000, 8000, 27000]\nassert cube_nums([12, 15]) == [1728, 3375]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    # Base cases\n    perrin = [3, 0, 2]\n    \n    # Generate Perrin numbers up to n\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    # Calculate the sum of Perrin numbers up to n\n    return sum(perrin[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    # Initialize an empty list to store strings of the specified size\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the string matches the specified size\n        if len(string) == size:\n            # If it matches, add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that match the specified size\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize sum to 0\n    sum_even_factors = 0\n    \n    # Iterate over all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if the factor is even\n            if i % 2 == 0:\n                # Add the even factor to the sum\n                sum_even_factors += i\n    \n    # Return the sum of even factors\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    # Split the text into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Check each word for the presence of 'z'\n    for word in words:\n        if 'z' in word:\n            return True\n    return False\n\n# Assertions for testing\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"xyz.\") == True\nassert text_match_wordz(\"  lang  .\") == False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    # Set of month numbers that have 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    # Check if the given month is in the set\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list\n\n# Test cases\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\nassert Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1]\nassert Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']]) == ['x']"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    # Calculate the area using the formula: area = length * width\n    area = length * width\n    \n    # Return the calculated area\n    return area\n\n# Assertions to test the function\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    in_uppercase = False\n    \n    for char in s:\n        if char.isupper():\n            in_uppercase = True\n        else:\n            if in_uppercase:\n                in_uppercase = False\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]\n\n# Test assertions\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1, 2, 3], [4, 5]]) == [1, 4]\nassert Extract([[9, 8, 1], [1, 2]]) == [9, 1]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test cases\nassert upper_ctr('PYthon') == 2\nassert upper_ctr('BigData') == 2\nassert upper_ctr('program') == 0"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    def backtrack(start, path):\n        # Add the current combination to the result\n        result.append(path)\n        # Explore further combinations\n        for i in range(start, len(elements)):\n            # Include elements[i] in the current combination\n            backtrack(i + 1, path + [elements[i]])\n    \n    result = []\n    backtrack(0, [])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_ending_here = min_ending_here = max_so_far = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = arr[:]  # Initialize max_product with the elements of arr\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    \n    return max(max_product)\n\n# Test cases\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(input_tuple):\n    # Check if the input tuple has fewer than two elements\n    if len(input_tuple) < 2:\n        return ()\n    \n    # Initialize an empty list to store the sums\n    result = []\n    \n    # Iterate over the tuple, stopping before the last element\n    for i in range(len(input_tuple) - 1):\n        # Calculate the sum of the current element and the next element\n        pair_sum = input_tuple[i] + input_tuple[i + 1]\n        # Append the sum to the result list\n        result.append(pair_sum)\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if len(lst) < 2:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Normalize tuples by sorting them\n    normalized_set1 = {tuple(sorted(t)) for t in list1}\n    normalized_set2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find the intersection of the two sets\n    intersection = normalized_set1 & normalized_set2\n    \n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if not arr or not isinstance(arr, list):\n        return None\n    \n    smallest = min(arr)\n    largest = max(arr)\n    \n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    # Convert the number to its absolute value\n    number = abs(number)\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the first character and convert it back to an integer\n    return int(number_str[0])\n\n# Test cases\nassert first_digit(123) == 1\nassert first_digit(456) == 4\nassert first_digit(12) == 1\nassert first_digit(-789) == 7\nassert first_digit(0) == 0\nassert first_digit(5) == 5"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [number for number in numbers if number % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    toggled_chars = []\n    for char in s:\n        if char.isupper():\n            toggled_chars.append(char.lower())\n        elif char.islower():\n            toggled_chars.append(char.upper())\n        else:\n            toggled_chars.append(char)\n    return ''.join(toggled_chars)\n\n# Test cases\nassert toggle_string(\"Python\") == \"pYTHON\"\nassert toggle_string(\"Pangram\") == \"pANGRAM\"\nassert toggle_string(\"LIttLE\") == \"liTTle\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Determine the maximum length\n    max_len = max(len(str_num1), len(str_num2))\n    \n    # Pad the shorter number with leading zeros\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    # Initialize the sum of differences\n    total_difference = 0\n    \n    # Iterate over each digit\n    for digit1, digit2 in zip(str_num1, str_num2):\n        # Calculate the absolute difference and add to the total\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here += arr[i]\n        \n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Step 1: Combine the tuples\n    combined = tuple1 + tuple2\n    \n    # Step 2: Remove duplicates by converting to a set\n    unique_elements = set(combined)\n    \n    # Step 3: Sort the elements\n    sorted_elements = sorted(unique_elements)\n    \n    # Step 4: Convert the sorted list back to a tuple\n    result = tuple(sorted_elements)\n    \n    return result"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        current_length = len(sublist)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    from collections import Counter\n    \n    # Count the frequency of each element\n    freq = Counter(lst)\n    \n    # Total number of pairs\n    total_pairs = n * (n - 1) // 2\n    \n    # Subtract pairs with equal elements\n    for count in freq.values():\n        total_pairs -= count * (count - 1) // 2\n    \n    return total_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    # Dictionary to store the count of each number\n    count_dict = {}\n    \n    # Count occurrences of each number\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # List to store unique numbers\n    unique_nums = []\n    \n    # Collect numbers that appear only once\n    for num in nums:\n        if count_dict[num] == 1:\n            unique_nums.append(num)\n    \n    return unique_nums\n\n# Assertions to test the function\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\nassert two_unique_nums([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\nassert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area using the formula\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return surface_area\n\n# Assertions to test the function\nassert math.isclose(surfacearea_cylinder(10, 5), 942.45, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 5), 226.188, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 10), 351.848, rel_tol=0.001)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # If the sublist is empty, it is a sublist of any list\n    if sub_len == 0:\n        return True\n    \n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n    \n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find the symmetric difference\n    dissimilar_set = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a tuple and return\n    return tuple(dissimilar_set)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(data):\n    if isinstance(data, int):\n        # Base case: if it's an integer, return it if it's even\n        return (data,) if data % 2 == 0 else ()\n    elif isinstance(data, tuple):\n        # Recursive case: if it's a tuple, process each element\n        result = tuple(extract_even(item) for item in data)\n        # Flatten the result to remove empty tuples\n        return tuple(item for sublist in result for item in (sublist if isinstance(sublist, tuple) else (sublist,)))\n    else:\n        # If it's neither an int nor a tuple, return an empty tuple (shouldn't happen with given constraints)\n        return ()\n\n# Test assertions\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the base area\n    A_base = base_edge ** 2\n    \n    # Calculate the slant height\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the area of one triangular face\n    A_triangle = 0.5 * base_edge * slant_height\n    \n    # Calculate the total lateral surface area\n    A_lateral = 4 * A_triangle\n    \n    # Calculate the total surface area\n    A_total = A_base + A_lateral\n    \n    return A_total"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0\n\n# Test the function\nassert my_dict({10: 0}) == False\nassert my_dict({11: 0}) == False\nassert my_dict({}) == True"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Edge case: if n is 0 or equal to the length of the list, return the list as is\n    if n == 0 or n >= len(arr):\n        return arr\n    \n    # Split the list into two parts\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Concatenate the second part with the first part\n    return second_part + first_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58, 44, 56]) == (58, 44, 56)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    # Calculate the starting point\n    n = math.ceil(math.sqrt(start))\n    # Calculate the ending point\n    m = math.floor(math.sqrt(end))\n    \n    # Generate the list of perfect squares\n    squares = [i**2 for i in range(n, m + 1)]\n    \n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    # Convert polar to rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Calculate magnitude and angle\n    magnitude = math.sqrt(x**2 + y**2)\n    angle = math.atan2(y, x)\n    \n    # Create complex number representation\n    complex_representation = complex(x, y)\n    \n    # Return the result as a tuple\n    return (magnitude, angle), complex_representation"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    # Check if the list has at least two elements\n    if len(lst) < 2:\n        return lst\n    \n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    \n    return lst\n\n# Test cases\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        product = comb(n, k) * comb(n, k + 1)\n        total_sum += product\n    return total_sum\n\n# Test cases\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None  # or raise an exception if preferred"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    # Step 1: Input Validation\n    if len(binary1) != len(binary2):\n        return None\n    \n    # Step 2: Count Mismatches\n    mismatches = 0\n    count1_1 = count1_0 = count2_1 = count2_0 = 0\n    \n    for b1, b2 in zip(binary1, binary2):\n        if b1 != b2:\n            mismatches += 1\n        if b1 == '1':\n            count1_1 += 1\n        else:\n            count1_0 += 1\n        if b2 == '1':\n            count2_1 += 1\n        else:\n            count2_0 += 1\n    \n    # Step 3: Check Feasibility\n    if count1_1 != count2_1 or count1_0 != count2_0:\n        return None\n    \n    # Step 4: Calculate Minimum Swaps\n    # Each swap resolves two mismatches\n    min_swaps = mismatches // 2\n    \n    # Step 5: Return Result\n    return min_swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Ensure arr1 is the smaller array\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    n, m = len(arr1), len(arr2)\n    low, high = 0, min(k, n)\n    \n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        \n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == n else arr1[partition1]\n        \n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == m else arr2[partition2]\n        \n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    \n    raise ValueError(\"Input arrays are not valid for the given k\")"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n\n\n# Assertions to verify the function works correctly\nassert sum_average(10) == (55, 5.5)\nassert sum_average(15) == (120, 8.0)\nassert sum_average(20) == (210, 10.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\nassert is_Even(0) == True\nassert is_Even(-2) == True\nassert is_Even(-1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    \n    # Start the sieving process\n    index = 1  # Start from the second element (index 1)\n    while index < len(numbers):\n        # Current ludic number\n        current_ludic = numbers[index]\n        \n        # Remove every current_ludic-th number from the list\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current_ludic != 0]\n        \n        # Move to the next index\n        index += 1\n    \n    return numbers\n\n# Test cases\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nassert prime_num(13) == True\nassert prime_num(7) == True\nassert prime_num(-1010) == False"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(60) == 1.0471975511965976\nassert radian_degree(120) == 2.0943951023931953"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matching_substring = match.group()\n        return (matching_substring, start_index, end_index)\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the last element of the previous row at the start of the current row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first element of the nth row\n    return bell[n][0]\n\n# Assertions to test the function\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Check if k is within the valid range\n    if k < 0 or k >= len(lst):\n        return lst  # Return the list unchanged if k is out of bounds\n    \n    # Return a new list with the k'th element removed\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Initialize the maximum value with the first element of the nth column\n    max_value = matrix[0][n]\n    \n    # Iterate over each row in the matrix\n    for row in matrix:\n        # Update the maximum value if the current element is greater\n        if row[n] > max_value:\n            max_value = row[n]\n    \n    return max_value\n\n# Test cases\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        for num in tup:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    # Ensure both inputs are tuples and have the same length\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Initialize a list to store the results\n    result = []\n    \n    # Perform element-wise modulo operation\n    for a, b in zip(tuple1, tuple2):\n        result.append(a % b)\n    \n    # Convert the result list to a tuple and return\n    return tuple(result)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in the second list\")\n        result.append(a / b)\n    \n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    non_numeric = []\n    numeric = []\n    \n    for char in s:\n        if char.isdigit():\n            numeric.append(char)\n        else:\n            non_numeric.append(char)\n    \n    return ''.join(non_numeric) + ''.join(numeric)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    if n == 0:\n        return -1  # Undefined for empty arrays\n\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    # Ensure arr1 is the smaller array\n    if arr1[n - 1] < arr2[0]:\n        return (arr1[n - 1] + arr2[0]) / 2\n    if arr2[n - 1] < arr1[0]:\n        return (arr2[n - 1] + arr1[0]) / 2\n\n    low, high = 0, n\n\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = n - partition1\n\n        max1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        min1 = float('inf') if partition1 == n else arr1[partition1]\n\n        max2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        min2 = float('inf') if partition2 == n else arr2[partition2]\n\n        if max1 <= min2 and max2 <= min1:\n            if n % 2 == 0:\n                return (max(max1, max2) + min(min1, min2)) / 2\n            else:\n                return max(max1, max2)\n        elif max1 > min2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n\n    raise ValueError(\"Input arrays are not sorted or have different sizes\")"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [x ** n for x in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\n# Test the function\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\""}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return (radius ** 2) / 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')\n\n# Test cases\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    # Initialize an empty list to store the modified characters\n    modified_chars = []\n    \n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is a whitespace\n        if char == ' ':\n            # Replace whitespace with underscore\n            modified_chars.append('_')\n        # Check if the character is an underscore\n        elif char == '_':\n            # Replace underscore with whitespace\n            modified_chars.append(' ')\n        else:\n            # If neither, keep the character as is\n            modified_chars.append(char)\n    \n    # Join the list of characters into a final string\n    return ''.join(modified_chars)\n\n# Assertions for testing\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    # List to store non-zero elements\n    non_zero_elements = []\n    # Counter for zeroes\n    zero_count = 0\n    \n    # Iterate through the list\n    for num in lst:\n        if num != 0:\n            non_zero_elements.append(num)\n        else:\n            zero_count += 1\n    \n    # Add zeroes to the end of the non-zero elements list\n    non_zero_elements.extend([0] * zero_count)\n    \n    return non_zero_elements"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\n# Test cases\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47\nassert pair_xor_Sum([7, 3, 5], 3) == 12\nassert pair_xor_Sum([7, 3], 2) == 4"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1  # left = 2*i + 1\n    right = 2 * i + 2  # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    # See if right child of root exists and is greater than root\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\n# Test the function with assertions\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(100, 100) == True\nassert noprofit_noloss(2000, 5000) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    # Calculate the wind chill index using the given formula\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    # Round the result to the nearest integer\n    return round(wci)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 20) == 19\nassert wind_chill(10, 8) == 6"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = []\n    paren_count = 0\n    for char in s:\n        if char == '(':\n            paren_count += 1\n        elif char == ')':\n            paren_count -= 1\n        elif paren_count == 0:\n            result.append(char)\n    return ''.join(result)\n\n# Assertions for testing\nassert remove_parenthesis(\"python (chrome)\") == \"python \"\nassert remove_parenthesis(\"string(.abc)\") == \"string\"\nassert remove_parenthesis(\"alpha(num)\") == \"alpha\""}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n# Test the function with the given assertions\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Step 1: Trim whitespace\n    s = s.strip()\n    \n    # Step 2: Check length\n    if len(s) < 3:\n        return False\n    \n    # Step 3 and 4: Iterate through the string and check for 'z'\n    for i in range(1, len(s) - 1):\n        if s[i] == 'z':\n            return True\n    \n    # Step 5: Return False if no 'z' is found in the middle\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if not isinstance(k, int) or k < 0 or k > len(arr):\n        raise ValueError(\"k should be a non-negative integer within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    # Convert the dictionary to a single-element tuple and concatenate\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    if N == 0:\n        return 0\n    \n    # Initialize the dp table\n    dp = [[0] * N for _ in range(N)]\n    \n    # Base case\n    dp[0][0] = matrix[0][0]\n    \n    # Fill the first row (can only come from the left)\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # Fill the first column (can only come from above)\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    # Calculate the maximum average\n    max_total_cost = dp[N-1][N-1]\n    max_average = max_total_cost / (2 * N - 1)\n    \n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Step 1: Calculate the base raised to the power\n    result = base ** power\n    \n    # Step 2: Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Step 3: Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Step 4: Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    # Step 5: Return the sum of the digits\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(input_tuple):\n    # Check if the input tuple has less than two elements\n    if len(input_tuple) < 2:\n        return ()\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the input tuple up to the second-to-last element\n    for i in range(len(input_tuple) - 1):\n        # Multiply the current element with the next element\n        product = input_tuple[i] * input_tuple[i + 1]\n        # Append the product to the result list\n        result.append(product)\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n\n# Test cases\nassert lateralsurface_cone(5, 12) == 204.20352248333654\nassert lateralsurface_cone(10, 15) == 566.3586699569488\nassert lateralsurface_cone(19, 17) == 1521.8090132193388"}
{"task_id": "Mbpp/732", "solution": "import re\n\ndef replace_specialchar(input_string):\n    # Use regular expression to replace spaces, commas, and dots with a colon\n    return re.sub(r'[ ,.]', ':', input_string)"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        # Calculate the contribution of arr[i]\n        contribution = arr[i] * (i + 1) * (n - i)\n        total_sum += contribution\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Step 1: Determine the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has less than 3 bits, toggling middle bits is not applicable\n    if num_bits < 3:\n        return n\n    \n    # Step 2: Create a mask with 1s in all positions except the first and last bit\n    # Example: For a 5-bit number, the mask would be 01110 (binary)\n    mask = (1 << (num_bits - 1)) - 1  # Create a mask with all 1s\n    mask ^= 1  # Clear the last bit\n    mask ^= (1 << (num_bits - 1))  # Clear the first bit\n    \n    # Step 3: Toggle the middle bits using XOR\n    result = n ^ mask\n    \n    # Step 4: Return the result\n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    # Use regex to check if the string starts with a vowel\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    k = 1\n    while True:\n        # Calculate the k-th triangular number\n        T_k = k * (k + 1) // 2\n        # Calculate the number of digits in T_k\n        num_digits = math.floor(math.log10(T_k)) + 1\n        # Check if the number of digits is equal to n\n        if num_digits == n:\n            return k\n        k += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tpl):\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Iterate over the tuple in steps of 2\n    for i in range(0, len(tpl), 2):\n        # Add the adjacent pair to the dictionary\n        result[tpl[i]] = tpl[i + 1]\n    \n    # Return the resulting dictionary\n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    # Calculate the surface area of a regular tetrahedron\n    return math.sqrt(3) * a**2\n\n# Assertions to test the function\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    if not lst:\n        return lst\n    n = len(lst)\n    k = k % n  # Effective rotations\n    return lst[-k:] + lst[:-k]\n\n# Test cases\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    for element in input_tuple:\n        if element is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    # Convert angle from degrees to radians\n    angle_in_radians = math.radians(angle)\n    # Calculate the area of the sector\n    return 0.5 * radius ** 2 * angle_in_radians\n\n# Test the function\nassert math.isclose(sector_area(4, 45), 6.283185307179586, rel_tol=0.001)\nassert math.isclose(sector_area(9, 45), 31.808625617596654, rel_tol=0.001)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for i, char in enumerate(s):\n        if char.isupper() and i != 0:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Assertions for testing\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(string_list):\n    # Convert each string in the list to an integer\n    int_list = [int(num) for num in string_list]\n    # Sort the list of integers\n    int_list.sort()\n    # Return the sorted list\n    return int_list"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    # Iterate over each parent node\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # Check if left child exists and is greater than the parent\n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        # Check if right child exists and is greater than the parent\n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    j0, j1 = 0, 1\n    \n    # Compute Jacobsthal numbers iteratively\n    for i in range(2, n + 1):\n        jn = j1 + 2 * j0\n        j0, j1 = j1, jn\n    \n    return j1\n\n# Test cases\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of each tuple (the numeric value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    # Determine the length of the shortest list\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Initialize a list to store common elements\n    common_elements = []\n    \n    # Iterate through the lists up to the length of the shortest list\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # Add the common element to the result list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # If there are fewer than two unique numbers, return None\n    if len(unique_numbers) < 2:\n        return None\n    \n    # Sort the unique numbers\n    sorted_numbers = sorted(unique_numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]\n\n# Test assertions\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\nassert second_smallest([2, 2]) == None\nassert second_smallest([2, 2, 2]) == None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    # Initialize a set for fast lookup and a counter for pairs\n    string_set = set(string_list)\n    count = 0\n    \n    # Iterate through each string in the list\n    for string in string_list:\n        # Compute the reverse of the current string\n        reverse_string = string[::-1]\n        \n        # Check if the reverse string is in the set\n        if reverse_string in string_set:\n            # Increment the count for a found pair\n            count += 1\n            # Remove both the string and its reverse from the set\n            string_set.remove(string)\n            string_set.remove(reverse_string)\n    \n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    # Check if there is exactly one decimal point\n    if s.count('.') != 1:\n        return False\n    \n    # Split the string into two parts\n    integer_part, decimal_part = s.split('.')\n    \n    # Check if the integer part is composed only of digits\n    if not integer_part.isdigit():\n        return False\n    \n    # Check if the decimal part has exactly two digits\n    if len(decimal_part) != 2 or not decimal_part.isdigit():\n        return False\n    \n    return True"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    if n < 2:\n        return None  # Not enough elements to form a pair\n    \n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array and find the minimum difference\n    for i in range(n - 1):\n        diff = sorted_arr[i + 1] - sorted_arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s: str) -> int:\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count"}
{"task_id": "Mbpp/765", "solution": "def is_power_of_two(n):\n    return (n & (n - 1)) == 0 and n != 0\n\ndef nth_polite_number(n):\n    count = 0\n    num = 1\n    while count < n:\n        if not is_power_of_two(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Example assertions\nassert nth_polite_number(7) == 11\nassert nth_polite_number(4) == 7\nassert nth_polite_number(9) == 13"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Iterate through the list, stopping at the second-to-last element\n    for i in range(len(lst) - 1):\n        # Create a tuple of the current element and the next element\n        pair = (lst[i], lst[i + 1])\n        # Append the tuple to the pairs list\n        pairs.append(pair)\n    \n    # Return the list of pairs\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    frequency = {}\n    count = 0\n    \n    for number in numbers:\n        complement = target_sum - number\n        if complement in frequency:\n            count += frequency[complement]\n        \n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    diff1 = [item for item in list1 if item not in list2]\n    diff2 = [item for item in list2 if item not in list1]\n    return diff1 + diff2\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 15, 20, 30]\nassert Diff([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5, 6, 7]\nassert Diff([1, 2, 3], [6, 7, 1]) == [2, 3, 6, 7]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total_sum += odd_number ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Dictionary to hold matching pairs of brackets\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in matching_bracket.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in matching_bracket:\n            # Check if the stack is not empty and the top of the stack is the matching opening bracket\n            if stack and stack[-1] == matching_bracket[char]:\n                stack.pop()  # Pop the stack\n            else:\n                return False  # Unbalanced if no matching opening bracket\n    \n    # If the stack is empty, all brackets were matched correctly\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    # Return the result\n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    start_index = main_string.find(substring)\n    if start_index != -1:\n        end_index = start_index + len(substring) - 1\n        return (substring, start_index, end_index)\n    return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    # Iterate over the list, starting from index 1 and stepping by 2\n    for i in range(1, len(lst), 2):\n        # Check if the element at the current odd index is not odd\n        if lst[i] % 2 == 0:\n            return False\n    # If all elements at odd indices are odd, return True\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Generate all possible pairs of tuples from the input list\n    for tuple1, tuple2 in combinations(tuple_list, 2):\n        # Calculate the sum of corresponding elements from the two tuples\n        summed_tuple = tuple(a + b for a, b in zip(tuple1, tuple2))\n        # Append the resulting tuple to the result list\n        result.append(summed_tuple)\n    \n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    if n < 1:\n        return False  # Handle edge case for non-positive integers\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible odd lengths\n    for length in range(1, n + 1, 2):\n        # Iterate over all possible starting points for this length\n        for start in range(n - length + 1):\n            # Calculate the sum of the subarray from start to start + length\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize the RGB values\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n    \n    # Calculate the maximum and minimum values\n    max_val = max(r_norm, g_norm, b_norm)\n    min_val = min(r_norm, g_norm, b_norm)\n    \n    # Calculate the value (V)\n    v = max_val * 100\n    \n    # Calculate the saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = ((max_val - min_val) / max_val) * 100\n    \n    # Calculate the hue (H)\n    if max_val == min_val:\n        h = 0\n    else:\n        if max_val == r_norm:\n            h = 60 * ((g_norm - b_norm) / (max_val - min_val))\n        elif max_val == g_norm:\n            h = 60 * (2.0 + (b_norm - r_norm) / (max_val - min_val))\n        else:\n            h = 60 * (4.0 + (r_norm - g_norm) / (max_val - min_val))\n        \n        if h < 0:\n            h += 360\n    \n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even * first_odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Step 1: Validate input (assuming input is always valid for this task)\n    \n    # Step 2: Remove parentheses\n    numbers_str = tuple_str[1:-1]\n    \n    # Step 3: Split the string by commas\n    numbers_list = numbers_str.split(', ')\n    \n    # Step 4: Convert each string number to an integer\n    numbers_int = [int(num) for num in numbers_list]\n    \n    # Step 5: Convert the list of integers to a tuple\n    result_tuple = tuple(numbers_int)\n    \n    # Step 6: Return the tuple\n    return result_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    # Define the pattern to match 'a' followed by three 'b's\n    pattern = r'abbb'\n    # Use re.search to find the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1  # Default value if target is not found\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid  # Update result to the current mid\n            left = mid + 1  # Move right to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the range from l to r (inclusive)\n    for num in range(l, r + 1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n    \n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n\n# Test cases\nassert left_rotate(16, 2) == 64\nassert left_rotate(10, 2) == 40\nassert left_rotate(99, 3) == 792\nassert left_rotate(0b0001, 3) == 0b1000\nassert left_rotate(0b0101, 3) == 0b101000\nassert left_rotate(0b11101, 3) == 0b11101000"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 1, 3]) == 1\nassert first_odd([8, 9, 1]) == 9\nassert first_odd([2, 4, 6]) == None\nassert first_odd([]) == None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True"}
