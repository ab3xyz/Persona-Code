{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    # Use heapq to find the n largest numbers\n    largest_numbers = heapq.nlargest(n, numbers)\n    # Return the numbers sorted in descending order\n    return sorted(largest_numbers, reverse=True)\n\n# Test cases\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75]\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    # XOR the two numbers to find differing bits\n    xor_result = a ^ b\n    # Check if the result is a power of two (only one bit set)\n    return (xor_result != 0) and (xor_result & (xor_result - 1)) == 0\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(15, 8) == False\nassert differ_At_One_Bit_Pos(2, 4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x ** 2 for x in nums]\n\n# Test cases\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10, 20, 30]) == [100, 400, 900]\nassert square_nums([12, 15]) == [144, 225]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return s\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n\n# Test cases\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"abcda\", \"a\") == \"bcd\"\nassert remove_Occ(\"PHP\", \"P\") == \"H\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))\n\n# Test cases\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume\n\n# Test the function with the given assertions\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    # Use regular expression to check for sequences of lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)+$'\n    return bool(re.match(pattern, s))\n\n# Test cases\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"aab_Abbbc\") == False\nassert text_lowercase_underscore(\"Aaab_abbbc\") == False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test cases\nassert square_perimeter(10) == 40\nassert square_perimeter(5) == 20\nassert square_perimeter(4) == 16"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    # Create a set of characters from the second string for quick lookup\n    chars_to_remove = set(s2)\n    # Use a list comprehension to filter out characters present in the second string\n    result = [char for char in s1 if char not in chars_to_remove]\n    # Join the list back into a string and return\n    return ''.join(result)\n\n# Test cases\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 4]) == True\nassert test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        if woodall_number > n:\n            return False\n        k += 1\n\n# Test cases\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Test the function with the given assertions\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert each digit to a string to facilitate sorting\n    digits_str = list(map(str, digits))\n    # Sort the digits in descending order\n    digits_str.sort(reverse=True)\n    # Join the sorted digits to form the largest number\n    max_num = ''.join(digits_str)\n    # Convert the result back to an integer\n    return int(max_num)\n\n# Test cases\nassert find_Max_Num([1, 2, 3]) == 321\nassert find_Max_Num([4, 5, 6, 1]) == 6541\nassert find_Max_Num([1, 2, 3, 9]) == 9321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def nth_octagonal_number(n):\n    return n * (3 * n - 2)\n\n# Test cases\nassert nth_octagonal_number(5) == 65\nassert nth_octagonal_number(10) == 280\nassert nth_octagonal_number(15) == 645"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for start in range(n):\n        digit_sum = 0\n        for end in range(start, n):\n            digit_sum += int(s[end])\n            if digit_sum == (end - start + 1):\n                count += 1\n                \n    return count\n\n# Test cases\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n# Test cases\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Test the function with the given assertions\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\n# Test cases\nassert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21\nassert recursive_list_sum([7, 10, [15, 14], [19, 41]]) == 106\nassert recursive_list_sum([10, 20, [30, 40], [50, 60]]) == 210"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n# Test cases\nassert pos_count([1, -2, 3, -4]) == 2\nassert pos_count([3, 4, 5, -1]) == 3\nassert pos_count([1, 2, 3, 4]) == 4"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test cases\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    increasing = decreasing = True\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False\n        if array[i] < array[i - 1]:\n            increasing = False\n    return increasing or decreasing\n\n# Test cases\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    sub_len = len(sublst)\n    for i in range(len(lst) - sub_len + 1):\n        if lst[i:i + sub_len] == sublst:\n            return True\n    return False\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([2,4,3,5,7],[4,3]) == True\nassert is_sublist([2,4,3,5,7],[1,6]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        return max(1, gap)\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n\n# Test cases\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # A number can be expressed as the difference of two squares if it is not of the form 4k + 2\n    return n % 4 != 2\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n\n    str_to_pat = {}\n    pat_to_str = {}\n\n    for s, p in zip(strings, patterns):\n        if s in str_to_pat:\n            if str_to_pat[s] != p:\n                return False\n        else:\n            str_to_pat[s] = p\n\n        if p in pat_to_str:\n            if pat_to_str[p] != s:\n                return False\n        else:\n            pat_to_str[p] = s\n\n    return True\n\n# Test cases\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == False\nassert is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result\n\n# Test cases\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0\n\n# Test the function\nassert is_Diff(12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# Test cases\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * radius**3\n\n# Test cases\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char\n\n# Test the function\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"w\"\nassert get_Char(\"ab\") == \"n\""}
{"task_id": "Mbpp/84", "solution": "def newman_conway_sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n    sequence[2] = 1\n    for i in range(3, n + 1):\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n    return sequence[n]\n\n# Test cases\nassert newman_conway_sequence(10) == 6\nassert newman_conway_sequence(2) == 1\nassert newman_conway_sequence(3) == 2"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    # Surface area of a sphere formula: 4 * \u03c0 * r^2\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area\n\n# Test cases\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Test cases\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()  # Start with a copy of the first dictionary\n    merged_dict.update(dict2)   # Update with the second dictionary\n    merged_dict.update(dict3)   # Update with the third dictionary\n    return merged_dict\n\n# Test cases\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" }, { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" }, {\"L\": \"lavender\", \"B\": \"Blue\"}) == {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, {\"L\": \"lavender\", \"B\": \"Blue\"}, { \"G\": \"Green\", \"W\": \"White\" }) == {'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\nassert len_log([\"a\", \"ab\", \"abc\"]) == 3\nassert len_log([\"small\", \"big\", \"tall\"]) == 5"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    num_str = str(number)\n    if len(num_str) < 3:\n        return False\n    \n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    if first_digit == second_digit:\n        return False\n    \n    for i in range(2, len(num_str)):\n        if i % 2 == 0 and num_str[i] != first_digit:\n            return False\n        elif i % 2 == 1 and num_str[i] != second_digit:\n            return False\n    \n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n\n# Test cases\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 5) == 3125"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the minimum value with the second value of the first tuple\n    min_value = tuples_list[0][1]\n    # Initialize the result with the first value of the first tuple\n    result = tuples_list[0][0]\n    \n    # Iterate through the list of tuples\n    for item in tuples_list:\n        # If the second value of the current tuple is smaller than the current minimum\n        if item[1] < min_value:\n            # Update the minimum value\n            min_value = item[1]\n            # Update the result with the first value of the current tuple\n            result = item[0]\n    \n    return result\n\n# Test cases\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n\n# Test the function\nassert Find_Min_Length([[1], [1, 2]]) == 1\nassert Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2\nassert Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]]) == 3"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency_dict = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "from functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length\n\n# Test the function\nimport math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str\n\n# Test the function\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def create_palindrome(left_half, is_odd_length):\n        if is_odd_length:\n            return int(left_half + left_half[-2::-1])\n        else:\n            return int(left_half + left_half[::-1])\n\n    n_str = str(n)\n    length = len(n_str)\n    is_odd_length = length % 2 != 0\n    left_half = n_str[:(length + 1) // 2]\n\n    candidate = create_palindrome(left_half, is_odd_length)\n    if candidate > n:\n        return candidate\n\n    left_half = str(int(left_half) + 1)\n    return create_palindrome(left_half, is_odd_length)\n\n# Test cases\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(1221) == 1331\nassert next_smallest_palindrome(120) == 121"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]\n\n# Test the function with the provided assertions\nassert kth_element([12, 3, 5, 7, 19], 2) == 3\nassert kth_element([17, 24, 8, 23], 3) == 8\nassert kth_element([16, 21, 25, 36, 4], 4) == 36"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    if m == 0:\n        return 1\n    \n    # Create a 2D array to store results of subproblems\n    eulerian = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    eulerian[0][0] = 1\n    \n    # Fill the table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(0, min(i, m + 1)):\n            eulerian[i][j] = (i - j) * eulerian[i - 1][j - 1] + (j + 1) * eulerian[i - 1][j]\n    \n    return eulerian[n][m]\n\n# Test cases\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(boolean_list):\n    return sum(1 for item in boolean_list if item is True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\n# Test cases\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine all three lists into one\n    combined_list = list1 + list2 + list3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    def is_odd(binary_str):\n        # Convert binary string to integer and check if it's odd\n        return int(binary_str, 2) % 2 != 0\n\n    count = 0\n    length = len(binary_string)\n    \n    for i in range(rotations):\n        # Rotate the binary string\n        rotated_string = binary_string[i:] + binary_string[:i]\n        if is_odd(rotated_string):\n            count += 1\n\n    return count\n\n# Test cases\nassert odd_Equivalent(\"011001\", 6) == 3\nassert odd_Equivalent(\"11011\", 5) == 4\nassert odd_Equivalent(\"1010\", 4) == 2"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n\n    # Start with the first list's elements as the initial set of common elements\n    common_elements = set(nested_lists[0])\n\n    # Intersect with each subsequent list to find common elements\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)\n\n# Test cases\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) == set([5, 23])\nassert set(common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])) == set([4])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"1\") == True\nassert check_integer(\"12345\") == True"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dicts):\n    return all(len(d) == 0 for d in dicts)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\n# Test cases\nassert tuple_to_int((1, 2, 3)) == 123\nassert tuple_to_int((4, 5, 6)) == 456\nassert tuple_to_int((5, 6, 7)) == 567"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(list_of_lists):\n    result = []\n    for sublist in list_of_lists:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)\n        result.append(converted_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split(' ')\n\n# Test cases\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"lists tuples strings\") == ['lists', 'tuples', 'strings']\nassert string_to_list(\"write a program\") == ['write', 'a', 'program']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]\n\n# Test the function\nassert search([1, 1, 2, 2, 3]) == 3\nassert search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8\nassert search([1, 2, 2, 3, 3, 4, 4]) == 1"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for t in tuples_list:\n        product = abs(t[0] * t[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test cases\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(10, 20), (15, 2), (5, 10)]) == 200\nassert max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit and sum_of_divisors(partner) == num:\n            amicable_sum += num\n\n    return amicable_sum\n\n# Test cases\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2 + 1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(2j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    current_diff = 0\n\n    for char in binary_string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        if current_diff < 0:\n            current_diff = 0\n\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff\n\n# Test cases\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)\n\n# Test the function\nassert sum_of_common_divisors(10, 15) == 6\nassert sum_of_common_divisors(100, 150) == 93\nassert sum_of_common_divisors(4, 6) == 3"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    result = 0\n    for _ in range(abs(b)):\n        result += a\n    if b < 0:\n        result = -result\n    return result\n\n# Test cases\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check each row sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check each column sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the main diagonal sum\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the secondary diagonal sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n\n# Test cases\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_freq = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_freq:\n            return item\n\n# Test cases\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18]) == 8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10]) == 20"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n\n    return ''.join(s_list)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n\n\n# Test the function with the given assertions\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes\n\n# Test the function\nimport math\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            if n % 2 == 0:\n                n //= 2\n            else:\n                return False\n    return True\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Assertions to verify the correctness of the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    result_set = set()\n    for sublist in list_of_lists:\n        for item in sublist:\n            result_set.add(item)\n    return result_set\n\n# Test assertions\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        sub_arr[:k] = reversed(sub_arr[:k])\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index != size - 1:\n            flip(arr, max_index + 1)\n            flip(arr, size)\n    return arr\n\n# Test cases\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Test cases\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) == 4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) == 5"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test the function\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6])) == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1], )) == 1"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr or len(arr) < 2:\n        return 0\n    \n    max_element = max(arr)\n    min_element = min(arr)\n    \n    return max_element - min_element\n\n# Test cases\nassert max_Abs_Diff((2, 1, 5, 3)) == 4\nassert max_Abs_Diff((9, 3, 2, 5, 1)) == 8\nassert max_Abs_Diff((3, 2, 1)) == 2"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return aa, 1, 0\n        gcd, x1, y1 = extended_gcd(bb, aa % bb)\n        x = y1\n        y = x1 - (aa // bb) * y1\n        return gcd, x, y\n\n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    return [element for element in original_list if element not in elements_to_remove]\n\n# Test cases\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\n# Test cases\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\n# Test cases\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count\n\n# Test cases\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    \n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Pairs that XOR to an even number are either both even or both odd\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count\n\n# Test cases\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid indices\")\n    return sum(numbers[start_index:end_index + 1])\n\n# Test cases\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n    \n    return perimeter\n\n# Test the function with the given examples\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')\n\n# Test cases\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Function to find the first occurrence of the element\n    def first_occurrence(arr, low, high, element, n):\n        if high >= low:\n            mid = (low + high) // 2\n            if (mid == 0 or element > arr[mid - 1]) and arr[mid] == element:\n                return mid\n            elif element > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, element, n)\n            else:\n                return first_occurrence(arr, low, mid - 1, element, n)\n        return -1\n\n    # Find the first occurrence of the element\n    first_index = first_occurrence(arr, 0, n - 1, element, n)\n\n    # If the element is not present, return False\n    if first_index == -1:\n        return False\n\n    # Check if the element is the majority element\n    if (first_index + n // 2) < n and arr[first_index + n // 2] == element:\n        return True\n    else:\n        return False\n\n# Test cases\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n    \n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n    \n    return min_val\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(19, 15, 18) == 15\nassert min_of_three(-10, -20, -30) == -30"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 2, 4, 5, 6, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(' ', char)\n\n# Test cases\nassert replace_blank(\"hello people\", '@') == \"hello@people\"\nassert replace_blank(\"python program language\", '$') == \"python$program$language\"\nassert replace_blank(\"blank space\", \"-\") == \"blank-space\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test cases\nassert math.isclose(lateralsurface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsurface_cylinder(4, 5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsurface_cylinder(4, 10), 251.32000000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    mask = 0\n    bit_position = 0\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            mask |= (1 << bit_position)\n        bit_position += 1\n    return n | mask\n\n# Test cases\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    for t in tuples_list:\n        sorted_tuple = tuple(sorted(t))\n        if sorted_tuple in occurrences:\n            occurrences[sorted_tuple] += 1\n        else:\n            occurrences[sorted_tuple] = 1\n    return occurrences\n\n# Test cases\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_num in range(current * 2, m + 1):\n            total += count_sequences(next_num, length + 1)\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    \n    return total_sequences\n\n# Test cases\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    return list1[:-1] + list2\n\n# Test cases\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert replace_list([\"red\", \"blue\", \"green\"], [\"yellow\"]) == [\"red\", \"blue\", \"yellow\"]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)\n\n# Test cases\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"language\") == 8\nassert count_charac(\"words\") == 5"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root\n\n# Test the function\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the increasing subsequence sum array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Fill the decreasing subsequence sum array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum\n\n# Test cases\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3, 14, 16, 21, 23, 29, 30]) == 138"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    return dp[0][n - 1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert both arrays to sets to remove duplicates and allow for set operations\n    set1 = set(arr1)\n    set2 = set(arr2)\n    \n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the result back to a sorted list\n    return sorted(list(intersection))\n\n# Test cases\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])) == set([1, 2, 8, 9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])) == set([3, 5, 7, 9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])) == set([10])"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count\n\n# Test cases\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test cases\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'], 'program') == ['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'], 'laugh') == ['laugh', 'happy', 'laugh', 'sad']"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    # Convert the complex number to polar coordinates\n    r, theta = cmath.polar(complex(complex_number))\n    return (r, theta)\n\n# Test cases\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0, 0.0)\nassert convert(5) == (5.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([1, 2, 3]) == 3\nassert count_integer([1, 1.2, 4, 5.1]) == 2"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(elements, n):\n    return list(combinations_with_replacement(elements, n))\n\n# Test cases\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n\n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n\n    # Implement the Sieve of Eratosthenes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n\n    # Count the number of primes\n    return sum(is_prime)\n\n# Test cases\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)\n\n# Assertions to test the function\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(15, 17) == (17, 15)\nassert swap_numbers(100, 200) == (200, 100)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        max_tuple = (max(t1[0], t2[0]), max(t1[1], t2[1]))\n        result.append(max_tuple)\n    return tuple(result)\n\n# Test cases\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nsw_number(k):\n        if k == 0 or k == 1:\n            return 1\n        nsw = [1, 1]\n        for i in range(2, k + 1):\n            nsw.append(2 * nsw[i - 1] + nsw[i - 2])\n        return nsw[k]\n\n    count = 0\n    k = 0\n    while count < n:\n        nsw_num = nsw_number(k)\n        if is_prime(nsw_num):\n            count += 1\n        k += 1\n\n    return nsw_num\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length.\")\n    \n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in tuple elements.\")\n        result.append(a // b)\n    \n    return tuple(result)\n\n# Test cases\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    if L > len(lst):\n        raise ValueError(\"L is greater than the length of the list\")\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)\n\n# Test cases\nassert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'], 2) == (['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4) == (['p', 'y', 't', 'h'], ['o', 'n'])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Test cases\nassert dog_age(12) == 61\nassert dog_age(15) == 73\nassert dog_age(24) == 109"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for index, element in enumerate(lst):\n        result[index % n].append(element)\n    return result\n\n# Test cases\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\nassert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2\n\n# Test the function with the given assertions\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(9) == 324\nassert lateralsurface_cube(10) == 400"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Test cases\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    # Return the ASCII value using the ord() function\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 == 0)\n\n# Test cases\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    \n    return total_sum\n\n# Test the function with the given assertions\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\n# Test cases\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\n# Test cases\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def binomial_coefficient(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        k = min(k, n - k)\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n\n    sum_even_index_coeffs = 0\n    for k in range(0, n + 1, 2):\n        sum_even_index_coeffs += binomial_coefficient(n, k)\n    \n    return sum_even_index_coeffs\n\n# Test cases\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height\n\n# Test cases\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 10), 502.64000000000004, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n    \n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n    \n    return filtered_dict\n\n# Test the function with the provided examples\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((2, 9, (5, 7), 11)) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8)) == 4"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n\n\n# Test the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)\n\n# Test cases\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n\n# Test the function\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\nassert sub_list([1, 2], [3, 4]) == [-2, -2]\nassert sub_list([90, 120], [50, 70]) == [40, 50]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True\n\n# Test the function\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([1, 2, 3, 4], 7) == False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green') == True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    \n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)\n\n# Test the function with the given assertions\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"dc\") == False\nassert text_match_two_three(\"abbbba\") == True"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the sum of the array\n    array_sum = sum(arr)\n\n    # Use Kadane's algorithm to find the maximum subarray sum in one array\n    max_kadane = kadane(arr)\n\n    if k == 1:\n        return max_kadane\n\n    # Find the maximum prefix sum\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    # Find the maximum suffix sum\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    # If the total sum of the array is positive, consider the contribution of the middle arrays\n    if array_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k-2) * array_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n\n# Test cases\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares\n\n# Test the function with the provided assertions\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)\n\n# Test cases\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\nassert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(heterogeneous_list):\n    # Filter out only the integers from the list\n    integers = [item for item in heterogeneous_list if isinstance(item, int)]\n    # Return the maximum integer value\n    return max(integers)\n\n# Test cases\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n    \n    # Iterate through all possible divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors\n\n# Test the function\nassert sum_div(8) == 7\nassert sum_div(12) == 16\nassert sum_div(7) == 1"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5\nassert get_Inv_Count([1, 2, 1]) == 1\nassert get_Inv_Count([1, 2, 5, 6, 1]) == 3"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(data):\n    aggregate_dict = {}\n    \n    # Aggregate the values for each name\n    for name, value in data:\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        else:\n            aggregate_dict[name] = value\n    \n    # Find the name with the maximum aggregate value\n    max_name = None\n    max_value = 0\n    for name, total in aggregate_dict.items():\n        if total > max_value:\n            max_name = name\n            max_value = total\n    \n    return (max_name, max_value)\n\n# Test cases\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)]) == ('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)]) == ('Sabah Colley', 70)"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize a 2D list to store the number of ways to achieve a certain sum\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: There's one way to achieve a sum of 0 with 0 bits\n    dp[0][0] = 1\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            # If we add a 0, the sum doesn't change\n            dp[i][j] += dp[i - 1][j]\n            # If we add a 1, the sum increases by 1\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n    \n    # The result is the sum of squares of the number of ways to achieve each sum\n    result = 0\n    for k in range(n + 1):\n        result += dp[n][k] * dp[n][k]\n    \n    return result\n\n# Test cases\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\n# Test cases\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a': 1, 'b': {'c': 'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4: 'Mon'}}}) == 3"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    for words in word_list:\n        split_words = words.split()\n        p_words = [word for word in split_words if word.startswith('P')]\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return None"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize a list to store the maximum sum of increasing subsequence ending at each index\n    dp = [0] * n\n    \n    # Calculate the maximum sum of increasing subsequence for the prefix until index i\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n    \n    # Find the maximum sum of increasing subsequence ending at index i\n    max_sum_prefix = max(dp[:i + 1])\n    \n    # Check if the kth element can be added to the subsequence\n    if arr[i] < arr[k]:\n        max_sum_prefix += arr[k]\n    \n    return max_sum_prefix\n\n# Test cases\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, k):\n    # Create a list to store all possible products\n    products = []\n    \n    # Calculate the product of each pair of elements from list1 and list2\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first k largest products\n    return products[:k]\n\n# Test cases\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b\n\n# Test the function\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\") == ('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\") == ('1', '5', '.', '1', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n\n\n# Test the function\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]\n\n# Test cases\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a', 'b', 'c', 'd'], 'python{0}') == ['pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5, 6, 7, 8], 'string{0}') == ['string5', 'string6', 'string7', 'string8']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for key, name, value in zip(keys, names, values):\n        result.append({key: {name: value}})\n    return result\n\n# Test cases\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]) == [{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': 300}}, {'jkl': {'programs': 400}}]\nassert convert_list_dictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]) == [{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {'DBMS': 40}}]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    # Calculate the sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    # Determine the maximum between the calculated sum and n\n    result = max(sum_parts, n)\n    # Store the result in the memoization dictionary\n    memo[n] = result\n    return result\n\n# Test cases\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n\n# Test the function\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\""}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]\n\n# Test cases\nassert check_char(\"abba\") == True\nassert check_char(\"a\") == True\nassert check_char(\"abcd\") == False\nassert check_char(\"\") == False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(20, 10, 30) == 20.0\nassert median_numbers(15, 45, 75) == 45.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)) if digit.isdigit())\n    \n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, int):\n            total_sum += digit_sum(number)\n    \n    return total_sum\n\n# Test cases\nassert sum_of_digits([10, 2, 56]) == 14\nassert sum_of_digits([10, 20, 4, 5, 'b', 70, 'a']) == 19\nassert sum_of_digits([10, 20, -4, 5, -70]) == 19"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for t in tuples_list:\n        # Add both the tuple and its reverse to handle unordered pairs\n        unique_tuples.add(tuple(sorted(t)))\n    return len(unique_tuples)\n\n# Test cases\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b\n\n# Test cases\nassert minimum(1, 2) == 1\nassert minimum(-5, -4) == -5\nassert minimum(0, 0) == 0"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup\n\n# Test cases\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), '5') == False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3) == True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n\n    # Step 1: Find the rightmost digit which is smaller than its next digit\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return None  # If no such digit is found, return None\n\n    # Step 2: Find the smallest digit on the right side of the found digit which is larger than it\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    # Step 3: Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Step 4: Reverse the digits after the position i\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n\n    # Convert list of digits back to integer\n    return int(''.join(digits))\n\n# Test cases\nassert rearrange_bigger(12) == 21\nassert rearrange_bigger(10) == None\nassert rearrange_bigger(102) == 120"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(10, 20), (15, 2), (5, 10)]) == 30\nassert min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100"}
{"task_id": "Mbpp/410", "solution": "def min_val(heterogeneous_list):\n    # Filter out non-numeric values\n    numeric_values = [item for item in heterogeneous_list if isinstance(item, (int, float))]\n    \n    # Return the minimum value from the filtered numeric values\n    return min(numeric_values)\n\n# Test cases\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\nassert min_val(['Python', 15, 20, 25]) == 15\nassert min_val(['Python', 30, 20, 40, 50, 'version']) == 20"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Removes odd numbers from the given list of numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test cases\nassert remove_odd([1, 2, 3]) == [2]\nassert remove_odd([2, 4, 6]) == [2, 4, 6]\nassert remove_odd([10, 20, 3]) == [10, 20]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n\n# Test cases\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False\n\n# Test the function\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3], [4, 5, 6]) == False\nassert overlapping([1, 4, 5], [1, 4, 5]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n# Test the function\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\nassert max_Product([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\nassert max_Product([1, 2, 3]) == (2, 3)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element\n\n# Test the function\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\nassert Find_Max([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\nassert Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5, 2, 9, 24.3, 29]) == 345\nassert round_and_sum([25.0, 56.7, 89.2]) == 513"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\n# Test the function with the provided assertions\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))\n\n# Test cases\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function with the given assertions\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(sublists, element):\n    count = 0\n    for sublist in sublists:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test cases\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') == 3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') == 1"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\"\n\n# Test cases\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Test cases\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n\n# Test cases\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The formula for the directrix of a parabola y = ax^2 + bx + c is:\n    # Directrix: y = c - (b^2 + 1) / (4a)\n    directrix = c - (b**2 + 1) / (4 * a)\n    # Since the expected result is an integer, we convert the result to an integer\n    return int(directrix * 100)\n\n# Test assertions\nassert parabola_directrix(5, 3, 2) == -198\nassert parabola_directrix(9, 8, 4) == -2336\nassert parabola_directrix(2, 4, 6) == -130"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return not set1.isdisjoint(set2)\n\n# Test cases\nassert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\nassert common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert common_element(['a', 'b', 'c'], ['d', 'b', 'e']) == True"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the first parallel side.\n    b (float): Length of the second parallel side.\n    h (float): Height of the trapezium (not used in median calculation).\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (a + b) / 2\n\n# Test cases\nassert median_trapezium(15, 25, 35) == 20\nassert median_trapezium(10, 20, 30) == 15\nassert median_trapezium(6, 9, 4) == 7.5"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]\n\n# Test cases\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([-1, -2, 3, 4]) == [-1, -2]\nassert neg_nos([-7, -6, 8, 9]) == [-7, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n\n# Test cases\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"program\") == \"rga\"\nassert remove_odd(\"language\") == \"agae\""}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    seen = set()\n    count = 0\n\n    for a, b in pairs:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n\n    return count\n\n# Test cases\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 3"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    result = int(''.join(map(str, numbers)))\n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match adverbs ending with 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find all matches in the sentence\n    matches = list(re.finditer(adverb_pattern, sentence))\n    \n    if matches:\n        # Get the first match\n        first_match = matches[0]\n        start_pos = first_match.start()\n        end_pos = first_match.end() - 1\n        adverb = first_match.group()\n        return (start_pos, end_pos, adverb)\n    \n    return None\n\n# Test cases\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 6, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\") == (0, 8, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 12, 'unfortunately')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area\n\n# Test the function with assertions\nassert surfacearea_cube(5) == 150\nassert surfacearea_cube(3) == 54\nassert surfacearea_cube(10) == 600"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)\n\n# Test the function\nimport math\n\nassert math.isclose(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.538, rel_tol=0.001)\nassert math.isclose(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.692, rel_tol=0.001)\nassert math.isclose(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.555, rel_tol=0.001)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for (a, b), (c, d) in zip(tuple1, tuple2):\n        result.append((a * c, b * d))\n    return tuple(result)\n\n# Test cases\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((24, 45), (30, 77), (12, 33), (27, 60))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count\n\n# Test cases\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\nassert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [x ** 3 for x in numbers]\n\n# Test cases\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10, 20, 30]) == [1000, 8000, 27000]\nassert cube_nums([12, 15]) == [1728, 3375]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # Calculate Perrin numbers up to the nth number\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    # Return the sum of the first n Perrin numbers\n    return sum(perrin[:n + 1])\n\n# Test cases\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]\n\n# Test cases\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6) == ['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9) == ['exercises']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n# Test cases\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    # List of month numbers that have 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the given month number is in the list\n    return month_number in months_with_31_days\n\n# Test cases\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(6) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    reversed_strings = []\n    for string in strings:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n\n# Test cases\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john', 'amal', 'joel', 'george']) == ['nhoj', 'lama', 'leoj', 'egroeg']\nassert reverse_string_list(['jack', 'john', 'mary']) == ['kcaj', 'nhoj', 'yram']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list\n\n# Test cases\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\nassert Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1]\nassert Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']]) == ['x']"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle given its length and width.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width\n\n# Assertions to verify the correctness of the function\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            while i < len(s) and s[i].isupper():\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n\n# Test cases\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"}
{"task_id": "Mbpp/460", "solution": "def Extract(lists):\n    return [sublist[0] for sublist in lists]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test cases\nassert upper_ctr('PYthon') == 2\nassert upper_ctr('BigData') == 2\nassert upper_ctr('program') == 0"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = min_product = result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n\n# Test cases\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\n# Test cases\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3': None}) == {'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3': None}) == {'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize a list to store the maximum product of increasing subsequence ending at each index\n    max_prod = [0] * n\n\n    # Each element is a subsequence of length 1, so initialize with the element itself\n    for i in range(n):\n        max_prod[i] = arr[i]\n\n    # Compute the maximum product for each subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n\n    # Return the maximum product found\n    return max(max_prod)\n\n# Test cases\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))\n\n# Test cases\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test cases\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\nassert find_remainder([1, 1, 1], 1) == 0\nassert find_remainder([1, 2, 1], 2) == 0"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True\n\n# Test the function\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 2, 3, 5, 6]) == False\nassert check_Consecutive([1, 2, 1]) == False"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n    intersection = set1.intersection(set2)\n    return {tuple(sorted(t)) for t in intersection}\n\n# Test cases\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\nassert replace_char(\"character\", 'c', 'a') == \"aharaater\"\nassert replace_char(\"python\", 'l', 'a') == \"python\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    # Sort the dictionary items by value in descending order\n    sorted_items = sorted(d.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items\n\n# Test cases\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math': 400, 'Physics': 300, 'Chemistry': 250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math': 900, 'Physics': 1000, 'Chemistry': 1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if not arr:\n        return 0\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest\n\n# Test cases\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([-1, 2, 3, 4]) == 3\nassert big_sum([2, 3, 6]) == 8"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()\n\n# Test the function\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\nassert remove_lowercase(\"FInD\") == 'FID'\nassert remove_lowercase(\"STRinG\") == 'STRG'"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    number = abs(number)  # Handle negative numbers\n    while number >= 10:\n        number //= 10\n    return number\n\n# Test cases\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test cases\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert Split([10, 11, 12, 13]) == [11, 13]\nassert Split([7, 8, 9, 1]) == [7, 9, 1]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff\n\n# Test the function with the given assertions\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\nassert find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7) == 12\nassert find_Odd_Pair([1, 2, 3], 3) == 2"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    toggled = []\n    for char in s:\n        if char.islower():\n            toggled.append(char.upper())\n        else:\n            toggled.append(char.lower())\n    return ''.join(toggled)\n\n# Test cases\nassert toggle_string(\"Python\") == \"pYTHON\"\nassert toggle_string(\"Pangram\") == \"pANGRAM\"\nassert toggle_string(\"LIttLE\") == \"liTTle\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings to easily access each digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    total_distance = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n\n# Test cases\nassert digit_distance_nums(1, 2) == 1\nassert digit_distance_nums(23, 56) == 6\nassert digit_distance_nums(123, 256) == 7"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here += arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n\n# Test cases\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets to find the union\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the union set back to a sorted tuple\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple\n\n# Test cases\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4), (3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14), (13, 15, 16, 17)) == (11, 12, 13, 14, 15, 16, 17)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n# Test cases\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4\nassert Find_Max_Length([[0, 1], [2, 2], [3, 2, 1]]) == 3\nassert Find_Max_Length([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"') == ['python', 'program', 'language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"') == ['red', 'blue', 'green', 'yellow']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)\n\n# Test the function\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']\nassert split('Name') == ['N', 'a', 'm', 'e']\nassert split('program') == ['p', 'r', 'o', 'g', 'r', 'a', 'm']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Test cases\nassert sum_digits(345) == 12\nassert sum_digits(12) == 3\nassert sum_digits(97) == 16"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False\nassert issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]\nassert empty_list(6) == [{}, {}, {}, {}, {}, {}]\nassert empty_list(7) == [{}, {}, {}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists\n\n# Test the function with the provided assertions\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return [num for num in lst if count[num] == 1]\n\n# Test cases\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\nassert two_unique_nums([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\nassert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\nassert unique_product([1, 2, 3, 1]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n\n# Assertions to verify the correctness of the function\nassert math.isclose(surfacearea_cylinder(10, 5), 942.45, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 5), 226.188, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 10), 351.848, rel_tol=0.001)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n    \n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False\n\n# Test the function\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2, 1], [1, 2, 1]) == True\nassert is_Sub_Array([1, 0, 2, 2], [2, 2, 0]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test the function\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\n# Test cases\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10]) == [10, 15, 5, 20, 2, 10]\nassert interleave_lists([11,44], [10,15], [20,5]) == [11, 10, 20, 44, 15, 5]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar_elements))\n\n# Test cases\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (11, 25, 34, 36)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    def filter_even(element):\n        if isinstance(element, tuple):\n            filtered = tuple(filter_even(e) for e in element if isinstance(e, int) and e % 2 == 0 or isinstance(e, tuple))\n            return filtered if filtered else None\n        elif isinstance(element, int) and element % 2 == 0:\n            return element\n        return None\n\n    result = tuple(filter_even(e) for e in nested_tuple if isinstance(e, int) and e % 2 == 0 or isinstance(e, tuple))\n    return tuple(e for e in result if e is not None)\n\n# Test cases\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the area of the base (a square)\n    base_area = base_edge ** 2\n    \n    # Calculate the lateral surface area (4 triangles)\n    lateral_area = 2 * base_edge * slant_height\n    \n    # Total surface area is the sum of the base area and the lateral area\n    total_surface_area = base_area + lateral_area\n    \n    return total_surface_area\n\n# Test cases\nassert surface_Area(3, 4) == 33\nassert surface_Area(4, 5) == 56\nassert surface_Area(1, 2) == 5"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0\n\n# Test the function\nassert my_dict({10: 0}) == False\nassert my_dict({11: 0}) == False\nassert my_dict({}) == True"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]\n\n# Test the function\nassert catalan_number(10) == 16796\nassert catalan_number(9) == 4862\nassert catalan_number(7) == 429"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]\n\n# Test the function with the provided assertions\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2) == [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1) == [{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    if n < 0 or n > len(arr):\n        raise ValueError(\"n must be within the range of the list length\")\n    return arr[n:] + arr[:n]\n\n# Test cases\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58, 44, 56]) == (58, 44, 56)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)\n\n# Test cases\nassert big_diff([1, 2, 3, 4]) == 3\nassert big_diff([4, 5, 12]) == 8\nassert big_diff([9, 2, 3]) == 7"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    current = 1\n    while current * current < start:\n        current += 1\n    while current * current <= end:\n        squares.append(current * current)\n        current += 1\n    return squares\n\n# Test cases\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]\nassert perfect_squares(50, 100) == [64, 81, 100]\nassert perfect_squares(100, 200) == [100, 121, 144, 169, 196]"}
{"task_id": "Mbpp/590", "solution": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    # Convert polar to rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Calculate magnitude and angle for the complex number\n    magnitude = math.sqrt(x**2 + y**2)\n    angle = math.atan2(y, x)\n    \n    # Create the complex number\n    complex_number = cmath.rect(r, theta)\n    \n    return ((magnitude, angle), complex_number)\n\n# Test cases\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7) == ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17) == ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test cases\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    def binomial_coefficient(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    \n    return total_sum\n\n# Test cases\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\nassert removezero_ip(\"12.01.024\") == '12.1.24'\nassert removezero_ip(\"216.08.094.0196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n# Test cases\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3\nassert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert diff_even_odd([1, 5, 7, 9, 10]) == 9"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    if len(binary1) != len(binary2):\n        return None\n    \n    # Count the number of 1s and 0s in both strings\n    count1_1 = binary1.count('1')\n    count1_0 = binary1.count('0')\n    count2_1 = binary2.count('1')\n    count2_0 = binary2.count('0')\n    \n    # If the number of 1s and 0s don't match, it's impossible to convert\n    if count1_1 != count2_1 or count1_0 != count2_0:\n        return None\n    \n    # Calculate the number of swaps needed\n    swaps = 0\n    for i in range(len(binary1)):\n        if binary1[i] != binary2[i]:\n            swaps += 1\n    \n    # Each swap fixes two positions, so divide by 2\n    return swaps // 2\n\n# Test cases\nassert min_Swaps(\"1101\", \"1110\") == 1\nassert min_Swaps(\"111\", \"000\") == None\nassert min_Swaps(\"111\", \"110\") == None"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\")) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))) == sys.getsizeof(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    def kth_util(a, b, k):\n        if not a:\n            return b[k-1]\n        if not b:\n            return a[k-1]\n        if k == 1:\n            return min(a[0], b[0])\n        \n        mid_a = a[k//2 - 1] if len(a) >= k//2 else float('inf')\n        mid_b = b[k//2 - 1] if len(b) >= k//2 else float('inf')\n        \n        if mid_a < mid_b:\n            return kth_util(a[k//2:], b, k - k//2)\n        else:\n            return kth_util(a, b[k//2:], k - k//2)\n    \n    return kth_util(arr1, arr2, k)\n\n# Test cases\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(num)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Initialize the sum of powers\n    sum_of_powers = 0\n    \n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer and raise it to the power of num_digits\n        sum_of_powers += int(digit) ** num_digits\n    \n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == num\n\n# Test cases\nassert armstrong_number(153) == True\nassert armstrong_number(259) == False\nassert armstrong_number(4458) == False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n\n\n# Assertions to verify the function works correctly\nassert sum_average(10) == (55, 5.5)\nassert sum_average(15) == (120, 8.0)\nassert sum_average(20) == (210, 10.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = list(range(1, n + 1))\n    index = 1\n    while index < len(ludics):\n        step = ludics[index]\n        ludics = [ludics[i] for i in range(len(ludics)) if (i % step) != 0 or i == 0]\n        index += 1\n    return ludics\n\n# Test cases\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\"\nassert reverse_words(\"java language\") == \"language java\"\nassert reverse_words(\"indian man\") == \"man indian\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nassert prime_num(13) == True\nassert prime_num(7) == True\nassert prime_num(-1010) == False"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(60) == 1.0471975511965976\nassert radian_degree(120) == 2.0943951023931953"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (match.group(), start_index, end_index)\n    return None\n\n# Test cases\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test cases\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if 0 <= k < len(lst):\n        return lst[:k] + lst[k+1:]\n    return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Extract the nth column from the matrix\n    nth_column = [row[n] for row in matrix]\n    # Return the maximum value from the nth column\n    return max(nth_column)\n\n# Test cases\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]\n\n# Test cases\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test cases\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cumulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cumulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))\n\n# Test cases\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]\n\n# Test the function\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\nassert div_list([3, 2], [1, 4]) == [3.0, 0.5]\nassert div_list([90, 120], [50, 70]) == [1.8, 1.7142857142857142]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n    current_number = []\n    \n    for char in s:\n        if char.isdigit():\n            current_number.append(char)\n        else:\n            if current_number:\n                numbers.append(''.join(current_number))\n                current_number = []\n            letters.append(char)\n    \n    if current_number:\n        numbers.append(''.join(current_number))\n    \n    return ''.join(letters) + ''.join(numbers)\n\n# Test cases\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    \n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2, n - n//2 + 1)\n        return get_median(arr1[n//2:], arr2, n - n//2)\n\n    if n % 2 == 0:\n        return get_median(arr2[n//2 - 1:], arr1, n - n//2 + 1)\n    return get_median(arr2[n//2:], arr1, n - n//2)\n\ndef median(arr, n):\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    return arr[n//2]\n\n# Test cases\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [x ** n for x in numbers]\n\n# Test cases\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10, 20, 30], 3) == [1000, 8000, 27000]\nassert nth_nums([12, 15], 5) == [248832, 759375]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\n# Test the function\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    if radius == 0:\n        return 0\n    # The largest triangle that can be inscribed in a semicircle is a right triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle is (1/2) * base * height\n    # where base = height = radius (since it's an isosceles right triangle).\n    return (1/2) * radius * radius\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')\n\n# Test cases\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n# Test cases\nassert Split([1, 2, 3, 4, 5]) == [2, 4]\nassert Split([4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0]\nassert Split([8, 12, 15, 19]) == [8, 12]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords\n\n# Test cases\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    result = []\n    for char in s:\n        if char == ' ':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n        else:\n            result.append(char)\n    return ''.join(result)\n\n# Test cases\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zeroes = [x for x in lst if x != 0]\n    zeroes = [0] * (len(lst) - len(non_zeroes))\n    return non_zeroes + zeroes\n\n# Assertions to test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\n# Test cases\nassert pair_xor_sum([5, 9, 7, 6], 4) == 47\nassert pair_xor_sum([7, 3, 5], 3) == 12\nassert pair_xor_sum([7, 3], 2) == 4"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n# Test cases\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort([7, 1, 9, 5]) == [1, 5, 7, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\n# Test the function with the provided assertions\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(100, 100) == True\nassert noprofit_noloss(2000, 5000) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity_kmh, temperature_celsius):\n    # Convert wind velocity from km/h to m/s\n    velocity_ms = velocity_kmh * 1000 / 3600\n    \n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature_celsius - 11.37 * (velocity_ms ** 0.16) + 0.3965 * temperature_celsius * (velocity_ms ** 0.16)\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 20) == 19\nassert wind_chill(10, 8) == 6"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = []\n    skip = 0\n    for char in s:\n        if char == '(':\n            skip += 1\n        elif char == ')':\n            skip -= 1\n        elif skip == 0:\n            result.append(char)\n    return ''.join(result)\n\n# Test cases\nassert remove_parenthesis(\"python (chrome)\") == \"python \"\nassert remove_parenthesis(\"string(.abc)\") == \"string\"\nassert remove_parenthesis(\"alpha(num)\") == \"alpha\""}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n# Test the function with the given assertions\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Strip leading and trailing whitespace\n    s = s.strip()\n    \n    # Check if the string is long enough to have a middle\n    if len(s) <= 2:\n        return False\n    \n    # Check for 'z' in the middle of the string\n    for i in range(1, len(s) - 1):\n        if s[i] == 'z':\n            return True\n    \n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"zxyabc.\") == False\nassert text_match_wordz_middle(\"  lang  .\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)\n\n# Test cases\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    count = [[0] * n for _ in range(n)]\n\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        count[0][i] = count[0][i-1] + 1\n\n    for i in range(1, n):\n        for j in range(1, n):\n            if (dp[i-1][j] / count[i-1][j]) > (dp[i][j-1] / count[i][j-1]):\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n\n    return dp[n-1][n-1] / count[n-1][n-1]\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test cases\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2]) == 1\nassert count_same_pair([0, 1, 1, 2], [0, 1, 2, 2]) == 3"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test cases\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\n# Test cases\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]\nassert sum_list([1, 2, 3], [5, 6, 7]) == [6, 8, 10]\nassert sum_list([15, 20, 30], [15, 45, 75]) == [30, 65, 105]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result\n\n# Test cases\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd']) == ['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a']) == ['a', 'b', 'c', 'd', 'a']"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n\n# Test cases\nassert lateralsurface_cone(5, 12) == 204.20352248333654\nassert lateralsurface_cone(10, 15) == 566.3586699569488\nassert lateralsurface_cone(19, 17) == 1521.8090132193388"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test cases\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\nassert replace_specialchar('a b c,d e f') == 'a:b:c:d:e:f'\nassert replace_specialchar('ram reshma,ram rahim') == 'ram:reshma:ram:rahim'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum\n\n# Test cases\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\nassert sum_Of_Subarray_Prod([1, 2]) == 5\nassert sum_Of_Subarray_Prod([1, 2, 3, 4]) == 84"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    if n < 4:\n        return n  # If the number is less than 4, there are no middle bits to toggle\n\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n\n    # Create a mask with all bits set except the first and last\n    mask = (1 << (num_bits - 1)) - 1\n    mask ^= 1  # Unset the last bit\n    mask ^= (1 << (num_bits - 1))  # Unset the first bit\n\n    # Toggle the middle bits using XOR\n    return n ^ mask\n\n# Test cases\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test the function\nassert left_insertion([1, 2, 4, 5], 6) == 4\nassert left_insertion([1, 2, 4, 5], 3) == 2\nassert left_insertion([1, 2, 4, 5], 7) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # Function to calculate the number of digits in a number\n    def num_digits(x):\n        return int(math.log10(x)) + 1\n\n    # Function to calculate the nth triangular number\n    def triangular_number(k):\n        return k * (k + 1) // 2\n\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if num_digits(t_number) == n:\n            return index\n        index += 1\n\n# Test cases\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tpl):\n    return {tpl[i]: tpl[i + 1] for i in range(0, len(tpl) - 1, 2)}\n\n# Test cases\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n# Test the function\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the edge length 'a'.\n    \n    The formula for the surface area of a regular tetrahedron is:\n    Surface Area = sqrt(3) * a^2\n    \n    :param a: The length of an edge of the tetrahedron\n    :return: The surface area of the tetrahedron\n    \"\"\"\n    return math.sqrt(3) * a**2\n\n# Test assertions\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    n = len(lst)\n    k = k % n  # In case k is greater than the length of the list\n    return lst[-k:] + lst[:-k]\n\n# Test cases\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        original_num = num\n        while num > 0:\n            digit = num % 10\n            if digit == 0 or original_num % digit != 0:\n                return False\n            num //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)\n\n# Test the function\nassert math.isclose(sector_area(4, 45), 6.283185307179586, rel_tol=0.001)\nassert math.isclose(sector_area(9, 45), 31.808625617596654, rel_tol=0.001)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for char in s:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    # Convert each string in the list to an integer\n    numeric_values = [int(s) for s in strings]\n    # Sort the list of integers\n    numeric_values.sort()\n    return numeric_values\n\n# Test cases\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7', '9', '1', '11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    # Convert the tuple to a list and extend the original list with it\n    lst.extend(list(tpl))\n    return lst\n\n# Test cases\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    j0, j1 = 0, 1\n    \n    # Calculate the nth Jacobsthal number iteratively\n    for i in range(2, n + 1):\n        jn = j1 + 2 * j0\n        j0, j1 = j1, jn\n    \n    return j1\n\n# Test cases\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test cases\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == []"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    first, second = float('inf'), float('inf')\n    \n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n\n    return second if second != float('inf') else None\n\n# Test cases\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\nassert second_smallest([2, 2]) == None\nassert second_smallest([2, 2, 2]) == None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    reverse_set = set()\n    count = 0\n    \n    for string in string_list:\n        reverse_string = string[::-1]\n        if reverse_string in reverse_set:\n            count += 1\n        reverse_set.add(string)\n    \n    return count\n\n# Test cases\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict\n\n# Test the function with the provided assertions\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]) == {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']]) == {('john',): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Check if there are exactly two parts (one before and one after the decimal point)\n    if len(parts) != 2:\n        return False\n    \n    # Check if the part before the decimal is a valid integer\n    if not parts[0].isdigit():\n        return False\n    \n    # Check if the part after the decimal has exactly two digits and is a valid integer\n    if len(parts[1]) != 2 or not parts[1].isdigit():\n        return False\n    \n    return True\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('e666.86') == False\nassert is_decimal('3.124587') == False\nassert is_decimal('1.11') == True\nassert is_decimal('1.1.11') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0  # If there are less than 2 elements, no valid difference can be found\n\n    # Sort the array to bring elements with minimum difference next to each other\n    arr = sorted(arr)\n\n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n\n    # Iterate through the sorted array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\n# Test cases\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\nassert find_min_diff((4, 3, 2, 6), 4) == 1\nassert find_min_diff((30, 5, 20, 9), 4) == 4"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test cases\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_power_of_two(x):\n        return (x & (x - 1)) == 0 and x != 0\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if not is_power_of_two(num):\n            count += 1\n    return num\n\n# Test cases\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst) - 1)]\n\n# Test cases\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    count = 0\n    freq = {}\n    \n    for number in arr:\n        complement = target_sum - number\n        if complement in freq:\n            count += freq[complement]\n        \n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    \n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6\nassert get_pairs_count([1, 5, 7, -1, 5], 6) == 3\nassert get_pairs_count([1, -2, 3], 1) == 1\nassert get_pairs_count([-1, -2, 3], -3) == 1"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    # Create a set for list2 for faster lookup\n    set2 = set(list2)\n    # Find elements in list1 not in list2\n    diff1 = [item for item in list1 if item not in set2]\n    # Create a set for list1 for faster lookup\n    set1 = set(list1)\n    # Find elements in list2 not in list1\n    diff2 = [item for item in list2 if item not in set1]\n    # Combine both differences\n    return diff1 + diff2\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 15, 20, 30]\nassert Diff([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5, 6, 7]\nassert Diff([1, 2, 3], [6, 7, 1]) == [2, 3, 6, 7]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum_of_powers = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_of_powers += odd_number ** 4\n    return sum_of_powers\n\n# Test cases\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in matching_brackets.values():\n            stack.append(char)\n        elif char in matching_brackets.keys():\n            if stack == [] or matching_brackets[char] != stack.pop():\n                return False\n        else:\n            continue\n    \n    return stack == []\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test cases\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    start_index = main_string.find(sub_string)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(sub_string) - 1\n    return (sub_string, start_index, end_index)\n\n# Test cases\nassert occurance_substring('python programming, python language', 'python') == ('python', 0, 5)\nassert occurance_substring('python programming,programming language', 'programming') == ('programming', 7, 17)\nassert occurance_substring('python programming,programming language', 'language') == ('language', 29, 36)\nassert occurance_substring('c++ programming, c++ language', 'python') == None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21\nassert find_sum([1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71\nassert find_sum([12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed_list = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n\n# Test cases\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for comb in combinations(tuple_list, 2):\n        sum_tuple = tuple(map(sum, zip(*comb)))\n        result.append(sum_tuple)\n    return result\n\n# Test cases\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    def is_even_divisors_count(num):\n        count = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count % 2 == 0\n\n    return is_even_divisors_count(n)\n\n# Test cases\nassert count_divisors(10)  # 10 has divisors 1, 2, 5, 10 (4 divisors, even)\nassert not count_divisors(100)  # 100 has divisors 1, 2, 4, 5, 10, 20, 25, 50, 100 (9 divisors, odd)\nassert count_divisors(125)  # 125 has divisors 1, 5, 25, 125 (4 divisors, even)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        subarray_sum = 0\n        for j in range(i, n):\n            subarray_sum += arr[j]\n            if (j - i + 1) % 2 != 0:  # Check if the length of the subarray is odd\n                total_sum += subarray_sum\n    \n    return total_sum\n\n# Test cases\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 1, 2]) == 15\nassert odd_length_sum([1, 7]) == 8"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Convert RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Calculate the maximum and minimum values among r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    # Calculate Hue\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    # Calculate Saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n\n    # Calculate Value\n    v = max_val * 100\n\n    return h, s, v\n\n# Test cases\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0) == (120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110) == (149.2682926829268, 95.34883720930233, 84.31372549019608)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None  # Return None if either even or odd number is not found\n\n# Test cases\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert mul_even_odd([1, 5, 7, 9, 10]) == 10"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Remove the parentheses and split the string by comma\n    elements = s.strip('()').split(',')\n    # Convert each element to an integer and return as a tuple\n    return tuple(int(element.strip()) for element in elements)\n\n# Test cases\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test the function\nassert right_insertion([1, 2, 4, 5], 6) == 4\nassert right_insertion([1, 2, 4, 5], 3) == 2\nassert right_insertion([1, 2, 4, 5], 7) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)\n\n# Test cases\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3, 2, 1]) == False\nassert even_position([1, 2, 3]) == False\nassert even_position([2, 1, 4]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    count = 0\n    for item in lists:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test cases\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1, 2], [2, 3], [4, 5]]) == 3\nassert count_list([[1, 0], [2, 0]]) == 2"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Test cases\nassert last([1, 2, 3], 1) == 0\nassert last([1, 1, 1, 2, 3, 4], 1) == 2\nassert last([2, 2, 3, 3, 6, 8, 9], 3) == 3"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))\n\n# Test cases\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum\n\n# Test cases\nassert return_sum({'a': 100, 'b': 200, 'c': 300}) == 600\nassert return_sum({'a': 25, 'b': 18, 'c': 45}) == 88\nassert return_sum({'a': 36, 'b': 39, 'c': 49}) == 124"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the range from l to r (inclusive)\n    for num in range(l, r + 1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n    \n    return total_sum\n\n# Test the function with the given assertions\nassert sum_in_range(2, 5) == 8\nassert sum_in_range(5, 7) == 12\nassert sum_in_range(7, 13) == 40"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Assuming n is a 32-bit integer\n    # Perform left rotation by d bits\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n\n# Test cases\nassert left_rotate(16, 2) == 64\nassert left_rotate(10, 2) == 40\nassert left_rotate(99, 3) == 792\nassert left_rotate(0b0001, 3) == 0b1000\nassert left_rotate(0b0101, 3) == 0b101000\nassert left_rotate(0b11101, 3) == 0b11101000"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(-1, -2, -3) == 0\nassert test_three_equal(1, 2, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False\n\n# Test the function\nassert is_product_even([1, 2, 3]) == True\nassert is_product_even([1, 2, 1, 4]) == True\nassert is_product_even([1, 1]) == False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\n\n# Test cases\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]\nassert max_sum_list([[2,3,1]]) == [2, 3, 1]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\n\n# Test the function\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None  # In case there are no odd numbers in the list\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 1, 3]) == 1\nassert first_odd([8, 9, 1]) == 9"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(x > y for x, y in zip(tuple1, tuple2))\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True"}
