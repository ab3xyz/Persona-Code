{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of both sets\n    common_elements = set1.intersection(set2)\n    \n    # Return the result as a tuple\n    return tuple(common_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    if not numbers or n <= 0 or n > len(numbers):\n        return []\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x ** 2 for x in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    \n    # Create a new string by concatenating the original string to itself\n    # This helps in easily finding the rotation point\n    doubled_s = s + s\n    \n    # Iterate over possible rotation points\n    for i in range(1, n):\n        # Check if the substring of length n starting from i is equal to the original string\n        if doubled_s[i:i+n] == s:\n            return i\n    \n    return n  # In case no rotation matches, which theoretically shouldn't happen"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the first occurrence of the character\n    first_index = s.find(char)\n    # Find the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Adjust the last index if it was after the first occurrence\n    if last_index > first_index:\n        last_index -= 1\n    \n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Create a list of tuples (row_sum, row)\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples by the row_sum\n    row_sums.sort()\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base_of_triangle, height_of_triangle, height_of_prism):\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base_of_triangle * height_of_triangle\n    # Calculate the volume of the triangular prism\n    volume = base_area * height_of_prism\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    return bool(pattern.match(s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(first_string, second_string):\n    # Create a set of characters to remove for faster lookup\n    chars_to_remove = set(second_string)\n    \n    # Build the result string by including only those characters not in the set\n    result = ''.join(char for char in first_string if char not in chars_to_remove)\n    \n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    if number < 0:\n        return False\n    \n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == number:\n            return True\n        if woodall_number > number:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(number):\n    # Step 1: Reverse the number\n    reversed_number = int(str(number)[::-1])\n    \n    # Step 2: Calculate twice the reversed number\n    twice_reversed = 2 * reversed_number\n    \n    # Step 3: Check if the original number is one less than twice the reversed number\n    return number == twice_reversed - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert each digit to a string\n    str_digits = map(str, digits)\n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    # Concatenate the sorted digits\n    max_num_str = ''.join(sorted_digits)\n    # Convert the result to an integer\n    return int(max_num_str)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def octagonal_number(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for start in range(n):\n        digit_sum = 0\n        for end in range(start, n):\n            digit_sum += int(s[end])\n            if digit_sum == (end - start + 1):\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    \n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    max_diff = float('-inf')\n    for a, b in tuple_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell table\n    for i in range(1, n+1):\n        # Explicitly put the last value of the previous row as the first value of this row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The Bell number for n is the first entry in the last row\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    if len(array) <= 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(len(array) - 1):\n        if array[i] < array[i + 1]:\n            is_decreasing = False\n        if array[i] > array[i + 1]:\n            is_increasing = False\n    \n    return is_increasing or is_decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    if not sublist:\n        return True\n    sublist_length = len(sublist)\n    for i in range(len(main_list) - sublist_length + 1):\n        if main_list[i:i + sublist_length] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True  # If the list is empty, consider all tuples as having equal length.\n    \n    first_length = len(tuples_list[0])\n    for t in tuples_list:\n        if len(t) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    def get_next_gap(gap):\n        # Shrink gap by shrink factor\n        gap = int(gap / 1.3)\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    return n % 4 == 0 or n % 4 == 1"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    \n    map1 = {}\n    map2 = {}\n    \n    for item1, item2 in zip(list1, list2):\n        if item1 in map1:\n            if map1[item1] != item2:\n                return False\n        else:\n            map1[item1] = item2\n        \n        if item2 in map2:\n            if map2[item2] != item1:\n                return False\n        else:\n            map2[item2] = item1\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    num_str = str(number)\n    odd_sum = 0\n    even_sum = 0\n    \n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    difference = abs(odd_sum - even_sum)\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total_ascii = sum(ord(char) for char in s)\n    mod_26 = total_ascii % 26\n    result_char = chr(mod_26 + ord('a'))\n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def newman_conway_sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence array with base cases\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n    sequence[2] = 1\n    \n    # Compute the sequence values from 3 to n\n    for i in range(3, n + 1):\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n    \n    return sequence[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()  # Start with a copy of the first dictionary\n    merged_dict.update(dict2)   # Update with the second dictionary\n    merged_dict.update(dict3)   # Update with the third dictionary\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_length = 0\n    for word in words:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Check if the number has at least three digits\n    if len(num_str) < 3:\n        return False\n    \n    # Get the first two digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # Check if the first two digits are different\n    if first_digit == second_digit:\n        return False\n    \n    # Check the alternation pattern\n    for i in range(2, len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first_digit:\n                return False\n        else:\n            if num_str[i] != second_digit:\n                return False\n    \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    \n    # Initialize with the first tuple\n    min_tuple = tuples_list[0]\n    \n    # Iterate through the list of tuples\n    for current_tuple in tuples_list:\n        # Compare the second value of the current tuple with the min_tuple\n        if current_tuple[1] < min_tuple[1]:\n            min_tuple = current_tuple\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')  # Initialize with a large number\n    for lst in list_of_lists:\n        current_length = len(lst)\n        if current_length < min_length:\n            min_length = current_length\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    from collections import defaultdict\n    \n    # Step 1: Flatten the list of lists\n    flattened_list = [item for sublist in lists for item in sublist]\n    \n    # Step 2: Count the frequency of each element\n    frequency_dict = defaultdict(int)\n    for item in flattened_list:\n        frequency_dict[item] += 1\n    \n    # Step 3: Return the frequency dictionary\n    return dict(frequency_dict)"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return bin(n)[2:]"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if not arr or k < 1 or k > len(arr):\n        raise ValueError(\"Invalid input: array is empty or k is out of bounds\")\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_case_str = ''.join(word.capitalize() for word in words)\n    return camel_case_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m >= n or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count_true_bools(bool_list):\n    count = 0\n    for value in bool_list:\n        if value is True:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Step 1: Combine the lists\n    combined_list = list1 + list2 + list3\n    \n    # Step 2: Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    # Step 3: Return the sorted list\n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    odd_count = 0\n    length = len(binary_string)\n    \n    for _ in range(rotations):\n        # Check if the current binary string is odd\n        if binary_string[-1] == '1':\n            odd_count += 1\n        \n        # Rotate the string by moving the first character to the end\n        binary_string = binary_string[1:] + binary_string[0]\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists or not all(isinstance(lst, list) for lst in nested_lists):\n        return []\n    \n    # Start with the first list's elements as a set\n    common_elements = set(nested_lists[0])\n    \n    # Iterate over the remaining lists and update the common elements\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    # Step 1: Trim the string\n    s = s.strip()\n    \n    # Step 2: Check for empty string\n    if not s:\n        return False\n    \n    # Step 3: Handle optional sign\n    if s[0] in ('+', '-'):\n        s = s[1:]\n    \n    # Step 4: Check for digits\n    if not s.isdigit():\n        return False\n    \n    # Step 5: Return result\n    return True"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dicts):\n    for d in dicts:\n        if d:  # If the dictionary is not empty\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tpl):\n    # Convert each integer in the tuple to a string and join them\n    concatenated_str = ''.join(map(str, tpl))\n    # Convert the concatenated string to an integer\n    result = int(concatenated_str)\n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for sublist in lst:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)\n        result.append(tuple(converted_sublist))\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Ensure mid is even for comparison\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the pair is valid\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return nums[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for a, b in tuples_list:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(limit):\n    def sum_of_proper_divisors(n):\n        total = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_sum = 0\n    for num in range(2, limit):\n        partner = sum_of_proper_divisors(num)\n        if partner != num and partner < limit and sum_of_proper_divisors(partner) == num:\n            amicable_sum += num\n\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Transform the binary string into an array of +1 and -1\n    transformed = [1 if char == '0' else -1 for char in binary_string]\n    \n    # Initialize variables for Kadane's algorithm\n    max_diff = 0\n    current_sum = 0\n    \n    # Apply Kadane's algorithm\n    for value in transformed:\n        current_sum += value\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_diff:\n            max_diff = current_sum\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def divisors(n):\n        return {i for i in range(1, n + 1) if n % i == 0}\n    \n    divisors_a = divisors(a)\n    divisors_b = divisors(b)\n    \n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the magic constant\n    magic_constant = n * (n**2 + 1) // 2\n    \n    # Check rows and columns\n    for i in range(n):\n        if sum(matrix[i]) != magic_constant:\n            return False\n        if sum(matrix[j][i] for j in range(n)) != magic_constant:\n            return False\n    \n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    \n    # Check secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    \n    # Count the frequency of each item in the list\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_count = -1\n    max_item = None\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    vowel_list = [char for char in s if char in vowels]\n    reversed_vowels = vowel_list[::-1]\n    \n    result = []\n    vowel_index = 0\n    \n    for char in s:\n        if char in vowels:\n            result.append(reversed_vowels[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    negative_sum = 0\n    for num in numbers:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in arr:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return float('inf')  # or handle as needed, e.g., return 0 or raise an exception\n    \n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    # Convert the number to binary and check if it consists of only 0s and 1s\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    result_set = set()\n    for sublist in list_of_lists:\n        for number in sublist:\n            result_set.add(number)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        # Find the index of the largest element in the unsorted portion\n        max_index = max(range(size), key=arr.__getitem__)\n        \n        # If the largest element is not already in its correct position\n        if max_index != size - 1:\n            # Bring the largest element to the front if it's not already there\n            if max_index != 0:\n                flip(arr, max_index + 1)\n            \n            # Move the largest element to its correct position\n            flip(arr, size)\n    \n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Check if all lists have the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        return 0\n    \n    # Initialize counter\n    count = 0\n    \n    # Iterate over the lists\n    for i in range(len(list1)):\n        # Compare elements at the same position\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    max_element = max(arr)\n    min_element = min(arr)\n    return max_element - min_element"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    # Scale the solution\n    scale = n // gcd\n    x = x0 * scale\n    y = y0 * scale\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total_sum = 0\n    i = 0\n    while True:\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total_sum += term\n        i += 1\n    return total_sum"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for index, char in enumerate(s):\n        if ord(char) - ord('a') + 1 == index + 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate pairs\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    # Total pairs that XOR to an even number\n    return even_pairs + odd_pairs"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid start or end index\")\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    count = 0\n    substring = 'std'\n    length = len(substring)\n    \n    for i in range(len(s) - length + 1):\n        if s[i:i+length] == substring:\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    # Extract the data types of all elements in the tuple\n    types = set(type(item) for item in tup)\n    # Check if all elements have the same data type\n    return len(types) == 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Helper function to find the first occurrence of the element using binary search\n    def find_first_occurrence(arr, n, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < element:\n                low = mid + 1\n            elif arr[mid] > element:\n                high = mid - 1\n            else:\n                if mid == 0 or arr[mid - 1] != element:\n                    return mid\n                else:\n                    high = mid - 1\n        return -1\n    \n    # Find the first occurrence of the element\n    first_occurrence = find_first_occurrence(arr, n, element)\n    \n    # If the element is not found, it cannot be the majority\n    if first_occurrence == -1:\n        return False\n    \n    # Check if the element is the majority element\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == element:\n        return True\n    \n    return False"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(n):\n    return bin(n).count('1')"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([char for index, char in enumerate(s) if index % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negative = []\n    positive = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    return negative + positive"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    if not lst or n <= 0 or n > len(lst):\n        return []\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set for a 32-bit integer\n    mask = 0x55555555  # Binary: 01010101010101010101010101010101\n    # Set the even bits of n using the mask\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    for tpl in tuples_list:\n        sorted_tpl = tuple(sorted(tpl))\n        if sorted_tpl in occurrences:\n            occurrences[sorted_tpl] += 1\n        else:\n            occurrences[sorted_tpl] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    memo = {}\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        if (start, length) in memo:\n            return memo[(start, length)]\n\n        total = 0\n        for next_start in range(start * 2, m + 1):\n            total += count_sequences(next_start, length - 1)\n\n        memo[(start, length)] = total\n        return total\n\n    total_sequences = 0\n    for first in range(1, m + 1):\n        total_sequences += count_sequences(first, n - 1)\n\n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Remove the last element of list1\n    list1 = list1[:-1]\n    # Extend list1 with list2\n    list1.extend(list2)\n    # Return the modified list1\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Step 1: Calculate the square root of the given number\n    root = math.sqrt(n)\n    \n    # Step 2: Round up to the nearest whole number\n    next_root = math.ceil(root)\n    \n    # Step 3: Calculate the next perfect square\n    next_perfect_square = next_root ** 2\n    \n    # Step 4: Return the result\n    return next_perfect_square"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the increasing and decreasing subsequence sum arrays\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill the increasing subsequence sum array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Fill the decreasing subsequence sum array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    # Create a 2D array to store the length of longest palindromic subsequence\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. The outer loop is for the length of the substring\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # The result is in the top right corner of the table\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set_arr1 = set(arr1)\n    intersection = []\n    for num in arr2:\n        if num in set_arr1:\n            intersection.append(num)\n    return intersection"}
{"task_id": "Mbpp/250", "solution": "def count_X(input_tuple, element):\n    count = 0\n    for item in input_tuple:\n        if item == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    magnitude = abs(z)\n    phase = cmath.phase(z)\n    return (magnitude, phase)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        max_tuple = (max(t1[0], t2[0]), max(t1[1], t2[1]))\n        result.append(max_tuple)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n < 1:\n        return None\n    \n    count = 0\n    a, b = 1, 1  # NSW(0) = 1, NSW(1) = 1\n    index = 1\n    \n    while count < n:\n        if index >= 2:\n            c = 2 * b + a\n            a, b = b, c\n        else:\n            c = b\n        \n        if is_prime(c):\n            count += 1\n        \n        index += 1\n    \n    return c"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(a // b)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    if L < 0 or L > len(lst):\n        raise ValueError(\"L must be a non-negative integer and less than or equal to the length of the list.\")\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        sublist = lst[i::n]\n        result.append(sublist)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        sum_of_squares += odd_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length\")\n    \n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even_indices = 0\n    for k in range(0, n + 1, 2):\n        sum_even_indices += comb(n, k)\n    return sum_even_indices"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    seen = set()\n    for element in lst:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    \n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    # Convert the integer to a string\n    str_n = str(n)\n    \n    # Create a dictionary to count the frequency of each digit\n    frequency = {}\n    \n    # Count the frequency of each digit\n    for digit in str_n:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check the condition for each digit\n    for digit in str_n:\n        digit_int = int(digit)\n        if frequency[digit] > digit_int:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(s):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, s))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_kadane = kadane(arr)\n    \n    if k == 1:\n        return max_kadane\n    \n    # Calculate prefix and suffix sums\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current_prefix_sum = current_suffix_sum = 0\n    \n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    for i in range(n-1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    \n    total_sum = sum(arr)\n    \n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k-2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)\n\n# Example usage\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    # Assume a and b are the legs of the triangle\n    hypotenuse = math.sqrt(a**2 + b**2)\n    return hypotenuse"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i...mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    return flattened"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    aggregates = {}\n    \n    for name, score in scores:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    \n    max_name = None\n    max_score = 0\n    \n    for name, total_score in aggregates.items():\n        if total_score > max_score:\n            max_name = name\n            max_score = total_score\n    \n    return (max_name, max_score)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range(n + 1):\n        count_k = math.comb(n, k) * math.comb(n, k)\n        total_count += count_k\n    return total_count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict))"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    result = []\n    for phrase in word_list:\n        words = phrase.split()\n        for word in words:\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array\n    dp = [0] * n\n    \n    # Fill dp array for elements up to index i\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n    \n    # Find the maximum sum including the kth element\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    \n    # Generate all possible products\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top n products\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Start from the most significant bit and move towards the least significant bit\n    bit_length = n.bit_length()\n    # If n is 0, bit_length will be 0, so we need to handle this case\n    if n == 0:\n        return 1\n    \n    # Iterate over each bit position from the leftmost to the rightmost\n    for i in range(bit_length, -1, -1):\n        # Check if the bit at position i is unset\n        if (n & (1 << i)) == 0:\n            # Set the bit at position i\n            n |= (1 << i)\n            break\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    \n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    prev, curr = 2, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    \n    return curr"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_str):\n    formatted_list = []\n    for element in elements:\n        formatted_list.append(format_str.format(element))\n    return formatted_list"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, sub_keys, values):\n    result = []\n    for key, sub_key, value in zip(keys, sub_keys, values):\n        result.append({key: {sub_key: value}})\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    if n in memo:\n        return memo[n]\n    \n    if n == 0:\n        return 0\n    \n    # Calculate the sum of parts\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # Find the maximum of n and the sum of parts\n    result = max(n, sum_parts)\n    \n    # Store the result in memo\n    memo[n] = result\n    \n    return result"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tpl):\n    return len(tpl) == len(set(tpl))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count the occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if not isinstance(s, str) or len(s) == 0:\n        return \"Invalid\"\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += sum(int(digit) for digit in str(number))\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for t in tuples_list:\n        sorted_tuple = tuple(sorted(t))\n        unique_tuples.add(sorted_tuple)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Step 1: Find the pivot\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no pivot is found, return -1 (no larger number can be formed)\n    if i == -1:\n        return -1\n    \n    # Step 2: Find the smallest larger digit to the right of the pivot\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Step 3: Swap the pivot with the smallest larger digit\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Sort the digits to the right of the pivot\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Step 5: Convert back to integer and return\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for a, b in tuples_list:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out only numeric values (int and float)\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # If there are no numeric values, return None\n    if not numeric_values:\n        return None\n    \n    # Return the minimum value from the numeric values\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [number for number in numbers if number % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    set_seq1 = set(seq1)\n    for element in seq2:\n        if element in set_seq1:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n\n    max_product = float('-inf')\n    max_pair = (None, None)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(list_of_lists):\n    max_length_list = None\n    max_length = 0\n    \n    for lst in list_of_lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = lst\n            \n    return max_length_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n+1))\n    average = total_sum / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    rear_elements = []\n    for string in strings:\n        rear_elements.append(string[-1])\n    return rear_elements"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(list_of_lists, target_element):\n    count = 0\n    for sublist in list_of_lists:\n        if target_element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the input date string into components\n    year, month, day = date_str.split('-')\n    # Reorder and join the components to form the new date format\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    \n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Ensure both inputs are tuples and have the same length\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise ValueError(\"Both inputs must be tuples.\")\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform element-wise AND operation\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the vertex (h, k)\n    h = -b / (2 * a)\n    k = c - (b**2) / (4 * a)\n    \n    # Calculate the directrix\n    directrix = k - (1 / (4 * a))\n    \n    # Return the directrix as an integer\n    return int(directrix)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert both lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check for intersection\n    return not set1.isdisjoint(set2)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Calculate the median length of the trapezium\n    median = (a + b) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return abs(number) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    pair_count = {}\n    bidirectional_count = 0\n    \n    for a, b in pairs:\n        if (b, a) in pair_count:\n            bidirectional_count += 1\n        pair_count[(a, b)] = pair_count.get((a, b), 0) + 1\n    \n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    # Convert each integer to a string and join them\n    concatenated_string = ''.join(map(str, numbers))\n    # Convert the concatenated string back to an integer\n    result = int(concatenated_string)\n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Use regex to split the sentence into words, keeping punctuation attached to words\n    words = re.findall(r'\\b\\w+\\b', sentence)\n    index = 0\n    \n    for word in words:\n        # Check if the word is an adverb\n        if word.endswith('ly'):\n            start_pos = sentence.index(word, index)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n        # Update the index to the next word's start position\n        index += len(word) + sentence[index:].index(word) + 1\n    \n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive_counter = sum(1 for x in arr if x > 0)\n    ratio = positive_counter / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n    \n    result = []\n    for (a, b) in zip(tuple1, tuple2):\n        if len(a) != len(b):\n            raise ValueError(\"Each pair of elements must have the same length\")\n        multiplied = tuple(x * y for x, y in zip(a, b))\n        result.append(multiplied)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    cubes = []\n    for num in numbers:\n        cubes.append(num ** 3)\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    # Base cases\n    perrin = [3, 0, 2]\n    \n    # Generate Perrin numbers up to n\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    \n    # Calculate the sum of the sequence\n    return sum(perrin[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    result = []\n    for string in string_list:\n        if len(string) == size:\n            result.append(string)\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s: str) -> str:\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    even_factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors_sum += i\n    return even_factors_sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    # Set of month numbers that have 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    # Check if the given month is in the set\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list_of_lists):\n    if not list_of_lists:\n        return None  # Return None if the input list is empty\n    \n    min_sublist = list_of_lists[0]  # Start with the first sublist as the minimum\n    for sublist in list_of_lists:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist  # Update if a shorter sublist is found\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            while i < len(s) and s[i].isupper():\n                i += 1\n        else:\n            result.append(s[i])\n            i += 1\n    return ''.join(result)"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    first_elements = []\n    for sublist in sublists:\n        if sublist:  # Check if the sublist is not empty\n            first_elements.append(sublist[0])\n    return first_elements"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the max_product array\n    max_product = arr[:]\n    \n    # Fill the max_product array\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    \n    # Return the maximum value in max_product array\n    return max(max_product)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    if not isinstance(t, tuple):\n        return ()\n    \n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] + t[i + 1])\n    \n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    \n    lst.sort()\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1] + 1:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Normalize tuples by sorting them\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find intersection of the two sets\n    intersection = set1 & set2\n    \n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(original_string, old_char, new_char):\n    return original_string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()\n\n# Example assertion\nassert is_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # If the number is negative, ignore the first character\n    if num_str[0] == '-':\n        num_str = num_str[1:]\n    \n    # Get the first character and convert it to an integer\n    first_digit = int(num_str[0])\n    \n    return first_digit"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_n ** 2\n    \n    # Calculate the difference\n    diff = sum_cubes_n - sum_n\n    \n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    even_count = 0\n    odd_count = 0\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str1, str2 = str(num1), str(num2)\n    \n    # Pad the shorter string with leading zeros\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    total_difference = 0\n    for digit1, digit2 in zip(str1, str2):\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(n):\n        max_ending_here += arr[i]\n        \n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Step 1: Combine the tuples\n    combined = tuple1 + tuple2\n    \n    # Step 2: Remove duplicates by converting to a set\n    unique_elements = set(combined)\n    \n    # Step 3: Sort the elements\n    sorted_elements = sorted(unique_elements)\n    \n    # Step 4: Convert to tuple and return\n    return tuple(sorted_elements)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Define the regex pattern for extracting quoted strings\n    pattern = r'\"(.*?)\"'\n    # Use re.findall to extract all matches\n    return re.findall(pattern, s)"}
{"task_id": "Mbpp/564", "solution": "from collections import Counter\n\ndef count_Pairs(lst, n):\n    # Step 1: Count the frequency of each element\n    freq = Counter(lst)\n    \n    # Step 2: Calculate total number of pairs\n    total_pairs = n * (n - 1) // 2\n    \n    # Step 3: Subtract pairs with equal elements\n    equal_pairs = sum(count * (count - 1) // 2 for count in freq.values())\n    \n    # Step 4: Calculate unequal pairs\n    unequal_pairs = total_pairs - equal_pairs\n    \n    # Step 5: Return the result\n    return unequal_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "from collections import Counter\n\ndef two_unique_nums(nums):\n    # Count the occurrences of each number\n    num_count = Counter(nums)\n    \n    # Collect numbers that appear only once\n    unique_nums = [num for num, count in num_count.items() if count == 1]\n    \n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(height, radius):\n    lateral_surface_area = 2 * math.pi * radius * height\n    base_area = 2 * math.pi * radius ** 2\n    total_surface_area = lateral_surface_area + base_area\n    return round(total_surface_area, 2)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    if not sub_list:\n        return True\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_set = set1.symmetric_difference(set2)\n    return tuple(dissimilar_set)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(data):\n    if isinstance(data, tuple):\n        result = tuple(extract_even(item) for item in data if isinstance(item, tuple) or (isinstance(item, int) and item % 2 == 0))\n        return tuple(item for item in result if item != ())\n    return data"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the slant height\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the area of one triangular face\n    triangle_area = 0.5 * base_edge * slant_height\n    \n    # Calculate the total area of the four triangular faces\n    total_triangle_area = 4 * triangle_area\n    \n    # Calculate the total surface area\n    total_surface_area = base_area + total_triangle_area\n    \n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def is_dict_empty(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "import math\n\ndef catalan_number(n):\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    if not isinstance(items, list) or not all(isinstance(item, dict) and 'price' in item for item in items):\n        raise ValueError(\"Invalid input: items must be a list of dictionaries with a 'price' key.\")\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid input: n must be a positive integer.\")\n    \n    # Sort items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not isinstance(lst, list) or len(lst) < 2:\n        raise ValueError(\"Input must be a list with at least two elements.\")\n    \n    max_value = max(lst)\n    min_value = min(lst)\n    \n    return max_value - min_value"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    # Find the smallest integer n such that n^2 >= start\n    start_n = math.ceil(math.sqrt(start))\n    # Find the largest integer n such that n^2 <= end\n    end_n = math.floor(math.sqrt(end))\n    \n    # Generate the list of perfect squares\n    return [n**2 for n in range(start_n, end_n + 1)]"}
{"task_id": "Mbpp/590", "solution": "import math\nimport cmath\n\ndef polar_rect(r, theta):\n    # Calculate rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Calculate complex number representation\n    z = cmath.rect(r, theta)\n    \n    return ((x, y), z)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_of_product(n):\n    total_sum = 0\n    for k in range(n):\n        product = comb(n, k) * comb(n, k + 1)\n        total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    # Split the IP address into its components\n    octets = ip_address.split('.')\n    # Remove leading zeroes by converting to int and back to str\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    # Join the cleaned octets back into a single string\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    return cleaned_ip_address"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for number in numbers:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        raise ValueError(\"Binary strings must be of the same length\")\n    \n    # Count mismatches\n    mismatches = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatches += 1\n    \n    # Each swap fixes two mismatches\n    return mismatches // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    low, high = 0, len(arr1)\n    \n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n        \n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len(arr1) else arr1[partition1]\n        \n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len(arr2) else arr2[partition2]\n        \n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n    \n    raise ValueError(\"Input arrays are not valid for the given k\")"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of num_digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    average_n = sum_n / n\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    \n    while numbers:\n        # The first number in the list is always a ludic number\n        ludic = numbers[0]\n        ludic_numbers.append(ludic)\n        \n        # Remove every ludic-th number from the list\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % ludic != 0]\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    # Split the string into words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words into a single string\n    reversed_string = ' '.join(reversed_words)\n    # Return the reversed string\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a table to store results of subproblems\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the last value of the previous row as the first value of this row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first entry in the nth row\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if 0 <= k < len(lst):\n        return lst[:k] + lst[k+1:]\n    return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        raise ValueError(\"Invalid matrix or column index\")\n    \n    nth_column = [row[n] for row in matrix]\n    return max(nth_column)"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        for num in tup:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in the list.\")\n        result.append(a / b)\n    \n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    non_numeric = []\n    numeric = []\n    \n    for char in s:\n        if char.isdigit():\n            numeric.append(char)\n        else:\n            non_numeric.append(char)\n    \n    return ''.join(non_numeric) + ''.join(numeric)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    prev = [-1] * n\n    \n    max_size = 1\n    max_index = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[i] > max_size:\n            max_size = dp[i]\n            max_index = i\n    \n    return max_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    i = 0  # Current index of arr1\n    j = 0  # Current index of arr2\n    m1 = -1\n    m2 = -1\n    \n    # Since there are 2n elements, median will be average of elements\n    # at index n-1 and n in the array obtained after merging arr1 and arr2\n    for count in range(n + 1):\n        # If all elements of arr1 are smaller than smallest(or first) element of arr2\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        \n        # If all elements of arr2 are smaller than smallest(or first) element of arr1\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        \n        if arr1[i] <= arr2[j]:\n            m1 = m2  # Store the previous median\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2  # Store the previous median\n            m2 = arr2[j]\n            j += 1\n    \n    return (m1 + m2) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    result = []\n    for number in numbers:\n        result.append(number ** n)\n    return result"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\n# Test\nassert is_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    base = 2 * radius\n    height = radius\n    area = 0.5 * base * height\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    result = ''\n    for char in input_string:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    return result"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero_index = 0\n    \n    # Move all non-zero elements to the front\n    for i in range(len(lst)):\n        if lst[i] != 0:\n            lst[non_zero_index] = lst[i]\n            non_zero_index += 1\n    \n    # Fill the rest of the list with zeroes\n    for i in range(non_zero_index, len(lst)):\n        lst[i] = 0\n    \n    return lst"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    # Calculate the wind chill index using the given formula\n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    # Round the result to the next integer\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter names that start with an uppercase letter\n    filtered_names = [name for name in names if name[0].isupper()]\n    # Calculate the sum of the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(strings):\n    result = []\n    for s in strings:\n        # Use regex to remove content within parentheses\n        cleaned_string = re.sub(r'\\([^)]*\\)', '', s)\n        result.append(cleaned_string.strip())\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return (7 * n * n - 5 * n) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    if len(s) < 3:\n        return False\n    for i in range(1, len(s) - 1):\n        if s[i] == 'z':\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k < 0 or k > len(arr):\n        raise ValueError(\"Position k is out of bounds\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    if N == 0:\n        return 0\n    \n    # Initialize the dp table\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    \n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    # Calculate the maximum average\n    max_sum = dp[N-1][N-1]\n    max_average = max_sum / (2 * N - 1)\n    \n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Step 1: Calculate the power\n    result = base ** power\n    \n    # Step 2: Convert the result to a string\n    result_str = str(result)\n    \n    # Step 3: Sum the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    # Step 4: Return the result\n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    # Initialize an empty list to store the products\n    products = []\n    \n    # Iterate over the tuple, stopping at the second-to-last element\n    for i in range(len(numbers) - 1):\n        # Calculate the product of the current and next element\n        product = numbers[i] * numbers[i + 1]\n        # Append the product to the list\n        products.append(product)\n    \n    # Convert the list of products to a tuple and return it\n    return tuple(products)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate over all possible starting points\n    for start in range(n):\n        product = 1\n        # Iterate over all possible ending points\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert number to binary and get its length\n    bin_n = bin(n)[2:]  # Remove the '0b' prefix\n    length = len(bin_n)\n    \n    # If the number has less than 3 bits, toggling middle bits is not possible\n    if length < 3:\n        return n\n    \n    # Create a mask with 1s in all positions except the first and last bit\n    mask = (1 << (length - 1)) - 1  # All bits set to 1\n    mask ^= 1  # Unset the first bit\n    mask ^= (1 << (length - 1))  # Unset the last bit\n    \n    # Toggle the middle bits using XOR\n    result = n ^ mask\n    \n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = r'^[aeiouAEIOU]'\n    return re.match(pattern, s) is not None"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if int(math.log10(triangular_number)) + 1 == n:\n            return index\n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tpl):\n    if len(tpl) % 2 != 0:\n        raise ValueError(\"Tuple must have an even number of elements\")\n    \n    result = {}\n    for i in range(0, len(tpl), 2):\n        result[tpl[i]] = tpl[i + 1]\n    \n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not isinstance(s, str):\n        return False\n    \n    if len(s) <= 1:\n        return True\n    \n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    if not lst or n == 0:\n        return lst\n    n = n % len(lst)  # Handle cases where n > len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(element is None for element in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = \"\"\n    for i, char in enumerate(s):\n        if char.isupper() and i != 0:\n            result += \" \"\n        result += char\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(string_list):\n    # Convert each string in the list to an integer\n    int_list = [int(num) for num in string_list]\n    # Sort the list of integers\n    int_list.sort()\n    # Return the sorted list\n    return int_list"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev2 = 0  # J(0)\n    prev1 = 1  # J(1)\n    \n    for i in range(2, n + 1):\n        current = prev1 + 2 * prev2\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of each tuple (the numeric value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two distinct elements\")\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        raise ValueError(\"List must contain at least two distinct elements\")\n    \n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "from collections import Counter\n\ndef count_reverse_pairs(string_list):\n    reverse_count = 0\n    string_counter = Counter()\n    \n    for s in string_list:\n        reverse_s = s[::-1]\n        if reverse_s in string_counter:\n            reverse_count += string_counter[reverse_s]\n        string_counter[s] += 1\n    \n    return reverse_count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    if not isinstance(s, str):\n        return False\n    \n    parts = s.split('.')\n    \n    if len(parts) != 2:\n        return False\n    \n    integer_part, fractional_part = parts\n    \n    if not integer_part.isdigit() or not fractional_part.isdigit():\n        return False\n    \n    if len(fractional_part) != 2:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_month_number(month):\n    # Months with 30 days: April, June, September, November\n    months_with_30_days = {4, 6, 9, 11}\n    return month in months_with_30_days"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0  # If there are less than 2 elements, no valid difference can be found\n    \n    # Sort the array\n    arr = sorted(arr)\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through the array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_power_of_two(x):\n    return (x & (x - 1)) == 0 and x != 0\n\ndef nth_polite_number(n):\n    count = 0\n    num = 1\n    while count < n:\n        if not is_power_of_two(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i + 1]))\n    return result"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    count = 0\n    freq = {}\n    \n    for num in arr:\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n        \n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum((2 * k - 1) ** 4 for k in range(1, n + 1))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to hold matching pairs\n    matching_bracket = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If it's an opening bracket, push to stack\n        if char in matching_bracket.values():\n            stack.append(char)\n        # If it's a closing bracket\n        elif char in matching_bracket:\n            # Check if stack is not empty and top of stack is matching opening bracket\n            if stack and stack[-1] == matching_bracket[char]:\n                stack.pop()\n            else:\n                return False\n    \n    # If stack is empty, all brackets are balanced\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    if not sub_string:\n        return None\n    \n    positions = []\n    sub_len = len(sub_string)\n    \n    for i in range(len(main_string) - sub_len + 1):\n        if main_string[i:i + sub_len] == sub_string:\n            positions.append(i)\n    \n    if not positions:\n        return None\n    \n    return (sub_string, *positions)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "from collections import Counter\n\ndef find_sum(lst):\n    # Count occurrences of each element\n    element_count = Counter(lst)\n    \n    # Sum up elements that appear only once\n    non_repeated_sum = sum(element for element, count in element_count.items() if count == 1)\n    \n    return non_repeated_sum"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for (a, b), (c, d) in combinations(tuple_list, 2):\n        result.append((a + c, b + d))\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible odd lengths\n    for length in range(1, n + 1, 2):\n        # Iterate over all starting points for subarrays of this length\n        for start in range(n - length + 1):\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[start:start + length])\n            # Add to the total sum\n            total_sum += subarray_sum\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize the RGB values\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Calculate the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the value (V)\n    v = max_val * 100\n    \n    # Calculate the saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = ((max_val - min_val) / max_val) * 100\n    \n    # Calculate the hue (H)\n    if max_val == min_val:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / (max_val - min_val)) + 0) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / (max_val - min_val)) + 120) % 360\n        elif max_val == b:\n            h = (60 * ((r - g) / (max_val - min_val)) + 240) % 360\n    \n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Step 1: Validate input\n    if not (s.startswith('(') and s.endswith(')')):\n        raise ValueError(\"Input string must be a tuple representation\")\n    \n    # Step 2: Remove parentheses\n    s = s[1:-1]\n    \n    # Step 3: Split the string by commas\n    str_numbers = s.split(',')\n    \n    # Step 4: Convert to integers\n    int_numbers = map(int, str_numbers)\n    \n    # Step 5: Create a tuple\n    result_tuple = tuple(int_numbers)\n    \n    # Step 6: Return the tuple\n    return result_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for item in input_tuple:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(list_of_lists):\n    return len(list_of_lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    low, high = 0, len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for number in range(l, r + 1):\n        if number % 2 != 0:\n            total_sum += number\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s: str) -> str:\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n            \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # Final check in case the string ends with an uppercase run\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        return False\n    if len(tuple1) != len(tuple2):\n        return False\n    \n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True"}
