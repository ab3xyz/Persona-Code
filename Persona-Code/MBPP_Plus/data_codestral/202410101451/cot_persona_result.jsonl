{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR the two numbers to get a number where the bits are set where num1 and num2 differ\n    xor_result = num1 ^ num2\n    # If the XOR result has only one set bit, then the numbers differ at one bit position only\n    return xor_result and not (xor_result & (xor_result - 1))"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    squared_list = []\n    for num in nums:\n        squared_list.append(num ** 2)\n    return squared_list"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    first_occurrence = s.find(c)\n    last_occurrence = s.rfind(c)\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and create a list of tuples\n    sum_rows = [(sum(row), row) for row in matrix]\n\n    # Sort the list of tuples based on the sum of the rows\n    sum_rows.sort()\n\n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for _, row in sum_rows]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n\n    # Calculate the volume of the prism\n    volume = triangular_area * length\n\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    # Split the string by underscore\n    parts = s.split('_')\n\n    # Check if each part is a lowercase string\n    for part in parts:\n        if not part.islower():\n            return False\n\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return side_length * 4"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(main_string, dirty_chars):\n    clean_string = \"\"\n    for char in main_string:\n        if char not in dirty_chars:\n            clean_string += char\n    return clean_string"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    k = (n - 1) / 2\n    return k.is_integer() and k * (k + 1) == n"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert the list of digits into a list of strings\n    str_digits = [str(digit) for digit in digits]\n\n    # Sort the list of strings in descending order\n    str_digits.sort(reverse=True)\n\n    # Join the sorted list of strings into a single string\n    max_num_str = ''.join(str_digits)\n\n    # Convert the resulting string back into an integer\n    max_num = int(max_num_str)\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (5 * n - 3)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n\n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21\nassert recursive_list_sum([7, 10, [15,14],[19,41]]) == 106\nassert recursive_list_sum([10, 20, [30,40],[50,60]]) == 210"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_numbers(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + j * bell[i][j-1]\n    return bell\n\ndef stirling_numbers(n):\n    stirling = [[0 for i in range(n+1)] for j in range(n+1)]\n    stirling[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            stirling[i][j] = j * stirling[i-1][j] + stirling[i-1][j-1]\n    return stirling\n\ndef partition_bell_numbers(n):\n    bell = bell_numbers(n)\n    stirling = stirling_numbers(n)\n    partition = 0\n    for i in range(1, n+1):\n        partition += stirling[n][i] * bell[i][i]\n    return partition"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    sub_list_length = len(sub_list)\n    for i in range(len(main_list) - sub_list_length + 1):\n        if main_list[i:i+sub_list_length] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    # If the list is empty, return True\n    if not tuples_list:\n        return True\n\n    # Get the length of the first tuple\n    first_length = len(tuples_list[0])\n\n    # Iterate through the list of tuples\n    for tup in tuples_list:\n        # If the length of the current tuple is not equal to the first tuple's length, return False\n        if len(tup) != first_length:\n            return False\n\n    # If all tuples have the same length, return True\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    # Check if the square root of n is an integer\n    if math.isqrt(n) ** 2 == n:\n        return True\n\n    # Check if the square root of n is not an integer\n    for a in range(1, int(math.sqrt(n)) + 1):\n        b = math.isqrt(n + a ** 2)\n        if a ** 2 - b ** 2 == n:\n            return True\n\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    mapping = {}\n\n    for i in range(len(list1)):\n        if list1[i] in mapping:\n            if mapping[list1[i]] != list2[i]:\n                return False\n        else:\n            mapping[list1[i]] = list2[i]\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Divisible_By_11(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n\n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n\n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n\n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n\n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    seq = [1, 1]\n    for i in range(2, n):\n        count = str(seq[:i]).count('1') + str(seq[:i]).count('2')\n        seq.append(count)\n    return seq[n-1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            merged_dict[key] = value\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    for i in range(len(num_str) - 1):\n        if num_str[i] != num_str[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_index = None\n\n    for index, (name, value) in enumerate(tuples_list):\n        if value < min_value:\n            min_value = value\n            min_index = index\n\n    return tuples_list[min_index][0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the dictionary\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    while True:\n        n -= 1\n        if is_palindrome(n):\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == m or m == 0:\n        return 1\n    else:\n        return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    for sublist in lst:\n        sublist.sort()\n    return lst"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    # Initialize a counter\n    count = 0\n\n    # Iterate over the list\n    for bool_val in bool_list:\n        # If the value is True, increment the counter\n        if bool_val:\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list_to_add, tuple_to_extend):\n    # Convert the tuple to a list\n    list_extended = list(tuple_to_extend)\n    # Append the list to the converted list\n    list_extended.extend(list_to_add)\n    # Convert the result back to a tuple\n    tuple_extended = tuple(list_extended)\n    return tuple_extended"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    sorted_list = sorted(merged_list)\n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    rotations = []\n    for _ in range(n):\n        s = s[-1] + s[:-1]\n        rotations.append(s)\n\n    count = 0\n    for rotation in rotations:\n        num = int(rotation, 2)\n        if num % 2 == 1:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dict_list):\n    for d in dict_list:\n        if len(d) != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    result = \"\"\n    for num in tup:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [[float(i) for i in sublist] for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n\n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for tup in tuples_list:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        j = sum_of_divisors(i)\n        if i < j <= n and sum_of_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    count_ones = 0\n    count_zeros = 0\n    max_diff = 0\n\n    for char in binary_string:\n        if char == '1':\n            count_ones += 1\n        else:\n            count_zeros += 1\n\n        max_diff = max(max_diff, abs(count_ones - count_zeros))\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(num1, num2):\n    return num1 * num2"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    reference_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != reference_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != reference_sum:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != reference_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n)) != reference_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_freq = max(frequency.values())\n    for item, freq in frequency.items():\n        if freq == max_freq:\n            return item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    remaining = n\n    while remaining > 0:\n        if remaining % 2 != 0:\n            return False\n        remaining //= 2\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    result = set()\n    for tup in lst:\n        for num in tup:\n            result.add(num)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(max_idx)\n            flip(i - 1)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    min_val = max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    else:\n        return (x * (n // gcd), y * (n // gcd))"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    return [element for element in original_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    \"\"\"Calculate the sum of divisors of a given integer.\"\"\"\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(divisors)\n\ndef are_equivalent(a, b):\n    \"\"\"Determine if the sum of the divisors of two integers are the same.\"\"\"\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(numbers):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] ^ numbers[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        n -= 1\n        n |= n >> 1\n        n |= n >> 2\n        n |= n >> 4\n        n |= n >> 8\n        n |= n >> 16\n        return n + 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    sublist = numbers[start_index:end_index+1]\n    return sum(sublist)"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n\n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    counter = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+3] == 'std':\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    def binary_search(left, right, is_first):\n        result = -1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == element:\n                result = mid\n                if is_first:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            elif arr[mid] < element:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n\n    first = binary_search(0, n - 1, True)\n    last = binary_search(0, n - 1, False)\n\n    if first == -1 or last == -1:\n        return False\n\n    return last - first + 1 > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n\n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n\n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n\n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n\n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n\n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replace_char):\n    return input_string.replace(' ', replace_char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n\n    # Return the first n elements\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    volume = side_length ** 3\n    return volume"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0xAAAAAAAA\n\n    # Perform bitwise OR operation between the number and the mask\n    result = n | mask\n\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for t in tuples_list:\n        if t in occurrences:\n            occurrences[t] += 1\n        else:\n            occurrences[t] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2 - n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base case: dp[1][j] = 1 for all j in the range [1, m]\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n\n    # Calculate dp[i][j] for i > 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n\n    # The answer is the sum of dp[n][j] for all j in the range [1, m]\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # If the square of the root is equal to n, increment the root by 1\n    if root * root == n:\n        root += 1\n    # Return the square of the next integer\n    return root * root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Step 2: Fill the increasing array\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        increasing[i] = max(increasing[j] for j in range(i) if arr[j] < arr[i]) + arr[i]\n\n    # Step 3: Fill the decreasing array\n    decreasing[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        decreasing[i] = max(decreasing[j] for j in range(i, n) if arr[j] < arr[i]) + arr[i]\n\n    # Step 4, 5, and 6: Calculate the maximum sum of a bitonic subsequence\n    return max(increasing[i] + decreasing[i] - arr[i] for i in range(n))"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element):\n    count = 0\n    for item in tuple_input:\n        if item == element:\n            count += 1\n    return count\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"}
{"task_id": "Mbpp/251", "solution": "def insert_element(input_list, element):\n    result = []\n    for item in input_list:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    r = abs(complex_number)\n    theta = cmath.phase(complex_number)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n\n    if not lst:\n        return []\n\n    first = lst[0]\n    remaining = lst[1:]\n\n    combinations_without_first = combinations_colors(remaining, n)\n    combinations_with_first = [(first,) + combination for combination in combinations_colors(lst, n-1)]\n\n    return combinations_with_first + combinations_without_first"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n\n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Sort both tuples based on the first element\n    tuple1 = sorted(tuple1)\n    tuple2 = sorted(tuple2)\n\n    # Compare the second elements of each tuple and select the larger one\n    maximized_tuple = [(t1[0], max(t1[1], t2[1])) for t1, t2 in zip(tuple1, tuple2)]\n\n    return tuple(maximized_tuple)"}
{"task_id": "Mbpp/260", "solution": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(math.sqrt(n)) + 1\n    for i in range(3, sqrt_n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            if math.isqrt(num - 1) ** 2 == num - 1:\n                count += 1\n    return num"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return \"Error: The tuples must have the same length.\"\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            return \"Error: Division by zero is not allowed.\"\n        result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        sublist = lst[i::n]\n        result.append(sublist)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return n ** 2"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n\n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n\n    Returns:\n    int: ASCII value of the character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n\n    # Return the ASCII value using the ord() function\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    result = []\n    for t in tuples_list:\n        result.append(t[-1])\n    return result"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef even_binomial_coeff_sum(n):\n    sum_coeff = 0\n    for i in range(0, n+1, 2):\n        sum_coeff += binomial_coefficient(n, i)\n    return sum_coeff\n\n# Test the function\nprint(even_binomial_coeff_sum(4))\nprint(even_binomial_coeff_sum(6))\nprint(even_binomial_coeff_sum(2))"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n\n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t, target):\n    counter = 0\n    for element in t:\n        if element == target:\n            return counter\n        counter += 1\n    return \"Target element not found\""}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n\n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True\n\n# Test the function\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n\n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the total sum of the given array\n    total_sum = sum(arr)\n\n    # If the total sum is negative, return 0\n    if total_sum < 0:\n        return 0\n\n    # Use Kadane's algorithm to find the maximum sum of a contiguous subarray in the given array\n    max_sum_single = max_sub_array_sum(arr)\n\n    # Repeat the array k times\n    repeated_arr = arr * k\n\n    # Use Kadane's algorithm to find the maximum sum of a contiguous subarray in the modified array\n    max_sum_repeated = max_sub_array_sum(repeated_arr)\n\n    # Return the maximum of the two sums\n    return max(max_sum_single, max_sum_repeated)\n\ndef max_sub_array_sum(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n\n    max_len = 0\n    max_list = []\n\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    # Calculate the square of each side\n    square_side1 = side1 ** 2\n    square_side2 = side2 ** 2\n\n    # Add the squares of the two known sides\n    sum_squares = square_side1 + square_side2\n\n    # Take the square root of the sum to get the length of the third side\n    third_side = math.sqrt(sum_squares)\n\n    return third_side"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out the integers from the list\n    int_lst = [i for i in lst if isinstance(i, int)]\n\n    # If there are no integers in the list, return None\n    if not int_lst:\n        return None\n\n    # Find the maximum value among the integers\n    max_val = max(int_lst)\n\n    return max_val"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n\n    # Iterate through all possible divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    result = []\n    for i in nested_list:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    aggregated_values = {}\n    for name, value in tuples_list:\n        if name in aggregated_values:\n            aggregated_values[name] += value\n        else:\n            aggregated_values[name] = value\n    max_name = max(aggregated_values, key=aggregated_values.get)\n    return max_name, aggregated_values[max_name]"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    dp = [[0] * (2 * n + 1) for _ in range(2 * n + 1)]\n    dp[0][0] = 1\n    for i in range(1, 2 * n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] * 2\n            else:\n                dp[i][j] = dp[i - 1][j] * 2 + dp[i - 1][j - 1]\n    return dp[2 * n][n]"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    max_depth = 1\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, 1 + dict_depth(value))\n    return max_depth"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return tuple(p_words)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    max_sum = dp[i]\n    for j in range(0, i):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Create a list of all possible products\n    products = [a*b for a in list1 for b in list2]\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the first 'n' elements from the sorted list of products\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n\n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n\n    # Set the left-most unset bit\n    n |= (1 << position)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "import math\n\ndef highest_Power_of_2(n):\n    power = int(math.log2(n))\n    return 2 ** power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n\n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    return [{key: {value: score}} for key, value, score in zip(keys, values, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4] + dp[i // 5], i)\n    return dp[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    return len(input_tuple) == len(set(input_tuple))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n\n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) > 0 and s[0] == s[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, int):\n            for digit in str(number):\n                total_sum += int(digit)\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Generate all permutations of the digits\n    perms = permutations(digits)\n\n    # Convert the permutations back to numbers and sort them\n    numbers = sorted(int(''.join(p)) for p in perms)\n\n    # Find the first number that is larger than the original number\n    for num in numbers:\n        if num > n:\n            return num\n\n    # If no larger number is found, return None\n    return None"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = float('inf')\n    for element in lst:\n        if isinstance(element, (int, float)):\n            if element < min_value:\n                min_value = element\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    with all the odd numbers removed.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    result = []\n    for tup in tuples_list:\n        result.append(tup[n])\n    return result"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple, delimiter='-'):\n    # Convert each element to string and join them with the delimiter\n    return delimiter.join(map(str, input_tuple))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    last_chars = [string[-1] for string in strings]\n    return last_chars"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return '-'.join([day, month, year])"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    directrix = -a / (4 * h)\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "import math\n\ndef median_trapezium(base1, base2, height):\n    # Calculate the lengths of all four sides\n    a = (base1 + base2) / 2\n    b = math.sqrt((a - base1)**2 + height**2)\n    c = math.sqrt((a - base2)**2 + height**2)\n    d = base2 - base1\n\n    # Sort the lengths of the sides\n    sides = sorted([a, b, c, d])\n\n    # Find the median length\n    if len(sides) % 2 == 0:\n        median = (sides[len(sides) // 2 - 1] + sides[len(sides) // 2]) / 2\n    else:\n        median = sides[len(sides) // 2]\n\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n\n    # Iterate over each number in the input list\n    for num in numbers:\n        # If the number is negative, append it to the negative_numbers list\n        if num < 0:\n            negative_numbers.append(num)\n\n    # Return the list of negative numbers\n    return negative_numbers"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(input_string):\n    result = \"\"\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            result += input_string[i]\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen_pairs = set()\n    count = 0\n    for t in tuples:\n        reverse_t = (t[1], t[0])\n        if reverse_t in seen_pairs:\n            count += 1\n        else:\n            seen_pairs.add(t)\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\ndef find_adverb_position(sentence):\n    words = word_tokenize(sentence)\n    tagged_words = pos_tag(words)\n\n    for i, (word, tag) in enumerate(tagged_words):\n        if tag.startswith('RB'):\n            return i, i + len(word), word\n\n    return \"No adverb found in the sentence.\""}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)\n\n# Test the function\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.538\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.692\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.555"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n    return tuple(result)\n\n# Testing the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    cubed_list = []\n    for num in numbers:\n        cubed_num = num ** 3\n        cubed_list.append(cubed_num)\n    return cubed_list"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin_numbers = [3, 0, 2]\n    for i in range(3, n):\n        next_perrin = perrin_numbers[i-1] + perrin_numbers[i-2] + perrin_numbers[i-3]\n        perrin_numbers.append(next_perrin)\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    result = []\n    for string in string_list:\n        if len(string) <= size:\n            result.append(string)\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    area = length * width\n    return area"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sub[0] for sub in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_str):\n    count = 0\n    for char in input_str:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n\n    combinations = []\n    for i in range(len(lst)):\n        current_element = lst[i]\n        remaining_elements = lst[i+1:]\n        sub_combinations = combinations_list(remaining_elements)\n\n        for sub_combination in sub_combinations:\n            combination = [current_element] + sub_combination\n            combinations.append(combination)\n\n    return combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = overall_max = nums[0]\n\n    for num in nums[1:]:\n        if num > 0:\n            max_product = max(num, max_product * num)\n            min_product = min(num, min_product * num)\n        else:\n            max_product, min_product = max(num, min_product * num), min(num, max_product * num)\n\n        overall_max = max(overall_max, max_product)\n\n    return overall_max"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    new_dict = {}\n    for key, value in dictionary.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dict"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] * arr[i]:\n                dp[i] = dp[j] * arr[i]\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(input_tuple):\n    results = []\n    for i in range(len(input_tuple) - 1):\n        results.append(input_tuple[i] + input_tuple[i + 1])\n    return tuple(results)\n\n# Test the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert each tuple to a set\n    set1 = set(map(frozenset, list1))\n    set2 = set(map(frozenset, list2))\n\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n\n    # Convert each set back to a tuple\n    intersection = set(map(tuple, intersection))\n\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    min_val = min(arr)\n    max_val = max(arr)\n    return min_val + max_val"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    input_string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    while number >= 10:\n        number = number // 10\n    return number"}
{"task_id": "Mbpp/554", "solution": "def Split(input_list):\n    odd_numbers = []\n    for num in input_list:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n\n    # Find the difference\n    diff = sum_cubes - sum_n\n\n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n\n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(input_string):\n    result = \"\"\n    for char in input_string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Make sure both numbers have the same number of digits\n    # If not, pad the shorter number with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n\n    # Calculate the sum of the per-digit difference\n    sum_diff = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        sum_diff += abs(int(digit1) - int(digit2))\n\n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, size):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, size):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far,curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Perform union operation\n    union_set = set1.union(set2)\n\n    # Convert set back to tuple\n    union_tuple = tuple(union_set)\n\n    # Sort the tuple\n    sorted_tuple = tuple(sorted(union_tuple))\n\n    return sorted_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "from collections import Counter\n\ndef count_Pairs(lst, n):\n    # Calculate total pairs\n    total_pairs = n * (n - 1) // 2\n\n    # Count frequency of each element\n    freq = Counter(lst)\n\n    # Calculate equal pairs\n    equal_pairs = 0\n    for count in freq.values():\n        equal_pairs += count * (count - 1) // 2\n\n    # Return unequal pairs\n    return total_pairs - equal_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Convert the list to a set to remove duplicates\n    product = 1  # Initialize the product variable to 1\n    for number in unique_numbers:  # Iterate over the unique numbers in the set\n        product *= number  # Multiply the product variable by each unique number\n    return product  # Return the final product value"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n\n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    diff1 = set1.difference(set2)\n    diff2 = set2.difference(set1)\n    return tuple(diff1.union(diff2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    result = ()\n    for element in t:\n        if isinstance(element, tuple):\n            result += (extract_even(element),)\n        elif element % 2 == 0:\n            result += (element,)\n    return result"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    perimeter_of_base = 4 * base_edge\n    slant_height = math.sqrt(height ** 2 + (base_edge / 2) ** 2)\n    surface_area = base_area + (perimeter_of_base * slant_height / 2)\n    return surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n\n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    first_part = arr[n:]\n    second_part = arr[:n]\n    result = first_part + second_part\n    return result"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for num in range(start, end + 1):\n        if int(num ** 0.5) ** 2 == num:\n            squares.append(num)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), complex(x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "import math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k+1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    if len(bin1) != len(bin2) or bin1.count('1') != bin2.count('1'):\n        return None\n\n    swaps = 0\n    bin1 = list(bin1)\n\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            if bin1[i] == '1':\n                swap_index = bin1.index('0', i)\n            else:\n                swap_index = bin1.index('1', i)\n\n            bin1[i], bin1[swap_index] = bin1[swap_index], bin1[i]\n            swaps += 1\n\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number into a list of its digits\n    digits = [int(x) for x in str(num)]\n\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_digits = sum(digit ** len(digits) for digit in digits)\n\n    # Check if the sum is equal to the original number\n    return sum_of_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Generate all prime numbers up to n using Sieve of Eratosthenes\n    primes = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n\n    # Filter out numbers that are not lucid\n    ludic_numbers = []\n    for num in range(1, n + 1):\n        if primes[num]:\n            ludic_numbers.append(num)\n        elif len(str(num)) % 2 == 1 and primes[sum(int(digit) for digit in str(num))]:\n            ludic_numbers.append(num)\n\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n\n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    reversed_words = words[::-1]\n\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "import math\n\ndef prime_num(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Check if k is within the valid range\n    if k < 0 or k >= len(lst):\n        return lst\n\n    # Create a new list with the same elements as the input list, but with the k'th element removed\n    new_lst = lst[:k] + lst[k+1:]\n\n    return new_lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max_value = float('-inf')\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for t in tuple_list:\n        for val in t:\n            total_sum += val\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    chars = \"\"\n    nums = \"\"\n    for char in s:\n        if char.isdigit():\n            nums += char\n        else:\n            chars += char\n    return chars + nums"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    n = len(nums)\n    nums.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        return (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        return merged_list[n//2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    if ' ' in input_string:\n        return input_string.replace(' ', '_')\n    else:\n        return input_string.replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero_elements = [i for i in lst if i != 0]\n    zero_elements = [i for i in lst if i == 0]\n    return non_zero_elements + zero_elements"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    ans = 0\n    for i in range(0, 32):\n        count = 0\n        for j in range(0, n):\n            if (arr[j] & (1 << i)):\n                count += 1\n        ans += (count * (n - count) * (1 << i))\n    return ans"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(V, T):\n    # Calculate wind chill index\n    wind_chill = 13.12 + 0.6215*T - 11.37*V**0.16 + 0.3965*T*V**0.16\n    # Round to the next integer\n    wind_chill = round(wind_chill)\n    return wind_chill"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = \"\"\n    inside_parenthesis = False\n    for c in s:\n        if c == '(':\n            inside_parenthesis = True\n        elif c == ')':\n            inside_parenthesis = False\n        elif not inside_parenthesis:\n            result += c\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters of the string\n    s = s[1:-1]\n    # Check if the character 'z' is present in the remaining string\n    if 'z' in s:\n        # If 'z' is present, return True\n        return True\n    else:\n        # Otherwise, return False\n        return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    path_length = 2 * n - 1\n    return dp[n-1][n-1] / path_length"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n\n    # Initialize the sum of digits\n    sum_of_digits = 0\n\n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Replace spaces with colon\n    output_string = input_string.replace(' ', ':')\n    # Replace commas with colon\n    output_string = output_string.replace(',', ':')\n    # Replace dots with colon\n    output_string = output_string.replace('.', ':')\n    return output_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        result += arr[i] * (i+1) * (n-i)\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Create a mask with all bits set to 1, except the first and the last bit\n    mask = (1 << (n.bit_length() - 1)) - 2\n\n    # Toggle the bits of the number that are set in the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = '^[aeiouAEIOU]'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if int(math.log10(triangular_number)) + 1 == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    result = {}\n    for i in range(0, len(tup) - 1, 2):\n        result[tup[i]] = tup[i + 1]\n    return result\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    for element in input_tuple:\n        if element is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        divisible = True\n        for digit in str(num):\n            if num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)\n\n# Test the function\nassert sector_area(4, 45) == 6.283185307179586\nassert sector_area(9, 45) == 31.808625617596654"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i > 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    # Convert each string to an integer\n    numbers = [int(s) for s in strings]\n\n    # Sort the list of integers\n    sorted_numbers = sorted(numbers)\n\n    # Return the sorted list of integers\n    return sorted_numbers"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    lst.extend(tpl)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + 2 * b\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n\n    # Return the first k tuples from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(word_list):\n    count = 0\n    for word in word_list:\n        if word[::-1] in word_list:\n            count += 1\n    return count // 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        whole, decimal = s.split('.')\n        if len(decimal) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(num_list):\n    return len(set(num_list)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference by comparing adjacent elements\n    for i in range(1, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    start = 1\n    end = n * 5\n\n    while start <= end:\n        mid = (start + end) // 2\n        sum = 0\n\n        for i in range(1, mid + 1):\n            if i % 2 == 0 or i % 3 == 0:\n                sum += 1\n\n        if sum < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    num_freq = {}\n    count = 0\n\n    for num in nums:\n        diff = target_sum - num\n        if diff in num_freq:\n            count += num_freq[diff]\n        if num in num_freq:\n            num_freq[num] += 1\n        else:\n            num_freq[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize sum\n    sum = 0\n\n    # Generate first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Calculate fourth power and add to sum\n        sum += i ** 4\n\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    bracket_pairs = {'(': ')', '{': '}', '[': ']'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or bracket_pairs[stack.pop()] != char:\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    start_pos = main_string.find(sub_string)\n    if start_pos == -1:\n        return None\n    else:\n        end_pos = start_pos + len(sub_string) - 1\n        return (sub_string, start_pos, end_pos)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if sublist:\n                result.append(sublist)\n            sublist = [lst[i]]\n        else:\n            sublist.append(lst[i])\n\n    if sublist:\n        result.append(sublist)\n\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    if not tuples:\n        return []\n    if len(tuples) == 1:\n        return [(sum(tuples[0]),)]\n    result = find_combinations(tuples[1:])\n    new_result = []\n    for tuple1 in tuples[0]:\n        for tuple2 in result:\n            new_tuple = (tuple1 + tuple2[0],) + tuple2[1:]\n            new_result.append(new_tuple)\n    return new_result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        total_sum += arr[i] * ((i + 1) * (n - i) + 1) // 2\n\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd\n\n# Test the function\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split the string into a list\n    str_list = tuple_str[1:-1].split(', ')\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list to a tuple\n    return tuple(int_list)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    pattern = r'abbb'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            low = mid + 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = '^a.*b$'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the range from l to r (inclusive)\n    for num in range(l, r + 1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) & (2**32-1) | ((n & (2**d-1)) << (32-d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 2\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_sublist = []\n\n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sublist = sublist\n\n    return max_sublist"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple1[i] <= tuple2[i]:\n            return False\n    return True"}
