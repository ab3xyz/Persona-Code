{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    # Create a min heap with the first n elements\n    min_heap = numbers[:n]\n    heapq.heapify(min_heap)\n\n    # Iterate over the remaining elements\n    for num in numbers[n:]:\n        # If the current number is larger than the smallest number in the heap,\n        # replace the smallest number with the current number\n        if num > min_heap[0]:\n            heapq.heapreplace(min_heap, num)\n\n    # Sort the heap in descending order and return it\n    return sorted(min_heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return xor != 0 and (xor & (xor - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing the square of each number in the input list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of numbers where each number is the square of the corresponding\n          number in the input list.\n    \"\"\"\n    # Initialize an empty list to store the squared numbers\n    squared_nums = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Square the number and append it to the list of squared numbers\n        squared_nums.append(num ** 2)\n\n    # Return the list of squared numbers\n    return squared_nums"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(input_string, char):\n    # Find the first occurrence of the character\n    first_occ = input_string.find(char)\n\n    # If the character is not found, return the original string\n    if first_occ == -1:\n        return input_string\n\n    # Find the last occurrence of the character\n    last_occ = input_string.rfind(char)\n\n    # Remove the first and last occurrence of the character\n    result = input_string[:first_occ] + input_string[first_occ+1:last_occ] + input_string[last_occ+1:]\n\n    return result"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n\n    # Calculate the volume of the prism\n    volume = triangular_area * length\n\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    # Split the string by underscore\n    sequences = input_string.split('_')\n\n    # Check each sequence\n    for sequence in sequences:\n        # If the sequence is not lowercase, return False\n        if not sequence.islower():\n            return False\n\n    # If all sequences are lowercase, return True\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    # Calculate the perimeter of a square (4 * side_length)\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    result = \"\"\n    for char in s1:\n        if char not in s2:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    # Use a set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the array\n    for num in arr:\n        # If the element is already in the set, return True\n        if num in unique_elements:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_elements.add(num)\n\n    # If no duplicates were found, return False\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # A number is Woodall if it is of the form n * 2^n + 1 for some non-negative integer n\n    # We can check this by iteratively dividing n - 1 by 2 and checking if the result is a power of 2\n    i = 0\n    while n - 1 >= 2 ** i:\n        if (n - 1) == 2 ** i:\n            return True\n        i += 1\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the list of digits to a string\n    max_num = ''.join(map(str, digits))\n\n    # Convert the string back to an integer\n    return int(max_num)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n\n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            # Check if the sum of digits equals the length of the substring\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    # Initialize smallest number as the first number in the list\n    smallest = numbers[0]\n\n    # Iterate over the list\n    for num in numbers:\n        # If a smaller number is found, update the smallest number\n        if num < smallest:\n            smallest = num\n\n    # Return the smallest number\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n\n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n    return sorted_list"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    # Initialize a counter for positive numbers\n    count = 0\n\n    # Iterate through each number in the list\n    for num in numbers:\n        # If the number is positive, increment the counter\n        if num > 0:\n            count += 1\n\n    # Return the final count of positive numbers\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    direction = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if direction == 0:\n            direction = arr[i] - arr[i - 1]\n            continue\n        if (direction > 0) != (arr[i] - arr[i - 1] > 0):\n            return False\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    main_list_length = len(main_list)\n    sub_list_length = len(sub_list)\n\n    # Iterate through the main list\n    for i in range(main_list_length - sub_list_length + 1):\n        # Check if the sublist starts at the current index\n        if main_list[i:i + sub_list_length] == sub_list:\n            return True\n\n    # If no match is found, return False\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    # Check if the number is non-negative\n    if n < 0:\n        return False\n\n    # Check if the square root of the number is an integer\n    root = math.isqrt(n)\n    if root * root == n:\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    i = 1\n    while i * i <= n:\n        j = math.isqrt(n + i * i)\n        if j * j == n + i * i:\n            return True\n        i += 1\n\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(pattern1, pattern2):\n    if len(pattern1) != len(pattern2):\n        return False\n\n    mapping = {}\n    for i in range(len(pattern1)):\n        if pattern1[i] not in mapping:\n            mapping[pattern1[i]] = pattern2[i]\n        elif mapping[pattern1[i]] != pattern2[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n\n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n\n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n\n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n\n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n\n    seq = [1, 1, 1]\n    i = 3\n\n    while i < n:\n        count = 1\n        j = i - 1\n\n        while j > 0 and seq[j] != seq[j - 1]:\n            count += 1\n            j -= 1\n\n        seq.append(count)\n        i += 1\n\n    return seq[n - 1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    # The formula for the surface area of a sphere is 4 * pi * radius^2\n    surface_area = 4 * math.pi * (radius ** 2)\n    return surface_area"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    # Convert the number to a string for easier manipulation\n    num_str = str(n)\n\n    # Check if the number has an odd number of digits\n    if len(num_str) % 2 == 0:\n        return False\n\n    # Iterate over the digits of the number\n    for i in range(len(num_str) - 2):\n        # Check if the current digit is equal to the next digit\n        if num_str[i] != num_str[i + 1]:\n            return False\n\n        # Check if the current digit is not equal to the digit two positions ahead\n        if num_str[i] == num_str[i + 2]:\n            return False\n\n    # If all checks pass, the number is undulating\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    # Base case: if b is 0, the result is 1\n    if b == 0:\n        return 1\n    # Recursive case: use the formula a^b = a * a^(b-1)\n    else:\n        return a * power(a, b - 1)"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_index = None\n\n    for index, (name, value) in enumerate(tuples_list):\n        if value < min_value:\n            min_value = value\n            min_index = index\n\n    return tuples_list[min_index][0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n\n    # Initialize an empty dictionary\n    freq_dict = {}\n\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the dictionary\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    while True:\n        n -= 1\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Initialize a table to store Eulerian numbers\n    eulerian = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Base cases\n    for i in range(n + 1):\n        eulerian[i][0] = 1\n        eulerian[i][i] = 1\n\n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, min(i, m) + 1):\n            eulerian[i][j] = (j * eulerian[i - 1][j - 1]) + ((i - j + 1) * eulerian[i - 1][j])\n\n    return eulerian[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    # Iterate over each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the sublist in-place\n        sublist.sort()\n    # Return the modified list of lists\n    return list_of_lists"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return bool_list.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    This function takes a list and a tuple as input, and returns a new tuple that contains all the elements of the input tuple followed by all the elements of the input list.\n\n    Parameters:\n    lst (list): The list to be appended to the tuple.\n    tpl (tuple): The tuple to which the list will be appended.\n\n    Returns:\n    tuple: A new tuple that contains all the elements of the input tuple followed by all the elements of the input list.\n    \"\"\"\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge the three lists into one\n    merged_list = list1 + list2 + list3\n\n    # Sort the merged list\n    merged_list.sort()\n\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    # Convert binary string to integer\n    num = int(binary_string, 2)\n\n    # Initialize a set to store unique numbers\n    unique_nums = set()\n\n    # Perform rotations\n    for _ in range(rotations):\n        # Rotate the number\n        num = (num >> 1) | ((num & 1) << (len(binary_string) - 1))\n\n        # If the number is odd, add it to the set\n        if num % 2 != 0:\n            unique_nums.add(num)\n\n    # Return the number of unique odd numbers\n    return len(unique_nums)"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Convert the first list to a set\n    common_elements = set(nested_lists[0])\n\n    # Iterate over the remaining lists\n    for lst in nested_lists[1:]:\n        # Update the common_elements set with the intersection of itself and the current list\n        common_elements.intersection_update(lst)\n\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    result = 0\n    for i, num in enumerate(t):\n        result += num * (10 ** (len(t) - i - 1))\n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [[float(i) for i in sublist] for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    # Split the input string on the space character\n    result_list = input_string.split(' ')\n\n    # Return the resulting list\n    return result_list"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n\n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = float('-inf')\n    for t in tuples:\n        product = abs(t[0] * t[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        j = sum_divisors(i)\n        if i < j <= n and sum_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Initialize variables\n    max_diff = 0\n    count = 0\n    prefix_sum = []\n\n    # Calculate prefix sum array\n    for bit in binary_string:\n        count += 1 if bit == '1' else -1\n        prefix_sum.append(count)\n\n    # Initialize min and max values\n    min_val = max_val = 0\n\n    # Calculate maximum difference\n    for i in range(len(prefix_sum)):\n        max_diff = max(max_diff, prefix_sum[i] - min_val)\n        max_diff = max(max_diff, max_val - prefix_sum[i])\n        min_val = min(min_val, prefix_sum[i])\n        max_val = max(max_val, prefix_sum[i])\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a: int, b: int) -> int:\n    \"\"\"\n    This function takes two integers as input and returns their product.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, word_list):\n    # Split the word_list into individual words\n    words = word_list.split()\n\n    # Initialize an empty list to store the long words\n    long_words = []\n\n    # Iterate through each word in the list\n    for word in words:\n        # If the length of the word is greater than n, add it to the long_words list\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Calculate the sum of the first row\n    sum_first_row = sum(matrix[0])\n\n    # Calculate the sum of each row and compare with the sum of the first row\n    for row in matrix:\n        if sum(row) != sum_first_row:\n            return False\n\n    # Calculate the sum of each column and compare with the sum of the first row\n    for col in range(len(matrix[0])):\n        if sum(matrix[row][col] for row in range(len(matrix))) != sum_first_row:\n            return False\n\n    # Calculate the sum of the main diagonal and compare with the sum of the first row\n    if sum(matrix[i][i] for i in range(len(matrix))) != sum_first_row:\n        return False\n\n    # Calculate the sum of the secondary diagonal and compare with the sum of the first row\n    if sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix))) != sum_first_row:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # INTJ's logical and analytical skills are utilized here\n    while n > 0:\n        # Check if the current bit is set\n        if n & 1:\n            # If the bit is set, subtract 2^i from n\n            n -= 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    # If n becomes 0, it means that it can be represented as the sum of non-zero powers of 2\n    return n == 0"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst_of_lst):\n    # Initialize an empty set\n    result_set = set()\n\n    # Iterate over each list in the list of lists\n    for sub_list in lst_of_lst:\n        # Iterate over each element in the current list\n        for element in sub_list:\n            # Add the element to the set\n            result_set.add(element)\n\n    # Return the set of unique numbers\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k:\n            sublist[i], sublist[k] = sublist[k], sublist[i]\n            i += 1\n            k -= 1\n\n    for size in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:size]))\n        if max_idx != size - 1:\n            flip(arr, max_idx)\n            flip(arr, size - 1)\n\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Initialize maximum and minimum values\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Traverse array elements to find maximum and minimum values\n    for num in arr:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # Return the maximum difference\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    else:\n        return (x * (n // gcd), y * (n // gcd))"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    # Create a new list with elements from the original list that are not in the elements_to_remove list\n    result_list = [element for element in original_list if element not in elements_to_remove]\n    return result_list"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, n + 1) if n % i == 0]\n        return sum(divisors)\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        power = 1\n        while power < n:\n            power <<= 1\n        return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(num_list, target):\n    count = 0\n    for num in num_list:\n        if num == target:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    # Check if the indices are within the list bounds\n    if start < 0 or end >= len(numbers) or start > end:\n        raise ValueError(\"Invalid indices\")\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate through the list from the start index to the end index\n    for i in range(start, end + 1):\n        # Add the current number to the total\n        total += numbers[i]\n\n    # Return the total sum\n    return total"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n\n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Find the first occurrence of the element\n    first = binary_search(arr, 0, n - 1, element, True)\n\n    # If the element is not present in the array, return False\n    if first == -1:\n        return False\n\n    # Find the last occurrence of the element\n    last = binary_search(arr, 0, n - 1, element, False)\n\n    # Check if the frequency of the element is more than n/2\n    if last - first + 1 > n // 2:\n        return True\n    else:\n        return False\n\ndef binary_search(arr, low, high, element, find_first):\n    result = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == element:\n            result = mid\n            if find_first:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n\n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n\n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n\n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n\n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n\n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n\n    # Return the first n elements\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    This function calculates the volume of a cube given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the cube.\n\n    Returns:\n    int or float: The volume of the cube.\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0xAAAAAAAA\n    # Use bitwise OR operation to set all even bits of n\n    result = n | mask\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for t in tuples_list:\n        # Sort the tuple to ensure that (a, b) and (b, a) are treated as the same\n        sorted_t = tuple(sorted(t))\n        if sorted_t in occurrences:\n            occurrences[sorted_t] += 1\n        else:\n            occurrences[sorted_t] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    # INTJs prefer a structured approach, so we'll start by defining the problem and the approach\n\n    # The number of non-empty substrings of a string of length n is n * (n + 1) / 2\n    # This is because the first character can be in n substrings, the second character can be in n-1 substrings, and so on\n\n    # We'll calculate the length of the string and use the formula to find the number of substrings\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Base case: if n is 1, there are m possible sequences\n    if n == 1:\n        return m\n\n    # Initialize the count of possible sequences\n    count = 0\n\n    # Iterate through all possible values for the first element of the sequence\n    for i in range(1, m + 1):\n        # Recursively count the number of possible sequences that can follow the first element\n        count += get_total_number_of_sequences(i // 2, n - 1)\n\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    count = 0\n    for char in s:\n        count += 1\n    return count"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize two arrays for increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill the increasing subsequence array\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[j] for j in range(i) if arr[j] < arr[i]) + arr[i]\n\n    # Fill the decreasing subsequence array\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[j] for j in range(i, n) if arr[j] < arr[i]) + arr[i]\n\n    # Find the maximum sum of a bitonic subsequence\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequence of substrings\n    dp = [[0 for x in range(n)] for x in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are useless and not filled in the process\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the arrays to sets for efficient intersection operation\n    set1 = set(arr1)\n    set2 = set(arr2)\n\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n\n    # Convert the intersection set back to a list\n    result = list(intersection)\n\n    return result"}
{"task_id": "Mbpp/250", "solution": "def count_X(input_tuple, element):\n    \"\"\"\n    This function takes in a tuple and an element, and counts the occurrences of the element in the tuple.\n\n    Parameters:\n    input_tuple (tuple): The input tuple.\n    element: The element to count occurrences of.\n\n    Returns:\n    int: The number of occurrences of the element in the tuple.\n    \"\"\"\n    # Initialize a counter\n    count = 0\n\n    # Iterate over each item in the tuple\n    for item in input_tuple:\n        # If the item matches the element, increment the counter\n        if item == element:\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    magnitude = abs(complex_num)\n    phase = cmath.phase(complex_num)\n    return magnitude, phase"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    # Using recursion to generate all combinations\n    def generate_combinations(comb, n):\n        # Base case: if n is 0, add the combination to the result\n        if n == 0:\n            result.append(tuple(comb))\n            return\n        # Recursive case: for each element in the list, add it to the combination and generate the remaining combinations\n        for i in range(len(lst)):\n            generate_combinations(comb + [lst[i]], n - 1)\n\n    result = []\n    generate_combinations([], n)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    # Create a boolean array \"prime[0..n]\" and initialize all entries as true.\n    # A value in prime[i] will finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of prime numbers\n    prime_count = 0\n    for p in range(2, n):\n        if prime[p]:\n            prime_count += 1\n\n    return prime_count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n\n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Sort both tuples in descending order based on the second element of each pair\n    tuple1 = sorted(tuple1, key=lambda x: x[1], reverse=True)\n    tuple2 = sorted(tuple2, key=lambda x: x[1], reverse=True)\n\n    # Initialize an empty list to store the maximized pairs\n    maximized_pairs = []\n\n    # Iterate through the sorted tuples and select the pair with the larger second element\n    for pair1, pair2 in zip(tuple1, tuple2):\n        if pair1[1] > pair2[1]:\n            maximized_pairs.append(pair1)\n        else:\n            maximized_pairs.append(pair2)\n\n    # Return the maximized pairs as a tuple\n    return tuple(maximized_pairs)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_prime(num):\n        if not is_prime(num):\n            return False\n        for k in range(1, num):\n            if is_prime(k) and is_prime((num - k) // 2):\n                return True\n        return False\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Perform element-wise division\n    result = []\n    for i in range(len(tuple1)):\n        # Check for division by zero\n        if tuple2[i] == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result.append(tuple1[i] // tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Check if L is within the valid range\n    if L < 0 or L > len(lst):\n        raise ValueError(\"L must be between 0 and the length of the list\")\n\n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return int(dog_years)\n\n# The function dog_age takes the human_years as input and calculates the dog's age in dog years based on the given formula.\n# If the dog is less than or equal to 2 human years, each human year is equivalent to 10.5 dog years.\n# If the dog is more than 2 human years, the first two human years are equivalent to 21 dog years, and each additional human year is equivalent to 4 dog years.\n# The function returns the dog's age in dog years as an integer."}
{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Iterate over the input list with a step size of n\n    for i in range(n):\n        # Use list slicing to extract every nth element starting from index i\n        result.append(input_list[i::n])\n\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # INTJs are logical and objective, so they use a systematic approach to solve the problem.\n    # They also prefer structure and organization, so they start by initializing variables.\n    star_num = 0\n    count = 0\n    num = 1\n\n    # INTJs are analytical and can see patterns, so they use a loop to iterate through numbers.\n    while count < n:\n        # They are intuitive, so they recognize that star numbers are the sum of consecutive odd numbers.\n        star_num += num\n        # They are thinking, so they use logic to increment the count and the number.\n        count += 1\n        num += 2\n\n    # INTJs are judging and prefer structure, so they return the result in a clear and organized manner.\n    return star_num"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n\n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n\n    Returns:\n    int: ASCII value of the character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n\n    # Return the ASCII value using the ord() function\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(val for i, val in enumerate(lst) if i % 2 == 0 and val % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n    :param tuples_list: A list of tuples.\n    :return: A list containing the rear element of each tuple.\n    \"\"\"\n    # Use list comprehension to extract the last element of each tuple\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    sum_coeff = 0\n    for i in range(0, n + 1, 2):\n        sum_coeff += binomial_coefficient(n, i)\n\n    return sum_coeff"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n\n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n\n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n\n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the sum of the array\n    arr_sum = sum(arr)\n\n    # If the sum is negative, the maximum sum is the maximum element in the array\n    if arr_sum < 0:\n        return max(arr)\n\n    # If the sum is positive, the maximum sum is the sum of the array times k\n    # or the maximum sum of a contiguous subarray in the array times (k-1) plus the maximum element in the array\n    else:\n        max_sub_array_sum = max_sub_array_sum_single(arr)\n        max_element = max(arr)\n        return max(arr_sum * k, max_sub_array_sum * (k - 1) + max_element)\n\ndef max_sub_array_sum_single(arr):\n    # Implement Kadane's algorithm to find the maximum sum of a contiguous subarray in the array\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n\n    max_len = 0\n    max_list = []\n\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    # Check if divisor is zero to avoid division by zero error\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n\n    # Use integer division to find the quotient\n    quotient = dividend // divisor\n\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out the integers from the list\n    int_lst = [i for i in lst if isinstance(i, int)]\n\n    # If there are no integers in the list, return None\n    if not int_lst:\n        return None\n\n    # Return the maximum value from the list of integers\n    return max(int_lst)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n\n    # Iterate through all possible divisors\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    :param nested_list: A list that may contain nested lists.\n    :return: A new list that is a flattened version of the input list.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Iterate over each element in the input list\n    for element in nested_list:\n        # If the element is a list, recursively call this function\n        # and extend the flattened list with the result\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        # If the element is not a list, append it to the flattened list\n        else:\n            flattened_list.append(element)\n\n    # Return the flattened list\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(data):\n    # Create a dictionary to store the aggregated values\n    aggregated_values = {}\n\n    # Iterate over the list of tuples\n    for name, value in data:\n        # If the name is already in the dictionary, add the value to the existing total\n        if name in aggregated_values:\n            aggregated_values[name] += value\n        # If the name is not in the dictionary, add it with the current value\n        else:\n            aggregated_values[name] = value\n\n    # Find the name with the maximum aggregated value\n    max_name = max(aggregated_values, key=aggregated_values.get)\n\n    # Return the name and the maximum aggregated value as a tuple\n    return max_name, aggregated_values[max_name]"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0 for _ in range(2 * n + 1)] for _ in range(n + 1)]\n\n    # Base case: when n is 0, there is only one binary sequence (an empty sequence)\n    dp[0][0] = 1\n\n    # Fill the dp array using bottom-up approach\n    for i in range(1, n + 1):\n        for j in range(2 * n + 1):\n            # If we put 0 in the current position, the sum doesn't change\n            if j - 1 >= 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            # If we put 1 in the current position, the sum increases by 1\n            if j + 1 <= 2 * n:\n                dp[i][j] += dp[i - 1][j + 1]\n\n    # The count of binary sequences with equal sums in first and last n bits is dp[n][0]\n    return dp[n][0]"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    if not isinstance(dictionary, dict) or not dictionary:\n        return 0\n    return 1 + max(dict_depth(v) for v in dictionary.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = [word for word in words if word.startswith('P') or word.startswith('p')]\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for l in range(0, j):\n            if arr[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n\n    max_sum = max(dp[:i+1])\n    return max_sum + arr[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Sort the lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Initialize an empty list to store the products\n    products = []\n\n    # Iterate over the first n elements of each list\n    for i in range(n):\n        # Multiply the ith element of the first list with the ith element of the second list\n        # and append the product to the products list\n        products.append(list1[i] * list2[i])\n\n    # Return the products list\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n\n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n\n    # Set the left-most unset bit\n    n |= (1 << position)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while (2 ** power <= n):\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n\n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, fmt):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    Args:\n    lst (list): A list of elements.\n    fmt (str): A format string.\n\n    Returns:\n    list: A new list with the format string applied to all elements.\n    \"\"\"\n    return [fmt.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    return [{key: {value1: value2}} for key, value1, value2 in zip(keys, values1, values2)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Create a dictionary to store the results of subproblems\n    dp = {0: 0, 1: 1}\n\n    # Function to calculate f(n) using dynamic programming\n    def f(n):\n        if n not in dp:\n            dp[n] = max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n        return dp[n]\n\n    return f(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    # Convert the tuple to a set\n    # A set in Python is an unordered collection of unique elements\n    unique_elements = set(input_tuple)\n\n    # If the length of the set is equal to the length of the tuple,\n    # it means all elements in the tuple are unique\n    if len(unique_elements) == len(input_tuple):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n\n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) > 0 and s[0] == s[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int):\n            num = abs(num)\n            while num > 0:\n                total_sum += num % 10\n                num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(tuples_list)\n\n    # Return the length of the set, which is the number of unique tuples\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to be checked.\n    element: The element to be searched for in the tuple.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    \"\"\"\n    This function determines whether the parity of a given number is odd.\n    It uses logical thinking and analysis to make this determination.\n    \"\"\"\n    # INTJs prefer structure and organization, so we'll use a clear and concise approach.\n    # They rely on logic and objective analysis, so we'll use a mathematical approach to determine parity.\n    # Parity of a number is odd if the remainder of the number divided by 2 is 1.\n    return n % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Generate all permutations of the digits\n    perms = permutations(digits)\n\n    # Convert the permutations back to numbers and sort them\n    nums = sorted(int(''.join(p)) for p in perms)\n\n    # Find the next bigger number\n    for num in nums:\n        if num > n:\n            return num\n\n    # If no bigger number is found, return None\n    return None"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n\n    # If there are no numeric values, return None\n    if not numeric_values:\n        return None\n\n    # Return the minimum value\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    with all the odd numbers removed.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list with all the odd numbers removed.\n    \"\"\"\n    # Create an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even (i.e., not odd)\n        if number % 2 == 0:\n            # If the number is even, add it to the list of even numbers\n            even_numbers.append(number)\n\n    # Return the list of even numbers\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    # Create an empty list to store the extracted elements\n    extracted_elements = []\n\n    # Iterate through each tuple in the list\n    for t in tuples_list:\n        # Check if the tuple has enough elements\n        if len(t) > n:\n            # Append the nth element to the list of extracted elements\n            extracted_elements.append(t[n])\n\n    # Return the list of extracted elements\n    return extracted_elements"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple, delimiter='-'):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of the tuple\n    by the specified delimiter. If no delimiter is specified, it defaults to '-'.\n\n    Args:\n    input_tuple (tuple): The tuple to be concatenated.\n    delimiter (str): The delimiter to be used for concatenation. Defaults to '-'.\n\n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    # Convert each element of the tuple to string and join them using the delimiter\n    return delimiter.join(map(str, input_tuple))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [string[-1] for string in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    This function takes a list of sublists and an element as input.\n    It returns the count of sublists that contain the given element.\n    \"\"\"\n    # Initialize a counter\n    count = 0\n\n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # If the element is in the sublist, increment the counter\n        if element in sublist:\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the date string into year, month, and day\n    year, month, day = date_str.split('-')\n\n    # Reorder the components and join them with '-'\n    new_date_str = '-'.join([day, month, year])\n\n    return new_date_str"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of the same length as input and returns a new tuple.\n    The new tuple contains the element-wise AND of the input tuples.\n    \"\"\"\n    # Check if the tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Use a list comprehension to calculate the element-wise AND\n    result = [x & y for x, y in zip(tuple1, tuple2)]\n\n    # Convert the list back to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    \"\"\"\n    Calculate the directrix of a parabola given its parameters.\n\n    Parameters:\n    a (float): The coefficient of x^2 in the parabola equation.\n    h (float): The x-coordinate of the vertex of the parabola.\n    k (float): The y-coordinate of the vertex of the parabola.\n\n    Returns:\n    float: The x-coordinate of the directrix of the parabola.\n    \"\"\"\n    # The directrix of a parabola is a line that is parallel to the axis of symmetry\n    # and at a distance of p from the vertex, where p is the distance from the vertex\n    # to the focus of the parabola.\n    # For a parabola with equation y = a(x - h)^2 + k, the focus is at (h, k + p),\n    # where p = 1 / (4 * a).\n    # The directrix is then at x = h - p = h - 1 / (4 * a).\n\n    p = 1 / (4 * a)\n    directrix = h - p\n\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element.\n    Otherwise, it returns False.\n    \"\"\"\n    # Convert the lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if the intersection of the sets is not empty\n    if set1 & set2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # The median length of a trapezium is the side that is not the base\n    return sides[1]"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    # Initialize an empty list to store the negative numbers\n    negative_numbers = []\n\n    # Iterate over each number in the input list\n    for num in numbers:\n        # If the number is negative, append it to the negative_numbers list\n        if num < 0:\n            negative_numbers.append(num)\n\n    # Return the list of negative numbers\n    return negative_numbers"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    # Create a set to store unique bidirectional pairs\n    bidirectional_pairs = set()\n\n    # Iterate through the list of tuples\n    for t in tuples:\n        # Add the tuple and its reverse to the set\n        bidirectional_pairs.add(tuple(sorted(t)))\n\n    # Return the number of unique bidirectional pairs\n    return len(bidirectional_pairs)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import nltk\nfrom nltk.corpus import wordnet\n\ndef find_adverb_position(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tagged = nltk.pos_tag(tokens)\n\n    for i, (word, tag) in enumerate(tagged):\n        if tag == 'RB':\n            return (i, i+1, word)\n\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a*b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_occurrences(tup, lst):\n    \"\"\"\n    Count the occurrences of all elements of a list in a tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    lst (list): The list of elements to count.\n\n    Returns:\n    int: The total count of occurrences.\n    \"\"\"\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list where each element is the cube of the corresponding input element.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of cubes of the input numbers.\n    \"\"\"\n    # Initialize an empty list to store the cubes\n    cubes = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Calculate the cube of the number and append it to the cubes list\n        cubes.append(num ** 3)\n\n    # Return the list of cubes\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n\n    # Calculate the remaining Perrin numbers up to n\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n\n    # Return the sum of the Perrin numbers\n    return sum(perrin[:n])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    This function extracts strings of a specified size from a given list of string values.\n\n    Parameters:\n    string_list (list): A list of strings.\n    size (int): The size of the strings to extract.\n\n    Returns:\n    list: A list of strings that have the specified size.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each string in the list\n    for string in string_list:\n        # Check if the length of the string is equal to the specified size\n        if len(string) == size:\n            # If it is, add the string to the result list\n            result.append(string)\n\n    # Return the result list\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize the sum of even factors\n    sum_even_factors = 0\n\n    # Loop through all numbers up to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to the sum of even factors\n                sum_even_factors += i\n\n    # Return the sum of even factors\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(word):\n    # INTJs are logical thinkers who rely on objective analysis\n    # They would use a straightforward approach to solve the problem\n    if 'z' in word:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n\n    # Check if the given month is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            result += s[i]\n            i += 1\n        else:\n            while i < len(s) and s[i].isupper():\n                i += 1\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns a new list\n    containing the first element of each sublist.\n    \"\"\"\n    # Use list comprehension to iterate through the input list and extract the first element of each sublist\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    # Initialize a counter for uppercase characters\n    count = 0\n\n    # Iterate over each character in the string\n    for char in input_string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the counter if the character is uppercase\n            count += 1\n\n    # Return the final count of uppercase characters\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        first_element = lst[0]\n        rest_elements = lst[1:]\n        combinations_without_first = combinations_list(rest_elements)\n        combinations_with_first = [ [first_element] + combination for combination in combinations_without_first ]\n        return combinations_without_first + combinations_with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    max_prod = dp[0]\n\n    for i in range(1, n):\n        max_val = 0\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                max_val = max(max_val, dp[j])\n        dp[i] = max(max_val * arr[i], arr[i])\n        max_prod = max(max_prod, dp[i])\n\n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    # Initialize the result as 1\n    result = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Multiply the result by the current number and take the modulo n\n        result = (result * num) % n\n\n    # Return the final result\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert the tuples to sets for efficient intersection operation\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n\n    # Convert the sets back to tuples and return the result\n    return {tuple(sorted(t)) for t in intersection}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    # Sort the dictionary by value in descending order\n    sorted_dict = sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n    return sorted_dict"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Find the smallest and largest values in the array\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    input_string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    # Ensure the number is an integer\n    if not isinstance(number, int):\n        raise ValueError(\"Input must be an integer.\")\n\n    # Convert the number to a string\n    number_str = str(abs(number))\n\n    # Return the first character of the string, converted back to an integer\n    return int(number_str[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of odd integers.\n    \"\"\"\n    # Using list comprehension to filter out the odd numbers\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n\n    # Find the difference\n    diff = sum_cubes - sum_n\n\n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n\n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to easily iterate through their digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Pad the shorter number with leading zeros to make both numbers the same length\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n\n    # Calculate the sum of the per-digit difference\n    total_diff = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_diff += abs(int(digit1) - int(digit2))\n\n    return total_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(0, size):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Using the set data structure to find the union of two tuples\n    union_set = set(tuple1).union(set(tuple2))\n\n    # Converting the set back to a tuple and sorting it\n    sorted_union_tuple = tuple(sorted(union_set))\n\n    return sorted_union_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    # INTJs prefer structure and organization, so we'll start by sorting the list of sublists by length\n    lst.sort(key=len, reverse=True)\n\n    # Since the list is sorted in descending order, the length of the first sublist will be the maximum length\n    return len(lst[0])"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_pairs(lst, n):\n    # Count the frequency of each element in the list\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Calculate the number of pairs\n    pairs = 0\n    for key in freq:\n        # The number of pairs that can be formed with the current element\n        # is the number of elements that are not equal to it\n        pairs += freq[key] * (n - freq[key])\n\n    # Divide by 2 since each pair is counted twice\n    return pairs // 2"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through each digit in the number\n    while n > 0:\n        # Add the last digit to the sum\n        total += n % 10\n\n        # Remove the last digit from the number\n        n //= 10\n\n    # Return the sum of the digits\n    return total"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(numbers):\n    return list(set(numbers))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    if sub_len > main_len:\n        return False\n\n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [val for sublist in zip(list1, list2, list3) for val in sublist]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets for efficient membership testing\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Find elements in tuple1 that are not in tuple2\n    dissimilar_in_tuple1 = set1 - set2\n\n    # Find elements in tuple2 that are not in tuple1\n    dissimilar_in_tuple2 = set2 - set1\n\n    # Combine the dissimilar elements and return as a tuple\n    return tuple(dissimilar_in_tuple1.union(dissimilar_in_tuple2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for i in nested_tuple:\n        if isinstance(i, tuple):\n            result.append(extract_even(i))\n        elif i % 2 == 0:\n            result.append(i)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n\n    # Calculate the perimeter of the base\n    base_perimeter = 4 * base_edge\n\n    # Calculate the slant height\n    slant_height = ((height ** 2) + (base_edge / 2) ** 2) ** 0.5\n\n    # Calculate the area of the four triangular faces\n    triangular_faces_area = 0.5 * base_perimeter * slant_height\n\n    # Calculate the total surface area\n    total_surface_area = base_area + triangular_faces_area\n\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n\n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the list at the nth element\n    first_part = arr[:n]\n    second_part = arr[n:]\n\n    # Add the first part to the end\n    result = second_part + first_part\n\n    return result"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    This function finds all perfect squares between two given numbers.\n    \"\"\"\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through all numbers in the given range\n    for i in range(start, end + 1):\n        # Check if the number is a perfect square\n        if int(i ** 0.5) ** 2 == i:\n            # If it is, add it to the list of perfect squares\n            squares.append(i)\n\n    # Return the list of perfect squares\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    complex_form = x + y * 1j\n    return (x, y), complex_form"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The list with the first and last elements swapped.\n    \"\"\"\n    # Check if the list is not empty\n    if len(lst) >= 2:\n        # Swap the first and last elements\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    result = 0\n    for k in range(1, n):\n        result += (k * (n - k))\n    return result"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(source, target):\n    if source.count('1') != target.count('1'):\n        return None\n\n    source_list = list(source)\n    target_list = list(target)\n\n    count = 0\n    for i in range(len(source_list)):\n        if source_list[i] != target_list[i]:\n            index = source_list.index('1' if source_list[i] == '0' else '0', i)\n            source_list[i], source_list[index] = source_list[index], source_list[i]\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, len(arr1))\n    j = k - i\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2, j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to string to find the number of digits\n    num_str = str(num)\n    num_digits = len(num_str)\n\n    # Initialize the sum of the digits raised to the power of num_digits\n    sum_of_digits = 0\n\n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Add the digit raised to the power of num_digits to the sum\n        sum_of_digits += int(digit) ** num_digits\n\n    # If the sum is equal to the original number, it is an Armstrong number\n    return sum_of_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    \"\"\"\n    Return a list of all lucid numbers smaller than or equal to a given integer.\n    A lucid number is a number that has no repeated digits.\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"\n        Check if a number is lucid (has no repeated digits).\n        \"\"\"\n        digits = set()\n        while num > 0:\n            digit = num % 10\n            if digit in digits:\n                return False\n            digits.add(digit)\n            num //= 10\n        return True\n\n    return [num for num in range(1, n + 1) if is_lucid(num)]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n\n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    reversed_words = words[::-1]\n\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n\n    :param n: The index of the Bell number to calculate.\n    :return: The nth Bell number.\n    \"\"\"\n    # Initialize a table of Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    # Calculate Bell numbers for each row\n    for i in range(1, n+1):\n        # Explicitly set the first element of the row to the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n\n        # Calculate the rest of the elements in the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last element of the last row, which is the nth Bell number\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if k < len(lst):\n        return lst[:k] + lst[k+1:]\n    else:\n        return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Extract the n'th column from the matrix\n    column = [row[n] for row in matrix]\n    # Return the maximum value in the column\n    return max(column)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[sub[i] for sub in lst] for i in range(2)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        averages.append(sum(t) / len(t))\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    if len(t1) != len(t2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(input_string):\n    letters = []\n    numbers = []\n    for char in input_string:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(numbers)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    # Sort the list\n    nums.sort()\n\n    # Initialize the divisibility graph\n    graph = {num: [] for num in nums}\n\n    # Populate the graph\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] % nums[i] == 0:\n                graph[nums[i]].append(nums[j])\n\n    # Initialize the maximum subset size\n    max_subset_size = 0\n\n    # Iterate over the graph to find the maximum subset size\n    for num in graph:\n        stack = [num]\n        subset_size = 0\n        while stack:\n            current_num = stack.pop()\n            subset_size += 1\n            for neighbor in graph[current_num]:\n                if neighbor not in stack:\n                    stack.append(neighbor)\n        max_subset_size = max(max_subset_size, subset_size)\n\n    return max_subset_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = list2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = list1[0]\n            break\n\n        if list1[i] <= list2[j]:\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n\n    return (m1 + m2) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    elif radius == 0:\n        return 0\n    else:\n        # The largest triangle inscribed in a semicircle is a right triangle\n        # with the hypotenuse as the diameter of the semicircle.\n        # So, the base and height of the triangle are both equal to the radius.\n        base = radius\n        height = radius\n        area = 0.5 * base * height\n        return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [\n        [i, j] for i in range(x-1, x+2)\n        for j in range(y-1, y+2)\n    ]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    \"\"\"\n    This function takes a string as input and replaces whitespaces with underscores\n    and vice versa.\n\n    Parameters:\n    input_string (str): The input string to be processed.\n\n    Returns:\n    str: The processed string with whitespaces and underscores replaced.\n    \"\"\"\n    if ' ' in input_string:\n        # Replace spaces with underscores\n        return input_string.replace(' ', '_')\n    else:\n        # Replace underscores with spaces\n        return input_string.replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    The function uses a two-pointer approach to swap non-zero elements to the front of the list.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    list: The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Initialize two pointers, one at the start of the list and the other at the end\n    left = 0\n    right = len(nums) - 1\n\n    # Iterate through the list until the left pointer crosses the right pointer\n    while left < right:\n        # If the element at the left pointer is zero, swap it with the element at the right pointer\n        if nums[left] == 0:\n            nums[left], nums[right] = nums[right], nums[left]\n            right -= 1\n        # If the element at the left pointer is non-zero, move the left pointer to the right\n        else:\n            left += 1\n\n    return nums"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(lst, n):\n    # Initialize result\n    result = 0\n\n    # Traverse through all bits\n    for i in range(0, 32):\n\n        # Count number of elements with i'th bit set\n        count = 0\n        for j in range(0, n):\n            if (lst[j] & (1 << i)):\n                count += 1\n\n        # Calculate sum of XOR of all pairs with i'th bit set\n        result += (count * (n - count) * (1 << i))\n\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in Celsius.\n\n    Parameters:\n    wind_velocity (float): The wind velocity in km/h.\n    temperature (float): The temperature in Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    wind_velocity_ms = wind_velocity * 1000 / 3600\n\n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity_ms**0.16 + 0.3965 * temperature * wind_velocity_ms**0.16\n\n    # Round the wind chill index to the next integer and return it\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(input_string):\n    # Use regular expressions to find and remove parentheses and their contents\n    result = re.sub(r'\\([^)]*\\)', '', input_string)\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters\n    s = s[1:-1]\n    # Check if 'z' is present in the remaining string\n    return 'z' in s"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0.0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    path_length = 2*n - 2\n    return dp[n-1][n-1] / path_length"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n\n    # Initialize the sum of digits\n    sum_of_digits = 0\n\n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\n# Test cases\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area using the formula: \u03c0rl\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Define the characters to be replaced\n    special_chars = [' ', ',', '.']\n\n    # Replace each special character with a colon\n    for char in special_chars:\n        input_string = input_string.replace(char, ':')\n\n    return input_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    # Iterate through all possible sublists\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Get the number of bits in the number\n    num_bits = len(bin(n)) - 2\n\n    # Create a mask with all bits set to 1 except the first and the last bit\n    mask = (1 << num_bits) - 1 - (1 << 0)\n\n    # Toggle the bits of the number using the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = r'^[aeiouAEIOU]'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # Calculate the number of digits in n\n    num_digits = len(str(n))\n\n    # Initialize the index\n    index = 1\n\n    # Loop until the condition is met\n    while True:\n        # Calculate the triangular number\n        triangular_num = index * (index + 1) // 2\n\n        # Check if the triangular number has n digits\n        if len(str(triangular_num)) == num_digits:\n            return index\n\n        # Increment the index\n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert a tuple to a dictionary using adjacent elements.\n\n    Args:\n    t (tuple): The input tuple.\n\n    Returns:\n    dict: The resulting dictionary.\n    \"\"\"\n    return {t[i]: t[i + 1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    lst (list): The input list to be rotated.\n    n (int): The number of items to rotate the list to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    # Ensure n is within the range of the list length\n    n = n % len(lst)\n\n    # Split the list into two parts at the index where it should be rotated\n    rotated_list = lst[-n:] + lst[:-n]\n\n    return rotated_list"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    for element in input_tuple:\n        if element is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i != 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_str_list):\n    # Convert each string to an integer for sorting\n    num_list = [int(num) for num in num_str_list]\n\n    # Sort the list of integers\n    num_list.sort()\n\n    # Convert each integer back to a string for the final output\n    sorted_num_str_list = [str(num) for num in num_list]\n\n    return sorted_num_str_list"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    # Convert the tuple to a list\n    tpl_list = list(tpl)\n\n    # Extend the list with the tuple's elements\n    lst.extend(tpl_list)\n\n    # Return the modified list\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n\n    # Start from the first index of non-leaf node\n    for i in range(n // 2 - 1, -1, -1):\n        # If the element is greater than its child, return False\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    # Initialize the first two Jacobsthal numbers\n    jacobsthal_numbers = [0, 1]\n\n    # Compute the remaining Jacobsthal numbers iteratively\n    for i in range(2, n + 1):\n        next_number = jacobsthal_numbers[i - 1] + 2 * jacobsthal_numbers[i - 2]\n        jacobsthal_numbers.append(next_number)\n\n    # Return the nth Jacobsthal number\n    return jacobsthal_numbers[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuples_list, k):\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(tuples_list, key=lambda x: x[1])\n\n    # Return the first k elements from the sorted list\n    return sorted_list[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(str_list):\n    # Create a dictionary to store the reverse of each string as the key and the string itself as the value\n    reverse_dict = {}\n    count = 0\n\n    for string in str_list:\n        # Check if the reverse of the string is already in the dictionary\n        if string[::-1] in reverse_dict:\n            # If it is, increment the count of pairs\n            count += 1\n            # Remove the reverse string from the dictionary to avoid counting duplicates\n            del reverse_dict[string[::-1]]\n        else:\n            # If the reverse of the string is not in the dictionary, add it\n            reverse_dict[string] = string\n\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference as a large number\n    min_diff = float('inf')\n\n    # Iterate through the sorted array\n    for i in range(1, n):\n        # Update minimum difference if the current difference is smaller\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Initialize variables\n    count = 0\n    num = 1\n\n    # Loop until we find the nth polite number\n    while count < n:\n        # Check if the number is polite\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            count += 1\n        # Move to the next number\n        num += 1\n\n    # Return the nth polite number\n    return num - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    # Analyze the requirements and devise an efficient algorithm\n    count = 0\n    num_dict = {}\n\n    # Iterate through the list of numbers\n    for num in numbers:\n        # Calculate the complement needed to reach the target sum\n        complement = target_sum - num\n\n        # Check if the complement is in the dictionary\n        if complement in num_dict:\n            # If it is, add the frequency of the complement to the count\n            count += num_dict[complement]\n\n        # Add the current number to the dictionary or increment its frequency\n        num_dict[num] = num_dict.get(num, 0) + 1\n\n    # Return the count of pairs whose sum is equal to the target sum\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize sum to 0\n    sum_of_powers = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd natural number\n        odd_num = 2 * i + 1\n\n        # Calculate the fourth power of the odd number\n        power_of_four = odd_num ** 4\n\n        # Add the power to the sum\n        sum_of_powers += power_of_four\n\n    # Return the final sum\n    return sum_of_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    bracket_pairs = {'(': ')', '{': '}', '[': ']'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or bracket_pairs[stack.pop()] != char:\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n\n    # Filter out the words with length k\n    filtered_words = [word for word in words if len(word) != k]\n\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n\n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    # Check if the sub_string is in the main_string\n    if sub_string in main_string:\n        # If it is, find the starting index of the sub_string in the main_string\n        start_index = main_string.index(sub_string)\n        # Return the sub_string, the start index, and the end index\n        return (sub_string, start_index, start_index + len(sub_string))\n    else:\n        # If the sub_string is not in the main_string, return None\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = []\n    sublist = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append(sublist)\n            sublist = [lst[i]]\n\n    result.append(sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples_list):\n    def find_sum_combinations(tuples, target_sum):\n        if len(tuples) == 0:\n            return []\n        elif len(tuples) == 1:\n            return [tuples[0]] if tuples[0] == target_sum else []\n        else:\n            head, *tail = tuples\n            with_head = [(head, *comb) for comb in find_sum_combinations(tail, target_sum - head) if sum(comb) == target_sum - head]\n            without_head = find_sum_combinations(tail, target_sum)\n            return with_head + without_head\n\n    sums = set()\n    for r in range(2, len(tuples_list) + 1):\n        for combination in combinations(tuples_list, r):\n            for sum_combination in find_sum_combinations(combination, sum(combination[0])):\n                sums.add(sum_combination)\n    return list(sums)"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        total += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values among RGB\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between max and min values\n    diff = max_val - min_val\n\n    # Calculate Hue\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    # Calculate Saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n\n    # Calculate Value\n    v = max_val * 100\n\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n\n        if even is not None and odd is not None:\n            break\n\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses and split the string into a list of strings\n    elements = tuple_str[1:-1].split(', ')\n\n    # Convert each string in the list to an integer\n    int_tuple = tuple(int(element) for element in elements)\n\n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'abbb')\n    match = pattern.search(text)\n    return match is not None"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n# Test cases\nprint(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))  # Output: 4\nprint(count_list([[1,2],[2,3],[4,5]]))  # Output: 3\nprint(count_list([[1,0],[2,0]]))  # Output: 2"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Shift the number to the left by d bits\n    # Use the bitwise AND operator to ensure that the number remains 32 bits\n    return (n << d) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers among them.\n    \"\"\"\n    # Initialize a counter\n    count = 0\n\n    # Check if all numbers are equal\n    if a == b == c:\n        count = 3\n    # Check if any two numbers are equal\n    elif a == b or a == c or b == c:\n        count = 2\n\n    return count"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None  # In case there are no odd numbers in the list"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(i < j for i, j in zip(tuple1, tuple2))"}
