{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1).intersection(list2)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(n)]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    if len(num1)!= len(num2):\n        return False\n    for i in range(len(num1)):\n        if num1[i]!= num2[i] and num1[i]!= 0:\n            return False\n    return True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    rotations = 0\n    for i in range(len(string)):\n        if string[i] == string[0]:\n            rotations += 1\n    if rotations > 0:\n        return rotations\n    else:\n        return 1"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    return string[:first_index] + string[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the rows of the matrix based on the sum of their elements\n    sorted_rows = sorted(matrix, key=lambda row: row_sums[row])\n\n    # Return the sorted matrix\n    return sorted_rows"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(length, width, height):\n    return length * width * height"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    if not input_string:\n        return False\n    if input_string[0].islower() and input_string[-1].islower():\n        return True\n    for i in range(1, len(input_string) - 1):\n        if not input_string[i].islower():\n            return False\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    result = \"\"\n    for char in str1:\n        if char not in str2:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def contains_duplicate(arr):\n    return len(set(arr)) < len(arr)"}
{"task_id": "Mbpp/20", "solution": "def is_woodball(n):\n    if n % 3 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    return num == 2 * (int(reversed(str(num))) + 1)"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    return int(\"\".join(sorted(digits, reverse=True)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(a, b):\n    return a * b < 0"}
{"task_id": "Mbpp/59", "solution": "def octagonal_number(n):\n    return (n * (3 * n - 1)) / 2"}
{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        if sum(int(c) for c in s[i]) == len(s[i]):\n            count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(my_list):\n    smallest = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] < smallest:\n            smallest = my_list[i]\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    max_diff = 0\n    for t in tuple_list:\n        diff = abs(t[0] - t[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(my_list):\n    total = 0\n    for element in my_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(my_list):\n    count = 0\n    for num in my_list:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    result = 0\n    for partition in partition_bell_numbers(n):\n        result += number_of_ways_to_partition(partition)\n    return result"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(my_list, sublist):\n    return sublist in my_list"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return all(len(t) == len(tuples[0]) for t in tuples)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(my_list):\n    gap = len(my_list)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(my_list)):\n            if my_list[i] > my_list[i + gap]:\n                my_list[i], my_list[i + gap] = my_list[i + gap], my_list[i]\n                swapped = True\n        gap -= 1\n    return my_list"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    for i in range(1, n+1):\n        if math.sqrt(n - i**2) % 1 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    return n % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    tetrahedral_number = 0\n    for i in range(1, n+1):\n        tetrahedral_number += (i * (i + 1)) / 2\n    return tetrahedral_number"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/83", "solution": "def get_char(string):\n    ascii_sum = 0\n    for char in string:\n        ascii_sum += ord(char)\n    ascii_sum %= 26\n    return chr(ascii_sum)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return newman_conway(n-1) + newman_conway(n-2)"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(my_list):\n    freq = {}\n    for elem in my_list:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    smaller_num = None\n    for i in range(1, n):\n        if i < n and abs(i - n) < abs(smaller_num - n):\n            smaller_num = i\n    return smaller_num"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    prev = num[0]\n    curr = num[1]\n    next = num[2]\n    if prev == next:\n        return True\n    elif curr == next:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(my_list):\n    min_index = 0\n    for i in range(1, len(my_list)):\n        if my_list[i][1] < my_list[min_index][1]:\n            min_index = i\n    return my_list[min_index][0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    freq_dict = {}\n    flattened_list = []\n    for sublist in lists:\n        flattened_list.extend(sublist)\n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(num_list):\n    result = 1\n    for num in num_list:\n        result *= num\n    return result / len(num_list)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    binary_string = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        if remainder > 0:\n            binary_string += \"1\"\n        else:\n            binary_string += \"0\"\n        decimal_number //= 2\n    return binary_string"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n_str = str(n)\n    rev_n_str = n_str[::-1]\n    if n_str == rev_n_str:\n        return n\n    else:\n        next_palindrome = int(rev_n_str) + 1\n        return next_palindrome"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return sorted(arr)[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    camel_str = ''\n    for i, word in enumerate(snake_str.split('_')):\n        if i == 0:\n            camel_str += word.title()\n        else:\n            camel_str += word.lower()\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    result = 1\n    for i in range(n + m):\n        result *= i\n    return result"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count_true(my_list):\n    count = 0\n    for element in my_list:\n        if element == True:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list, tuple):\n    return tuple + list"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    result = []\n    while list1 and list2 and list3:\n        result.append(min(list1.pop(0), list2.pop(0), list3.pop(0)))\n    return result"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    counter = 0\n    for char in binary_string:\n        if char == '1':\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set()\n    for nested_list in nested_lists:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.add(element)\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dict_list):\n    for d in dict_list:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    result = 0\n    for i in range(len(tup)):\n        result += tup[i] * 10 ** i\n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(my_list):\n    return [tuple(float(x) for x in sublist) for sublist in my_list]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    if not arr:\n        return None\n    if not sorted(arr):\n        arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return None"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuple_list):\n    max_product = 0\n    for tup in tuple_list:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(n):\n    sum_of_divisors = sum_of_divisors(n)\n    return sum_of_divisors == n\n\ndef sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/124", "solution": "def angle_complex(real, imag):\n    magnitude = sqrt(real**2 + imag**2)\n    angle = atan2(imag, real)\n    return angle"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    num_zeros = 0\n    num_ones = 0\n    for char in binary_string:\n        if char == '0':\n            num_zeros += 1\n        elif char == '1':\n            num_ones += 1\n    return max(num_zeros, num_ones)"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2)):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the input list is a square matrix\n    if len(matrix)!= len(matrix[0]):\n        return False\n\n    # Check if the sum of the elements in each row, column, and diagonal is equal to a constant value\n    for row in matrix:\n        if sum(row)!= 30:\n            return False\n    for col in zip(*matrix):\n        if sum(col)!= 30:\n            return False\n    for diag in [list(zip(*matrix))[::-1], list(zip(*matrix))]:\n        if sum(diag)!= 30:\n            return False\n\n    # If all the above conditions are met, return True\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(my_list):\n    max_freq = 0\n    most_frequent_item = None\n    for item in my_list:\n        if my_list.count(item) > max_freq:\n            max_freq = my_list.count(item)\n            most_frequent_item = item\n    return most_frequent_item"}
{"task_id": "Mbpp/131", "solution": "import string\n\ndef reverse_vowels(s):\n    vowels = [c for c in string.ascii_lowercase if c not in \"aeiou\"]\n    non_vowels = [c for c in s if c not in vowels]\n    reversed_vowels = reversed(vowels)\n    vowels = [c for c in reversed_vowels]\n    return \"\".join(vowels + non_vowels)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return \"\".join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(x for x in numbers if x < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    for element in arr:\n        if element == 0:\n            zero_count += 1\n    return zero_count / len(arr)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    result = set()\n    for sublist in lst:\n        for element in sublist:\n            result.add(element)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(my_list):\n    for i in range(len(my_list)):\n        largest = 0\n        for j in range(i, len(my_list)):\n            if my_list[j] > my_list[largest]:\n                largest = j\n        if largest!= i:\n            my_list[i], my_list[largest] = my_list[largest], my_list[i]\n    return my_list"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/143", "solution": "def find_lists(my_tuple):\n    count = 0\n    for element in my_tuple:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    gcd = extended_euclidean(a, b)\n    if gcd!= 1:\n        return None\n    inverse = euclidean_inverse(b, a)\n    x = inverse * (n - b)\n    y = inverse * (a - n)\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    sum = 0\n    for i in range(n//2):\n        sum += n-2*i\n    return sum"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    sum1 = sum(divisors(num1))\n    sum2 = sum(divisors(num2))\n    return sum1 == sum2"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i, char in enumerate(string):\n        if char.lower() == string.lower()[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(my_list):\n    counter = 0\n    for i in range(len(my_list) - 1):\n        for j in range(i + 1, len(my_list)):\n            if my_list[i] ^ my_list[j] % 2 == 0:\n                counter += 1\n    return counter"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    for i in range(1, n+1):\n        if 2**i >= n:\n            return 2**i\n    return 2**(i+1)"}
{"task_id": "Mbpp/168", "solution": "def frequency(my_list, num):\n    count = 0\n    for i in my_list:\n        if i == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(my_list, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += my_list[i]\n    return sum"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    types = set(type(x) for x in tup)\n    return len(types) == 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    output_string = \"\"\n    for i, char in enumerate(input_string):\n        if i % 2 == 1:\n            output_string += char\n    return output_string"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    min_value = a\n    if b < min_value:\n        min_value = b\n    if c < min_value:\n        min_value = c\n    return min_value"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negative_elements = []\n    positive_elements = []\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n    return negative_elements + positive_elements"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(my_list, n):\n    new_list = []\n    for i in range(n):\n        largest = my_list[i]\n        for j in range(i+1, len(my_list)):\n            if my_list[j] > largest:\n                largest = my_list[j]\n        new_list.append(largest)\n    return new_list"}
{"task_id": "Mbpp/233", "solution": "def lateral_surface_area_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    return n & 0xAAAAAAAA"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(my_list):\n    unique_tuples = set(my_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = my_list.count(tup)\n    return count_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        if i < len(s) - 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m+1):\n        total_sequences += get_remaining_sequences(i, m, n-1)\n    return total_sequences\n\ndef get_remaining_sequences(current_element, m, n):\n    if n == 0:\n        return 1\n    total_sequences = 0\n    for i in range(current_element, m+1):\n        if i >= 2*current_element and i <= m:\n            total_sequences += get_remaining_sequences(i, m, n-1)\n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    last_element = list1[-1]\n    combined_list = last_element + list2\n    extracted_elements = list1[:-1]\n    return extracted_elements + combined_list"}
{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "def next_perfect_square(n):\n    for i in range(n, 1000000000):\n        if i ** 0.5 == int(i ** 0.5):\n            return i\n    return None"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i, len(arr)):\n            sum += arr[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(string):\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == string[len(string) - i - 1]:\n            max_length += 1\n    return max_length"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    intersection = []\n    for element in arr1:\n        if element in arr2:\n            intersection.append(element)\n    return intersection"}
{"task_id": "Mbpp/250", "solution": "def count_X(my_tuple, element):\n    count = 0\n    for item in my_tuple:\n        if item == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(my_list, element):\n    new_list = []\n    for i in range(len(my_list)):\n        new_list.append(element)\n        new_list.append(my_list[i])\n    return new_list"}
{"task_id": "Mbpp/252", "solution": "def convert(z):\n    return (abs(z), atan2(z.imag, z.real))"}
{"task_id": "Mbpp/253", "solution": "def count_integer(my_list):\n    count = 0\n    for element in my_list:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    combinations = []\n    for color in colors:\n        for color2 in colors:\n            combinations.append((color, color2))\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(x, y):\n    return (y, x)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    max1 = max(tuple1)\n    max2 = max(tuple2)\n    return (max1, max2)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    prime = 2\n    count = 1\n    while count < n:\n        if is_prime(prime):\n            count += 1\n        prime += 1\n    return prime\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x / y, tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(my_list, L):\n    first_part = my_list[:L]\n    second_part = my_list[L:]\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(my_list, n):\n    sublists = []\n    for i in range(0, len(my_list), n):\n        sublists.append(my_list[i:i+n])\n    return sublists"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    star_num = 0\n    for i in range(1, n+1):\n        star_num = star_num * 2 + 1\n    return star_num"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(my_list):\n    total = 0\n    for i, element in enumerate(my_list):\n        if element % 2 == 0 and i % 2 == 0:\n            total += element\n    return total"}
{"task_id": "Mbpp/271", "solution": "def even_power_sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i ** 5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(my_list):\n    return [tup[-1] for tup in my_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = ()\n    for i in range(len(tuple1)):\n        result += (tuple1[i] - tuple2[i],)\n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_coeff_sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += binomial(n, i)\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    volume = math.pi * radius ** 2 * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(my_dict, n):\n    return {k: v for k, v in my_dict.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(my_tuple):\n    count = 0\n    for i in range(len(my_tuple)):\n        if my_tuple[i] == my_tuple[i-1]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    decagonal_num = n * (3 * n - 1) / 2\n    return decagonal_num == n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(my_list):\n    return len(set(my_list)) == len(my_list)"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    s = str(n)\n    for c in s:\n        if s.count(c) > int(c):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(my_list, element):\n    return all(item == element for item in my_list)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(string):\n    if 'a' in string:\n        if re.search(r'b{2,3}', string):\n            return True\n    return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    for i in range(k):\n        for j in range(len(arr) - n + 1):\n            sum = 0\n            for k in range(n):\n                sum += arr[j + k]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i ** 2\n    return sum"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    max_sublist = None\n    for sublist in list_of_lists:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n            max_sublist = sublist\n    return max_sublist"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(a, b):\n    return math.floor(a / b)"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(my_list):\n    max_value = None\n    for element in my_list:\n        if isinstance(element, int):\n            if max_value is None or element > max_value:\n                max_value = element\n        elif isinstance(element, str):\n            if max_value is None or len(element) > len(max_value):\n                max_value = element\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    max_score = 0\n    max_name = \"\"\n    for name, score in tuples:\n        if score > max_score:\n            max_score = score\n            max_name = name\n    return (max_name, max_score)"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    count = 0\n    for seq in itertools.product([0, 1], repeat=2*n):\n        if sum(seq[:n]) == sum(seq[n:]):\n            count += 1\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += dict_depth(d[key])\n    return depth"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    new_list = []\n    for word in words:\n        if word.startswith('p'):\n            new_list.append(word)\n    return new_list"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, i, k):\n    max_sum = 0\n    for j in range(i):\n        if arr[j] <= arr[j+1]:\n            max_sum += arr[j]\n        elif arr[j] <= k:\n            max_sum += arr[j]\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    result = []\n    for a in list1:\n        for b in list2:\n            product = a * b\n            if len(result) < n:\n                result.append(product)\n            elif product > result[-1]:\n                result.append(product)\n                result.pop(0)\n    return result"}
{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    return max(num1, num2)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the leftmost unset bit\n    while n & 1 == 1:\n        n >>= 1\n    # Set the leftmost unset bit\n    n |= 1\n    return n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone(radius, height):\n    return (1/3) * math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    lucas_nums = []\n    for i in range(n):\n        if i == 0:\n            lucas_nums.append(2)\n        elif i == 1:\n            lucas_nums.append(1)\n        else:\n            lucas_nums.append(lucas_nums[i-1] + lucas_nums[i-2])\n    return lucas_nums[n]"}
{"task_id": "Mbpp/390", "solution": "def add_string(my_list, format_string):\n    return [format_string.format(i) for i in my_list]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    result = {}\n    for i in range(len(list1)):\n        result[list1[i]] = {list2[i]: list3[i]}\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 5:\n        return n\n    else:\n        max_sum = 0\n        for i in range(2, 6):\n            if n % i == 0:\n                max_sum += get_max_sum(n // i)\n        return max_sum"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(set(tup)) == len(tup)"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_freq = {}\n    for char in string:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        num_str = str(num)\n        for digit in num_str:\n            total += int(digit)\n    return total"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(my_list):\n    unique_tuples = set()\n    for tup in my_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(num1, num2):\n    return min(num1, num2)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuple, element):\n    for i in range(len(tuple)):\n        if tuple[i] == element:\n            return True\n    return False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(num):\n    num_str = str(num)\n    digits = num_str.split()\n    sorted_digits = sorted(digits, reverse=True)\n    new_num_str = ''.join(sorted_digits)\n    return int(new_num_str)"}
{"task_id": "Mbpp/409", "solution": "import sys\n\ndef min_product_tuple(tuple_list):\n    min_product = sys.maxsize\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            product = tuple_list[i][0] * tuple_list[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(my_list):\n    min_val = None\n    for item in my_list:\n        if min_val is None or item < min_val:\n            min_val = item\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(my_list):\n    for i in range(len(my_list)):\n        if my_list[i] % 2 == 1:\n            my_list.pop(i)\n    return my_list"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(my_list, n):\n    return [t[n] for t in my_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max_product = 0\n    second_max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n    return (max_product, second_max_product)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(my_list):\n    max_length = 0\n    max_list = []\n    for sublist in my_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    total_sum = 0\n    for number in numbers:\n        rounded_number = round(number)\n        total_sum += rounded_number\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_to_concatenate, delimiter):\n    return delimiter.join(str(element) for element in tuple_to_concatenate)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(my_tuple):\n    return [word[-1] for word in my_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    counter = 0\n    for sublist in lst:\n        if element in sublist:\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(my_list):\n    odd_numbers = []\n    for element in my_list:\n        if element % 2 == 1:\n            odd_numbers.append(element)\n    return odd_numbers"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_string):\n    parts = date_string.split(\"-\")\n    return \"-\".join(parts[::-1])"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    gap = 1\n    while gap < len(arr):\n        gap *= 2\n        for i in range(len(arr)):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        if tup1[i] & tup2[i]:\n            result.append(1)\n        else:\n            result.append(0)\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola has no real roots and the directrix is the line at infinity.\"\n    else:\n        root1 = (-b + sqrt(discriminant)) / (2*a)\n        root2 = (-b - sqrt(discriminant)) / (2*a)\n        m = (root1 - root2) / (root1 + root2)\n        b = root1 + root2\n        return \"The directrix is y = \" + str(m) + \"x + \" + str(b)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(element in list2 for element in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for i in range(len(arr)):\n        if arr[i] > num:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(my_list):\n    negative_numbers = []\n    for element in my_list:\n        if element < 0:\n            negative_numbers.append(element)\n    return negative_numbers"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    new_s = \"\"\n    for c in s:\n        if c % 2 == 0:\n            new_s += c\n    return new_s"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count = 0\n    for t1, t2 in tuples:\n        if t1[0] == t2[1] and t1[1] == t2[0]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(my_list):\n    return int(''.join(str(x) for x in my_list))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    adverb_regex = r\"[A-Za-z]+ly\"\n    matches = re.finditer(adverb_regex, sentence)\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        return (position, position + len(adverb), adverb)"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    l = w = h = size\n    return 6 * (l**2 + w**2 + h**2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            positive_count += 1\n    return positive_count / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] * tuple2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple, list):\n    count = {}\n    for element in tuple:\n        if element in list:\n            count[element] = count.get(element, 0) + 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        perrin_num = (i * (i + 1)) / 2\n        sum += perrin_num\n    return sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, n):\n    result = []\n    for string in strings:\n        if len(string) >= n:\n            result.append(string)\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return ''.join(string.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return \"z\" in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    for month in months_with_31_days:\n        if month == month_number:\n            return True\n    return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [reversed(s) for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(my_list):\n    min_length = len(my_list[0])\n    for sublist in my_list:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(width, height):\n    return width * height"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    return ''.join(c for c in string if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def extract(my_list):\n    return [sublist[0] for sublist in my_list]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(my_list):\n    result = []\n    for element in my_list:\n        combinations = combinations_list(my_list[1:])\n        for combination in combinations:\n            result.append([element] + combination)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_product = 0\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(my_dict):\n    for key, value in my_dict.items():\n        if value is None or value == \"\":\n            del my_dict[key]\n    return my_dict"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(my_list):\n    for i in range(len(my_list) - 1):\n        if my_list[i] + 1!= my_list[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tuple1 in tuple_list1:\n        if tuple1 in tuple_list2:\n            intersection.add(tuple1)\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, char, replacement):\n    return ''.join(c if c!= char else replacement for c in string)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    largest = max(arr)\n    smallest = min(arr)\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def to_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())"}
{"task_id": "Mbpp/479", "solution": "def first_digit(num):\n    return int(str(num).split()[0])"}
{"task_id": "Mbpp/554", "solution": "def split(my_list):\n    odd_list = []\n    for element in my_list:\n        if element % 2 == 1:\n            odd_list.append(element)\n    return odd_list"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_first_n_natural_numbers = 0\n    sum_of_first_n_cubes = 0\n    for i in range(1, n+1):\n        sum_of_first_n_natural_numbers += i\n        sum_of_first_n_cubes += i**3\n    return sum_of_first_n_cubes - sum_of_first_n_natural_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(a, b):\n    a_str = str(a)\n    b_str = str(b)\n    distance = 0\n    for i in range(len(a_str)):\n        distance += abs(ord(a_str[i]) - ord(b_str[i]))\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, max_sum):\n    current_sum = 0\n    for element in arr:\n        if current_sum + element <= max_sum:\n            current_sum += element\n        else:\n            current_sum = 0\n    return current_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union = set(tuple1).union(set(tuple2))\n    return tuple(sorted(union))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(my_list):\n    max_length = 0\n    for sublist in my_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    values = []\n    in_quotes = False\n    current_value = \"\"\n    for char in string:\n        if char == '\"':\n            in_quotes = not in_quotes\n        elif in_quotes:\n            current_value += char\n        elif char == ',':\n            values.append(current_value)\n            current_value = \"\"\n    if current_value:\n        values.append(current_value)\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(my_list):\n    count = 0\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i]!= my_list[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    characters = []\n    for char in string:\n        characters.append(char)\n    return characters"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"}
{"task_id": "Mbpp/567", "solution": "def issort_list(my_list):\n    for i in range(len(my_list) - 1):\n        if my_list[i] > my_list[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    result = [{} for _ in range(N)]\n    return result"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lists):\n    unique_nums = set()\n    for lst in lists:\n        unique_nums.update(lst)\n    return list(unique_nums)"}
{"task_id": "Mbpp/573", "solution": "def unique_product(my_list):\n    unique_set = set(my_list)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "def surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    total_area = base_area + side_area\n    return total_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(list1, list2):\n    return list1 in list2"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"Lists must be of the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tup1, tup2):\n    return tuple(set(tup1) ^ set(tup2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    even_list = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            even_list.extend(extract_even(element))\n        elif element % 2 == 0:\n            even_list.append(element)\n    return even_list"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    square_base_area = base_edge ** 2\n    triangular_side_area = (base_edge * height) / 2\n    total_area = square_base_area + (3 * triangular_side_area)\n    return total_area"}
{"task_id": "Mbpp/582", "solution": "def is_empty_dict(my_dict):\n    return not my_dict"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    numerator = (2*n)**n\n    denominator = (n+1)**n * n**n\n    return numerator / denominator"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(my_list, n):\n    first_part = my_list[:n]\n    second_part = my_list[n:]\n    return first_part + second_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(my_list):\n    return tuple(my_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(my_list):\n    sorted_list = sorted(my_list)\n    largest = sorted_list[-1]\n    smallest = sorted_list[0]\n    return largest - smallest"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "def polar_rect(radius, angle):\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(my_list):\n    first_element = my_list[0]\n    last_element = my_list[-1]\n    my_list[0] = last_element\n    my_list[-1] = first_element\n    return my_list"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    result = 0\n    for k in range(n):\n        result += n! / (k! * (n-k)!)\n    return result"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    ip_address_list = ip_address.split(\".\")\n    for i in range(len(ip_address_list)):\n        if ip_address_list[i] == \"0\":\n            ip_address_list.pop(i)\n    return \".\".join(ip_address_list)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(my_list):\n    even = None\n    odd = None\n    for element in my_list:\n        if element % 2 == 0:\n            even = element\n        elif element % 2 == 1:\n            odd = element\n    return even - odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swaps += 1\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "def tuple_size(tup):\n    return sys.getsizeof(tup)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = 0\n    j = 0\n    result = None\n    while i < len(arr1) and j < len(arr2) and result is None:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            result = arr1[i]\n            break\n    if result is None:\n        return None\n    else:\n        return result"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    sum_of_cubes = 0\n    while n > 0:\n        digit = n % 10\n        sum_of_cubes += digit ** 3\n        n //= 10\n    return sum_of_cubes == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum, sum / n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    return num % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            return string[i]\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    words = string.split()\n    words.reverse()\n    return \" \".join(words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degrees):\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(my_list, k):\n    my_list.pop(k)\n    return my_list"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max_value = matrix[0][n]\n    for row in matrix[1:]:\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(map(lambda x: x[0], lst)), list(map(lambda x: x[1], lst))]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuple_of_tuples):\n    return [sum(t) / len(t) for t in tuple_of_tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tup1, tup2):\n    return tuple(x % y for x, y in zip(tup1, tup2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [element1 / element2 for element1, element2 in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    num_str = ''\n    for c in s:\n        if c.isdigit():\n            num_str += c\n        else:\n            num_str += c\n    return num_str"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    subset = []\n    for i in range(len(numbers)):\n        if numbers[i] % numbers[i-1] == 0:\n            subset.append(numbers[i])\n    if not subset:\n        return 0\n    else:\n        return len(subset)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2):\n    median = 0\n    for i in range(len(list1)):\n        if list1[i] < list2[i]:\n            median += list1[i]\n        elif list1[i] > list2[i]:\n            median += list2[i]\n        else:\n            median += list1[i]\n    return median / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [number ** n for number in numbers]"}
{"task_id": "Mbpp/624", "solution": "def to_upper(string):\n    return string.upper()"}
{"task_id": "Mbpp/626", "solution": "def largest_triangle_area(radius):\n    height = 2 * radius / (1 + sqrt(1 - (radius / a)**2))\n    base = 2 * radius\n    area = (base * height) / 2\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    output = \"\"\n    for char in string:\n        if char == \" \":\n            output += \"%20\"\n        else:\n            output += char\n    return output"}
{"task_id": "Mbpp/629", "solution": "def split(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")"}
{"task_id": "Mbpp/632", "solution": "def move_zero(my_list):\n    result = []\n    for element in my_list:\n        if element == 0:\n            result.append(element)\n        else:\n            result.append(element)\n    return result"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(numbers):\n    total = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            total += numbers[i] ^ numbers[j]\n    return total"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(my_list):\n    sorted_list = []\n    while my_list:\n        element = my_list.pop(0)\n        sorted_list.append(element)\n    for element in sorted_list:\n        print(element)"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, price):\n    profit_or_loss = amount - price\n    if profit_or_loss == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_velocity ** 0.16) + 0.4275 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_names(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(string):\n    return string.split(\"(\")[0]"}
{"task_id": "Mbpp/641", "solution": "def nonagonal(n):\n    result = 0\n    for i in range(1, n+1):\n        result += i**2\n    return result"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    if not text:\n        return False\n    if text[0] == 'z':\n        return False\n    if text[-1] == 'z':\n        return False\n    if 'z' in text[1:-1]:\n        return False\n    return True"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    reversed_array = [None] * len(arr)\n    for i in range(len(arr)):\n        reversed_array[k - 1] = arr[i]\n    return reversed_array"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple, dict):\n    return tuple + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    max_average = 0\n    for row in matrix:\n        for cell in row:\n            if cell == matrix[-1][-1]:\n                return sum(matrix[0][0:cell]) / len(matrix[0][0:cell])\n            else:\n                max_average = max(max_average, maxAverageOfPath(matrix[1:, 1:]))\n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    filtered_data = {}\n    for student, (height, weight) in student_data.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_data[student] = (height, weight)\n    return filtered_data"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    sum = 0\n    for digit in str(base):\n        sum += int(digit) ** power\n    return sum"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return [match[0] for match in matches]"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    return tuple(tup[i] * tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(my_list):\n    result = []\n    for i in range(len(my_list)):\n        if my_list[i]!= my_list[i-1]:\n            result.append(my_list[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r, h):\n    return math.pi * r * (r + h)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return re.sub(r'[,.]', ':', string)"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    index = 0\n    for element in arr:\n        if element == num:\n            return index\n        index += 1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    result = 0\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i+1, len(arr)):\n            product *= arr[j]\n        result += product\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    return n ^ (n >> 1)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(sorted_list, value):\n    i = 0\n    j = len(sorted_list)\n    while i < j:\n        if sorted_list[i] <= value:\n            i += 1\n        else:\n            j -= 1\n    return i"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    return re.match(\"^[aeiou]\", string) is not None"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    T = n * (n + 1) / 2\n    index = int(T / 10)\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(0, len(tup), 2):\n        d[tup[i]] = tup[i+1]\n    return d"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    first_char = string[0]\n    for char in string[1:]:\n        if char!= first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(side_length):\n    base_area = (side_length * side_length) / 2\n    height = (side_length ** 2) / (2 * base_area)\n    tetrahedron_area = (base_area * height) / 3\n    return tetrahedron_area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(list, n):\n    return list[n:] + list[:n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for elem in tup:\n        if elem is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            if num % int(digit) == 0:\n                result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "def sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (1/2) * radius**2 * angle"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(input_string):\n    if not input_string:\n        return \"\"\n    output_string = \"\"\n    for i in range(len(input_string)):\n        if input_string[i].isupper():\n            output_string += \" \"\n        output_string += input_string[i]\n    return output_string"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    return sorted(strings, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(my_list, my_tuple):\n    return my_list + list(my_tuple)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    is_min_heap = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i // 2]:\n            is_min_heap = False\n            break\n    return is_min_heap"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    j = 0\n    k = 1\n    l = 1\n    m = 3\n    while n > 0:\n        j = j + k\n        k = k + l\n        l = l + m\n        m = m + n\n        n = n - 1\n    return n"}
{"task_id": "Mbpp/753", "solution": "def min_k(my_list, k):\n    return sorted(my_list, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(my_list):\n    my_list.sort()\n    second_smallest = None\n    for i in range(len(my_list)-1):\n        if my_list[i] < my_list[i+1]:\n            second_smallest = my_list[i]\n            break\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    counter = 0\n    for string in string_list:\n        if string[::-1] in string_list:\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/758", "solution": "def count_sublists(my_list):\n    sublists = []\n    for sublist in my_list:\n        sublists.append(tuple(sublist))\n    return {sublist: sublists.count(sublist) for sublist in sublists}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(my_list):\n    return len(set(my_list)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    for i in range(1, n+1):\n        if i % 11 == 0 and str(i) == '11' * int(str(i)[1:]):\n            return True\n    return False"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(my_list):\n    pairs = []\n    for i in range(len(my_list) - 1):\n        if my_list[i] == my_list[i + 1]:\n            pairs.append((my_list[i], my_list[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    diff = set1 - set2\n    return list(diff)"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    for word in words:\n        if len(word) == k:\n            words.remove(word)\n    return \" \".join(words)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    if substring in string:\n        return (substring, string.index(substring), string.index(substring) + len(substring))\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(my_list):\n    for i, element in enumerate(my_list):\n        if i % 2 == 1 and element % 2 == 1:\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(my_list):\n    unique_elements = set(my_list)\n    sum = 0\n    for element in unique_elements:\n        sum += element\n    return sum"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            result.append([])\n        result[-1].append(lst[i])\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for tuple in tuple_list:\n        for element in tuple:\n            if element not in combinations:\n                combinations.append(element)\n            else:\n                for combination in combinations:\n                    if combination + element not in combinations:\n                        combinations.append(combination + element)\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if len(arr[i:]) % 2 == 1:\n            sum += arr[i]\n    return sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    c_diff = c_max - c_min\n    h = 0\n    s = 0\n    v = 0\n    if c_diff == 0:\n        h = 0\n        s = 0\n        v = c_max\n    else:\n        h = 60 * (((c_max - r) / c_diff) % 6)\n        s = (c_max - c_min) / c_max\n        v = c_max\n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(my_list):\n    even_num = None\n    odd_num = None\n    for num in my_list:\n        if num % 2 == 0:\n            even_num = num\n        elif num % 2 == 1:\n            odd_num = num\n        if even_num and odd_num:\n            break\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "solution": "import ast\n\ndef tuple_str_int(string):\n    return ast.literal_eval(string)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        elif arr[mid] > value:\n            right = mid - 1\n        else:\n            return mid\n    return -1"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(string):\n    return re.match(r\"a{3}b\", string)"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string, list):\n    return tuple(string) + tuple(list)"}
{"task_id": "Mbpp/790", "solution": "def even_position(my_list):\n    for i, element in enumerate(my_list):\n        if i % 2 == 0 and element % 2!= 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(my_tuple):\n    result = []\n    for item in my_tuple:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(my_list):\n    count = 0\n    for element in my_list:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(sorted_array, element):\n    last_position = -1\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == element:\n            last_position = i\n    return last_position"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(string):\n    return string.startswith('a') and string.endswith('b')"}
{"task_id": "Mbpp/796", "solution": "def return_sum(my_dict):\n    total = 0\n    for key in my_dict:\n        total += my_dict[key]\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def sum(arr):\n    total = 0\n    for element in arr:\n        total += element\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    return (num << d) | (num >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    return ''.join(string.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    for i in range(3):\n        if a == b and b == c:\n            count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    sqrt = math.sqrt(n)\n    if math.floor(sqrt) == sqrt:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(my_list):\n    highest_sum = 0\n    highest_sublist = []\n    for sublist in my_list:\n        sublist_sum = sum(sublist)\n        if sublist_sum > highest_sum:\n            highest_sum = sublist_sum\n            highest_sublist = sublist\n    return highest_sublist"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 == 1:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple, k):\n    for i in range(len(tuple)):\n        if tuple[i] == k:\n            return True\n    return False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    if len(tup1)!= len(tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    for i in range(len(tup1)):\n        if tup1[i] < tup2[i]:\n            return False\n    return True"}
