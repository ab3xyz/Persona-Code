{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a list (or any other desired format)\n    return list(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(numbers, n):\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, -num)\n    largest = []\n    for i in range(n):\n        largest.append(-heapq.heappop(heap))\n    return largest"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    count = 0\n    while xor > 0:\n        count += 1\n        xor &= xor - 1\n    return count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(my_list):\n    return [x**2 for x in my_list]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    return string[:first_index] + string[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    return re.match(r'^[a-z]+(_[a-z]+)*$', text) is not None"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(set(arr))!= len(arr)"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    num = int(''.join(map(str, digits)))\n    return num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return (n * (3 * n - 1)) // 2"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == j - i + 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(my_list):\n    return min(my_list)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = float('-inf')\n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(my_list):\n    total = 0\n    for element in my_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(my_list):\n    count = 0\n    for element in my_list:\n        if element > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    direction = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1]!= direction:\n            return False\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(my_list, sub_list):\n    return all(x in my_list for x in sub_list)"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup)!= first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(my_list):\n    gap = len(my_list)\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = int(gap / shrink)\n        swapped = False\n        for i in range(len(my_list) - gap):\n            if my_list[i] > my_list[i + gap]:\n                my_list[i], my_list[i + gap] = my_list[i + gap], my_list[i]\n                swapped = True\n    return my_list"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            j = n // i\n            if i**2 - j**2 == n:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    return [tuple for tuple in tuples if all(element % k == 0 for element in tuple)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2!= 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    tetrahedral = [1]\n    for i in range(1, n):\n        tetrahedral.append(tetrahedral[i-1] + i)\n    return tetrahedral[n-1]"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1,..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # Formula for centered hexagonal numbers:\n    # H(n) = (n * (n + 1)) / 2\n    return (n * (n + 1)) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    for key, value in dict1.items():\n        result[key] = value\n    for key, value in dict2.items():\n        if key not in result:\n            result[key] = value\n        else:\n            result[key] = value\n    for key, value in dict3.items():\n        if key not in result:\n            result[key] = value\n        else:\n            result[key] = value\n    return result"}
{"task_id": "Mbpp/88", "solution": "def freq_count(my_list):\n    freq = {}\n    for elem in my_list:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    return freq"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    if n < 10:\n        return False\n    pattern = str(n)\n    for i in range(1, len(pattern)):\n        if pattern[i]!= pattern[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(my_list):\n    return min(my_list, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    freq = {}\n    for lst in lists:\n        for elem in lst:\n            if elem not in freq:\n                freq[elem] = 1\n            else:\n                freq[elem] += 1\n    return freq"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the input to a string\n    n_str = str(n)\n\n    # Find the first digit that is not the same as the last digit\n    first_diff_index = 0\n    while n_str[first_diff_index] == n_str[-first_diff_index-1]:\n        first_diff_index += 1\n\n    # Find the next smallest palindrome by reversing the digits\n    # after the first different digit\n    rev_str = n_str[first_diff_index+1:]\n    rev_str = rev_str[::-1]\n    n_str = n_str[:first_diff_index+1] + rev_str\n\n    # Convert the string back to an integer\n    return int(n_str)"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Initialize the Eulerian number to 0\n    a = 0\n\n    # Iterate through all possible values of k\n    for k in range(1, n + 1):\n        # Calculate the Eulerian number for the current value of k\n        a += (n - k + 1) * (m - k + 1)\n\n    # Return the final Eulerian number\n    return a"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(my_list):\n    return [[word for word in sublist] for sublist in my_list]"}
{"task_id": "Mbpp/105", "solution": "def count(my_list):\n    count = 0\n    for element in my_list:\n        if element == True:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list, tuple):\n    return tuple + list"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] <= list3[k]:\n            merged_list.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] <= list3[k]:\n            merged_list.append(list2[j])\n            j += 1\n        elif list3[k] <= list1[i] <= list2[j]:\n            merged_list.append(list3[k])\n            k += 1\n        else:\n            merged_list.append(list1[i])\n            i += 1\n            merged_list.append(list2[j])\n            j += 1\n            merged_list.append(list3[k])\n            k += 1\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    while k < len(list3):\n        merged_list.append(list3[k])\n        k += 1\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    # Convert the binary string to a list of integers\n    binary_list = [int(x) for x in binary_string]\n\n    # Initialize a counter for the number of odd values\n    num_odd = 0\n\n    # Iterate over the list of integers, rotating the list by the specified number of positions each iteration\n    for i in range(num_rotations):\n        # Rotate the list by one position\n        binary_list.append(binary_list.pop(0))\n\n        # Check if the current value is odd\n        if binary_list[i] % 2 == 1:\n            num_odd += 1\n\n    # Return the number of odd values\n    return num_odd"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set()\n    for nested_list in nested_lists:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.add(element)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dit_list):\n    return all(not d for d in dit_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(my_list):\n    return [[float(x) for x in sublist] for sublist in my_list]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuple_list):\n    max_product = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            product = tuple_list[i][0] * tuple_list[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if is_amicable(i):\n            sum += i\n    return sum\n\ndef is_amicable(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n"}
{"task_id": "Mbpp/124", "solution": "def angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    current_diff = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == \"0\":\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the matrix is a square\n    if len(matrix)!= len(matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= (i + j) % n + 1:\n                return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(my_list):\n    return max(set(my_list), key=my_list.count)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    reversed_string = \"\"\n    for char in string:\n        if char in vowels:\n            reversed_string = char + reversed_string\n        else:\n            reversed_string += char\n    return reversed_string"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(my_list):\n    flat_list = []\n    for sublist in my_list:\n        for item in sublist:\n            if item not in flat_list:\n                flat_list.append(item)\n    return set(flat_list)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_index]:\n                max_index = j\n        if max_index!= i:\n            arr[i], arr[max_index] = arr[max_index], arr[i]\n            arr[i+1:] = arr[i+1:][::-1]\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        if a*i + b*y == n:\n            x = i\n            y = y\n            break\n    if x == 0 and y == 0:\n        return None\n    else:\n        return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(my_list, elements_to_remove):\n    return list(set(my_list) - set(elements_to_remove))"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(range(n, 0, -2))"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    return sum(divisors_a) == sum(divisors_b)\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return divisors"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i, c in enumerate(string.lower()):\n        if c == chr(i + 97):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(my_list):\n    count = 0\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] ^ my_list[j] % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(my_list, num):\n    count = 0\n    for i in my_list:\n        if i == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(my_list, start, end):\n    return sum(my_list[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n    \n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    return string.count(\"std\")"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    return string.replace(\" \", character)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(my_list, n):\n    return sorted(my_list, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "def lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    return n | (n >> 1)"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(my_list):\n    unique_tuples = set(my_list)\n    occurences = {}\n    for t in unique_tuples:\n        occurences[t] = my_list.count(t)\n    return occurences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]!= \"\":\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m+1):\n        total_sequences += get_number_of_sequences(i, m, n)\n    return total_sequences\n\ndef get_number_of_sequences(i, m, n):\n    if n == 1:\n        return 1\n    else:\n        return get_number_of_sequences(i*2, m, n-1)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    return first_list[:-1] + second_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    # find the maximum sum of a bitonic subsequence\n    # using dynamic programming\n\n    # initialize the maximum sum to be 0\n    max_sum = 0\n\n    # loop through the array and find the maximum sum\n    for i in range(len(arr)):\n        # find the maximum sum of the current element and the previous elements\n        current_sum = arr[i] + max_sum\n\n        # update the maximum sum if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    # Initialize a 2D array dp to store the length of the longest palindromic subsequence\n    # for each substring of s\n    dp = [[0 for i in range(len(s))] for j in range(len(s))]\n\n    # Fill in the values of dp using dynamic programming\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and (j - i <= 1 or dp[i+1][j-1]):\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][len(s)-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through the first array\n    for element in arr1:\n        # If the element is also in the second array, add it to the intersection\n        if element in arr2:\n            intersection.add(element)\n\n    # Return the intersection as a list\n    return list(intersection)"}
{"task_id": "Mbpp/250", "solution": "def count_X(my_tuple, element):\n    count = 0\n    for i in my_tuple:\n        if i == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(my_list, element):\n    return [element] + my_list"}
{"task_id": "Mbpp/252", "solution": "def convert(z):\n    r = abs(z)\n    theta = np.angle(z)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(my_list):\n    count = 0\n    for element in my_list:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    combinations = []\n    for i in range(len(colors)):\n        for j in range(i, len(colors)):\n            for k in range(j, len(colors)):\n                combinations.append((colors[i], colors[j], colors[k]))\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    else:\n        prime_nums = [True for i in range(n)]\n        for i in range(2, int(n ** 0.5) + 1):\n            if prime_nums[i]:\n                for j in range(i * i, n, i):\n                    prime_nums[j] = False\n        return sum(prime_nums)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    if n < 3:\n        return 2\n    else:\n        for i in range(3, n+1):\n            if is_prime(i):\n                return i\n        return None\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] / tuple2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(my_list, L):\n    return (my_list[:L], my_list[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(my_list, n):\n    return [my_list[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index!= len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics[n - 1]"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(my_list):\n    result = 0\n    for i, x in enumerate(my_list):\n        if x % 2 == 0 and i % 2 == 0:\n            result += x\n    return result"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(my_list):\n    return [tup[-1] for tup in my_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tup1, tup2):\n    return tuple(x - y for x, y in zip(tup1, tup2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize a list to store the binomial coefficients\n    binomial_coeffs = []\n\n    # Iterate from 0 to n\n    for i in range(n + 1):\n        # Calculate the binomial coefficient using the formula (n choose i) = n! / (i! * (n - i)!)\n        binomial_coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n\n        # If the index is even, add the binomial coefficient to the list\n        if i % 2 == 0:\n            binomial_coeffs.append(binomial_coeff)\n\n    # Return the sum of the even index binomial coefficients\n    return sum(binomial_coeffs)"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple):\n    count = 0\n    for element in tuple:\n        if isinstance(element, tuple):\n            count += count_first_elements(element)\n        else:\n            count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    str_n = str(n)\n    digit_count = {}\n    for digit in str_n:\n        if digit not in digit_count:\n            digit_count[digit] = 1\n        else:\n            digit_count[digit] += 1\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    # Initialize the result\n    result = 0\n\n    # Initialize the maximum sum of a contiguous subarray\n    max_sum = 0\n\n    # Initialize the current sum of a contiguous subarray\n    current_sum = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # Add the current element to the current sum\n        current_sum += arr[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is less than or equal to zero, update the current sum\n        if current_sum <= 0:\n            current_sum = 0\n\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(num1, num2):\n    quotient = num1 // num2\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(my_list):\n    max_value = None\n    for element in my_list:\n        if isinstance(element, int):\n            if max_value == None or element > max_value:\n                max_value = element\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(my_list):\n    max_val = 0\n    max_name = \"\"\n    for name, score in my_list:\n        if score > max_val:\n            max_val = score\n            max_name = name\n    return (max_name, max_val)"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize variables\n    count = 0\n    first_sum = 0\n    last_sum = 0\n\n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the current binary sequence to a list of bits\n        bits = [int(x) for x in bin(i)[2:]]\n\n        # Calculate the sum of the first n bits\n        first_sum = sum(bits[:n])\n\n        # Calculate the sum of the last n bits\n        last_sum = sum(bits[n:])\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if first_sum == last_sum:\n            count += 1\n\n    # Return the count of binary sequences with equal sums\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    depth = 0\n    for k, v in d.items():\n        depth = max(depth, dict_depth(v) + 1)\n    return depth"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith(\"p\"):\n            return word\n    return None"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(prefix, i, k, n):\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Initialize the current sum to 0\n    current_sum = 0\n\n    # Iterate through the prefix from the ith index to the kth index\n    for j in range(i, k):\n        # Add the current element to the current sum\n        current_sum += prefix[j]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    for i in range(n):\n        products.append(list1[i] * list2[i])\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position))!= 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "def volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    lucas_0 = 2\n    lucas_1 = 1\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(my_list, format_string):\n    return [format_string.format(i) for i in my_list]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        temp = {}\n        temp[list1[i]] = {}\n        temp[list1[i]][list2[i]] = list3[i]\n        result.append(temp)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(set(tup)) == len(tup)"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(my_list):\n    total = 0\n    for num in my_list:\n        total += sum(int(digit) for digit in str(num))\n    return total"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(my_list):\n    unique_tuples = set()\n    for tup in my_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuple, element):\n    return element in tuple"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Join the digits into a string\n    result = \"\".join(str(d) for d in digits)\n    # Return the result as an integer\n    return int(result)"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(my_list):\n    return min(my_list)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(my_list):\n    return [x for x in my_list if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(my_list, n):\n    return [element[n] for element in my_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(x) for x in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(my_tuple):\n    return [x[-1] for x in my_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(my_list, element):\n    count = 0\n    for sublist in my_list:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2!= 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_string):\n    year, month, day = date_string.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tup1, tup2):\n    return tuple(a & b for a, b in zip(tup1, tup2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the directrix\n    directrix = (-b + discriminant**0.5) / (2*a)\n\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(x in list2 for x in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(my_list):\n    return [x for x in my_list if x < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    return ''.join([char for char in string if char.isalpha() and char.islower()])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(my_list):\n    return int(''.join(map(str, my_list)))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb_positions = []\n    for word in sentence.split():\n        if word.endswith('ly'):\n            adverb_positions.append((sentence.index(word), sentence.index(word) + len(word) - 1, word))\n    return adverb_positions"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    return 6 * (side_length ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append(tup1[i] * tup2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple, list):\n    count = 0\n    for element in tuple:\n        if element in list:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(my_list):\n    return [x**3 for x in my_list]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_number(i)\n    return sum\n\ndef perrin_number(n):\n    if n == 1:\n        return 1\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(my_list, size):\n    result = []\n    for i in range(len(my_list)):\n        if len(my_list[i]) == size:\n            result.append(my_list[i])\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(width, height):\n    return width * height"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    return ''.join([char for char in string if char.islower()])"}
{"task_id": "Mbpp/460", "solution": "def Extract(my_list):\n    return [sublist[0] for sublist in my_list]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(my_list):\n    combinations = []\n    for i in range(len(my_list)):\n        combinations.append([my_list[i]])\n        for j in range(i+1, len(my_list)):\n            combinations.append([my_list[i], my_list[j]])\n    return combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] * arr[i]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] * arr[j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j-1] * arr[i], dp[i-1][j] * arr[i], dp[i][j-1] * arr[i])\n    return max(dp[n-1][n-1], dp[n-1][n-2], dp[n-2][n-1])"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(my_dict):\n    return {k: v for k, v in my_dict.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    max_product = 1\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i, len(arr)):\n            product *= arr[j]\n            max_product = max(max_product, product)\n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(sum(tup[i:i+2]) for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1!= sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if t1[0] == t2[0] and t1[1] == t2[1]:\n                intersection.add(t1)\n                break\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(my_dict):\n    return sorted(my_dict.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    largest = arr[0]\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return str(n)[0]"}
{"task_id": "Mbpp/554", "solution": "def Split(my_list):\n    return [x for x in my_list if x % 2 == 1]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    sum_diff = 0\n    for i in range(len(str(num1))):\n        sum_diff += abs(int(str(num1)[i]) - int(str(num2)[i]))\n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 1] + arr[i - 1])\n    for i in range(n, 0, -1):\n        if dp[i] > k:\n            return dp[i]\n    return 0"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    return sorted(set(tup1).union(set(tup2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(my_list):\n    max_length = 0\n    for sublist in my_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    return re.findall(r'\"(.*?)\"', string)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(my_list, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if my_list[i]!= my_list[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(d) for d in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    for sublist in list_of_lists:\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(my_list):\n    unique_nums = []\n    for num in my_list:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "def surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n    \n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tup1, tup2):\n    return tuple(set(tup1) ^ set(tup2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    even_elements = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            even_elements.extend(extract_even(element))\n        elif element % 2 == 0:\n            even_elements.append(element)\n    return tuple(even_elements)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    return (base_edge * height) + (base_edge * base_edge)"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    first_part = arr[:n]\n    second_part = arr[n:]\n    return second_part + first_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end+1):\n        root = int(i**0.5)\n        if root**2 == i:\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "def polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(my_list):\n    first_element = my_list[0]\n    last_element = my_list[-1]\n    my_list[0] = last_element\n    my_list[-1] = first_element\n    return my_list"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    result = 0\n    for i in range(n):\n        result += binomial(n, i) * binomial(n-i, n-i-1)\n    return result"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(my_list):\n    even_num = None\n    odd_num = None\n    for num in my_list:\n        if num % 2 == 0:\n            even_num = num\n            break\n        elif num % 2 == 1:\n            odd_num = num\n            break\n    return abs(even_num - odd_num)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    # Initialize variables\n    swaps = 0\n    i = 0\n    j = 0\n\n    # Loop through both strings and compare corresponding elements\n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            swaps += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    # If the strings are not the same length, add the remaining elements to the count\n    if i < len(str1):\n        swaps += len(str1) - i\n    if j < len(str2):\n        swaps += len(str2) - j\n\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "def tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if k < 1 or k > len(arr1) + len(arr2):\n        return None\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + 1:\n        return max(arr1[-1], arr2[-1])\n    mid1 = (len(arr1) - 1) // 2\n    mid2 = (len(arr2) - 1) // 2\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[:mid1], arr2, k - mid1)\n    else:\n        return find_kth(arr1, arr2[:mid2], k - mid2)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index!= len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    return \" \".join(reversed(words))"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "def find_literals(string, pattern):\n    import re\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (None, None, None)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(my_list, k):\n    return my_list[:k] + my_list[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(map(lambda x: x[n], matrix))"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        for val in tup:\n            total += val\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuple_of_tuples):\n    return [sum(t) / len(t) for t in tuple_of_tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    num_list = []\n    char_list = []\n    for char in string:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    return ''.join(char_list + num_list)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    n = len(a)\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1\n    for i in range(n - 2, -1, -1):\n        mxm = 0\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # find the middle index of the two lists\n    mid_index1 = size // 2\n    mid_index2 = size // 2\n\n    # find the median of the two lists by taking the average of the middle elements\n    median = (list1[mid_index1] + list2[mid_index2]) / 2\n\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(my_list, n):\n    return [pow(x, n) for x in my_list]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (3 * radius ** 2) / (2 * math.sqrt(3))"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [number for number in numbers if number % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adjacent_coords.append((i, j))\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")"}
{"task_id": "Mbpp/632", "solution": "def move_zero(my_list):\n    return sorted(my_list, key=lambda x: x == 0)"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(my_list, n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += my_list[i] ^ my_list[j]\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = round(35.74 + 0.6215 * temperature - 35.75 * (wind_velocity ** 0.16) + 0.4275 * temperature * (wind_velocity ** 0.16))\n    return int(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(string):\n    # Find the first opening parenthesis\n    opening_parenthesis_index = string.find(\"(\")\n    if opening_parenthesis_index == -1:\n        # No opening parenthesis found, return the original string\n        return string\n\n    # Find the corresponding closing parenthesis\n    closing_parenthesis_index = string.find(\")\")\n    if closing_parenthesis_index == -1:\n        # No closing parenthesis found, return the original string\n        return string\n\n    # Remove the substring between the opening and closing parenthesis\n    return string[:opening_parenthesis_index] + string[closing_parenthesis_index + 1:]"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    if len(text) < 3:\n        return False\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    for i in range(1, len(text) - 1):\n        if text[i] == 'z':\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    # Initialize variables\n    max_average = 0\n    path = []\n\n    # Iterate over each cell in the matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            # If the current cell is the bottom right cell, add it to the path and calculate the average\n            if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n                path.append((i, j))\n                average = calculateAverage(matrix, path)\n                if average > max_average:\n                    max_average = average\n                return max_average\n            # If the current cell is not the bottom right cell, check if it is a valid cell to add to the path\n            elif isValidCell(matrix, i, j):\n                # Add the current cell to the path and recursively call the function to find the maximum average\n                path.append((i, j))\n                max_average = max(max_average, maxAverageOfPath(matrix))\n                # Remove the current cell from the path and return the maximum average\n                path.pop()\n                return max_average\n\n# Calculate the average of the path\ndef calculateAverage(matrix, path):\n    total_cost = 0\n    for cell in path:\n        total_cost += matrix[cell[0]][cell[1]]\n    return total_cost / len(path)\n\n# Check if a cell is valid to add to the path\ndef isValidCell(matrix, i, j):\n    # If the cell is not in the bottom right corner and the cell to the right and below it are not valid, return False\n    if i!= len(matrix) - 1 and j!= len(matrix[0]) - 1 and not isValidCell(matrix, i, j + 1) and not isValidCell(matrix, i + 1, j):\n        return False\n    # If the cell is in the bottom right corner or the cell to the right and below it are valid, return True\n    return True"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    sum_of_digits = 0\n    for char in result_str:\n        sum_of_digits += int(char)\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    import re\n    return re.findall(r'\"(.*?)\"', string)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(my_list):\n    result = []\n    for i, item in enumerate(my_list):\n        if i == 0 or item!= my_list[i-1]:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r, h):\n    return 2 * math.pi * r * h"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j > i:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j - 1]\n    return dp[n][n]"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to binary\n    binary_str = bin(n)[2:]\n    # Toggle the middle bits\n    middle_bits = binary_str[1:-1]\n    toggled_middle_bits = ''.join(['1' if x == '0' else '0' for x in middle_bits])\n    # Reconstruct the binary string with the toggled middle bits\n    toggled_binary_str = binary_str[:1] + toggled_middle_bits + binary_str[-1:]\n    # Convert the toggled binary string back to an integer\n    return int(toggled_binary_str, 2)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "def check_str(string):\n    return re.match(\"^[aeiouAEIOU]\", string) is not None"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    triangular_numbers = []\n    for i in range(1, n+1):\n        triangular_numbers.append(i * (i + 1) // 2)\n    return triangular_numbers.index(min(triangular_numbers))"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(my_tuple):\n    my_dict = {}\n    for i in range(0, len(my_tuple), 2):\n        my_dict[my_tuple[i]] = my_tuple[i+1]\n    return my_dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(edge_length):\n    return (math.sqrt(3) / 12) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(my_list, n):\n    return my_list[n:] + my_list[:n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                break\n        else:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    words = string.split()\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] = word + \" \"\n    return \" \".join(words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(my_list):\n    return sorted(my_list, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(my_list, my_tuple):\n    my_list.extend(my_tuple)\n    return my_list"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    # Check if the array is a binary heap\n    if len(arr) == 0:\n        return False\n    # Check if the root node is the minimum value in the heap\n    if arr[0]!= min(arr):\n        return False\n    # Check if the left and right child nodes are less than or equal to the parent node\n    for i in range(1, len(arr)):\n        left_child = 2 * i\n        right_child = 2 * i + 1\n        if left_child < len(arr) and arr[left_child] > arr[i]:\n            return False\n        if right_child < len(arr) and arr[right_child] > arr[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "```\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 11\n    if n == 6:\n        return 21\n    if n == 7:\n        return 43\n    if n == 8:\n        return 85\n    if n == 9:\n        return 171\n    if n == 10:\n        return 341\n    if n == 11:\n        return 683\n    if n == 12:\n        return 1365\n    if n == 13:\n        return 2731\n    if n == 14:\n        return 5461\n    if n == 15:\n        return 10923\n    if n == 16:\n        return 21845\n    if n == 17:\n        return 43691\n    if n == 18:\n        return 87381\n    if n == 19:\n        return 174763\n    if n == 20:\n        return 349525\n    if n == 21:\n        return 699051\n    if n == 22:\n        return 1398101\n    if n == 23:\n        return 2796203\n    if n == 24:\n        return 5592405\n    if n == 25:\n        return 11184811\n    if n == 26:\n        return 22369621\n    if n == 27:\n        return 44739243\n    if n == 28:\n        return 89478485\n    if n == 29:\n        return 178956971\n    if n == 30:\n        return 357913943\n    if n == 31:\n        return 715827885\n    if n == 32:\n        return 1431655767\n    if n == 33:\n        return 2863311531\n    if n == 34:\n        return 5726611269\n    if n == 35:\n        return 11453222587\n    if n == 36:\n        return 22906445175\n    if n == 37:\n        return 45812890351\n    if n == 38:\n        return 91625780593\n    if n == 39:\n        return 183251561185\n    if n == 40:\n        return 366503100751\n    if n == 41:\n        return 733006501501\n    if n == 42:\n        return 1466013003003\n    if n == 43:\n        return 2932025006005\n    if n == 44:\n        return 5864050012011\n    if n == 45:\n        return 11728100024021\n    if n == 46:\n        return 23456200048043\n    if n == 47:\n        return 46912400096085\n    if n == 48:\n        return 93824800192171\n    if n == 49:\n        return 187649600384343\n    if n == 50:\n        return 375299200768685\n    if n == 51:\n        return 750598401537371\n    if n == 52:\n        return 1501196803074743\n    if n == 53:\n        return 3002393606149485\n    if n == 54:\n        return 6004787212298971\n    if n == 55:\n        return 12009574424597943\n    if n == 56:\n        return 24019148849195885\n    if n == 57:\n        return 48038297698391771\n    if n == 58:\n        return 96076595396783543\n    if n == 59:\n        return 192153190793567085\n    if n == 60:\n        return 384306381587134171\n    if n == 61:\n        return 768612763174268343\n    if n == 62:\n        return 1537225526348536685\n    if n == 63:\n        return 3074451052697073371"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    return sorted(tuple_list, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(my_list):\n    my_list.sort()\n    if len(my_list) < 2:\n        return None\n    return my_list[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(my_list):\n    return len(set(my_list)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = arr[1] - arr[0]\n\n    # Iterate through the sorted array\n    for i in range(1, n-1):\n        # Calculate the difference between consecutive elements\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return len([c for c in s if c.isdigit()])"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    if n <= 1:\n        return n\n    else:\n        return n + is_polite(n-1)"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(my_list):\n    return [(my_list[i], my_list[i+1]) for i in range(len(my_list)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == \"{\":\n            stack.append(char)\n        elif char == \"}\":\n            if not stack or stack[-1]!= \"{\":\n                return False\n            stack.pop()\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack or stack[-1]!= \"[\":\n                return False\n            stack.pop()\n        elif char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    return \" \".join([word for word in words if len(word)!= k])"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    position = string.find(substring)\n    if position == -1:\n        return None\n    else:\n        return (substring, position, position + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(my_list):\n    for i in range(1, len(my_list), 2):\n        if my_list[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(my_list):\n    result = []\n    current_sublist = []\n    for element in my_list:\n        if not current_sublist or element!= current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            result.append(current_sublist)\n            current_sublist = [element]\n    if current_sublist:\n        result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            result += arr[j]\n    return result"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255, g/255, b/255\n    c_max = max(r, g, b)\n    c_min = min(r, g, b)\n    c_diff = c_max - c_min\n    h = 0\n    s = 0\n    v = c_max\n    if c_diff!= 0:\n        s = c_diff / c_max\n        if r == c_max:\n            h = (g - b) / c_diff\n        elif g == c_max:\n            h = 2 + (b - r) / c_diff\n        else:\n            h = 4 + (r - g) / c_diff\n        h *= 60\n        if h < 0:\n            h += 360\n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(my_list):\n    even_num = None\n    odd_num = None\n    for num in my_list:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in my_list:\n        if num % 2 == 1:\n            odd_num = num\n            break\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str[1:-1].split(',')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    return re.match(r\"a[b]{3}\", text)"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(my_list):\n    count = 0\n    for sublist in my_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(string):\n    return re.match(r'^a.*b$', string)"}
{"task_id": "Mbpp/796", "solution": "def return_sum(my_dict):\n    return sum(my_dict.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2!= 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    return int(math.sqrt(n))**2 == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(my_list):\n    return max(my_list, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2!= 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    return all(tup1[i] > tup2[i] for i in range(len(tup1)))"}
