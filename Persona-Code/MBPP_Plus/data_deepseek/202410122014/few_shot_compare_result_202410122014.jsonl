{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    xor = a ^ b\n    return xor & (xor - 1) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x**2 for x in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    temp = s + s\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == temp[i:i + n]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index == -1:\n        return s\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base_area, height):\n    return base_area * height\n\ndef base_area(side1, side2, side3):\n    s = (side1 + side2 + side3) / 2\n    return (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n\ndef find_Volume(side1, side2, side3, height):\n    return base_area(side1, side2, side3) * height"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    return bool(re.search(r'^[a-z]+(_[a-z]+)*$', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    if n < 1:\n        return False\n    for i in range(1, int(n**0.5) + 1):\n        if i * (2**i) - 1 == n:\n            return True\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num == 2 * reverse_num - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def nth_octagonal_number(n):\n    return 3 * n * n - 2 * n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == (j - i + 1):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    n, m = len(lst), len(sublst)\n    for i in range(n - m + 1):\n        if lst[i:i + m] == sublst:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if not tuples:\n        return True\n    first_len = len(tuples[0])\n    return all(len(t) == first_len for t in tuples)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n    \n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n % 4 == 2:\n        return False\n    return True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, letters):\n    if len(colors) != len(letters):\n        return False\n    \n    color_map = {}\n    letter_map = {}\n    \n    for color, letter in zip(colors, letters):\n        if color in color_map:\n            if color_map[color] != letter:\n                return False\n        else:\n            color_map[color] = letter\n        \n        if letter in letter_map:\n            if letter_map[letter] != color:\n                return False\n        else:\n            letter_map[letter] = color\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [tup for tup in tuples_list if all(elem % k == 0 for elem in tup)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    return (sum(int(digit) for digit in str(n)[::2]) - sum(int(digit) for digit in str(n)[1::2])) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total_ascii = sum(ord(char) for char in s)\n    return chr((total_ascii % 26) + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n == 1 or n == 2:\n        return 1\n    P = [0] * (n + 1)\n    P[1] = 1\n    P[2] = 1\n    for i in range(3, n + 1):\n        P[i] = P[P[i - 1]] + P[i - P[i - 1]]\n    return P[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-2]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    return min(tuples_list, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for element in sublist:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    arr.sort()\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    words = s.split('_')\n    return words[0].capitalize() + ''.join(word.capitalize() for word in words[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(bools):\n    return sum(bools)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lists):\n    if not lists:\n        return []\n    common_elements = set(lists[0])\n    for lst in lists[1:]:\n        common_elements &= set(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(item) if item.replace('.', '', 1).isdigit() else item for item in sublist) for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    low, high = 0, len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] != arr[mid + 1]:\n            high = mid\n        else:\n            low = mid + 2\n    return arr[low]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for pair in tuples_list:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                total += i\n            else:\n                total += i + n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_div = sum_of_divisors(num)\n        if sum_div > num and sum_div <= limit and sum_of_divisors(sum_div) == num:\n            amicable_sum += num + sum_div\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    current_diff = 0\n    for char in s:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    \n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    \n    # Check rows and columns\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if row_sum != magic_sum or col_sum != magic_sum:\n            return False\n    \n    # Check diagonals\n    diag1_sum = sum(matrix[i][i] for i in range(n))\n    diag2_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    if diag1_sum != magic_sum or diag2_sum != magic_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return max(freq, key=freq.get)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    if non_zero_count == 0:\n        return 0\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n            if n % 2 != 0:\n                return False\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return {item for sublist in lst for item in sublist}"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(arr, k):\n        start = 0\n        while start < k:\n            arr[start], arr[k] = arr[k], arr[start]\n            start += 1\n            k -= 1\n\n    n = len(arr)\n    while n > 1:\n        max_idx = arr.index(max(arr[:n]))\n        if max_idx != n - 1:\n            if max_idx != 0:\n                flip(arr, max_idx)\n            flip(arr, n - 1)\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    min_val = min(arr)\n    max_val = max(arr)\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, to_remove):\n    return [item for item in lst if item not in to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 1 + n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    target = 'std'\n    count = 0\n    step = len(target)\n    for i in range(len(s)):\n        if s[i:i+step] == target:\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if not tup:\n        return True\n    first_type = type(tup[0])\n    return all(isinstance(item, first_type) for item in tup)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(0, len(s), 2)])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    return neg + pos + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    for i in range(0, 32, 2):\n        n |= (1 << i)\n    return n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    count_dict = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in count_dict:\n            count_dict[sorted_tup] += 1\n        else:\n            count_dict[sorted_tup] = 1\n    return count_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    def count_sequences(prev, length):\n        if length == 0:\n            return 1\n        count = 0\n        for i in range(2 * prev, m + 1):\n            count += count_sequences(i, length - 1)\n        return count\n    \n    total_sequences = 0\n    for i in range(1, m + 1):\n        total_sequences += count_sequences(i, n - 1)\n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    lst1[-1:] = lst2\n    return lst1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    next_n = math.floor(math.sqrt(n)) + 1\n    return next_n * next_n"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    \n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a, b) for a, b in zip(tuple1, tuple2)))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 1, 1\n        for i in range(2, n + 1):\n            next_val = 2 * curr + prev\n            prev, curr = curr, next_val\n        return curr"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum((2 * i - 1) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) // 2 + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum_even_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_even_powers += even_number ** 5\n    return sum_even_powers"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    C = [[0 for x in range(n+1)] for y in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, n)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += C[n][i]\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def nth_decagonal_number(n):\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n * k):\n        max_ending_here = max(arr[i % n], max_ending_here + arr[i % n])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max([x for x in lst if isinstance(x, (int, float))])"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    aggregate = {}\n    for name, score in lst:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    max_name = max(aggregate, key=aggregate.get)\n    return (max_name, aggregate[max_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    return math.comb(2 * n, n)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        for w in word.split():\n            if w.startswith('p'):\n                result.append(w)\n    return tuple(result[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[j] > arr[l]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    if k > i:\n        dp[k] = dp[i] + arr[k]\n    return max(dp)"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    position = 0\n    unset_bit_found = False\n    temp = n\n    \n    while temp > 0:\n        if (temp & 1) == 0:\n            unset_bit_found = True\n            break\n        temp >>= 1\n        position += 1\n    \n    if unset_bit_found:\n        n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, fmt_str):\n    return [fmt_str.format(item) for item in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    return [{id_: {name: score}} for id_, name, score in zip(ids, names, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a > b) ^ (a > c):\n        return a\n    elif (b < a) ^ (b < c):\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    return sum(sum(int(digit) for digit in str(num)) for num in numbers)"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(map(tuple, map(sorted, tuples_list)))\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    return num % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    if i == -1:\n        return n\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for pair in tuples_list:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min(x for x in lst if isinstance(x, (int, float)))"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1, max2 = arr[0], arr[1]\n    if max1 < max2:\n        max1, max2 = max2, max1\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max1, max2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    return delimiter.join(map(str, t))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return c - (1 + b**2) / (4 * a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x < num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 1])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen = set()\n    count = 0\n    for t in tuples:\n        if (t[1], t[0]) in seen:\n            count += 1\n        seen.add(t)\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', sentence)\n    for adverb in adverbs:\n        return adverb.start(), adverb.end(), adverb.group()\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size * size"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_nums = sum(1 for x in arr if x > 0)\n    return positive_nums / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(x) for x in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    return [x**3 for x in lst]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    perrin = [3, 0, 2]\n    sum_perrin = 5\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join([char for char in s if not char.isupper()])"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1)))"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    n = len(arr)\n    max_ending_here = min_ending_here = max_product = arr[0]\n    \n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], arr[i] * max_ending_here, arr[i] * min_ending_here)\n        min_ending_here = min(arr[i], arr[i] * temp, arr[i] * min_ending_here)\n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst) + 1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    return set1 & set2"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_n = n * (n + 1) // 2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes - sum_of_n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = sum(1 for x in arr if x % 2 != 0)\n    even_count = n - odd_count\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    sum_diff = 0\n    while num1 > 0 or num2 > 0:\n        sum_diff += abs((num1 % 10) - (num2 % 10))\n        num1 //= 10\n        num2 //= 10\n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1 + tuple2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    seen = set()\n    result = []\n    for num in lst:\n        if lst.count(num) == 1:\n            result.append(num)\n        elif num not in seen:\n            seen.add(num)\n    return result"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius**2\n    lateral_area = 2 * math.pi * radius * height\n    return round(2 * base_area + lateral_area, 2)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    n = len(main_list)\n    m = len(sub_list)\n    if m == 0:\n        return True\n    for i in range(n - m + 1):\n        if main_list[i:i + m] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(a, b, c):\n    result = []\n    for i in range(len(a)):\n        result.append(a[i])\n        result.append(b[i])\n        result.append(c[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(tup):\n    if isinstance(tup, int):\n        return tup if tup % 2 == 0 else None\n    elif isinstance(tup, tuple):\n        result = tuple(filter(lambda x: x is not None, (extract_even(x) for x in tup)))\n        return result if result else None\n    return None"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    base_area = base_edge ** 2\n    lateral_area = 2 * base_edge * slant_height\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0 for i in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(a, b):\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return ((x**2 + y**2)**0.5, math.atan2(y, x)), (x + y * 1j)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    C = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, n)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n    sum = 0\n    for i in range(n):\n        sum += C[n][i] * C[n-1][i]\n    return sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    if first_even is None or first_odd is None:\n        return None\n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    if len(bin1) != len(bin2):\n        return -1\n    \n    swaps = 0\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            swaps += 1\n    \n    return swaps // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if not arr1:\n        return arr2[k]\n    if not arr2:\n        return arr1[k]\n    \n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    if mid1 + mid2 < k:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n        else:\n            return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    else:\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2], k)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return num == sum"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    return None, -1, -1"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tup):\n    return [sum(sub_tup) / len(sub_tup) for sub_tup in tup]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(a, b):\n    return [float(x) / y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    numbers = ''.join([char for char in s if char.isdigit()])\n    letters = ''.join([char for char in s if not char.isdigit()])\n    return letters + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    if n == 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    \n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    \n    if m1 == m2:\n        return m1\n    \n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2-1:], arr2[:n//2+1], n//2+1)\n        else:\n            return get_median(arr1[n//2:], arr2[:n//2+1], n//2+1)\n    else:\n        if n % 2 == 0:\n            return get_median(arr2[n//2-1:], arr1[:n//2+1], n//2+1)\n        else:\n            return get_median(arr2[n//2:], arr1[:n//2+1], n//2+1)\n\ndef median(arr, n):\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2-1]) / 2\n    else:\n        return arr[n//2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [x ** n for x in lst]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    return radius * radius * math.sqrt(3) / 4"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[x+i, y+j] for i in range(-1, 2) for j in range(-1, 2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zeroes = [x for x in lst if x != 0]\n    zeroes = [0] * (len(lst) - len(non_zeroes))\n    return non_zeroes + zeroes"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(32):\n        count = 0\n        for j in range(n):\n            if (arr[j] & (1 << i)):\n                count += 1\n        result += (count * (n - count) * (1 << i))\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    return amount == cost"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(v, t):\n    return math.ceil(13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(strings):\n    return [re.sub(r'\\s*\\([^)]*\\)', '', s) for s in strings]"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    return bool(re.search(r'\\Bz\\B', text))"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dct):\n    return tup + (dct,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    max_cost = dp[N-1][N-1]\n    return max_cost / (2 * N - 1)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = str(base ** power)\n    return sum(int(digit) for digit in result)"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        result += arr[i] * (i + 1) * (n - i)\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    if n <= 2:\n        return n\n    num_bits = n.bit_length()\n    mask = (1 << (num_bits - 1)) - 1\n    mask = mask ^ 1\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    if n == 1:\n        return 1\n    current = 1\n    increment = 2\n    while True:\n        current += increment\n        if len(str(current)) == n:\n            return increment\n        increment += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return all(c == s[0] for c in s)"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    return math.sqrt(3) * side_length**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num) if d != '0']\n        return all(num % d == 0 for d in digits)\n    \n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += \" \" + char\n        else:\n            result += char\n    return result.strip()"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(map(int, lst))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    if len(lst) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in lst:\n        if num < first:\n            second = first\n            first = num\n        elif num < second and num != first:\n            second = num\n    return second"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    count = 0\n    seen = set()\n    for s in strings:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            count += 1\n            seen.remove(reversed_s)\n        else:\n            seen.add(s)\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tup = tuple(sublist)\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    k = 2\n    while True:\n        if (k * (k + 1)) // 2 >= n:\n            return k + n - 1\n        k += 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum_fourth_power = 0\n    for i in range(1, 2*n, 2):\n        sum_fourth_power += i**4\n    return sum_fourth_power"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(s, sub):\n    pos = s.find(sub)\n    if pos == -1:\n        return None\n    return (sub, pos, pos + len(sub))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    packed = []\n    current_sublist = [lst[0]]\n    for elem in lst[1:]:\n        if elem == current_sublist[0]:\n            current_sublist.append(elem)\n        else:\n            packed.append(current_sublist)\n            current_sublist = [elem]\n    packed.append(current_sublist)\n    return packed"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    result = []\n    n = len(tuples)\n    for i in range(n):\n        for j in range(i + 1, n):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n\n    v = max_val * 100\n\n    return (round(h), round(s, 1), round(v, 1))"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even * odd\n    return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(map(int, s.strip('()').split(', ')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    return bool(re.match(r'^a{1}b{3}$', text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low, high = 0, len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    return bool(re.match(r'^a.*b$', text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    return sum(d.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    def sum_odd(n):\n        return n * n\n    return sum_odd(r) - sum_odd(l - 1)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d)) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    return max(lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(t1 < t2 for t1, t2 in zip(tuple1, tuple2))"}
