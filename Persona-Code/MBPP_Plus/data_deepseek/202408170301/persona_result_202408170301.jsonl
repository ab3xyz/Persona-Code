{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert lists to sets for efficient intersection calculation\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the shared elements as a sorted tuple\n    return tuple(sorted(shared_elements))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    # XOR the two numbers to find differing bits\n    xor_result = a ^ b\n    # Check if the result is a power of two, which indicates exactly one bit difference\n    return (xor_result != 0) and (xor_result & (xor_result - 1) == 0)"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s: str) -> int:\n    # Check if the string is empty or has only one character, which would mean only one rotation is needed\n    if len(s) <= 1:\n        return 1\n    \n    # Iterate through possible rotations, starting from 1 up to the length of the string\n    for k in range(1, len(s) + 1):\n        # Rotate the string by k positions and check if it matches the original string\n        if s == s[k:] + s[:k]:\n            return k\n    \n    # If no rotation matches, which theoretically should not happen for valid inputs, return the length of the string\n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    if char not in s:\n        return s\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index == last_index:\n        return s.replace(char, '')\n    else:\n        return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and pair it with the row index\n    row_sums_with_indices = [(sum(row), i) for i, row in enumerate(matrix)]\n    # Sort the pairs based on the sum of the row, keeping track of the original indices\n    sorted_row_sums_with_indices = sorted(row_sums_with_indices, key=lambda x: x[0])\n    # Create a new matrix by reordering the original rows based on the sorted indices\n    sorted_matrix = [matrix[i] for _, i in sorted_row_sums_with_indices]\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base_area, height, length):\n    return base_area * length"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(main_string, chars_to_remove):\n    # Create a set of characters to remove for efficient lookup\n    remove_set = set(chars_to_remove)\n    # Use a list comprehension to filter out characters present in the remove_set\n    filtered_chars = [char for char in main_string if char not in remove_set]\n    # Join the filtered characters back into a string\n    return ''.join(filtered_chars)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    if number < 1:\n        return False\n    n = 1\n    while True:\n        woodall_candidate = n * (2 ** n) - 1\n        if woodall_candidate == number:\n            return True\n        elif woodall_candidate > number:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(number):\n    # Convert the number to a string to easily reverse it\n    reversed_number = int(str(number)[::-1])\n    # Check if the number is one less than twice its reverse\n    return number == 2 * reversed_number - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return 3 * n * n - 2 * n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    def sum_of_digits(sub):\n        return sum(int(digit) for digit in sub)\n    \n    count = 0\n    length = len(s)\n    \n    for start in range(length):\n        for end in range(start + 1, length + 1):\n            substring = s[start:end]\n            if sum_of_digits(substring) == len(substring):\n                count += 1\n    \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    increasing = decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] < array[i - 1]:\n            increasing = False\n        if array[i] > array[i - 1]:\n            decreasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    # Iterate through the main list to find potential starting points for the sublist\n    for i in range(len_main - len_sub + 1):\n        # Check if the segment of main_list starting at i matches the sub_list\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:  # Check if the list is empty\n        return True  # Assuming empty list means all tuples are of equal length\n    first_tuple_length = len(tuples_list[0])  # Get the length of the first tuple\n    for t in tuples_list[1:]:  # Iterate through the rest of the tuples\n        if len(t) != first_tuple_length:  # Compare the length of each tuple with the first one\n            return False  # Return False if any tuple has a different length\n    return True  # Return True if all tuples have the same length"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    def get_next_gap(gap):\n        # Shrink gap by shrink factor\n        gap = int(gap / 1.3)\n        return gap if gap > 1 else 1\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    # Keep running while gap is more than 1 and last iteration caused a swap\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        # Compare all elements with current gap\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # A number can be represented as the difference of two squares if and only if it is not of the form 4k+2 (for some integer k)\n    # This is because any number of the form 4k or 4k+1 or 4k+3 can be represented as the difference of two squares, but not 4k+2\n    if n % 4 == 2:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(seq1, seq2):\n    if len(seq1) != len(seq2):\n        return False\n    \n    pattern_map1 = {}\n    pattern_map2 = {}\n    next_key1 = 0\n    next_key2 = 0\n    \n    for item1, item2 in zip(seq1, seq2):\n        if item1 not in pattern_map1:\n            pattern_map1[item1] = next_key1\n            next_key1 += 1\n        if item2 not in pattern_map2:\n            pattern_map2[item2] = next_key2\n            next_key2 += 1\n        \n        if pattern_map1[item1] != pattern_map2[item2]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [tup for tup in tuples_list if all(elem % k == 0 for elem in tup)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(number)\n    # Initialize variables to store the sum of digits at even and odd positions\n    sum_even, sum_odd = 0, 0\n    \n    # Iterate over the digits of the number\n    for i in range(len(num_str)):\n        # If the position is even (considering 0 as even), add the digit to sum_even\n        if i % 2 == 0:\n            sum_even += int(num_str[i])\n        # Otherwise, add the digit to sum_odd\n        else:\n            sum_odd += int(num_str[i])\n    \n    # Calculate the difference between the sum of digits at even and odd positions\n    diff = abs(sum_even - sum_odd)\n    \n    # A number is divisible by 11 if the difference is also divisible by 11\n    return diff % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word: str) -> bool:\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    ascii_sum = sum(ord(char) for char in s)\n    result_ascii = ascii_sum % 26\n    return chr(result_ascii + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n <= 0:\n        return None\n    memo = [0] * (n + 1)\n    memo[1] = 1\n    memo[2] = 1\n    \n    def newman_conway(n):\n        if memo[n] != 0:\n            return memo[n]\n        memo[n] = newman_conway(newman_conway(n - 1)) + newman_conway(n - newman_conway(n - 1))\n        return memo[n]\n    \n    return newman_conway(n)"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n    \n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Initialize the result dictionary\n    result = {}\n    \n    # Merge the dictionaries into the result dictionary\n    for dictionary in (dict1, dict2, dict3):\n        for key, value in dictionary.items():\n            result[key] = value\n    \n    return result"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    return any(substring in s for s in string_list)"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string to easily iterate through digits\n    num_str = str(number)\n    \n    # Check if the number has less than 3 digits, it cannot be undulating\n    if len(num_str) < 3:\n        return False\n    \n    # Iterate through the digits to check the undulating pattern\n    for i in range(len(num_str) - 1):\n        # If two consecutive digits are the same, it's not undulating\n        if num_str[i] == num_str[i + 1]:\n            return False\n        # Check if the pattern alternates correctly\n        if i < len(num_str) - 2 and num_str[i] != num_str[i + 2]:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the minimum value and the corresponding first value\n    min_value = float('inf')\n    min_first_value = None\n    \n    # Iterate through each tuple in the list\n    for first_value, second_value in tuples_list:\n        # Update the minimum value and the corresponding first value if a smaller second value is found\n        if second_value < min_value:\n            min_value = second_value\n            min_first_value = first_value\n    \n    return min_first_value"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    return min(len(lst) for lst in list_of_lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency_dict = {}\n    for sublist in lists:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_num):\n    if decimal_num == 0:\n        return '0'\n    binary_str = ''\n    while decimal_num > 0:\n        binary_str = str(decimal_num % 2) + binary_str\n        decimal_num = decimal_num // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    \n    return num"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds for the array\")\n    \n    # Sort the array to find the kth element\n    sorted_arr = sorted(arr)\n    \n    # Return the kth element using 1-based indexing\n    return sorted_arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0].capitalize() + ''.join(x.capitalize() for x in components[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    \n    # Initialize a 2D array to store the values of subproblems\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: There's only one way to arrange 0 elements with 0 descents\n    dp[0][0] = 1\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(booleans):\n    return sum(booleans)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_lists(list1, list2, list3):\n    def merge_two_lists(l1, l2):\n        merged_list = []\n        i = j = 0\n        while i < len(l1) and j < len(l2):\n            if l1[i] < l2[j]:\n                merged_list.append(l1[i])\n                i += 1\n            else:\n                merged_list.append(l2[j])\n                j += 1\n        while i < len(l1):\n            merged_list.append(l1[i])\n            i += 1\n        while j < len(l2):\n            merged_list.append(l2[j])\n            j += 1\n        return merged_list\n\n    temp_merged = merge_two_lists(list1, list2)\n    final_merged = merge_two_lists(temp_merged, list3)\n    return final_merged\n\ndef merge_sorted_list(list1, list2, list3):\n    return merge_sorted_lists(list1, list2, list3)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    # Function to count the number of '1's in a binary string\n    def count_ones(s):\n        return s.count('1')\n    \n    # Calculate the number of '1's in the original string\n    original_ones = count_ones(binary_str)\n    \n    # If the number of '1's is odd, it will contribute to the count\n    if original_ones % 2 != 0:\n        odd_count = 1\n    else:\n        odd_count = 0\n    \n    # Rotate the string and check for each rotation if the count of '1's is odd\n    for i in range(1, rotations):\n        # Rotate the string by slicing\n        rotated_str = binary_str[i:] + binary_str[:i]\n        # Count the number of '1's in the rotated string\n        rotated_ones = count_ones(rotated_str)\n        # If the count of '1's is odd, increment the odd_count\n        if rotated_ones % 2 != 0:\n            odd_count += 1\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Initialize the set with the elements of the first list for comparison\n    common_elements = set(nested_lists[0])\n    \n    for lst in nested_lists[1:]:\n        # Update the set to only include elements that are present in the current list\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s: str) -> bool:\n    if s.isdigit():\n        return True\n    if s.startswith('-') and s[1:].isdigit():\n        return True\n    return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(numbers):\n    return int(''.join(map(str, numbers)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    def try_float(x):\n        try:\n            return float(x)\n        except ValueError:\n            return x\n    \n    return [[try_float(item) for item in sublist] for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    low = 0\n    high = len(arr) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for a, b in tuples_list:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        sum_divisors = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum_divisors += i\n                if i != n // i:\n                    sum_divisors += n // i\n        return sum_divisors\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        sum1 = sum_of_divisors(num)\n        if sum1 > num and sum1 <= limit:\n            sum2 = sum_of_divisors(sum1)\n            if sum2 == num:\n                amicable_sum += num + sum1\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    current_diff = 0\n    diff_map = {0: -1}  # To handle the case when the max diff is at the start\n\n    for i, char in enumerate(binary_string):\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        if current_diff in diff_map:\n            max_diff = max(max_diff, i - diff_map[current_diff])\n        else:\n            diff_map[current_diff] = i\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    common_divisors_sum = 0\n    gcd_value = gcd(a, b)\n    \n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            common_divisors_sum += i\n    \n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a: int, b: int) -> int:\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    return [word for word in sentence.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Calculate the size of the matrix\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks passed, it's a magic square\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    max_freq_item = None\n    max_freq = 0\n    \n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n        \n        if frequency[item] > max_freq:\n            max_freq = frequency[item]\n            max_freq_item = item\n    \n    return max_freq_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    left, right = 0, len(s_list) - 1\n    \n    while left < right:\n        if s_list[left] in vowels and s_list[right] in vowels:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n        elif s_list[left] not in vowels:\n            left += 1\n        else:\n            right -= 1\n    \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    \n    # Avoid division by zero\n    if non_zero_count == 0:\n        return 0.0\n    \n    return zero_count / non_zero_count\n\n# Test cases are provided in the problem statement, but not included here as per instructions."}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 != 0:\n            return False\n        n //= 2\n        if n == 1:\n            return True\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    return set(item for sublist in list_of_lists for item in sublist)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sub_array, k):\n        i = 0\n        while i < k / 2:\n            sub_array[i], sub_array[k - i - 1] = sub_array[k - i - 1], sub_array[i]\n            i += 1\n\n    n = len(arr)\n    while n > 1:\n        # Find the index of the maximum element in arr\n        mi = arr.index(max(arr[:n]))\n        # If the max element is not at the end, flip to bring it to the front and then to the end\n        if mi != n - 1:\n            flip(arr, mi + 1)\n            flip(arr, n)\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    return sum(1 for item in tup if isinstance(item, list))"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    min_val = min(arr)\n    max_val = max(arr)\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, x, y = extended_gcd(b % a, a)\n            return (g, y - (b // a) * x, x)\n    \n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        x *= n // g\n        y *= n // g\n        if a < 0: x = -x\n        if b < 0: y = -y\n        return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, to_remove):\n    return [item for item in main_list if item not in to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    \"\"\"Calculate the sum of all divisors of n.\"\"\"\n    sum_divisors = 1  # Start with 1 because 1 is a divisor of every number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:  # Avoid adding the square root twice for perfect squares\n                sum_divisors += n // i\n    return sum_divisors\n\ndef are_equivalent(a, b):\n    \"\"\"Determine if the sum of the divisors of two integers are the same.\"\"\"\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s: str) -> int:\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(numbers):\n    count = 0\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (numbers[i] ^ numbers[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start_index, end_index):\n    # Ensure the indices are within the bounds of the list\n    if start_index < 0 or end_index >= len(lst) or start_index > end_index:\n        return 0\n    \n    # Calculate the sum of the elements in the specified range\n    return sum(lst[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s: str) -> int:\n    target = 'std'\n    count = 0\n    start = 0\n    \n    while start < len(s):\n        pos = s.find(target, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    \n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if not tup:  # Check if the tuple is empty\n        return True  # An empty tuple can be considered to have elements of the same (non-existent) type\n    first_type = type(tup[0])\n    return all(isinstance(item, first_type) for item in tup)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    def binary_search(arr, n, element, find_first):\n        left, right = 0, n - 1\n        result = -1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == element:\n                result = mid\n                if find_first:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            elif arr[mid] < element:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n\n    first_index = binary_search(arr, n, element, True)\n    if first_index == -1:\n        return False\n    last_index = binary_search(arr, n, element, False)\n    count = last_index - first_index + 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    return input_string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n    return negative + positive + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(\" \", char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order and then select the first n elements\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    bit_position = 0\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            n |= (1 << bit_position)\n        bit_position += 1\n    return n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    for t in tuples_list:\n        # Normalize tuples to ensure (a, b) and (b, a) are considered the same\n        normalized_t = tuple(sorted(t))\n        if normalized_t in occurrences:\n            occurrences[normalized_t] += 1\n        else:\n            occurrences[normalized_t] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        count = 0\n        for next_val in range(start * 2, m + 1):\n            count += count_sequences(next_val, length - 1)\n        return count\n\n    total_sequences = 0\n    for start in range(1, m // 2 + 1):\n        total_sequences += count_sequences(start, n - 1)\n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    if first_list:  # Check if the first list is not empty\n        first_list[-1:] = second_list  # Replace the last element of the first list with the second list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s: str) -> int:\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    # Start from the next number after the given one\n    next_num = num + 1\n    # Check if the square root of the next number is an integer\n    while not (next_num**0.5).is_integer():\n        next_num += 1\n    return next_num"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Arrays to store the longest increasing and decreasing subsequence sums ending at each index\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n\n    # Calculate the maximum increasing subsequence sum ending at each index\n    for i in range(n):\n        inc_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n\n    # Calculate the maximum decreasing subsequence sum starting at each index\n    for i in range(n - 1, -1, -1):\n        dec_sum[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n\n    # Find the maximum sum of a bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        bitonic_sum = inc_sum[i] + dec_sum[i] - arr[i]  # Subtract arr[i] once to avoid double counting\n        max_bitonic_sum = max(max_bitonic_sum, bitonic_sum)\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    # Create a table to store results of subproblems\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/). cl is length of\n    # substring\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # The first and last characters of the string are the boundaries of the longest palindromic subsequence\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the arrays to sets for efficient intersection calculation\n    set1 = set(arr1)\n    set2 = set(arr2)\n    \n    # Calculate the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the result back to a list and return\n    return list(intersection)"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(z):\n    if isinstance(z, complex):\n        r = math.sqrt(z.real**2 + z.imag**2)\n        theta = math.atan2(z.imag, z.real)\n    else:\n        r = abs(z)\n        theta = 0.0 if z >= 0 else math.pi\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(item, int) for item in lst)"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    def generate_combinations(current, n, start):\n        if n == 0:\n            result.append(tuple(current))\n            return\n        for i in range(start, len(colors)):\n            current.append(colors[i])\n            generate_combinations(current, n - 1, i)\n            current.pop()\n\n    result = []\n    generate_combinations([], n, 0)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n\n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(t1, t2) for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        a, b = 1, 3\n        for i in range(3, n + 1):\n            c = 2 * b + a\n            a, b = b, c\n            while not is_prime(b):\n                c = 2 * b + a\n                a, b = b, c\n        return b"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Ensure the tuples are of the same length\n    assert len(tuple1) == len(tuple2), \"Tuples must be of the same length\"\n    \n    # Perform element-wise division\n    result = tuple(a // b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    - n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    - int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    return sum((2 * i + 1) ** 2 for i in range(n))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n: int) -> int:\n    \"\"\"\n    Calculate the n'th star number using the formula 6 * n * (n - 1) + 1.\n    \n    :param n: The position in the sequence of star numbers.\n    :return: The n'th star number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the ith even natural number\n        even_number = 2 * i\n        # Raise the even number to the fifth power and add it to the total sum\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    sum_even_index_coeff = 0\n    \n    # Iterate through the binomial coefficients at even indices\n    for k in range(0, n+1, 2):\n        # Calculate the binomial coefficient for index k using the formula nCk = n! / (k! * (n-k)!)\n        # We use a helper function to calculate factorial for simplicity\n        coeff = factorial(n) // (factorial(k) * factorial(n - k))\n        sum_even_index_coeff += coeff\n    \n    return sum_even_index_coeff\n\ndef factorial(num):\n    # Base case: factorial of 0 is 1\n    if num == 0:\n        return 1\n    # Recursive case: calculate factorial\n    else:\n        return num * factorial(num - 1)"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula for the nth decagonal number:\n    D(n) = 4n^2 - 3n\n    \"\"\"\n    return 4 * n**2 - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i, item in enumerate(arr):\n        if item == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    seen = set()\n    for item in lst:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    frequency = {digit: num_str.count(digit) for digit in num_str}\n    return all(frequency[digit] <= int(digit) for digit in frequency)"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Regular expression to match 'a' followed by two or three 'b's\n    pattern = r'ab{2,3}'\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    # Return True if a match is found, False otherwise\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for a single repetition using Kadane's algorithm\n    def kadane(arr):\n        max_current = max_global = arr[0]\n        for i in range(1, len(arr)):\n            max_current = max(arr[i], max_current + arr[i])\n            if max_current > max_global:\n                max_global = max_current\n        return max_global\n\n    # If k is 1, simply apply Kadane's algorithm on the original array\n    if k == 1:\n        return kadane(arr)\n\n    # Calculate the sum of the entire array\n    arr_sum = sum(arr)\n\n    # Create a new array that represents two repetitions of the original array\n    double_arr = arr * 2\n\n    # Find the maximum subarray sum for two repetitions\n    max_two_repetitions = kadane(double_arr)\n\n    # If the sum of the original array is positive, the maximum sum will include\n    # as many full repetitions of the array as possible, plus the maximum sum from\n    # the beginning and end of the array\n    if arr_sum > 0:\n        return max_two_repetitions + (k - 2) * arr_sum\n    else:\n        # If the sum of the original array is not positive, the maximum sum is limited\n        # to what can be achieved within two repetitions\n        return max_two_repetitions\n\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the third side of a right-angled triangle given the other two sides.\n    \n    Parameters:\n    a (float): The length of one side of the right-angled triangle.\n    b (float): The length of the other side of the right-angled triangle.\n    \n    Returns:\n    float: The length of the third side (hypotenuse) of the right-angled triangle.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out non-comparable elements and convert all to a common type (int) for comparison\n    filtered_list = [item for item in lst if isinstance(item, (int, float))]\n    if not filtered_list:\n        raise ValueError(\"List does not contain any comparable elements\")\n    return max(filtered_list)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    \"\"\"\n    Returns the sum of all divisors of a given number n.\n    \"\"\"\n    if n == 1:\n        return 1\n    \n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    \n    return divisor_sum"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_sort(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp_arr, left, mid)\n            inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n            inv_count += merge(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge(arr, temp_arr, left, mid, right):\n        i = left  # Starting index for left subarray\n        j = mid + 1  # Starting index for right subarray\n        k = left  # Starting index to be sorted\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                k += 1\n                j += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            k += 1\n            j += 1\n\n        for loop_var in range(left, right + 1):\n            arr[loop_var] = temp_arr[loop_var]\n\n        return inv_count\n\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort(arr, temp_arr, 0, n - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(data):\n    aggregates = {}\n    for name, score in data:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Using combinatorial mathematics, specifically the Catalan number formula,\n    # which is known to count the number of valid binary sequences for this problem.\n    # The nth Catalan number can be found using the formula (2n)! / ((n+1)! * n!).\n    # However, for this specific problem, we need to adjust it slightly because\n    # we're looking for sequences of length 2n, not n.\n    \n    # Initialize the result variable\n    result = 1\n    \n    # Calculate the nth Catalan number adjusted for our problem\n    for i in range(1, n + 1):\n        result *= (n + i)\n        result //= i\n    \n    # Final adjustment to get the correct count of sequences\n    result *= 2\n    result //= (n + 1)\n    \n    return result"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values()) if d else 0\n    return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words_list):\n    result = []\n    for words in words_list:\n        for word in words.split():\n            if word.startswith('P') or word.startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Create an array to store the maximum sum of increasing subsequences ending at each index\n    max_sum = [0] * n\n    \n    # Initialize max_sum array with the elements themselves as the smallest possible subsequence\n    for j in range(n):\n        max_sum[j] = arr[j]\n    \n    # Compute maximum sum of increasing subsequences for each index\n    for j in range(1, n):\n        for l in range(j):\n            if arr[j] > arr[l] and max_sum[j] < max_sum[l] + arr[j]:\n                max_sum[j] = max_sum[l] + arr[j]\n    \n    # Find the maximum sum of increasing subsequence from start to ith index\n    max_sum_up_to_i = max(max_sum[:i+1])\n    \n    # Include the kth element in the sum if it's greater than the last element of the subsequence\n    if arr[k] > arr[i]:\n        return max_sum_up_to_i + arr[k]\n    else:\n        return max_sum_up_to_i\n\n# Example usage (not to be included in the final function definition)\n# assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n# assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n# assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = [x * y for x in list1 for y in list2]\n    return sorted(products, reverse=True)[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    position = 0\n    unset_bit_found = False\n    while n >> position:\n        if not (n & (1 << position)):\n            unset_bit_found = True\n        elif unset_bit_found:\n            unset_bit_found = False\n            break\n        position += 1\n\n    # If an unset bit was found, set it\n    if unset_bit_found:\n        n |= (1 << (position - 1))\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (math.pi * radius**2 * height) / 3"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, names, values):\n    return [{key: {name: value}} for key, name, value in zip(keys, names, values)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = {0: 0}\n\n    def f(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = max(n, f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5))\n        return memo[n]\n\n    return f(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to store character counts\n    char_count = {}\n    \n    # Populate the dictionary with character counts\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # Return None if no non-repeated character is found\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s: str) -> bool:\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a >= b and a <= c) or (a >= c and a <= b):\n        return float(a)\n    elif (b >= a and b <= c) or (b >= c and b <= a):\n        return float(b)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(digit_sum(n) for n in numbers if isinstance(n, int))"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    \n    # Start from the end of the list to find the first digit that can be increased\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, the number cannot be increased\n    if i == -1:\n        return None\n    \n    # Find the smallest digit on right side of (i'th digit) that is larger than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the position i to get the smallest possible number\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    # Initialize the minimum product with the product of the first pair\n    min_product = tuples_list[0][0] * tuples_list[0][1]\n    \n    # Iterate through the list of tuples\n    for pair in tuples_list:\n        # Calculate the product of the current pair\n        current_product = pair[0] * pair[1]\n        \n        # Update the minimum product if the current product is smaller\n        if current_product < min_product:\n            min_product = current_product\n    \n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric elements\n    numeric_values = [item for item in lst if isinstance(item, (int, float))]\n    \n    # Check if the list of numeric values is not empty\n    if not numeric_values:\n        raise ValueError(\"The list does not contain any numeric values.\")\n    \n    # Return the minimum value among the numeric values\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [item[n] for item in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return not set(seq1).isdisjoint(seq2)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1) if max2 < max1 else (max1, max2)\n    else:\n        return (min1, min2) if min1 < min2 else (min2, min1)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=lambda x: len(x))"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum(i**3 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(element) for element in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings_tuple):\n    return [s[-1] for s in strings_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(nested_list, element):\n    count = 0\n    for sublist in nested_list:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(min(a, b) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The formula for the directrix of a parabola y = ax^2 + bx + c is y = c - (b^2 + 1)/(4a)\n    return c - (b**2 + 1) / (4 * a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert one of the lists to a set for efficient lookup\n    set2 = set(list2)\n    # Iterate through the first list and check for membership in the set of the second list\n    for element in list1:\n        if element in set2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    \"\"\"\n    Calculate the median length of a trapezium given the lengths of the two bases and the height.\n    \n    Parameters:\n    a (float): The length of the first base.\n    b (float): The length of the second base.\n    h (float): The height of the trapezium.\n    \n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Checks whether the given number is greater than all elements in the array.\n    \n    Parameters:\n    arr (list): The list of numbers to compare against.\n    num (int): The number to check if it's greater than all elements in the array.\n    \n    Returns:\n    bool: True if num is greater than all elements in arr, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    \"\"\"\n    Returns the last digit of a given number.\n\n    Parameters:\n    number (int): The number from which the last digit is to be extracted.\n\n    Returns:\n    int: The last digit of the given number.\n    \"\"\"\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s: str) -> str:\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 1)"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    seen = set()\n    count = 0\n    for pair in pairs:\n        # Sort the pair to handle bidirectional nature\n        sorted_pair = tuple(sorted(pair))\n        if sorted_pair in seen:\n            count += 1\n        else:\n            seen.add(sorted_pair)\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to a string, concatenate them, and then convert back to an integer\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match adverbs (simplified for demonstration)\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Find all matches\n    matches = re.finditer(adverb_pattern, sentence)\n    \n    # Get the first match\n    first_match = next(matches, None)\n    \n    if first_match:\n        start, end = first_match.span()\n        adverb = first_match.group()\n        return start, end, adverb\n    return None, None, None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side):\n    return 6 * side ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_numbers = [num for num in arr if num > 0]\n    return len(positive_numbers) / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(num_list):\n    return [num ** 3 for num in num_list]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    The Perrin sequence is defined by the recurrence relation:\n    P(n) = P(n-2) + P(n-3) for n >= 3 with initial conditions P(0) = 3, P(1) = 0, P(2) = 2.\n\n    Parameters:\n    - n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    - int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    # Initial conditions for the Perrin sequence\n    perrin_numbers = [3, 0, 2]\n    \n    # Calculate the Perrin numbers up to the nth number\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    \n    # Sum the first n Perrin numbers\n    return sum(perrin_numbers[:n])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    return ''.join(input_string.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text.lower()))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(char for char in s if not char.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(input_list):\n    def generate_combinations(index=0, current_combination=[]):\n        if index == len(input_list):\n            result.append(current_combination[:])\n            return\n        generate_combinations(index + 1, current_combination)\n        current_combination.append(input_list[index])\n        generate_combinations(index + 1, current_combination)\n        current_combination.pop()\n\n    result = []\n    generate_combinations()\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_ending_here = min_ending_here = max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_ending_here = min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], arr[i] * max_ending_here, arr[i] * min_ending_here)\n            min_ending_here = min(arr[i], arr[i] * temp, arr[i] * min_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize dp array where dp[i] represents the maximum product ending at i\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # To keep track of the maximum product found\n    max_prod = dp[0]\n    \n    for i in range(1, n):\n        dp[i] = arr[i]  # Initialize with the current element itself\n        for j in range(i):\n            if arr[j] < arr[i]:  # Check if it forms an increasing subsequence\n                dp[i] = max(dp[i], dp[j] * arr[i])  # Update if product is larger\n        max_prod = max(max_prod, dp[i])  # Update the maximum product found so far\n    \n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(a + b for a, b in zip(tup, tup[1:]))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Modulo operation at each step to prevent overflow\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    if len(nums) == 0:\n        return False\n    sorted_nums = sorted(nums)\n    for i in range(len(sorted_nums) - 1):\n        if sorted_nums[i] + 1 != sorted_nums[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    # Convert each tuple to a frozenset to ignore order\n    set1 = {frozenset(t) for t in tuple_list1}\n    set2 = {frozenset(t) for t in tuple_list2}\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert frozensets back to tuples\n    return {tuple(sorted(fs)) for fs in intersection}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(input_string, old_char, new_char):\n    \"\"\"\n    Replace all occurrences of old_char with new_char in input_string.\n    \n    Parameters:\n    input_string (str): The original string where replacements will occur.\n    old_char (str): The character to be replaced.\n    new_char (str): The character to replace old_char with.\n    \n    Returns:\n    str: The modified string with replacements made.\n    \"\"\"\n    return input_string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    for char in s:\n        if not char.islower():\n            result.append(char)\n        else:\n            # If we encounter a lowercase character, we stop appending to 'result'\n            # until we encounter an uppercase character again.\n            if result:\n                result.pop()  # Remove the last character which is the boundary of the lowercase substring\n            while result and result[-1].islower():\n                result.pop()  # Remove all contiguous lowercase characters from the end of 'result'\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string to easily access the first character\n    number_str = str(abs(number))  # Use abs to handle negative numbers\n    # The first character of the string is the first digit\n    first_digit = int(number_str[0])\n    return first_digit"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_natural = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference between the sum of cubes and the sum of natural numbers\n    return sum_cubes - sum_natural"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    # Count the number of odd and even elements in the array\n    odd_count = sum(1 for x in arr if x % 2 != 0)\n    even_count = n - odd_count\n    \n    # The number of pairs with odd XOR is the product of the counts of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings to easily access individual digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with zeros on the left to make them the same length\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of the per-digit differences\n    sum_of_differences = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str_num1, str_num2))\n    \n    return sum_of_differences"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += nums[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1 + tuple2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(input_string):\n    return re.findall(r'\"(.*?)\"', input_string)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Check if the list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    seen = set()\n    duplicates = set()\n    result = []\n    \n    for num in nums:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    \n    for num in nums:\n        if num not in duplicates:\n            result.append(num)\n    \n    return result"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius**2\n    lateral_surface = 2 * math.pi * radius * height\n    total_surface_area = 2 * base_area + lateral_surface\n    return round(total_surface_area, 2)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Lengths of the lists\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    # If sub_list is longer than main_list, it cannot be a sublist\n    if len_sub > len_main:\n        return False\n    \n    # Iterate through main_list to find potential starting points for sub_list\n    for i in range(len_main - len_sub + 1):\n        # Check if the segment of main_list starting at i matches sub_list\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    \n    # If no match was found, sub_list is not a sublist of main_list\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the interleaved result\n    interleaved = []\n    # Iterate through the range of the length of the lists\n    for i in range(len(list1)):\n        # Append elements from each list at the current index to the interleaved list\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    # Return the interleaved list\n    return interleaved"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets for efficient difference calculation\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find dissimilar elements by calculating symmetric difference\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the result back to a tuple and return\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    def is_even(n):\n        return n % 2 == 0\n\n    def process_element(element):\n        if isinstance(element, int):\n            return element if is_even(element) else None\n        elif isinstance(element, tuple):\n            return tuple(filter(lambda x: x is not None, (process_element(e) for e in element)))\n        return None\n\n    return tuple(filter(lambda x: x is not None, (process_element(e) for e in nested_tuple)))"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the slant height of the pyramid\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    # Calculate the area of one of the triangular faces\n    triangle_face_area = base_edge * slant_height / 2\n    # Calculate the total surface area by summing the base area and the areas of the four triangular faces\n    total_surface_area = base_area + 4 * triangle_face_area\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items based on price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(lst, n):\n    return lst[n:] + lst[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    return [num for num in range(start, end + 1) if (int(num**0.5)**2 == num)]"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    # Convert theta from degrees to radians\n    theta_rad = math.radians(theta)\n    \n    # Calculate rectangular coordinates\n    x = r * math.cos(theta_rad)\n    y = r * math.sin(theta_rad)\n    \n    # Calculate the hypotenuse and angle for verification\n    hypotenuse = math.sqrt(x**2 + y**2)\n    angle = math.atan2(y, x)\n    \n    # Return the rectangular coordinates and verification tuple\n    return ((hypotenuse, math.degrees(angle)), complex(x, y))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n):\n        total += comb(n, i) * comb(n, i + 1)\n    return total"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    return '.'.join(str(int(part)) for part in ip_address.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for number in numbers:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        elif first_odd is None and number % 2 != 0:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None  # In case there are no even or odd numbers in the list\n    \n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    # Check if the binary strings are of the same length and have the same number of 1s and 0s\n    if len(bin1) != len(bin2) or bin1.count('1') != bin2.count('1'):\n        return None\n    \n    # Calculate the number of swaps needed by counting mismatches\n    mismatches = sum(1 for a, b in zip(bin1, bin2) if a != b)\n    \n    # Each swap corrects two mismatches, so divide by 2\n    return mismatches // 2\n\n# Test cases are provided in the problem statement, but not included here as per instructions."}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Initialize pointers for both arrays\n    ptr1, ptr2 = 0, 0\n    \n    # Loop until we reach the kth element\n    for _ in range(k):\n        # If we've reached the end of arr1, move pointer in arr2\n        if ptr1 == len(arr1):\n            ptr2 += 1\n        # If we've reached the end of arr2, move pointer in arr1\n        elif ptr2 == len(arr2):\n            ptr1 += 1\n        # If the current element in arr1 is smaller, move its pointer\n        elif arr1[ptr1] < arr2[ptr2]:\n            ptr1 += 1\n        # If the current element in arr2 is smaller or equal, move its pointer\n        else:\n            ptr2 += 1\n    \n    # Check which array's current element should be returned\n    if ptr1 == len(arr1) or (ptr2 < len(arr2) and arr1[ptr1] > arr2[ptr2]):\n        return arr2[ptr2]\n    else:\n        return arr1[ptr1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(num)\n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n    # Initialize the sum of the digits raised to the power of num_digits\n    sum_of_powers = 0\n    \n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Convert the digit back to an integer and raise it to the power of num_digits\n        sum_of_powers += int(digit) ** num_digits\n    \n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    avg_n = sum_n / n\n    return sum_n, avg_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize a list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    \n    while numbers:\n        # The first number in the list is a Ludic number\n        ludic = numbers.pop(0)\n        ludic_numbers.append(ludic)\n        \n        # Remove every 'ludic'th number from the list\n        numbers = [num for i, num in enumerate(numbers, start=1) if i % ludic != 0]\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees: float) -> float:\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    \n    # Initialize a triangular array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # Explicitly set the first element of the current row as the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the elements in the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Ensure k is within the bounds of the list\n    if k > 0 and k <= len(lst):\n        # Remove the k'th element by slicing the list\n        return lst[:k-1] + lst[k:]\n    else:\n        # If k is out of bounds, return the original list\n        return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    return sum(sum(tup) for tup in tuple_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(input_tuple):\n    averages = []\n    for inner_tuple in input_tuple:\n        average = sum(inner_tuple) / len(inner_tuple)\n        averages.append(average)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [float(x) / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    numbers = ''.join(filter(str.isdigit, s))\n    letters = ''.join(filter(str.isalpha, s))\n    return letters + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    if not numbers:\n        return 0\n    \n    # Sort the numbers to ensure we can check divisibility in a forward direction\n    numbers.sort()\n    \n    # Initialize a list to store the size of the largest subset ending with each number\n    dp = [1] * len(numbers)  # Each number is a subset of size 1 by itself\n    \n    # Map to store the largest subset size for each number as a key for quick lookup\n    largest_subset_size = {num: 1 for num in numbers}\n    \n    # Iterate through the sorted numbers to fill dp array\n    for i in range(len(numbers)):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:\n                # If numbers[i] is divisible by numbers[j], it can be part of the subset ending at numbers[j]\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    largest_subset_size[numbers[i]] = dp[i]\n    \n    # The answer is the maximum value in the dp array\n    return max(largest_subset_size.values())"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    def find_median(arr1, arr2, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return (arr1[0] + arr2[0]) / 2\n        if n == 2:\n            return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n        \n        m1 = median(arr1, n)\n        m2 = median(arr2, n)\n        \n        if m1 == m2:\n            return m1\n        \n        if m1 > m2:\n            if n % 2 == 0:\n                return find_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n//2 + 1)\n            else:\n                return find_median(arr1[:n//2 + 1], arr2[n//2:], n//2 + 1)\n        else:\n            if n % 2 == 0:\n                return find_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n//2 + 1)\n            else:\n                return find_median(arr1[n//2:], arr2[:n//2 + 1], n//2 + 1)\n    \n    def median(arr, n):\n        if n % 2 == 0:\n            return (arr[n//2] + arr[n//2 - 1]) / 2\n        else:\n            return arr[n//2]\n    \n    return find_median(list1, list2, size)"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s: str) -> str:\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    elif radius == 0:\n        return 0\n    else:\n        # The largest triangle inscribed in a semicircle is an isosceles triangle\n        # with its base along the diameter. The height of this triangle is equal\n        # to the radius of the semicircle, and the base is twice the radius.\n        # The area of a triangle is given by (base * height) / 2.\n        base = 2 * radius\n        height = radius\n        return (base * height) / 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[x + dx, y + dy] for dx in range(-1, 2) for dy in range(-1, 2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zeroes = [x for x in lst if x != 0]\n    zeroes = [x for x in lst if x == 0]\n    return non_zeroes + zeroes"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    # Constants for the wind chill formula\n    const_a = 13.12\n    const_b = 0.6215\n    const_c = -11.37\n    const_d = 0.3965\n    \n    # Calculate wind chill using the formula\n    wind_chill_index = const_a + const_b * temperature + const_c * (velocity ** 0.16) + const_d * temperature * (velocity ** 0.16)\n    \n    # Round to the next integer\n    return int(wind_chill_index + 0.999999)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name and name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(text):\n    # Find the index of the first parenthesis\n    start_idx = text.find('(')\n    # If there is no parenthesis, return the original text\n    if start_idx == -1:\n        return text\n    # Return the text before the parenthesis\n    return text[:start_idx].rstrip()"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    # Regular expression to match a word with 'z' not at the start or end\n    pattern = r'\\b\\w*z\\w*\\b'\n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    # Filter out matches where 'z' is at the start or end of the word\n    valid_matches = [match for match in matches if not match.startswith('z') and not match.endswith('z')]\n    # Return True if there are valid matches, False otherwise\n    return bool(valid_matches)"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array up to a given position 'k'.\n    \n    Parameters:\n    arr (list): The input array to be reversed.\n    k (int): The position up to which the array should be reversed.\n    \n    Returns:\n    list: The array with the first 'k' elements reversed.\n    \"\"\"\n    if k > len(arr):\n        raise ValueError(\"Position 'k' exceeds the length of the array.\")\n    \n    # Reverse the subarray from the start up to position 'k'\n    arr[:k] = arr[:k][::-1]\n    \n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    path_count = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the first cell\n    dp[0][0] = matrix[0][0]\n    path_count[0][0] = 1\n\n    # Initialize the first row and column\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        path_count[0][i] = path_count[0][i-1] + 1\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        path_count[i][0] = path_count[i-1][0] + 1\n\n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            if (dp[i-1][j] + matrix[i][j]) / (path_count[i-1][j] + 1) > (dp[i][j-1] + matrix[i][j]) / (path_count[i][j-1] + 1):\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                path_count[i][j] = path_count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                path_count[i][j] = path_count[i][j-1] + 1\n\n    # Calculate the maximum average\n    max_average = dp[n-1][n-1] / path_count[n-1][n-1]\n    return round(max_average, 1)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: stats for name, stats in students.items() if stats[0] > min_height and stats[1] > min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for x, y in zip(list1, list2) if x == y)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Calculate the sum of all digits\n    sum_of_digits = sum(int(digit) for digit in result_str)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"(.*?)\"', text)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    return tuple(numbers[i] * numbers[i + 1] for i in range(len(numbers) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if not result or result[-1] != item:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area of the cone\n    A_lateral = math.pi * r * l\n    return A_lateral"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has less than 3 bits, no bits can be toggled in the middle\n    if num_bits <= 2:\n        return n\n    \n    # Create a mask with the middle bits set to 1\n    mask = (1 << (num_bits - 1)) - 1 - 1\n    \n    # Toggle the middle bits using XOR with the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(sorted_list, value):\n    left, right = 0, len(sorted_list)\n    while left < right:\n        mid = (left + right) // 2\n        if sorted_list[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    if n == 1:\n        return 1\n    \n    # Start from the smallest possible triangular number with 2 digits\n    index = 4\n    while True:\n        # Calculate the triangular number for the current index\n        triangular_number = index * (index + 1) // 2\n        \n        # Check if the number of digits in the triangular number is equal to n\n        if len(str(triangular_number)) == n:\n            return index\n        \n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup)-1, 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return all(char == s[0] for char in s)"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    # Calculate the area of one face of the tetrahedron (equilateral triangle)\n    area_face = (math.sqrt(3) / 4) * side_length ** 2\n    # A tetrahedron has 4 faces, so multiply the area of one face by 4\n    total_area = 4 * area_face\n    return total_area\n\n# Assert statements for testing\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)  # Ensure n is within the bounds of the list length\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(item is None for item in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    \n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "import re\n\ndef capital_words_spaces(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_str_list):\n    return sorted(map(int, num_str_list))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if left child exists and if it's greater than the current node\n        if left_child_index < n and arr[left_child_index] < arr[i]:\n            return False\n        \n        # Check if right child exists and if it's greater than the current node\n        if right_child_index < n and arr[right_child_index] < arr[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth Jacobsthal number using an iterative approach.\n\n    Parameters:\n    - n (int): The position in the Jacobsthal sequence.\n\n    Returns:\n    - int: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + 2 * b\n    \n    return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of the tuples (the values)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(set(numbers)) < 2:\n        return None\n    sorted_unique = sorted(set(numbers))\n    return sorted_unique[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    for string in string_list:\n        if string not in seen:\n            reverse_string = string[::-1]\n            if reverse_string in string_list and reverse_string not in seen:\n                count += 1\n                seen.add(string)\n                seen.add(reverse_string)\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        # Convert sublist to tuple to use as dictionary key\n        tuple_key = tuple(sublist)\n        if tuple_key in result:\n            result[tuple_key] += 1\n        else:\n            result[tuple_key] = 1\n    return result"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s: str) -> bool:\n    pattern = re.compile(r'^\\d+\\.\\d{2}$')\n    return bool(pattern.match(s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    return month_number in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize difference as a large number\n    diff = float('inf')\n    # Find the min diff by comparing adjacent pairs in the sorted array\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    return n + (n.bit_length() - 1)"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return list(zip(lst, lst[1:]))"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    # Initialize a dictionary to store the frequency of each number\n    frequency = {}\n    # Initialize count of pairs\n    count = 0\n    # Loop through each number in the array\n    for num in arr:\n        # Calculate the complement that would sum up to the target with the current number\n        complement = sum - num\n        # If the complement is in the frequency dictionary, add its frequency to the count\n        if complement in frequency:\n            count += frequency[complement]\n        # Update the frequency of the current number\n        frequency[num] = frequency.get(num, 0) + 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    # Convert lists to sets for efficient difference calculation\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Calculate the symmetric difference and convert back to list\n    diff = list(set1.symmetric_difference(set2))\n    \n    # Sort the result to match the expected output format\n    diff.sort()\n    \n    return diff"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum((2*i + 1)**4 for i in range(n))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    index = main_string.find(substring)\n    if index == -1:\n        return None\n    return (substring, index, index + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed = []\n    current_sublist = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed.append(current_sublist)\n            current_sublist = [item]\n    \n    packed.append(current_sublist)  # Append the last sublist\n    return packed"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    n = len(tuple_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            combined = tuple(map(sum, zip(tuple_list[i], tuple_list[j])))\n            combinations.append(combined)\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    # Function to count divisors of n\n    def divisors(num):\n        count = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n    \n    # Check if the count of divisors is even\n    return divisors(n) % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n, 2):  # Step 2 for odd length subarrays\n            total_sum += sum(arr[start:end+1])\n            \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values among R, G, B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    \n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for number in numbers:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        elif first_odd is None and number % 2 != 0:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            return first_even * first_odd\n    \n    return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the outer parentheses and split by comma followed by optional space\n    elements = tuple_str.strip('()').split(',')\n    # Convert each element to integer and construct the tuple\n    return tuple(int(elem.strip()) for elem in elements)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_array, target):\n    \"\"\"\n    Locates the right insertion point for the target value in the sorted array.\n    \n    Parameters:\n    sorted_array (list): A list of integers sorted in ascending order.\n    target (int): The value for which to find the right insertion point.\n    \n    Returns:\n    int: The index where the target value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(sorted_array)\n    while left < right:\n        mid = (left + right) // 2\n        if sorted_array[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    return bool(re.search(r'ab{3}', text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    return all(x % 2 == 0 for x in lst[::2])"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    return tuple(item for item in input_tuple if not isinstance(item, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return sum(1 for item in lst if isinstance(item, list))"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == len(arr) - 1 or arr[mid + 1] != target):\n            return mid\n        elif arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict_obj):\n    return sum(dict_obj.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure the number is treated as 32-bit\n    n &= 0xFFFFFFFF\n    # Perform the left rotation\n    return (n << d) & 0xFFFFFFFF | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return ''.join(input_string.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    root = int(num ** 0.5)\n    return root * root == num"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n        if product % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Iterate through each pair of elements\n    for i in range(len(tuple1)):\n        # Check if the element in the second tuple is not smaller\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True"}
