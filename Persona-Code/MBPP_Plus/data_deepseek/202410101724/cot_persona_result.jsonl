{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a list (or any other desired format)\n    return list(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Initialize an empty min-heap\n    min_heap = []\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # If the heap is not full, push the number onto the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        else:\n            # If the heap is full and the current number is larger than the smallest element in the heap\n            if num > min_heap[0]:\n                # Replace the smallest element with the current number\n                heapq.heapreplace(min_heap, num)\n    \n    # Convert the min-heap to a list and sort it in descending order\n    return sorted(min_heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # Perform XOR operation\n    xor_result = num1 ^ num2\n    \n    # Count the number of 1s in the binary representation of xor_result\n    count_ones = bin(xor_result).count('1')\n    \n    # Return True if exactly one bit is different\n    return count_ones == 1\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(15, 8) == False\nassert differ_At_One_Bit_Pos(2, 4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    # Initialize an empty list to store the squared values\n    squared_list = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Square the number and append it to the squared_list\n        squared_list.append(num ** 2)\n    \n    # Return the list of squared values\n    return squared_list"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    if char not in s:\n        return s\n    \n    first_index = s.index(char)\n    last_index = s.rindex(char)\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Remove the last occurrence (if it's different from the first)\n    if last_index != first_index:\n        last_index -= 1  # Adjust index after removing the first occurrence\n        s = s[:last_index] + s[last_index+1:]\n    \n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Step 1: Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Step 2: Sort the pairs based on the sum\n    sorted_row_sums = sorted(row_sums, key=lambda x: x[0])\n    \n    # Step 3: Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_row_sums]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume\n\n# Test the function with the given assertions\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression pattern to match sequences of lowercase letters joined by underscores\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    # Check if the entire string matches the pattern\n    return bool(re.fullmatch(pattern, text))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length\n\nassert square_perimeter(10) == 40\nassert square_perimeter(5) == 20\nassert square_perimeter(4) == 16"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    # Create a set of characters from str2 for efficient lookup\n    chars_to_remove = set(str2)\n    \n    # Initialize an empty list to collect characters from str1\n    result = []\n    \n    # Iterate through each character in str1\n    for char in str1:\n        # If the character is not in the set of characters to remove, append it to the result\n        if char not in chars_to_remove:\n            result.append(char)\n    \n    # Convert the list back to a string and return it\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(x):\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n\n# Test cases\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Test the function with the given assertions\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    largest_number = ''.join(map(str, sorted_digits))\n    \n    # Convert the result back to an integer\n    return int(largest_number)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return 3 * n * n - 2 * n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            length = j - i + 1\n            digit_sum = sum(int(char) for char in substring)\n            \n            if digit_sum == length:\n                count += 1\n    \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    if not lst:\n        raise ValueError(\"List is empty\")\n    \n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    \n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = float('-inf')\n    \n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    # Initialize the Bell triangle\n    bell_triangle = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell_triangle[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # The first element in each row is the last element of the previous row\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n    \n    # The Bell number for n is the first element of the n-th row\n    return bell_triangle[n][0]\n\n# Test cases\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    # Check if the array is non-increasing\n    non_increasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            non_increasing = False\n            break\n    \n    # Check if the array is non-decreasing\n    non_decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            non_decreasing = False\n            break\n    \n    # The array is monotonic if it is either non-increasing or non-decreasing\n    return non_increasing or non_decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    # Edge case: if sub_list is empty, it is always a sublist\n    if not sub_list:\n        return True\n    \n    # Edge case: if sub_list is longer than main_list, it cannot be a sublist\n    if len(sub_list) > len(main_list):\n        return False\n    \n    # Iterate through main_list to find the starting position of sub_list\n    for i in range(len(main_list) - len(sub_list) + 1):\n        # Check if the subsequent elements match sub_list\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    \n    # If no match is found, return False\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr\n    \n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    \n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n % 2 != 0 or n % 4 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    \n    mapping = {}\n    \n    for i in range(len(arr1)):\n        if arr1[i] in mapping:\n            if mapping[arr1[i]] != arr2[i]:\n                return False\n        else:\n            mapping[arr1[i]] = arr2[i]\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    result = []\n    for tup in tuples:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0\n\n# Test the function\nassert is_Diff(12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# Test cases\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (r ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize the sequence with the base cases\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    if n > 1:\n        seq[2] = 1\n    \n    # Compute the sequence up to n\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n\n# Test cases\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n\n# Test cases\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Test cases\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency_dict = {}\n    for element in lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n: int) -> int:\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Check if the number has at least three digits\n    if len(num_str) < 3:\n        return False\n    \n    # Get the first and second digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # Check if the first and second digits are different\n    if first_digit == second_digit:\n        return False\n    \n    # Iterate through the string and check the alternating pattern\n    for i in range(2, len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first_digit:\n                return False\n        else:\n            if num_str[i] != second_digit:\n                return False\n    \n    # If all checks pass, the number is undulating\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b > 0:\n        result = 1\n        for _ in range(b):\n            result *= a\n        return result\n    else:\n        return 1 / power(a, -b)"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the variable with the first tuple in the list\n    min_tuple = tuples_list[0]\n    \n    # Iterate through the list starting from the second tuple\n    for current_tuple in tuples_list[1:]:\n        # Compare the second value of the current tuple with the smallest value found so far\n        if current_tuple[1] < min_tuple[1]:\n            # Update the smallest tuple if the current one is smaller\n            min_tuple = current_tuple\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test cases\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(list_of_lists):\n    # Step 1: Flatten the list of lists\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Step 2: Count frequencies\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Step 3: Return the dictionary\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(num):\n    \"\"\"Helper function to check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"Function to find the next smallest palindrome of a specified integer.\"\"\"\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n# Test cases\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(1221) == 1331\nassert next_smallest_palindrome(120) == 121"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component except the first one\n    camel_str = components[0] + ''.join(x.capitalize() for x in components[1:])\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m, memo={}):\n    # Base cases\n    if m == 0:\n        return 1\n    if m >= n:\n        return 0\n    \n    # Check if the value is already computed\n    if (n, m) in memo:\n        return memo[(n, m)]\n    \n    # Recursive formula\n    result = (n - m) * eulerian_num(n - 1, m - 1, memo) + (m + 1) * eulerian_num(n - 1, m, memo)\n    \n    # Store the computed value in memo\n    memo[(n, m)] = result\n    \n    return result\n\n# Test cases\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for i in range(len(list_of_lists)):\n        # Sort the current sublist\n        list_of_lists[i] = sorted(list_of_lists[i])\n    # Return the modified main list with all sublists sorted\n    return list_of_lists"}
{"task_id": "Mbpp/105", "solution": "def count(booleans):\n    true_count = 0\n    for boolean in booleans:\n        if boolean:\n            true_count += 1\n    return true_count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    # Convert the list to a tuple\n    lst_as_tuple = tuple(lst)\n    \n    # Concatenate the original tuple with the tuple created from the list\n    result_tuple = tpl + lst_as_tuple\n    \n    # Return the resulting tuple\n    return result_tuple"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Step 1: Combine the lists\n    combined_list = list1 + list2 + list3\n    \n    # Step 2: Sort the combined list\n    combined_list.sort()\n    \n    return combined_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    def rotate_string(s, n):\n        return s[-n:] + s[:-n]\n    \n    def binary_to_decimal(binary_str):\n        return int(binary_str, 2)\n    \n    def is_odd(num):\n        return num % 2 != 0\n    \n    odd_count = 0\n    length = len(binary_str)\n    \n    for i in range(rotations):\n        rotated_str = rotate_string(binary_str, i % length)\n        decimal_value = binary_to_decimal(rotated_str)\n        if is_odd(decimal_value):\n            odd_count += 1\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return set()\n    \n    common_elements = set(nested_lists[0])\n    \n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"1\") == True\nassert check_integer(\"12345\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"12.3\") == False\nassert check_integer(\"0\") == True\nassert check_integer(\"\") == False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    for d in dict_list:\n        if d:  # This checks if the dictionary is not empty\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Convert each integer in the tuple to a string and join them\n    concatenated_string = ''.join(str(num) for num in tup)\n    # Convert the concatenated string back to an integer\n    result_integer = int(concatenated_string)\n    return result_integer"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for inner_list in lst:\n        converted_list = []\n        for element in inner_list:\n            try:\n                converted_element = float(element)\n            except ValueError:\n                converted_element = element\n            converted_list.append(converted_element)\n        result.append(converted_list)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    # Remove leading and trailing spaces\n    cleaned_string = input_string.strip()\n    # Split the string into a list of words\n    result_list = cleaned_string.split()\n    return result_list"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')  # Initialize with the smallest possible value\n    \n    for pair in tuples_list:\n        product = abs(pair[0] * pair[1])  # Calculate the absolute product\n        if product > max_product:\n            max_product = product  # Update max_product if the current product is greater\n    \n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_proper_divisors(n):\n    \"\"\"Calculate the sum of proper divisors of n.\"\"\"\n    divisors_sum = 1  # 1 is a proper divisor for any n > 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Sum all amicable numbers from 1 to the specified limit.\"\"\"\n    amicable_sum = 0\n    for a in range(1, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b > a and sum_of_proper_divisors(b) == a:\n            amicable_sum += a + b\n    return amicable_sum\n\n# Test cases\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2 + 1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(2j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Dictionary to store the first occurrence of each difference\n    diff_map = {0: -1}\n    max_length = 0\n    current_diff = 0\n    \n    for i, char in enumerate(binary_string):\n        # Update the difference based on the character\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        # Check if this difference has been seen before\n        if current_diff in diff_map:\n            # Calculate the length of the sub-string\n            sub_string_length = i - diff_map[current_diff]\n            # Update the maximum length if this sub-string is longer\n            max_length = max(max_length, sub_string_length)\n        else:\n            # Store the first occurrence of this difference\n            diff_map[current_diff] = i\n    \n    return max_length"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a: int, b: int) -> int:\n    return a * b\n\n# Test cases\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, text):\n    # Split the text into words\n    words = text.split()\n    \n    # Filter words that are longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    # Return the filtered list of words\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Calculate the target sum using the first row\n    target_sum = sum(matrix[0])\n    \n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency_dict = {}\n    \n    # Count the frequency of each item in the list\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in frequency_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    s_list = list(s)\n    vowel_positions = [i for i, char in enumerate(s) if char in vowels]\n    vowel_chars = [s[i] for i in vowel_positions]\n    vowel_chars.reverse()\n    \n    for pos, char in zip(vowel_positions, vowel_chars):\n        s_list[pos] = char\n    \n    return ''.join(s_list)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)\n\n# Test cases\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\nassert tup_string(('p', 'y', 't', 'h', 'o', 'n')) == \"python\"\nassert tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm')) == \"program\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n\n\n# Test the function with the given assertions\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary and remove the '0b' prefix\n    binary_representation = bin(n)[2:]\n    \n    # Count the number of '1's in the binary representation\n    count_of_ones = binary_representation.count('1')\n    \n    # Check if the number of '1's is equal to the length of the binary representation\n    return count_of_ones == len(binary_representation)\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    unique_numbers = set()\n    for sublist in list_of_lists:\n        for number in sublist:\n            unique_numbers.add(number)\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, k):\n    \"\"\"Helper function to flip the first k elements of the array.\"\"\"\n    arr[:k+1] = arr[:k+1][::-1]\n\ndef pancake_sort(arr):\n    \"\"\"Pancake Sort implementation.\"\"\"\n    n = len(arr)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted portion\n        max_idx = arr.index(max(arr[:n]))\n        \n        # If the maximum element is not already at the end of the unsorted portion\n        if max_idx != n - 1:\n            # Flip the maximum element to the front\n            flip(arr, max_idx)\n            # Flip the entire unsorted portion to move the maximum element to its correct position\n            flip(arr, n - 1)\n        \n        # Reduce the size of the unsorted portion\n        n -= 1\n    \n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Ensure all lists are of the same length\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Initialize counter\n    count = 0\n    \n    # Iterate through the lists\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test cases\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6])) == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1], )) == 1"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    \n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    factor = n // gcd\n    x = x0 * factor\n    y = y0 * factor\n    return (x, y)\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, to_remove):\n    # Convert to_remove to a set for efficient lookups\n    to_remove_set = set(to_remove)\n    \n    # Use list comprehension to filter out elements in to_remove_set\n    result = [item for item in lst if item not in to_remove_set]\n    \n    return result"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total_sum += term\n    return total_sum\n\n# Test cases\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25"}
{"task_id": "Mbpp/164", "solution": "def find_divisors(n):\n    \"\"\"Helper function to find all divisors of a given integer n.\"\"\"\n    divisors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef sum_of_divisors(n):\n    \"\"\"Helper function to calculate the sum of the divisors of a given integer n.\"\"\"\n    return sum(find_divisors(n))\n\ndef are_equivalent(a, b):\n    \"\"\"Main function to determine if the sum of the divisors of two integers a and b are the same.\"\"\"\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\n# Test cases\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    \n    for i, char in enumerate(s):\n        if ord(char) - ord('a') == i:\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = sum(1 for num in nums if num % 2 == 0)\n    odd_count = len(nums) - even_count\n    \n    pairs_even_even = (even_count * (even_count - 1)) // 2\n    pairs_odd_odd = (odd_count * (odd_count - 1)) // 2\n    pairs_even_odd = even_count * odd_count\n    \n    return pairs_even_even + pairs_odd_odd + pairs_even_odd"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    \n    # Initialize the result to 1\n    result = 1\n    \n    # Double the result until it is greater than or equal to n\n    while result < n:\n        result <<= 1\n    \n    return result\n\n# Test cases\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32"}
{"task_id": "Mbpp/168", "solution": "def frequency(numbers, target):\n    count = 0\n    for number in numbers:\n        if number == target:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    # Ensure the indices are within the valid range\n    if start < 0 or end >= len(lst) or start > end:\n        raise ValueError(\"Invalid start or end index\")\n    \n    # Calculate the sum of the sublist from start to end (inclusive)\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n    \n    return perimeter\n\n# Test the function with the given examples\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    # Initialize the counter\n    count = 0\n    # Define the substring to search for\n    substring = \"std\"\n    # Get the length of the substring\n    substring_length = len(substring)\n    \n    # Iterate through the input string\n    for i in range(len(input_string)):\n        # Check if the substring starts at the current position\n        if input_string[i:i + substring_length] == substring:\n            # Increment the counter if the substring is found\n            count += 1\n    \n    # Return the final count\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    def find_first_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        first_occurrence = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                first_occurrence = mid\n                high = mid - 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return first_occurrence\n\n    def find_last_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        last_occurrence = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                last_occurrence = mid\n                low = mid + 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return last_occurrence\n\n    first_index = find_first_occurrence(arr, n, x)\n    last_index = find_last_occurrence(arr, n, x)\n\n    if first_index == -1 or last_index == -1:\n        return False\n\n    frequency = last_index - first_index + 1\n    return frequency > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n    \n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n    \n    return min_val\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(19, 15, 18) == 15\nassert min_of_three(-10, -20, -30) == -30"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(\" \", char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Return the first n elements\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_area_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the base of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create the mask with even bits set\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    \n    # Set the even bits of the number\n    return n | mask\n\n# Test cases\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of each tuple\n    tuple_count = defaultdict(int)\n    \n    for tup in tuples_list:\n        # Normalize the tuple by sorting its elements\n        normalized_tuple = tuple(sorted(tup))\n        # Increment the count for the normalized tuple\n        tuple_count[normalized_tuple] += 1\n    \n    return dict(tuple_count)\n\n# Example assertions\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurrences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurrences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize the dp array\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: sequences of length 1\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the dp array\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = sum(dp[i-1][k] for k in range(1, j // 2 + 1))\n    \n    # Sum up the results for sequences of length n\n    total_sequences = sum(dp[n][j] for j in range(1, m + 1))\n    \n    return total_sequences\n\n# Test cases\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Remove the last element of list1\n    modified_list1 = list1[:-1]\n    \n    # Extend modified_list1 with list2\n    modified_list1.extend(list2)\n    \n    return modified_list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Step 1: Compute inc_sum array\n    inc_sum = [0] * n\n    for i in range(n):\n        inc_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n    \n    # Step 2: Compute dec_sum array\n    dec_sum = [0] * n\n    for i in range(n-1, -1, -1):\n        dec_sum[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n    \n    # Step 3: Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n    \n    return max_bitonic_sum\n\n# Test cases\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3, 14, 16, 21, 23, 29, 30]) == 138"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Base case: single character substrings\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the table for substrings of length 2 and above\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the first array to a set for efficient lookup\n    set1 = set(arr1)\n    \n    # Initialize an empty list to store the intersection\n    intersection = []\n    \n    # Iterate through the second array and check for common elements\n    for element in arr2:\n        if element in set1:\n            intersection.append(element)\n            # Remove the element from set1 to handle duplicates in arr2\n            set1.remove(element)\n    \n    # Return the intersection as a list\n    return intersection"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        magnitude = abs(z)\n        angle = 0.0 if z >= 0 else math.pi\n    else:\n        a, b = z.real, z.imag\n        magnitude = math.sqrt(a**2 + b**2)\n        angle = math.atan2(b, a)\n    \n    return (magnitude, angle)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test cases\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([1, 2, 3]) == 3\nassert count_integer([1, 1.2, 4, 5.1]) == 2"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(elements, n):\n    def generate_combinations(current, k):\n        if k == 0:\n            result.append(tuple(current))\n            return\n        for element in elements:\n            generate_combinations(current + [element], k - 1)\n    \n    result = []\n    generate_combinations([], n)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a boolean array to track prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Implement the Sieve of Eratosthenes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of prime numbers\n    return sum(is_prime)\n\n# Test cases\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a, b) for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    \n    S = [1, 1]\n    count = 0\n    index = 2\n    \n    while True:\n        next_term = 2 * S[-1] + S[-2]\n        S.append(next_term)\n        \n        if is_prime(next_term):\n            count += 1\n            if count == n:\n                return next_term\n        \n        index += 1\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Perform element-wise division\n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result.append(a // b)  # Using integer division for simplicity\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Ensure L is a valid integer and within the bounds of the list\n    if not isinstance(L, int) or L < 0 or L > len(lst):\n        raise ValueError(\"L must be a non-negative integer and less than or equal to the length of the list\")\n    \n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    # Return the resulting lists as a tuple\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 0:\n        return 0\n    elif human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 2 * 10.5 + (human_age - 2) * 4\n\n# Test cases\nassert dog_age(12) == 61\nassert dog_age(15) == 73\nassert dog_age(24) == 109"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    result = []\n    for i in range(n):\n        sublist = [lst[j] for j in range(i, len(lst), n)]\n        result.append(sublist)\n    \n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2\n\n# Test the function with the given assertions\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(9) == 324\nassert lateralsurface_cube(10) == 400"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Test cases\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    # Return the ASCII value using the ord() function\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total_sum = 0\n    for i in range(0, len(lst), 2):  # Iterate over even indices\n        if lst[i] % 2 == 0:  # Check if the number at the even index is even\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [tup[-1] for tup in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    # Check if the lengths of the tuples are the same\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Subtract corresponding elements and store the results in a new tuple\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/274", "solution": "def binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient C(n, k).\"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"Calculate the sum of binomial coefficients at even indices for a given n.\"\"\"\n    total_sum = 0\n    for k in range(0, n + 1, 2):\n        total_sum += binomial_coefficient(n, k)\n    return total_sum\n\n# Test cases\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n    \n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n    \n    return filtered_dict\n\n# Test cases\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n\n\n# Test the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    found = False\n    index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] == elem:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    \n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Step 1: Calculate the sum of the entire array\n    total_sum = sum(arr)\n    \n    # Step 2: Use Kadane's algorithm to find the maximum sum subarray in a single repetition\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    \n    max_single = kadane(arr)\n    \n    # Step 3: If the total sum is positive, consider the possibility of subarrays spanning boundaries\n    if total_sum > 0:\n        max_repeated = max_single + (k - 1) * total_sum\n    else:\n        max_repeated = max_single\n    \n    # Step 4: Return the maximum of the two cases\n    return max(max_single, max_repeated)\n\n# Test cases\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares\n\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    # Determine which side is the hypotenuse\n    if a > b:\n        hypotenuse = a\n        other_side = b\n    else:\n        hypotenuse = b\n        other_side = a\n    \n    # Calculate the third side\n    if hypotenuse == a or hypotenuse == b:\n        third_side = math.sqrt(hypotenuse**2 - other_side**2)\n    else:\n        third_side = math.sqrt(a**2 + b**2)\n    \n    return third_side"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out integers from the list\n    integers = [x for x in lst if isinstance(x, int)]\n    # Return the maximum value among the filtered integers\n    return max(integers)\n\n# Test cases\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n    \n    # Iterate through all possible divisors\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors\n\n# Test cases\nassert sum_div(8) == 7\nassert sum_div(12) == 16\nassert sum_div(7) == 8"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5\nassert get_Inv_Count([1, 2, 1]) == 1\nassert get_Inv_Count([1, 2, 5, 6, 1]) == 3"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    \n    def flatten(sublist):\n        for item in sublist:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flat_list.append(item)\n    \n    flatten(nested_list)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    # Dictionary to store the sum of scores for each name\n    aggregate_scores = {}\n    \n    # Iterate through the list of tuples\n    for name, score in tuples:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    \n    return (max_name, max_score)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    # Calculate the central binomial coefficient\n    return math.comb(2 * n, n)\n\n# Test cases\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    \n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            max_depth = max(max_depth, dict_depth(d[key]))\n    \n    return max_depth + 1\n\n# Test cases\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a':1, 'b': {'c':'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words_list):\n    result = []\n    for words in words_list:\n        for word in words.split():\n            if word.startswith('p') or word.startswith('P'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array with the same values as arr\n    dp = arr[:]\n    \n    # Fill the dp array\n    for j in range(1, n):\n        for l in range(j):\n            if arr[j] > arr[l]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Find the maximum sum of increasing subsequence up to index i\n    max_sum_up_to_i = max(dp[:i+1])\n    \n    # Include the kth element if it forms an increasing sequence\n    if arr[k] > arr[i]:\n        max_sum_up_to_i += arr[k]\n    \n    return max_sum_up_to_i\n\n# Test cases\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, k):\n    # Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top k products\n    return products[:k]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b\n\n# Test the function\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    bit_length = n.bit_length()\n    return 1 << (bit_length - 1)\n\n# Test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n\n\n# Test the function\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    return [{id_: {name: score}} for id_, name, score in zip(ids, names, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo=None):\n    if memo is None:\n        memo = {0: 0, 1: 1}\n    \n    if n in memo:\n        return memo[n]\n    \n    # Calculate the sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # Take the maximum of the sum and n\n    result = max(sum_parts, n)\n    \n    # Store the result in memo\n    memo[n] = result\n    \n    return result\n\n# Test cases\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return float(b)\n    elif (b <= a <= c) or (c <= a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, (int, float)):\n            num_str = str(abs(int(item)))  # Convert to positive integer string\n            for digit in num_str:\n                total_sum += int(digit)\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for tup in tuples_list:\n        unique_tuples.add(frozenset(tup))\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b\n\n# Test cases\nassert minimum(1, 2) == 1\nassert minimum(-5, -4) == -5\nassert minimum(0, 0) == 0"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, x):\n    return x in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    \n    # Traverse the list from right to left\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            # Find the smallest digit on the right side that is larger than digits[i]\n            for j in range(len(digits) - 1, i, -1):\n                if digits[j] > digits[i]:\n                    # Swap the digits\n                    digits[i], digits[j] = digits[j], digits[i]\n                    # Sort the digits to the right of i in ascending order\n                    digits = digits[:i + 1] + sorted(digits[i + 1:])\n                    # Convert the list of digits back to a number\n                    return int(''.join(digits))\n    \n    # If no such number exists, return None\n    return None"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values and convert numeric values to integers\n    numeric_values = [int(x) for x in lst if isinstance(x, (int, float))]\n    \n    # Return the minimum value from the filtered list\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element\n\n# Test cases\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\nassert Find_Max([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\nassert Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\n# Test the function with the provided assertions\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function with the given assertions\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings_tuple):\n    result = []\n    for string in strings_tuple:\n        result.append(string[-1])\n    return result"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the input date string into components\n    year, month, day = date_str.split('-')\n    \n    # Reorder the components to form the new date string\n    new_date_str = f\"{day}-{month}-{year}\"\n    \n    return new_date_str"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through the elements of the tuples\n    for a, b in zip(tuple1, tuple2):\n        # Perform the bitwise AND operation and append the result to the list\n        result.append(a & b)\n    \n    # Convert the list of results to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula\n    directrix = c - (1 + b**2) / (4 * a)\n    return directrix\n\n# Test cases\nassert parabola_directrix(5, 3, 2) == -198\nassert parabola_directrix(9, 8, 4) == -2336\nassert parabola_directrix(2, 4, 6) == -130"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the first list to a set for efficient lookup\n    set1 = set(list1)\n    \n    # Check if any element in the second list is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If no common element is found, return False\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(side1, side2, side3):\n    # Calculate the median length of the trapezium\n    median = (side1 + side2) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10\n\n# Test the function\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n    \n    # Iterate through each number in the input list\n    for num in numbers:\n        # Check if the number is negative\n        if num < 0:\n            # Append the negative number to the list\n            negative_numbers.append(num)\n    \n    # Return the list of negative numbers\n    return negative_numbers"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    pair_count = {}\n    total_count = 0\n    \n    for t in tuples:\n        # Create a sorted tuple to handle bidirectional pairs\n        sorted_t = tuple(sorted(t))\n        \n        if sorted_t in pair_count:\n            pair_count[sorted_t] += 1\n        else:\n            pair_count[sorted_t] = 1\n    \n    # Count pairs where the count is greater than 1\n    for count in pair_count.values():\n        if count > 1:\n            total_count += count // 2\n    \n    return total_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer in the list to a string and concatenate them\n    concatenated_str = ''.join(map(str, lst))\n    # Convert the concatenated string back to an integer\n    return int(concatenated_str)"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Define a regular expression pattern for adverbs ending with \"ly\"\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    \n    # Iterate through the words to find the first adverb\n    for word in words:\n        if adverb_pattern.match(word):\n            # Find the starting and ending positions of the adverb in the sentence\n            start_pos = sentence.index(word)\n            end_pos = start_pos + len(word)\n            return (start_pos, end_pos, word)\n    \n    # If no adverb is found, return None or handle as needed\n    return None\n\n# Test cases\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\") == (0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 13, 'unfortunately')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area\n\n# Test the function with assertions\nassert surfacearea_cube(5) == 150\nassert surfacearea_cube(3) == 54\nassert surfacearea_cube(10) == 600"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    # Ensure the input tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the elements of the input tuples\n    for t1, t2 in zip(tuple1, tuple2):\n        # Ensure each inner tuple contains exactly two integers\n        if len(t1) != 2 or len(t2) != 2:\n            raise ValueError(\"Each inner tuple must contain exactly two integers\")\n        \n        # Multiply the corresponding elements and add to the result\n        result.append((t1[0] * t2[0], t1[1] * t2[1]))\n    \n    # Convert the result list to a tuple of tuples\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [num ** 3 for num in numbers]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases for Perrin sequence\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    \n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]\n    \n    # Calculate Perrin numbers up to n\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    \n    # Sum the Perrin numbers up to n\n    return sum(perrin_numbers[:n + 1])\n\n# Assertions to test the function\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [string for string in string_list if len(string) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Step 1: Identify all factors of n\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    \n    # Step 2: Filter out the even factors\n    even_factors = [factor for factor in factors if factor % 2 == 0]\n    \n    # Step 3: Sum the even factors\n    return sum(even_factors)\n\n# Test cases\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Check each word for the presence of 'z'\n    for word in words:\n        if 'z' in word:\n            return True\n    \n    # If no word contains 'z', return False\n    return False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list\n\n# Test cases\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\nassert Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1]\nassert Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']]) == ['x']"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    temp = []\n    in_uppercase = False\n    \n    for char in s:\n        if char.isupper():\n            if not in_uppercase:\n                in_uppercase = True\n            temp.append(char)\n        else:\n            if in_uppercase:\n                temp.clear()\n                in_uppercase = False\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    def generate_combinations(current, remaining):\n        if not remaining:\n            return [current]\n        else:\n            with_first = generate_combinations(current + [remaining[0]], remaining[1:])\n            without_first = generate_combinations(current, remaining[1:])\n            return with_first + without_first\n    \n    return generate_combinations([], lst)"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    return {key: value for key, value in input_dict.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    n = len(arr)\n    max_product_ending_here = [0] * n\n    \n    for i in range(n):\n        max_product_ending_here[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_ending_here[i] = max(max_product_ending_here[i], max_product_ending_here[j] * arr[i])\n    \n    return max(max_product_ending_here)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    # Ensure the tuple has at least two elements\n    if len(tup) < 2:\n        raise ValueError(\"Input tuple must contain at least two elements.\")\n    \n    # Use tuple comprehension to compute pairwise sums\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    # Initialize product to 1\n    product = 1\n    \n    # Iterate through the array and compute the product\n    for num in arr:\n        product *= num\n    \n    # Return the product modulo n\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Normalize each tuple to a set to handle order-insensitivity\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n    \n    # Find the intersection of the two sets of sets\n    intersection = set1 & set2\n    \n    # Convert the resulting sets back to tuples\n    result = {tuple(sorted(s)) for s in intersection}\n    \n    return result\n\n# Example assertions\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)\n\n# Test cases\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\nassert replace_char(\"character\", 'c', 'a') == \"aharaater\"\nassert replace_char(\"python\", 'l', 'a') == \"python\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    largest = max(arr)\n    smallest = min(arr)\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()\n\n# Test the function\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # If the number is negative, ignore the negative sign\n    if number_str[0] == '-':\n        number_str = number_str[1:]\n    \n    # Return the first character of the string as an integer\n    return int(number_str[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    odd_numbers = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff\n\n# Test the function with the given assertions\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\nassert find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7) == 12\nassert find_Odd_Pair([1, 2, 3], 3) == 2"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(input_string):\n    toggled_chars = []\n    for char in input_string:\n        if char.isupper():\n            toggled_chars.append(char.lower())\n        elif char.islower():\n            toggled_chars.append(char.upper())\n        else:\n            toggled_chars.append(char)\n    return ''.join(toggled_chars)"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter string with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    # Initialize the sum of differences\n    total_distance = 0\n    \n    # Iterate through the digits and calculate the sum of differences\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    if n == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert both tuples to sets\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the union set back to a tuple and sort it\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    if n < 2:\n        return 0\n    \n    frequency = {}\n    \n    # Count the frequency of each element\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    total_pairs = 0\n    \n    # Calculate the number of valid pairs\n    for count in frequency.values():\n        if count > 1:\n            total_pairs += count * (count - 1) // 2\n    \n    return total_pairs\n\n# Test cases\nassert count_Pairs([1, 2, 1], 3) == 2\nassert count_Pairs([1, 1, 1, 1], 4) == 0\nassert count_Pairs([1, 2, 3, 4, 5], 5) == 10"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for char in str_n:\n        # Convert the character back to an integer and add to the total sum\n        total_sum += int(char)\n    \n    # Return the total sum of the digits\n    return total_sum"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]\nassert empty_list(6) == [{}, {}, {}, {}, {}, {}]\nassert empty_list(7) == [{}, {}, {}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    for sublist in list_of_lists:\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    # Step 1: Count occurrences of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Filter numbers that appear exactly once\n    unique_nums = [num for num in nums if count_dict[num] == 1]\n    \n    return unique_nums\n\n# Assertions to test the function\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\nassert two_unique_nums([1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5]\nassert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n\nassert math.isclose(surfacearea_cylinder(10, 5), 942.45, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 5), 226.18800000000002, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 10), 351.848, rel_tol=0.001)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n    \n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2, 1], [1, 2, 1]) == True\nassert is_Sub_Array([1, 0, 2, 2], [2, 2, 0]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test cases\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Check if all lists are of the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    def process_element(element):\n        if isinstance(element, int):\n            return element if element % 2 == 0 else None\n        elif isinstance(element, tuple):\n            return tuple(filter(None, (process_element(e) for e in element)))\n        else:\n            return None\n    \n    return tuple(filter(None, (process_element(e) for e in nested_tuple)))\n\n# Test cases\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the slant height\n    slant_height = math.sqrt(height**2 + (base_edge/2)**2)\n    \n    # Calculate the area of one triangular face\n    triangular_face_area = (base_edge * slant_height) / 2\n    \n    # Calculate the total area of the four triangular faces\n    total_triangular_faces_area = 4 * triangular_face_area\n    \n    # Calculate the area of the base\n    base_area = base_edge**2\n    \n    # Calculate the total surface area\n    total_surface_area = base_area + total_triangular_faces_area\n    \n    return total_surface_area\n\n# Test cases\nassert surface_Area(3, 4) == 33\nassert surface_Area(4, 5) == 56\nassert surface_Area(1, 2) == 5"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0\n\n# Test the function\nassert my_dict({10: 0}) == False\nassert my_dict({11: 0}) == False\nassert my_dict({}) == True"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]\n\n# Test the function\nassert catalan_number(10) == 16796\nassert catalan_number(9) == 4862\nassert catalan_number(7) == 429"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(lst, n):\n    if n <= 0 or n >= len(lst):\n        return lst\n    first_part = lst[:n]\n    second_part = lst[n:]\n    return second_part + first_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)\n\n# Test cases\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58, 44, 56]) == (58, 44, 56)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    n = math.isqrt(start)  # Start with the integer part of the square root of start\n    while True:\n        square = n * n\n        if square > end:\n            break\n        if square >= start:\n            result.append(square)\n        n += 1\n    return result"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    # Check if the list has at least two elements\n    if len(lst) < 2:\n        return lst\n    \n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    \n    # Return the modified list\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient C(n, k).\"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef sum_Of_product(n):\n    \"\"\"Calculate the sum of the product of consecutive binomial coefficients for a given n.\"\"\"\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return total_sum\n\n# Test cases\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)\n\n# Test cases\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\nassert removezero_ip(\"12.01.024\") == '12.1.24'\nassert removezero_ip(\"216.08.094.0196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n    \n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    # Input validation\n    if len(bin1) != len(bin2) or not all(c in '01' for c in bin1) or not all(c in '01' for c in bin2):\n        return None\n    \n    # Identify differing positions\n    differing_positions = [i for i in range(len(bin1)) if bin1[i] != bin2[i]]\n    \n    # Count swaps\n    num_differences = len(differing_positions)\n    if num_differences % 2 != 0:\n        return None\n    else:\n        return num_differences // 2\n\n# Test cases\nassert min_Swaps(\"1101\", \"1110\") == 1\nassert min_Swaps(\"111\", \"000\") == None\nassert min_Swaps(\"111\", \"110\") == None"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test cases\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\")) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))) == sys.getsizeof(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    merged = []\n    \n    # Merge the two arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # If there are remaining elements in arr1, add them to merged\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    # If there are remaining elements in arr2, add them to merged\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    # Return the kth element (1-based index, so k-1 for 0-based index)\n    return merged[k - 1]\n\n# Test cases\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to access each digit\n    num_str = str(num)\n    \n    # Determine the number of digits\n    num_digits = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Compare the calculated sum to the original number\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n\n\n# Assertions to verify the function works correctly\nassert sum_average(10) == (55, 5.5)\nassert sum_average(15) == (120, 8.0)\nassert sum_average(20) == (210, 10.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\nassert is_Even(0) == True\nassert is_Even(-2) == True\nassert is_Even(-1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Initialize the list with numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    index = 1\n    \n    while index < len(numbers):\n        # Get the next number to remove\n        k = numbers[index]\n        # Remove every k-th number\n        remove_index = index + k - 1\n        while remove_index < len(numbers):\n            numbers.pop(remove_index)\n            remove_index += k - 1\n        # Move to the next number\n        index += 1\n    \n    return numbers\n\n# Assertions to test the function\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(60) == 1.0471975511965976\nassert radian_degree(120) == 2.0943951023931953"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    \n    # Search for the pattern in the text\n    match = regex.search(text)\n    \n    # If a match is found, extract the substring, start index, and end index\n    if match:\n        substring = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return (substring, start_index, end_index)\n    \n    # If no match is found, return None or handle the case as needed\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Initialize Bell's triangle with the first Bell number\n    bell_triangle = [[1]]\n    \n    # Construct Bell's triangle up to the nth row\n    for i in range(1, n + 1):\n        # Start the row with the last number of the previous row\n        row = [bell_triangle[i - 1][-1]]\n        for j in range(1, i + 1):\n            # Each number is the sum of the number to the left and the number above-left\n            row.append(row[-1] + bell_triangle[i - 1][j - 1])\n        bell_triangle.append(row)\n    \n    # The nth Bell number is the first element of the nth row\n    return bell_triangle[n][0]\n\n# Assertions to test the function\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Ensure k is within a valid range\n    if k < 1 or k > len(lst):\n        raise ValueError(\"k must be a positive integer within the range of the list length\")\n    \n    # Create a new list excluding the k-th element\n    return lst[:k-1] + lst[k:]\n\n# Test cases\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Extract the n-th column elements\n    column_elements = [row[n] for row in matrix]\n    \n    # Return the maximum value in the n-th column\n    return max(column_elements)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        for value in tup:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for inner_tuple in tuples:\n        total_sum = sum(inner_tuple)\n        count = len(inner_tuple)\n        average = total_sum / count\n        averages.append(average)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(t1 % t2 for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    numbers = ''\n    non_numbers = ''\n    \n    for char in s:\n        if char.isdigit():\n            numbers += char\n        else:\n            non_numbers += char\n    \n    return non_numbers + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n  # Initialize dp array with 1s\n    \n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # Initialize pointers for both lists\n    i, j = 0, 0\n    merged_list = []\n    \n    # Merge the two sorted lists\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # If there are remaining elements in list1, add them\n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n    \n    # If there are remaining elements in list2, add them\n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n    \n    # Find the median of the merged list\n    mid = size\n    median = (merged_list[mid - 1] + merged_list[mid]) / 2.0\n    \n    return median\n\n# Test cases\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\n# Test the function\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\""}
{"task_id": "Mbpp/626", "solution": "def triangle_area(r):\n    if r < 0:\n        return None\n    return r * r\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    # Replace all whitespaces with underscores\n    modified_string = input_string.replace(' ', '_')\n    # Replace all underscores with whitespaces\n    modified_string = modified_string.replace('_', ' ')\n    return modified_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero_elements = [x for x in lst if x != 0]\n    zero_count = lst.count(0)\n    return non_zero_elements + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    # Initialize the result\n    result = 0\n    \n    # Iterate over each bit position (0 to 31)\n    for i in range(32):\n        # Count the number of elements with the i-th bit set\n        count = 0\n        for num in arr:\n            if num & (1 << i):\n                count += 1\n        \n        # Number of pairs with i-th bit different\n        pairs = count * (n - count)\n        \n        # Add to the result the contribution of the i-th bit\n        result += pairs * (1 << i)\n    \n    return result\n\n# Test cases\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47\nassert pair_xor_Sum([7, 3, 5], 3) == 12\nassert pair_xor_Sum([7, 3], 2) == 4"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1  # left = 2*i + 1\n    right = 2 * i + 2  # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    # See if right child of root exists and is greater than the largest so far\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\n# Test the function with the provided assertions\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(100, 100) == True\nassert noprofit_noloss(2000, 5000) == False"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(V, T):\n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * T - 11.37 * (V ** 0.16) + 0.3965 * T * (V ** 0.16)\n    \n    # Round the result to the next integer\n    return math.ceil(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 20) == 19\nassert wind_chill(10, 8) == 6"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(input_string):\n    # Define a regex pattern to match parentheses and their contents\n    pattern = r'\\([^)]*\\)'\n    \n    # Use re.sub to replace the matched patterns with an empty string\n    result = re.sub(pattern, '', input_string)\n    \n    # Return the modified string\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n# Test the function with the given assertions\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    # Split the text into words, considering punctuation and multiple spaces\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    for word in words:\n        # Check if 'z' is in the word and not at the start or end\n        if 'z' in word[1:-1]:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    # Convert the tuple to a list\n    tup_list = list(tup)\n    \n    # Append the dictionary to the list\n    tup_list.append(dictionary)\n    \n    # Convert the list back to a tuple and return\n    return tuple(tup_list)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the starting cell\n    dp[0][0] = matrix[0][0]\n    \n    # Fill the DP table\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i-1][j] if i > 0 else float('-inf')\n            from_left = dp[i][j-1] if j > 0 else float('-inf')\n            dp[i][j] = matrix[i][j] + max(from_top, from_left)\n    \n    # Calculate the maximum average cost\n    max_total_cost = dp[N-1][N-1]\n    num_cells_visited = 2 * N - 1  # Number of cells in the path from (0,0) to (N-1,N-1)\n    max_average_cost = max_total_cost / num_cells_visited\n    \n    return max_average_cost\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        # Add the corresponding elements and append to the result list\n        result.append(list1[i] + list2[i])\n    \n    # Return the result list\n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for element in lst[1:]:\n        if element != result[-1]:\n            result.append(element)\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the lateral surface area of a cone\n    r_squared = r ** 2\n    h_squared = h ** 2\n    sum_of_squares = r_squared + h_squared\n    sqrt_sum_of_squares = math.sqrt(sum_of_squares)\n    lateral_surface_area = math.pi * r * sqrt_sum_of_squares\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Replace spaces, commas, and dots with colons\n    modified_string = input_string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    prefix_sum = 0\n    cumulative_product = 1\n    \n    for i in range(n):\n        cumulative_product *= arr[i]\n        total_sum += cumulative_product\n        total_sum += prefix_sum * arr[i]\n        prefix_sum += cumulative_product\n    \n    return total_sum\n\n# Test cases\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\nassert sum_Of_Subarray_Prod([1, 2]) == 5\nassert sum_Of_Subarray_Prod([1, 2, 3, 4]) == 84"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has less than 3 bits, no middle bits to toggle\n    if num_bits < 3:\n        return n\n    \n    # Create a mask with all bits set to 1 except the first and last bits\n    mask = (1 << (num_bits - 1)) - 1\n    mask = mask ^ 1  # Toggle the first bit to 0\n    mask = mask ^ (1 << (num_bits - 1))  # Toggle the last bit to 0\n    \n    # XOR the number with the mask to toggle the middle bits\n    toggled_middle_bits = n ^ mask\n    \n    return toggled_middle_bits\n\n# Test cases\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test cases\nassert left_insertion([1, 2, 4, 5], 6) == 4\nassert left_insertion([1, 2, 4, 5], 3) == 2\nassert left_insertion([1, 2, 4, 5], 7) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    # Define the regex pattern to match the start of the string (^) followed by a vowel (a, e, i, o, u)\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    \n    # Check if the string matches the pattern\n    if pattern.match(s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n_digits):\n    n = 1\n    while True:\n        triangular_number = n * (n + 1) // 2\n        if len(str(triangular_number)) == n_digits:\n            return n\n        n += 1\n\n# Test cases\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Iterate through the tuple in steps of 2\n    for i in range(0, len(tup) - 1, 2):\n        # Add the key-value pair to the dictionary\n        result_dict[tup[i]] = tup[i + 1]\n    \n    return result_dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    # Calculate the surface area of a regular tetrahedron\n    area = math.sqrt(3) * a**2\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Calculate the effective rotation amount\n    n = n % len(lst)\n    # Rotate the list by slicing and concatenating\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in digits):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    angle_radians = math.radians(angle)\n    return 0.5 * radius ** 2 * angle_radians\n\n# Test cases\nassert math.isclose(sector_area(4, 45), 6.283185307179586, rel_tol=0.001)\nassert math.isclose(sector_area(9, 45), 31.808625617596654, rel_tol=0.001)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for i, char in enumerate(s):\n        if i > 0 and char.isupper():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_strings):\n    # Convert each string to an integer\n    num_integers = [int(num) for num in num_strings]\n    \n    # Sort the list of integers\n    num_integers.sort()\n    \n    # Return the sorted list\n    return num_integers"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    # Create a new list starting with the elements of the original list\n    result = lst[:]\n    # Extend the new list with the elements of the tuple\n    result.extend(tup)\n    # Return the new list\n    return result"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if the left child exists and if it violates the min heap property\n        if left_child_index < n and arr[left_child_index] < arr[i]:\n            return False\n        \n        # Check if the right child exists and if it violates the min heap property\n        if right_child_index < n and arr[right_child_index] < arr[i]:\n            return False\n    \n    # If no violations are found, the array represents a min heap\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    jacobsthal_prev_2 = 0  # J(0)\n    jacobsthal_prev_1 = 1  # J(1)\n    \n    # Compute Jacobsthal numbers iteratively\n    for i in range(2, n + 1):\n        jacobsthal_current = jacobsthal_prev_1 + 2 * jacobsthal_prev_2\n        jacobsthal_prev_2 = jacobsthal_prev_1\n        jacobsthal_prev_1 = jacobsthal_current\n    \n    return jacobsthal_prev_1\n\n# Test cases\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the list of tuples based on the second element (integer value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k elements from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    if len(set(lst)) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    \n    for string in string_list:\n        reverse_string = string[::-1]\n        if reverse_string in string_list and reverse_string != string:\n            if string not in seen and reverse_string not in seen:\n                count += 1\n                seen.add(string)\n                seen.add(reverse_string)\n    \n    return count\n\n# Test cases\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s: str) -> bool:\n    # Check if the input is a string\n    if not isinstance(s, str):\n        return False\n    \n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Ensure there is exactly one decimal point\n    if len(parts) != 2:\n        return False\n    \n    # Ensure both parts are numeric\n    if not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n    \n    # Ensure the part after the decimal point has exactly two digits\n    if len(parts[1]) != 2:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(2) == False\nassert check_monthnumber_number(12) == False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Step 1: Sort the array\n    arr.sort()\n    \n    # Step 2: Initialize minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Step 3: Iterate through the sorted array\n    for i in range(n - 1):\n        # Calculate the difference between consecutive elements\n        diff = arr[i + 1] - arr[i]\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Step 4: Return the minimum difference\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count"}
{"task_id": "Mbpp/765", "solution": "def nth_polite_number(n):\n    # The nth polite number is the (n+1)th odd number\n    return 2 * (n + 1) - 1\n\n# Test cases\nassert nth_polite_number(7) == 11\nassert nth_polite_number(4) == 7\nassert nth_polite_number(9) == 13"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Iterate through the list, stopping at the second-to-last element\n    for i in range(len(lst) - 1):\n        # Create a pair with the current element and the next element\n        pairs.append((lst[i], lst[i + 1]))\n    \n    # Return the list of pairs\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    # Dictionary to store frequency of each number\n    num_frequency = {}\n    # Counter for the number of pairs\n    pair_count = 0\n    \n    # Iterate through the list\n    for num in arr:\n        # Calculate the complement\n        complement = sum - num\n        \n        # Check if the complement exists in the dictionary\n        if complement in num_frequency:\n            # Increment the pair count by the frequency of the complement\n            pair_count += num_frequency[complement]\n        \n        # Update the frequency of the current number\n        if num in num_frequency:\n            num_frequency[num] += 1\n        else:\n            num_frequency[num] = 1\n    \n    return pair_count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 15, 20, 30]\nassert Diff([1, 2, 3, 4, 5], [6, 7, 1]) == [2, 3, 4, 5]\nassert Diff([1, 2, 3], [6, 7, 1]) == [2, 3]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd natural number\n        odd_number = 2 * i + 1\n        \n        # Calculate the fourth power of the odd number\n        fourth_power = odd_number ** 4\n        \n        # Add the fourth power to the total sum\n        total_sum += fourth_power\n    \n    # Return the total sum\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression: str) -> bool:\n    # Dictionary to hold matching pairs of brackets\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n    \n    # Stack to keep track of opening brackets\n    stack = []\n    \n    for char in expression:\n        if char in matching_bracket.values():\n            # If the character is an opening bracket, push it onto the stack\n            stack.append(char)\n        elif char in matching_bracket.keys():\n            # If the character is a closing bracket\n            if stack and stack[-1] == matching_bracket[char]:\n                # If the stack is not empty and the top of the stack matches the closing bracket\n                stack.pop()\n            else:\n                # If the stack is empty or the top of the stack does not match the closing bracket\n                return False\n    \n    # If the stack is empty, the expression is balanced\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n    \n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the remaining words back into a string\n    result = ' '.join(filtered_words)\n    \n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(text, substring):\n    start_index = text.find(substring)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(substring)\n    return (substring, start_index, end_index)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True\nassert odd_position([4, 1, 2]) == True\nassert odd_position([1, 2, 3]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    result = []\n    n = len(tuple_list)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            tuple1 = tuple_list[i]\n            tuple2 = tuple_list[j]\n            combined_tuple = tuple(a + b for a, b in zip(tuple1, tuple2))\n            result.append(combined_tuple)\n    \n    return result\n\n# Test cases\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    # Initialize the count of divisors\n    divisor_count = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # Increment the divisor count\n            divisor_count += 1\n    \n    # Check if the count of divisors is even\n    return divisor_count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n, 2):  # Step by 2 to ensure odd length\n            subarray_sum = sum(arr[start:end+1])\n            total_sum += subarray_sum\n    \n    return total_sum\n\n# Test cases\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 1, 2]) == 15\nassert odd_length_sum([1, 7]) == 8"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values among the normalized RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = 60 * (((g - b) / delta) % 6)\n        elif max_val == g:\n            h = 60 * (((b - r) / delta) + 2)\n        else:  # max_val == b\n            h = 60 * (((r - g) / delta) + 4)\n    \n    # Ensure Hue is within the range [0, 360]\n    if h < 0:\n        h += 360\n    \n    return round(h, 2), round(s, 2), round(v, 2)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        raise ValueError(\"List does not contain both even and odd numbers\")"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses\n    cleaned_str = tuple_str.strip('()')\n    \n    # Split by commas and convert to integers\n    int_list = [int(item.strip()) for item in cleaned_str.split(',')]\n    \n    # Convert list to tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    return bool(pattern.search(text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^a.*b$')\n    return bool(pattern.match(text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum\n\nassert sum_in_range(2, 5) == 8\nassert sum_in_range(5, 7) == 12\nassert sum_in_range(7, 13) == 40"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')\n\n# Test cases\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    # Create a dictionary to count occurrences of each number\n    counts = {}\n    \n    # Count each number\n    for num in [a, b, c]:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Return the maximum count\n    return max(counts.values())\n\n# Test cases\nassert count_equal_numbers(1, 1, 1) == 3\nassert count_equal_numbers(-1, -2, -3) == 0\nassert count_equal_numbers(1, 2, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14 * 14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125 * 125)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst_of_lsts):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lst_of_lsts:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Compare each element in the tuples\n    for elem1, elem2 in zip(tuple1, tuple2):\n        if elem2 >= elem1:\n            return False\n    \n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True"}
