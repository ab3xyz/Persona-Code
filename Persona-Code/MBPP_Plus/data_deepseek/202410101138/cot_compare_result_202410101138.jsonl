{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the shared elements as a set\n    return shared_elements"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    if n <= 0:\n        return []\n    \n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heapreplace(heap, num)\n    \n    return sorted(heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    # XOR the two numbers to find the differing bits\n    xor_result = a ^ b\n    \n    # Check if the result of XOR is a power of 2\n    # A number is a power of 2 if it has exactly one bit set in its binary representation\n    return (xor_result & (xor_result - 1)) == 0 and xor_result != 0\n\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(text):\n    words = text.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    # If the string is empty or has only one character, no rotations are needed\n    if len(s) <= 1:\n        return 0\n    \n    # Double the string to simulate rotation\n    double_s = s + s\n    \n    # Iterate through possible rotations\n    for i in range(1, len(s)):\n        # Extract the rotated string\n        rotated = double_s[i:i+len(s)]\n        # Check if the rotated string matches the original\n        if rotated == s:\n            return i\n    \n    # If no rotations match, return the length of the string (which is the maximum rotations)\n    return len(s)\n\nassert find_Rotations(\"aaaa\") == 1"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the first occurrence of the character\n    first_index = s.find(char)\n    # Find the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # If the character was the same as the first occurrence, return the modified string\n    if first_index == last_index:\n        return s\n    \n    # Remove the last occurrence\n    last_index = s.rfind(char)\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Example usage (not part of the function)\n# assert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Pair each row with its sum\n    paired_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the pairs based on the sum\n    sorted_pairs = sorted(paired_rows, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_pairs]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return (1/2) * base * height * length"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    # Convert str2 to a set for faster lookups\n    set_str2 = set(str2)\n    \n    # Initialize an empty result string\n    result = []\n    \n    # Iterate through each character in str1\n    for char in str1:\n        # If the character is not in set_str2, append it to the result\n        if char not in set_str2:\n            result.append(char)\n    \n    # Join the list into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    # Create a set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # If the element is already in the set, it's a duplicate\n        if num in unique_elements:\n            return True\n        # Add the element to the set\n        unique_elements.add(num)\n    \n    # If no duplicates were found, return False\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    n = 1\n    while True:\n        woodall_candidate = n * (2 ** n) - 1\n        if woodall_candidate == number:\n            return True\n        elif woodall_candidate > number:\n            return False\n        n += 1\n\n# Example assertion\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Step 1: Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Step 2: Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    \n    # Step 3: Check if the given number is one less than twice the reversed number\n    return num == twice_reversed - 1\n\n# Example assertion\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Join the sorted digits to form the largest number\n    largest_num = int(''.join(map(str, digits)))\n    return largest_num\n\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a < 0 and b >= 0) or (a >= 0 and b < 0)"}
{"task_id": "Mbpp/59", "solution": "def nth_octagonal(n):\n    return 3 * n * n - 2 * n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            length = j - i + 1\n            digit_sum = sum(int(char) for char in substring)\n            \n            if digit_sum == length:\n                count += 1\n    \n    return count\n\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    # Initialize the smallest number with the first element of the list\n    smallest = lst[0]\n    \n    # Iterate through the list to find the smallest number\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n\n# Assertion to test the function\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples_list):\n    max_diff = 0\n    for pair in tuples_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    # Initialize the Bell triangle\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # The first element in each row is the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]\n    \n    return bell[n][0]\n\n# Example assertion\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n\nassert is_Monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    # Iterate through the main list\n    for i in range(len(main_list) - len(sub_list) + 1):\n        # Check if the sublist matches the current slice of the main list\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    return False\n\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    \n    first_length = len(tuples_list[0])\n    \n    for tup in tuples_list[1:]:\n        if len(tup) != first_length:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr\n    \n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    \n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n < 0:\n        return False\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factor1 = i\n            factor2 = n // i\n            if (factor1 % 2) == (factor2 % 2):\n                return True\n    \n    return False\n\nassert dif_Square(5) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    \n    mapping = {}\n    \n    for i in range(len(arr1)):\n        if arr1[i] in mapping:\n            if mapping[arr1[i]] != arr2[i]:\n                return False\n        else:\n            mapping[arr1[i]] = arr2[i]\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    num_str = str(number)\n    odd_sum = 0\n    even_sum = 0\n    \n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_sum += int(num_str[i])\n        else:\n            odd_sum += int(num_str[i])\n    \n    difference = abs(odd_sum - even_sum)\n    return difference % 11 == 0\n\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0\n\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Step 1: Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Step 2: Take the modulo 26 of the sum\n    mod_value = ascii_sum % 26\n    \n    # Step 3: Convert the result back to a character (a is 0, b is 1, ..., z is 25)\n    result_char = chr(mod_value + ord('a'))\n    \n    return result_char\n\nassert get_Char(\"abc\") == \"f\""}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1\n\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    # Initialize the maximum length to 0\n    max_len = 0\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Update max_len if the current word's length is greater\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    # Return the maximum length found\n    return max_len\n\n# Example assertion\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, target_substring):\n    for string in string_list:\n        if target_substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    \n    first_digit = s[0]\n    second_digit = s[1]\n    \n    if first_digit == second_digit:\n        return False\n    \n    for i in range(2, len(s)):\n        if i % 2 == 0:\n            if s[i] != first_digit:\n                return False\n        else:\n            if s[i] != second_digit:\n                return False\n    \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize variables to store the minimum second value and the corresponding first value\n    min_second_value = float('inf')\n    min_first_value = None\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if the second value of the current tuple is smaller than the current minimum\n        if tup[1] < min_second_value:\n            # Update the minimum second value and the corresponding first value\n            min_second_value = tup[1]\n            min_first_value = tup[0]\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_first_value"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Initialize the minimum length with the length of the first list\n    min_length = len(list_of_lists[0])\n    \n    # Iterate through each list in the list of lists\n    for lst in list_of_lists:\n        # Update the minimum length if the current list's length is smaller\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    return min_length\n\n# Example assertion\nassert Find_Min_Length([[1], [1, 2]]) == 1"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    # Step 1: Flatten the list of lists into a single list\n    flattened_list = [item for sublist in lists for item in sublist]\n    \n    # Step 2: Create a dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # Step 3: Iterate through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Step 4: Return the frequency dictionary\n    return frequency_dict\n\n# Example usage (not part of the function)\n# assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    # Step 1: Handle the special case where the number is 0\n    if decimal_number == 0:\n        return '0'\n    \n    # Step 2: Initialize an empty string to store the binary representation\n    binary_representation = ''\n    \n    # Step 3: Loop until the decimal number becomes 0\n    while decimal_number > 0:\n        # Step 4: Get the remainder when the number is divided by 2 (this gives the binary digit)\n        remainder = decimal_number % 2\n        # Step 5: Prepend the remainder to the binary representation string\n        binary_representation = str(remainder) + binary_representation\n        # Step 6: Update the decimal number by performing integer division by 2\n        decimal_number = decimal_number // 2\n    \n    # Step 7: Return the binary representation string\n    return binary_representation"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    \n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds for the given array\")\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the snake case string by underscores\n    words = snake_str.split('_')\n    \n    # Capitalize the first word and convert the rest\n    camel_case_str = words[0].capitalize() + ''.join(word.capitalize() for word in words[1:])\n    \n    return camel_case_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m, memo={}):\n    if m == 0:\n        return 1\n    if m >= n:\n        return 0\n    if (n, m) in memo:\n        return memo[(n, m)]\n    \n    result = (n - m) * eulerian_num(n - 1, m - 1, memo) + (m + 1) * eulerian_num(n - 1, m, memo)\n    memo[(n, m)] = result\n    return result\n\n# Example usage (not part of the final code):\n# assert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(booleans):\n    true_count = 0\n    for boolean in booleans:\n        if boolean:\n            true_count += 1\n    return true_count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    # Convert the tuple to a list to allow modification\n    tup_list = list(tup)\n    # Extend the list with the elements of the given list\n    tup_list.extend(lst)\n    # Convert the list back to a tuple and return\n    return tuple(tup_list)\n\n# Example assertion\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    combined_list = list1 + list2 + list3\n    sorted_list = sorted(combined_list)\n    return sorted_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    unique_rotations = set()\n    \n    for i in range(rotations):\n        rotated_str = binary_str[i:] + binary_str[:i]\n        unique_rotations.add(rotated_str)\n    \n    odd_count = 0\n    for rotation in unique_rotations:\n        decimal_value = int(rotation, 2)\n        if decimal_value % 2 != 0:\n            odd_count += 1\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Convert each nested list to a set\n    sets = [set(sublist) for sublist in nested_lists]\n    \n    # Find the intersection of all sets\n    common_elements = set.intersection(*sets)\n    \n    # Convert the result back to a list\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dict_list):\n    return all(not d for d in dict_list)\n\nassert empty_dict([{},{},{}]) == True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Initialize an empty string to build the integer representation\n    int_str = \"\"\n    \n    # Iterate through each element in the tuple\n    for num in tup:\n        # Append the string representation of the number to the int_str\n        int_str += str(num)\n    \n    # Convert the concatenated string to an integer\n    result = int(int_str)\n    \n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(item) for item in sublist) for sublist in lst]\n\nassert list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for a, b in tuples_list:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_proper_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for a in range(1, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b > a and sum_of_proper_divisors(b) == a:\n            amicable_sum += a + b\n    return amicable_sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Convert '0' to 1 and '1' to -1\n    transformed = [1 if char == '0' else -1 for char in binary_string]\n    \n    # Initialize variables for Kadane's algorithm\n    max_ending_here = max_so_far = transformed[0]\n    \n    # Apply Kadane's algorithm\n    for num in transformed[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n\n# Example usage (not part of the final code)\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    # Step 1: Find the minimum of the two numbers\n    min_num = min(a, b)\n    \n    # Step 2: Initialize a variable to store the sum of common divisors\n    common_divisor_sum = 0\n    \n    # Step 3: Iterate from 1 to the minimum number to find common divisors\n    for i in range(1, min_num + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisor_sum += i\n    \n    # Step 4: Return the sum of common divisors\n    return common_divisor_sum\n\n# Example assertion\nassert sum_of_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words_str):\n    words_list = words_str.split()\n    result = [word for word in words_list if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Calculate the sum of the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n\n# Example usage (not part of the final code)\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    max_item = None\n    max_count = 0\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    \n    return \"\".join(s_list)\n\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    result = \"\"\n    for char in tup:\n        result += char\n    return result"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    # Initialize a variable to store the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            negative_sum += num\n    \n    # Return the sum of negative numbers\n    return negative_sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_counter = 0\n    non_zero_counter = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_counter += 1\n        else:\n            non_zero_counter += 1\n    \n    if non_zero_counter == 0:\n        return 0\n    \n    return zero_counter / non_zero_counter"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    binary_representation = bin(n)\n    count_of_ones = binary_representation.count('1')\n    return count_of_ones == (len(binary_representation) - 2)\n\nassert is_Sum_Of_Powers_Of_Two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    # Initialize an empty set to store unique numbers\n    unique_numbers = set()\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Iterate through each number in the sublist\n        for number in sublist:\n            # Add the number to the set (sets automatically handle duplicates)\n            unique_numbers.add(number)\n    \n    # Return the set of unique numbers\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def find_max_index(arr, end):\n        max_index = 0\n        for i in range(1, end + 1):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def flip(arr, k):\n        start = 0\n        while start < k:\n            arr[start], arr[k] = arr[k], arr[start]\n            start += 1\n            k -= 1\n\n    n = len(arr)\n    while n > 1:\n        max_index = find_max_index(arr, n - 1)\n        if max_index != n - 1:\n            flip(arr, max_index)\n            flip(arr, n - 1)\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Step 1: Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Step 2: Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Step 3: Calculate the absolute difference between the maximum and minimum elements\n    max_diff = max_element - min_element\n    \n    # Step 4: Return the calculated difference\n    return max_diff\n\n# Example assertion\nassert max_Abs_Diff((2,1,5,3)) == 4"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    factor = n // gcd\n    x *= factor\n    y *= factor\n    return (x, y)\n\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, to_remove):\n    # Use list comprehension to filter out elements present in to_remove\n    return [item for item in main_list if item not in to_remove]\n\n# Example usage (not part of the function)\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\n# Example assertion\nassert are_equivalent(36, 57) == False"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if ord(char) - ord('a') + 1 == i + 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count_even = sum(1 for x in lst if x % 2 == 0)\n    count_odd = len(lst) - count_even\n    \n    pairs_even = (count_even * (count_even - 1)) // 2\n    pairs_odd = (count_odd * (count_odd - 1)) // 2\n    \n    return pairs_even + pairs_odd\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    # Start with the smallest power of 2 which is 1\n    power = 1\n    # Keep doubling the power until it is greater than or equal to n\n    while power < n:\n        power *= 2\n    return power\n\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    target = 'std'\n    count = 0\n    step = len(target)\n    \n    for i in range(len(input_string)):\n        if input_string[i:i+step] == target:\n            count += 1\n    \n    return count\n\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if not tup:\n        return True\n    \n    first_type = type(tup[0])\n    \n    for element in tup:\n        if type(element) != first_type:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    def find_first_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        result = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                result = mid\n                high = mid - 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n\n    def find_last_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        result = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                result = mid\n                low = mid + 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n\n    first_index = find_first_occurrence(arr, n, x)\n    if first_index == -1:\n        return False\n    \n    last_index = find_last_occurrence(arr, n, x)\n    count = last_index - first_index + 1\n    \n    return count > n // 2\n\n# Example assertion\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string with index\n    for index in range(len(input_string)):\n        # Check if the index is even\n        if index % 2 == 0:\n            # Append the character at the even index to the result\n            result += input_string[index]\n    \n    return result\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    result = negatives + positives\n    result.extend(arr[n:])\n    \n    return result"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    # Step 1: Iterate through each character in the input string\n    # Step 2: If the character is a blank space, replace it with the given character\n    # Step 3: If the character is not a blank space, keep it as is\n    # Step 4: Join all characters back into a single string and return it\n    \n    return ''.join(char if c == ' ' else c for c in input_string)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Return the first n elements from the sorted list\n    return sorted_lst[:n]\n\n# Example assertion\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "# Problem-solving process:\n# 1. Define a function named `volume_cube` that takes one parameter `side_length`.\n# 2. Calculate the volume of the cube using the formula: volume = side_length^3.\n# 3. Return the calculated volume.\n\ndef volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Start with a mask of all even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming 32-bit integer\n        mask |= (1 << i)\n    \n    # Apply the mask to the number\n    return n | mask\n\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Convert the tuple to a sorted tuple to handle (a, b) and (b, a) as the same\n        sorted_tup = tuple(sorted(tup))\n        \n        # If the sorted tuple is already in the dictionary, increment its count\n        if sorted_tup in count_dict:\n            count_dict[sorted_tup] += 1\n        # Otherwise, add the sorted tuple to the dictionary with a count of 1\n        else:\n            count_dict[sorted_tup] = 1\n    \n    return count_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Example assertion\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize the DP table\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: sequences of length 1\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the DP table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(2 * j, m + 1):\n                dp[i][k] += dp[i - 1][j]\n    \n    # Sum up the number of valid sequences of length n\n    total_sequences = sum(dp[n])\n    \n    return total_sequences\n\n# Example assertion\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Remove the last element of list1\n    list1.pop()\n    # Extend list1 with the elements of list2\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    next_int = math.ceil(math.sqrt(n))\n    return next_int * next_int"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Arrays to store the longest increasing and decreasing subsequences ending at each index\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the inc array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Fill the dec array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Base case: single character substrings\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the table\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\n# Example assertion\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    result = [num for num in arr2 if num in set1]\n    return result\n\n# Test case\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    # Convert the complex number to polar coordinates\n    polar_coords = cmath.polar(complex_num)\n    return polar_coords\n\n# Example assertion\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(elements, n):\n    return list(combinations_with_replacement(elements, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            prime_count += 1\n    \n    return prime_count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a1, b1), max(a2, b2)) for (a1, a2), (b1, b2) in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    \n    S = [1, 1]\n    count = 0\n    index = 2\n    \n    while True:\n        next_term = 2 * S[-1] + S[-2]\n        S.append(next_term)\n        \n        if is_prime(next_term):\n            count += 1\n            if count == n:\n                return next_term\n        \n        index += 1\n\n# Example assertion\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for start in range(n):\n        sublist = [lst[i] for i in range(start, len(lst), n)]\n        result.append(sublist)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * (side_length ** 2)"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd natural number\n        odd_number = 2 * i + 1\n        # Add the square of the odd number to the total sum\n        total_sum += odd_number ** 2\n    \n    # Return the total sum\n    return total_sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "# Problem-solving process:\n# 1. Define a function named rear_extract that takes a list of tuples as an argument.\n# 2. Initialize an empty list to store the rear elements.\n# 3. Iterate over each tuple in the input list.\n# 4. For each tuple, append the last element (rear element) to the rear elements list.\n# 5. Return the rear elements list.\n\ndef rear_extract(tuples_list):\n    rear_elements = []\n    for tup in tuples_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through the elements of the tuples using zip\n    for elem1, elem2 in zip(tuple1, tuple2):\n        # Subtract the elements and append the result to the list\n        result.append(elem1 - elem2)\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)\n\n# Example assertion\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def binomial_coeff(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        k = min(k, n - k)  # Take advantage of symmetry\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n    \n    total_sum = 0\n    for k in range(0, n + 1, 2):\n        total_sum += binomial_coeff(n, k)\n    \n    return total_sum\n\n# Example assertion\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    volume = math.pi * (radius ** 2) * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    for i, elem in enumerate(tup):\n        if isinstance(elem, tuple):\n            return i\n    return 0\n\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def nth_decagonal_number(n):\n    return 4 * n**2 - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\nassert all_unique([1, 2, 3]) == True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    \n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    \n    # Create a dictionary to count the frequency of each digit\n    freq = {}\n    \n    # Iterate over each digit in the string\n    for digit in num_str:\n        # Convert the digit back to an integer\n        digit = int(digit)\n        \n        # Increment the frequency count for this digit\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True\n\nassert validate(1234) == True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Case when k == 1\n    if k == 1:\n        return kadane(arr)\n\n    # Calculate sum of the array\n    arr_sum = sum(arr)\n\n    # Repeat the array twice to handle wrap-around cases\n    arr_twice = arr * 2\n    max_sum_twice = kadane(arr_twice)\n\n    # If sum of the array is positive, consider the sum of the entire array repeated k times\n    if arr_sum > 0:\n        return max(max_sum_twice, arr_sum * k)\n    else:\n        return max_sum_twice\n\n# Example assertion\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Step 1: Initialize the sum to 0\n    total_sum = 0\n    \n    # Step 2: Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Step 3: Calculate the ith even natural number\n        even_number = 2 * i\n        \n        # Step 4: Square the even number\n        squared_even_number = even_number ** 2\n        \n        # Step 5: Add the squared value to the total sum\n        total_sum += squared_even_number\n    \n    # Step 6: Return the total sum\n    return total_sum\n\n# Example assertion\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor\n\nassert find(10, 3) == 3"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    # Determine which side is the hypotenuse\n    if a > b:\n        hypotenuse = a\n        other_side = b\n    else:\n        hypotenuse = b\n        other_side = a\n    \n    # Calculate the third side\n    if hypotenuse == a:\n        third_side = math.sqrt(hypotenuse**2 - other_side**2)\n    else:\n        third_side = math.sqrt(hypotenuse**2 - other_side**2)\n    \n    return round(third_side, 10)\n\n# Example usage (not part of the final code)\n# assert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    return max(numeric_values) if numeric_values else None"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort_and_count(arr, temp_arr, 0, n-1)\n\n# Example usage:\n# assert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    def _flatten(sublist, result):\n        for item in sublist:\n            if isinstance(item, list):\n                _flatten(item, result)\n            else:\n                result.append(item)\n    \n    flattened = []\n    _flatten(nested_list, flattened)\n    return flattened"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    # Step 1: Create a dictionary to store the sum of scores for each person\n    scores_dict = {}\n    \n    # Step 2: Iterate through the list of tuples\n    for name, score in tuples_list:\n        # Step 3: If the name is already in the dictionary, add the score to the existing value\n        if name in scores_dict:\n            scores_dict[name] += score\n        # Step 4: If the name is not in the dictionary, initialize it with the score\n        else:\n            scores_dict[name] = score\n    \n    # Step 5: Find the person with the maximum aggregate score\n    max_name = max(scores_dict, key=scores_dict.get)\n    max_score = scores_dict[max_name]\n    \n    # Step 6: Return the tuple with the person's name and their maximum aggregate score\n    return (max_name, max_score)\n\n# Example usage (not part of the function)\n# assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    count = 0\n    for k in range(n + 1):\n        count += math.comb(n, k) ** 2\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            max_depth = max(max_depth, 1 + dict_depth(d[key]))\n    return max_depth\n\n# Example assertion\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        split_words = word.split()\n        for w in split_words:\n            if w.lower().startswith('p'):\n                result.append(w)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize DP array to store the maximum sum of increasing subsequences\n    dp = [0] * n\n    \n    # Fill the DP array\n    for j in range(n):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[j] > arr[l]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Check if the kth element can be included in the subsequence ending at ith index\n    if arr[k-1] > arr[i-1]:\n        return dp[i-1] + arr[k-1]\n    else:\n        return dp[i-1]\n\n# Example usage (not part of the final code)\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, k):\n    # Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    \n    # Sort products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top k products\n    return products[:k]\n\n# Example assertion\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    position = 0\n    temp = n\n    while temp > 0:\n        position += 1\n        temp >>= 1\n    \n    # Set the leftmost unset bit\n    while (n & (1 << position)) != 0:\n        position -= 1\n    \n    # Return the number with the leftmost unset bit set\n    return n | (1 << position)\n\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    # Start with the highest possible power of 2\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\nassert highest_Power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    lucas_0 = 2\n    lucas_1 = 1\n    \n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "{id: {name: score}}"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    if n <= 0:\n        return 0\n    \n    if n in memo:\n        return memo[n]\n    \n    # Calculate the sum of f(n/2), f(n/3), f(n/4), f(n/5)\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # The result is the maximum of the sum of parts and n itself\n    result = max(sum_parts, n)\n    \n    # Store the result in memo\n    memo[n] = result\n    \n    return result\n\n# Example assertion\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Populate the dictionary with character frequencies\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    # Return the middle value\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        while number > 0:\n            total_sum += number % 10\n            number //= 10\n    return total_sum\n\nassert sum_of_digits([10, 2, 56]) == 14"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    return len(set(tuples_list))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    return num % 2 != 0\n\n# Test case\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the first digit that is smaller than the digit immediately to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return the number itself (it's the largest permutation)\n        return n\n    \n    # Step 2: Find the smallest digit on the right side that is larger than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Step 3: Swap these two digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Sort the digits to the right of the swapped position in ascending order\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    return int(''.join(digits))\n\nassert rearrange_bigger(12) == 21"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    if not tuples_list:\n        raise ValueError(\"The list of tuples cannot be empty\")\n    \n    min_product = float('inf')\n    \n    for pair in tuples_list:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    \n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # Return the minimum value from the filtered list\n    return min(numeric_values)\n\n# Example assertion\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    result = []\n    for tup in tuples_list:\n        result.append(tup[n])\n    return result"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert both sequences to sets for O(1) average time complexity for lookups\n    set1 = set(seq1)\n    set2 = set(seq2)\n    \n    # Check if there is any intersection between the two sets\n    return bool(set1 & set2)\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort(reverse=True)\n    max_product_positive = arr[0] * arr[1]\n    max_product_negative = arr[-1] * arr[-2]\n    \n    if max_product_positive > max_product_negative:\n        return (arr[0], arr[1])\n    else:\n        return (arr[-2], arr[-1])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_len_list = []\n    for sublist in lst:\n        if len(sublist) > len(max_len_list):\n            max_len_list = sublist\n    return max_len_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Initialize the sum to 0\n    sum_of_cubes = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the ith even natural number\n        even_number = 2 * i\n        # Add the cube of the even number to the sum\n        sum_of_cubes += even_number ** 3\n    \n    return sum_of_cubes\n\n# Example assertion\nassert cube_Sum(2) == 72"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Step 1: Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Step 2: Calculate the average by dividing the sum by n\n    average = sum_of_cubes / n\n    \n    return average\n\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings_tuple):\n    return [s[-1] for s in strings_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    # Split the date by '-'\n    parts = date.split('-')\n    # Rearrange the parts to dd-mm-yyyy format\n    new_date = f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n    return new_date"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    \n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through the elements of both tuples\n    for a, b in zip(tuple1, tuple2):\n        # Perform the bitwise AND operation and append the result to the list\n        result.append(a & b)\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)\n\n# Example usage (not part of the final code)\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Find the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    \n    # Find the y-coordinate of the vertex\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    \n    # Calculate the directrix\n    directrix = y_vertex - (1 + b**2) / (4 * a)\n    \n    return directrix\n\n# Example assertion\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert one of the lists to a set for faster lookup\n    set_list2 = set(list2)\n    \n    # Iterate through the first list and check if any element is in the set of the second list\n    for element in list1:\n        if element in set_list2:\n            return True\n    \n    # If no common element is found, return False\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    # Calculate the median length of the trapezium\n    median = (a + b) / 2\n    return median\n\n# Example assertion\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if element >= num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    # Convert the number to a string to easily access the last character\n    str_number = str(number)\n    # Get the last character of the string and convert it back to an integer\n    last_digit = int(str_number[-1])\n    return last_digit\n\nassert last_Digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 1])\n\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen_tuples = set()\n    bidirectional_count = 0\n    \n    for t in tuples:\n        reverse_t = (t[1], t[0])\n        if reverse_t in seen_tuples:\n            bidirectional_count += 1\n        else:\n            seen_tuples.add(t)\n    \n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Step 1: Convert each integer in the list to a string\n    str_lst = [str(num) for num in lst]\n    \n    # Step 2: Join the string representations of the integers\n    joined_str = ''.join(str_lst)\n    \n    # Step 3: Convert the joined string back to an integer\n    result = int(joined_str)\n    \n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Find the first word that ends with 'ly'\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(0)\n        return (start, end, adverb)\n    return None\n\n# Example assertion\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    return 6 * (side_length ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_nums = sum(1 for num in arr if num > 0)\n    return positive_nums / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b, c * d) for (a, c), (b, d) in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count"}
{"task_id": "Mbpp/447", "solution": "# Step 1: Define the function with a parameter to accept the list.\ndef cube_nums(nums):\n    # Step 2: Use a list comprehension to iterate over each element in the list,\n    #         cube it, and store the result in a new list.\n    return [num ** 3 for num in nums]\n\n# Final code:\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]\n    \n    # Generate Perrin numbers up to index n\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    \n    # Sum the Perrin numbers up to index n\n    return sum(perrin_numbers[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, length):\n    return [s for s in strings if len(s) == length]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    # Step 1: Initialize an empty string to store the result\n    result = ''\n    \n    # Step 2: Iterate through each character in the input string\n    for char in input_string:\n        # Step 3: Check if the character is not a whitespace\n        if char != ' ':\n            # Step 4: Append the non-whitespace character to the result string\n            result += char\n    \n    # Step 5: Return the result string\n    return result\n\n# Example assertion\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize sum to 0\n    sum_even_factors = 0\n    \n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            # If i is a factor, check if it is even\n            if i % 2 == 0:\n                sum_even_factors += i\n            # Check if the corresponding factor (n // i) is even and different from i\n            if (n // i) % 2 == 0 and (n // i) != i:\n                sum_even_factors += (n // i)\n    \n    return sum_even_factors\n\n# Test case\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\nassert text_match_wordz(\"pythonz.\") == True"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    # Months with 31 days are: 1, 3, 5, 7, 8, 10, 12\n    return month in [1, 3, 5, 7, 8, 10, 12]\n\nassert check_month_number(5) == True"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    # Initialize the minimum length sublist as the first sublist\n    min_sublist = lst[0]\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # If the current sublist is shorter than the min_sublist, update min_sublist\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    \n    return min_sublist\n\n# Example assertion\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    for char in s:\n        if not char.isupper():\n            result.append(char)\n    return ''.join(result)\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\nassert upper_ctr('PYthon') == 1"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    \n    first_element = lst[0]\n    rest_combinations = combinations_list(lst[1:])\n    \n    combinations = rest_combinations[:]\n    for combination in rest_combinations:\n        combinations.append([first_element] + combination)\n    \n    return combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_ending_here = min_ending_here = max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize a list to store the maximum product ending at each index\n    max_product_ending_here = [1] * n\n    \n    for i in range(n):\n        max_product_ending_here[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_ending_here[i] = max(max_product_ending_here[i], max_product_ending_here[j] * arr[i])\n    \n    return max(max_product_ending_here)\n\n# Example usage (not part of the function, just for demonstration)\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    if len(tup) < 2:\n        return ()\n    result = tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n    return result"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    # Step 1: Sort the list\n    lst.sort()\n    \n    # Step 2: Check if each element is consecutive\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1] + 1:\n            return False\n    \n    # Step 3: If all elements are consecutive, return True\n    return True\n\n# Example assertion\nassert check_Consecutive([1,2,3,4,5]) == True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Normalize each tuple by sorting its elements\n    normalized_list1 = [tuple(sorted(t)) for t in list1]\n    normalized_list2 = [tuple(sorted(t)) for t in list2]\n    \n    # Convert normalized tuples to sets\n    set1 = set(normalized_list1)\n    set2 = set(normalized_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    return intersection\n\n# Example assertion\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(input_str, old_char, new_char):\n    # Initialize an empty list to collect the modified characters\n    result = []\n    \n    # Iterate through each character in the input string\n    for char in input_str:\n        # If the character matches the old character, replace it\n        if char == old_char:\n            result.append(new_char)\n        else:\n            # Otherwise, keep the character as is\n            result.append(char)\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(result)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Step 1: Find the smallest value in the array\n    smallest = min(arr)\n    \n    # Step 2: Find the largest value in the array\n    largest = max(arr)\n    \n    # Step 3: Return the sum of the smallest and largest values\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string to easily access the first character\n    number_str = str(number)\n    # Return the first character of the string converted back to an integer\n    return int(number_str[0])\n\nassert first_Digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference between the sum of cubes and the sum of the first n natural numbers\n    return sum_cubes - sum_n\n\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    even_count = 0\n    odd_count = 0\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count\n\n# Example assertion\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    toggled = \"\"\n    for char in s:\n        if char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char.upper()\n    return toggled"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert both numbers to strings to easily access each digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Initialize the sum of differences\n    total_distance = 0\n    \n    # Iterate over the digits of the shorter number\n    for i in range(min(len(str_num1), len(str_num2))):\n        # Calculate the absolute difference between corresponding digits\n        total_distance += abs(int(str_num1[i]) - int(str_num2[i]))\n    \n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Combine both tuples into a single set to remove duplicates\n    union_set = set(tuple1).union(set(tuple2))\n    \n    # Convert the set back to a sorted tuple\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(input_string):\n    return re.findall(r'\"([^\"]*)\"', input_string)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)\n\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = set(nums)\n    return [num for num in unique_nums if nums.count(num) == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = 2 * math.pi * radius**2\n    lateral_area = 2 * math.pi * radius * height\n    return base_area + lateral_area\n\n# Assertion to test the function\nassert round(surfacearea_cylinder(10, 5), 2) == 942.45"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the main list starting from index i\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    # If no match is found, return False\n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10\n\nassert last_Digit_Factorial(4) == 4"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_set = set1.symmetric_difference(set2)\n    return tuple(dissimilar_set)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    def filter_even(element):\n        if isinstance(element, int):\n            return element % 2 == 0\n        elif isinstance(element, tuple):\n            return tuple(filter_even(e) for e in element)\n        return False\n\n    return tuple(filter(filter_even, nested_tuple))\n\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the slant height\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the area of one triangular face\n    triangle_area = 0.5 * base_edge * slant_height\n    \n    # Calculate the total surface area\n    total_surface_area = base_area + 4 * triangle_area\n    \n    return total_surface_area\n\n# Example assertion\nassert surface_Area(3, 4) == 33"}
{"task_id": "Mbpp/582", "solution": "def is_empty_dict(d):\n    return len(d) == 0\n\nassert is_empty_dict({}) == True\nassert is_empty_dict({1: 'a'}) == False"}
{"task_id": "Mbpp/583", "solution": "def binomial_coefficient(n, k):\n    if k > n - k:\n        k = n - k\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef catalan_number(n):\n    return binomial_coefficient(2 * n, n) // (n + 1)\n\n# Example assertion\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the list into two parts\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Concatenate the second part with the first part\n    result = second_part + first_part\n    \n    return result\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "solution": "# Step 1: Define the function with a parameter to accept the list.\ndef list_tuple(lst):\n    # Step 2: Convert the list to a tuple using the tuple() constructor.\n    return tuple(lst)\n\n# Step 3: No need for additional code as the function is complete."}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    # Step 1: Find the largest value in the list\n    max_val = max(nums)\n    \n    # Step 2: Find the smallest value in the list\n    min_val = min(nums)\n    \n    # Step 3: Calculate the difference between the largest and smallest value\n    diff = max_val - min_val\n    \n    # Step 4: Return the difference\n    return diff"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    for num in range(start, end + 1):\n        sqrt = math.isqrt(num)\n        if sqrt * sqrt == num:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return ((x, y), complex(x, y))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    # Check if the list has at least 2 elements\n    if len(lst) >= 2:\n        # Swap the first and last elements\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return total_sum\n\n# Example assertion\nassert sum_Of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    segments = ip.split('.')\n    cleaned_segments = [str(int(segment)) for segment in segments]\n    return '.'.join(cleaned_segments)\n\nassert removezero_ip(\"216.08.094.196\") == \"216.8.94.196\""}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even - first_odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    # Initialize the count of swaps\n    swaps = 0\n    \n    # Iterate through the strings\n    for i in range(len(bin1)):\n        # If characters at the current position are different, increment the swap count\n        if bin1[i] != bin2[i]:\n            swaps += 1\n    \n    # Since each mismatch can be corrected with one swap, the number of mismatches is the answer\n    return swaps\n\n# Example assertion\nassert min_Swaps(\"1101\", \"1110\") == 1"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    \n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    \n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n\n# Example usage (not part of the final code):\n# assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to access each digit\n    num_str = str(num)\n    \n    # Calculate the number of digits\n    num_digits = len(num_str)\n    \n    # Compute the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the computed sum is equal to the original number\n    return sum_of_powers == num\n\n# Example assertion\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of first n natural numbers\n    total_sum = n * (n + 1) // 2\n    \n    # Calculate the average of first n natural numbers\n    average = total_sum / n\n    \n    # Return the sum and average as a tuple\n    return total_sum, average\n\n# Example assertion\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize the list with numbers from 1 to n\n    ludic_numbers = list(range(1, n + 1))\n    \n    # Index to start removing elements\n    index = 1\n    \n    while index < len(ludic_numbers):\n        # Element to remove\n        remove_index = index + 1\n        \n        # Remove every (remove_index)-th element\n        ludic_numbers = [ludic_numbers[i] for i in range(len(ludic_numbers)) if (i + 1) % remove_index != 0]\n        \n        # Move to the next index\n        index += 1\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Initialize Bell's triangle with the first row\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    # Fill the Bell's triangle\n    for i in range(1, n+1):\n        # Start the row with the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first element of the nth row\n    return bell[n][0]\n\n# Example assertion\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Step 1: Check if the list is empty or k is out of bounds\n    if not lst or k < 1 or k > len(lst):\n        return lst\n    \n    # Step 2: Remove the k'th element (1-based index)\n    return lst[:k-1] + lst[k:]\n\n# Example assertion\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Extract the n'th column from each row\n    column_values = [row[n] for row in matrix]\n    # Return the maximum value from the extracted column\n    return max(column_values)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        for value in tup:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for inner_tuple in tuples:\n        average = sum(inner_tuple) / len(inner_tuple)\n        averages.append(average)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    result = tuple(a % b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result.append(a / b)\n    \n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    # Separate the string into two lists: one for letters and one for numbers\n    letters = [char for char in s if not char.isdigit()]\n    numbers = [char for char in s if char.isdigit()]\n    \n    # Concatenate the lists and join them into a single string\n    result = ''.join(letters) + ''.join(numbers)\n    \n    return result"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    \n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    i, j = 0, 0\n    combined = []\n    \n    # Merge the two sorted lists\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            combined.append(list1[i])\n            i += 1\n        else:\n            combined.append(list2[j])\n            j += 1\n    \n    # If there are remaining elements in list1\n    while i < size:\n        combined.append(list1[i])\n        i += 1\n    \n    # If there are remaining elements in list2\n    while j < size:\n        combined.append(list2[j])\n        j += 1\n    \n    # Find the median\n    mid = size - 1\n    median = (combined[mid] + combined[mid + 1]) / 2.0\n    return median\n\n# Example usage (not part of the function)\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [x ** n for x in lst]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(input_string):\n    return input_string.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(r):\n    if r < 0:\n        return None\n    return r * r"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]\n\n# Example assertion\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    # Step 1: Replace all underscores with a temporary character (e.g., '|')\n    s = s.replace('_', '|')\n    \n    # Step 2: Replace all spaces with underscores\n    s = s.replace(' ', '_')\n    \n    # Step 3: Replace the temporary character with spaces\n    s = s.replace('|', ' ')\n    \n    return s\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    non_zero_index = 0\n    \n    # Move all non-zero elements to the front\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[non_zero_index] = nums[i]\n            non_zero_index += 1\n    \n    # Fill the remaining positions with zeroes\n    for i in range(non_zero_index, len(nums)):\n        nums[i] = 0\n    \n    return nums"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(32):  # Assuming 32-bit integers\n        count_1 = 0\n        for num in arr:\n            if num & (1 << i):\n                count_1 += 1\n        count_0 = n - count_1\n        total_sum += count_1 * count_0 * (1 << i)\n    return total_sum\n\n# Example usage:\nassert pair_xor_Sum([5, 9, 7, 6]) == 47"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(wind_velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return math.ceil(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Step 1: Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    \n    # Step 2: Calculate the total length of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(strings):\n    result = []\n    for s in strings:\n        start = s.find('(')\n        end = s.find(')')\n        if start != -1 and end != -1:\n            s = s[:start] + s[end+1:]\n        result.append(s.strip())\n    return result\n\nassert remove_parenthesis([\"python (chrome)\"]) == [\"python\"]"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    # Use regex to find a 'z' that is not at the start or end of a word\n    pattern = r'\\Bz\\B'\n    return bool(re.search(pattern, text))\n\nassert text_match_wordz_middle(\"pythonzabc.\") == True"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Step 1: Reverse the first k elements of the array\n    arr[:k] = arr[:k][::-1]\n    # Step 2: Return the modified array\n    return arr\n\n# Example usage (not part of the function)\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    return t + (d,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    \n    dp[0][0] = matrix[0][0]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i-1][j] * (i+j) + matrix[i][j] if i > 0 else -float('inf')\n            from_left = dp[i][j-1] * (i+j) + matrix[i][j] if j > 0 else -float('inf')\n            dp[i][j] = max(from_top, from_left) / (i + j + 1)\n    \n    return dp[N-1][N-1]\n\n# Example usage (not part of the final code)\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the result\n    for char in result_str:\n        # Convert the character to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example assertion\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    result = []\n    inside_quotation = False\n    current_string = \"\"\n    \n    for char in s:\n        if char == '\"':\n            if inside_quotation:\n                result.append(current_string)\n                current_string = \"\"\n            inside_quotation = not inside_quotation\n        elif inside_quotation:\n            current_string += char\n    \n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through the elements of both lists simultaneously\n    for a, b in zip(list1, list2):\n        # Add corresponding elements and append to the result list\n        result.append(a + b)\n    \n    # Return the result list\n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    A = math.pi * r * l\n    return A"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    # Step 1: Create a translation table to replace spaces, commas, and dots with colons\n    translation_table = str.maketrans(' ,.', ':::')\n    \n    # Step 2: Use the translate method to replace the characters in the text\n    result = text.translate(translation_table)\n    \n    # Step 3: Return the modified text\n    return result"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Generate all sublists\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    \n    return total_sum\n\n# Test case\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Find the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has less than 3 bits, return the number itself\n    if num_bits < 3:\n        return n\n    \n    # Create a mask with all bits set to 1 except the first and last bit\n    mask = (1 << (num_bits - 1)) - 1\n    mask = mask ^ 1\n    \n    # Toggle the bits using XOR with the mask\n    result = n ^ mask\n    \n    return result\n\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\nassert left_insertion([1,2,4,5],6)==4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(d):\n    n = 1\n    while True:\n        T_n = n * (n + 1) // 2\n        if int(math.log10(T_n)) + 1 == d:\n            return n\n        n += 1\n\n# Example assertion\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup)-1, 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    # If the string is empty or has only one character, return True\n    if len(s) <= 1:\n        return True\n    \n    # Compare each character with the first character\n    for char in s:\n        if char != s[0]:\n            return False\n    \n    return True\n\nassert all_Characters_Same(\"python\") == False"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2\n\n# Assertion to test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Calculate the effective number of rotations\n    n = n % len(lst)\n    # Rotate the list by slicing\n    return lst[-n:] + lst[:-n]\n\n# Example assertion\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(d != 0 and num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for i, char in enumerate(s):\n        if i > 0 and char.isupper():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"HelloWorld\") == 'Hello World'\nassert capital_words_spaces(\"ThisIsAString\") == 'This Is A String'\nassert capital_words_spaces(\"ABC\") == 'A B C'\nassert capital_words_spaces(\"\") == ''"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(int(x) for x in lst)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    memo[n] = jacobsthal_num(n-1, memo) + 2 * jacobsthal_num(n-2, memo)\n    return memo[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of the tuple (the value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]\n\n# Test case\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    min_length = min(len(l1), len(l2), len(l3))\n    common_elements = []\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    if len(lst) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    sorted_lst = sorted(lst)\n    return sorted_lst[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    # Create a dictionary to store the count of each string\n    string_count = {}\n    # Initialize the count of reverse pairs\n    reverse_pairs_count = 0\n    \n    # Iterate over each string in the list\n    for string in string_list:\n        # Create the reverse of the current string\n        reverse_string = string[::-1]\n        \n        # Check if the reverse string is in the dictionary\n        if reverse_string in string_count:\n            # If it is, increment the reverse pairs count\n            reverse_pairs_count += string_count[reverse_string]\n        \n        # Update the count of the current string in the dictionary\n        if string in string_count:\n            string_count[string] += 1\n        else:\n            string_count[string] = 1\n    \n    return reverse_pairs_count\n\n# Example assertion\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary with the counts\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    # Define a regex pattern for a decimal number with a precision of 2\n    pattern = r'^\\d+\\.\\d{2}$'\n    \n    # Use re.match to check if the string matches the pattern\n    return bool(re.match(pattern, s))\n\n# Example assertions\nassert is_decimal('123.11') == True\nassert is_decimal('123.1') == False\nassert is_decimal('123.111') == False\nassert is_decimal('123') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1\n\nassert unique_Element([1,1,1]) == True"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Find the minimum difference by comparing adjacent pairs in sorted array\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    \n    return min_diff\n\n# Example usage\nassert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    return n + (n * (n - 1)) // 2\n\n# Example assertion\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Iterate through the list, stopping at the second last element\n    for i in range(len(lst) - 1):\n        # Append the pair of consecutive elements to the pairs list\n        pairs.append((lst[i], lst[i + 1]))\n    \n    # Return the list of pairs\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    freq = {}\n    \n    for num in nums:\n        required = target_sum - num\n        if required in freq:\n            count += freq[required]\n        \n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    # Convert list2 to a set for faster lookup\n    set2 = set(list2)\n    # Use list comprehension to filter out elements in list1 that are not in list2\n    diff = [item for item in list1 if item not in set2]\n    return diff\n\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 15, 20, 30]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of the current odd number to the total sum\n        total_sum += i**4\n    \n    return total_sum\n\n# Test the function with the given assertion\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            continue\n    \n    return stack == []\n\nassert check_expression(\"{()}[{}]\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(input_string, k):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the filtered words back into a single string\n    result_string = ' '.join(filtered_words)\n    \n    return result_string"}
{"task_id": "Mbpp/773", "solution": "def find_substring_occurrence(text, substring):\n    index = text.find(substring)\n    if index == -1:\n        return None\n    return (substring, index, index + len(substring))\n\nassert find_substring_occurrence('python programming, python language', 'python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 1:\n            return False\n    return True\n\nassert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Step 1: Create a set to store unique elements\n    unique_elements = set()\n    \n    # Step 2: Iterate through the list and add elements to the set\n    for element in lst:\n        unique_elements.add(element)\n    \n    # Step 3: Calculate the sum of the unique elements\n    total_sum = sum(unique_elements)\n    \n    # Step 4: Return the total sum\n    return total_sum\n\n# Example usage (not part of the function)\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current_sublist[0]:\n            current_sublist.append(elem)\n        else:\n            result.append(current_sublist)\n            current_sublist = [elem]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    result = []\n    n = len(tuple_list)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            tuple1 = tuple_list[i]\n            tuple2 = tuple_list[j]\n            combined_tuple = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1])\n            result.append(combined_tuple)\n    \n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n):\n            if (end - start + 1) % 2 != 0:\n                total_sum += sum(arr[start:end+1])\n    \n    return total_sum\n\nassert odd_length_sum([1,2,4]) == 14"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values among R, G, B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif max_val == b:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    # Return H, S, V as a tuple\n    return (h, s, v)\n\n# Example assertion\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # If both first even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Return the product of the first even and odd numbers\n    return first_even * first_odd\n\n# Example assertion\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Remove parentheses and split by commas\n    elements = s.strip('()').split(',')\n    # Convert each element to integer\n    int_tuple = tuple(int(elem.strip()) for elem in elements)\n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    # Initialize the left and right pointers for binary search\n    left, right = 0, len(arr)\n    \n    # Perform binary search\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n\nassert right_insertion([1, 2, 4, 5], 6) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "# Step 1: Define the function with parameters for the string and list.\ndef new_tuple(lst, string):\n    # Step 2: Convert the list to a tuple.\n    tuple_from_list = tuple(lst)\n    # Step 3: Convert the string to a tuple with one element.\n    tuple_from_string = (string,)\n    # Step 4: Concatenate the two tuples.\n    result_tuple = tuple_from_list + tuple_from_string\n    # Step 5: Return the resulting tuple.\n    return result_tuple"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for item in input_tuple:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Example assertion\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)\n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the range from l to r (inclusive)\n    for num in range(l, r + 1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n    \n    return total_sum\n\n# Example assertion\nassert sum_in_range(2, 5) == 8"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure the number is treated as 32-bit\n    n &= 0xFFFFFFFF\n    # Calculate the effective number of bits to rotate\n    d %= 32\n    # Perform the left rotation\n    rotated = ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n    return rotated\n\n# Example assertion\nassert left_rotate(16, 2) == 64"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    # Step 1: Initialize an empty string to store the result\n    result = ''\n    \n    # Step 2: Iterate through each character in the input string\n    for char in input_string:\n        # Step 3: Check if the character is not a whitespace\n        if char != ' ':\n            # Step 4: Append the character to the result string\n            result += char\n    \n    # Step 5: Return the result string\n    return result"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\nassert count_equal_numbers(1, 1, 1) == 3"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    # Initialize product as 1\n    product = 1\n    \n    # Iterate through the list and calculate the product\n    for num in numbers:\n        product *= num\n    \n    # Check if the product is even\n    return product % 2 == 0\n\n# Example assertion\nassert is_product_even([1, 2, 3])"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Update max_sum and max_list if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        return False\n    \n    for elem1, elem2 in zip(tuple1, tuple2):\n        if elem2 >= elem1:\n            return False\n    \n    return True"}
