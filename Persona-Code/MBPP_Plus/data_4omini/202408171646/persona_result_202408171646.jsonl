{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return tuple(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    if n <= 0:\n        return []\n    return sorted(heapq.nlargest(n, numbers), reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # Perform XOR operation to find differing bits\n    differing_bits = num1 ^ num2\n    \n    # Check if there is exactly one bit set in the result\n    return differing_bits != 0 and (differing_bits & (differing_bits - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(input_string):\n    words = input_string.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x ** 2 for x in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    # Concatenate the string with itself\n    doubled_s = s + s\n    \n    # Find the first occurrence of the original string in the doubled string\n    first_occurrence = doubled_s.find(s, 1)  # Start searching from index 1\n    \n    # If found, the number of rotations is the index of the first occurrence\n    return first_occurrence if first_occurrence != -1 else n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or first_index == last_index:\n        return s.replace(char, '', 1)  # Remove only one occurrence if it's the same\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height_triangle, length):\n    base_area = 0.5 * base * height_triangle\n    volume = base_area * length\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    remove_set = set(s2)\n    return ''.join(char for char in s1 if char not in remove_set)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    if num < 1:\n        return False\n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Step 1: Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Step 2: Calculate twice the reversed number\n    twice_reversed = 2 * reversed_num\n    \n    # Step 3: Check the condition\n    return num == (twice_reversed - 1)"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert digits to strings for comparison\n    digits_str = list(map(str, digits))\n    \n    # Sort the strings based on custom comparison\n    digits_str.sort(key=lambda x: x*10, reverse=True)\n    \n    # Join the sorted strings to form the largest number\n    largest_num = ''.join(digits_str)\n    \n    # Convert back to integer\n    return int(largest_num)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    smallest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples_list):\n    max_diff = float('-inf')  # Start with the smallest possible value\n    for a, b in tuples_list:\n        diff = abs(a - b)  # Calculate the absolute difference\n        if diff > max_diff:\n            max_diff = diff  # Update max_diff if a larger difference is found\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(nested_list):\n    total = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    if not array:\n        return True  # An empty array is considered monotonic\n\n    increasing = decreasing = True  # Assume both conditions are true initially\n\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False  # Found an increase, so it can't be decreasing\n        elif array[i] < array[i - 1]:\n            increasing = False  # Found a decrease, so it can't be increasing\n\n    return increasing or decreasing  # Return true if either condition holds"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    if not sublist:  # An empty sublist is always considered to be present\n        return True\n    if len(sublist) > len(main_list):  # Sublist cannot be longer than main list\n        return False\n    \n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i + len(sublist)] == sublist:\n            return True\n            \n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if not all(isinstance(t, tuple) for t in tuples):\n        return False\n    lengths = {len(t) for t in tuples}\n    return len(lengths) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n < 0:\n        return False\n    return n % 4 == 0 or n % 4 == 1"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, values):\n    if len(patterns) != len(values):\n        return False\n    \n    pattern_to_value = {}\n    value_to_pattern = {}\n    \n    for pattern, value in zip(patterns, values):\n        if pattern in pattern_to_value:\n            if pattern_to_value[pattern] != value:\n                return False\n        else:\n            pattern_to_value[pattern] = value\n        \n        if value in value_to_pattern:\n            if value_to_pattern[value] != pattern:\n                return False\n        else:\n            value_to_pattern[value] = pattern\n            \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(num):\n    # Convert the number to a string to access each digit\n    num_str = str(num)\n    # Calculate the alternating sum\n    alternating_sum = sum(int(digit) if i % 2 == 0 else -int(digit) \n                          for i, digit in enumerate(num_str))\n    # Check if the absolute value of the alternating sum is divisible by 11\n    return alternating_sum % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of the given word is odd.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total_ascii = sum(ord(char) for char in s)\n    result = total_ascii % 26\n    return chr(result + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n < 1:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        seq = [0] * (n + 1)\n        seq[1], seq[2] = 1, 1\n        for i in range(3, n + 1):\n            seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        return seq[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"Calculate the surface area of a sphere given its radius.\"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    # Check if n is a valid integer\n    if isinstance(n, int):\n        # Return the closest smaller number\n        return n - 1 if n > 0 else None  # or some other handling for non-positive numbers\n    else:\n        raise ValueError(\"Input must be an integer\")"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    num_str = str(number)\n    \n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i - 1]:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    if b < 0:\n        return 1 / power(a, -b)\n    elif b == 0:\n        return 1\n    else:\n        result = 1\n        for _ in range(b):\n            result *= a\n        return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize variables to track the minimum value and corresponding name\n    min_value = float('inf')\n    min_name = None\n    \n    # Iterate through the list of tuples\n    for name, value in tuples_list:\n        # Check if the current value is less than the minimum found so far\n        if value < min_value:\n            min_value = value\n            min_name = name\n            \n    return min_name"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    # Initialize min_length to a large number\n    min_length = float('inf')\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Update min_length if the current sublist is shorter\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # Return the smallest length found\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    if n < 1:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(nested_list):\n    frequency_dict = {}\n    for sublist in nested_list:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    if not numbers:\n        return 0  # Handle empty list case to avoid division by zero\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    \n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    \n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds for the given array.\")\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(word.capitalize() for word in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Create a table to store results of subproblems\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    A[0][0] = 1  # a(0, 0) = 1\n    for i in range(1, n + 1):\n        A[i][0] = 0  # a(n, 0) = 0 for n > 0\n        A[i][i] = 0  # a(n, n) = 0 for n > 0\n\n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (j + 1) * A[i - 1][j] + (i - j) * A[i - 1][j - 1]\n\n    return A[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(boolean_list):\n    return sum(1 for value in boolean_list if value is True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge the three lists into one\n    merged_list = list1 + list2 + list3\n    # Sort the merged list\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    n = len(binary_string)\n    # Normalize the number of rotations\n    rotations = rotations % n\n    count = 0\n    \n    # Check each rotation\n    for i in range(n):\n        # Determine the last bit of the rotated string\n        last_bit = binary_string[(i + rotations) % n]\n        if last_bit == '1':\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Start with the first list as the initial set of common elements\n    common_elements = set(nested_lists[0])\n    \n    # Iterate through the remaining lists and update the common elements\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s: str) -> bool:\n    s = s.strip()  # Remove leading and trailing whitespace\n    if not s:  # Check for empty string\n        return False\n    if s[0] in ('-', '+'):  # Check for sign\n        s = s[1:]  # Remove sign for further checks\n    return s.isdigit()  # Check if the remaining string consists only of digits"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(lst):\n    return all(isinstance(d, dict) and not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for sublist in lst:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)  # Keep the original item if it can't be converted\n        result.append(converted_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    # Validate input\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Split the string by spaces\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            if mid + 1 < len(nums) and nums[mid] == nums[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if mid - 1 >= 0 and nums[mid] == nums[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return nums[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for a, b in tuples_list:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    \n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and partner <= limit:\n                if sum_of_divisors(partner) == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(partner)\n    \n    return sum(amicable_numbers)"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z_real, z_imag):\n    return math.atan2(z_imag.imag, z_real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Transform the binary string into an array of integers\n    transformed_array = [1 if char == '0' else -1 for char in binary_string]\n    \n    # Apply Kadane's algorithm to find the maximum sum of any contiguous subarray\n    max_sum = current_sum = 0\n    \n    for value in transformed_array:\n        current_sum += value\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def find_divisors(n):\n        divisors = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    # Filter words longer than n characters\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sums of diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    \n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n            \n    max_item = None\n    max_count = 0\n    \n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n            \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    vowel_list = [char for char in s if char in vowels]\n    reversed_vowels = vowel_list[::-1]\n    \n    result = []\n    vowel_index = 0\n    \n    for char in s:\n        if char in vowels:\n            result.append(reversed_vowels[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    total = 0\n    for num in numbers:\n        if num < 0:\n            total += num\n    return total"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = sum(1 for x in arr if x == 0)\n    non_zeroes = sum(1 for x in arr if x != 0)\n    \n    if non_zeroes == 0:\n        return 0.0  # To handle the case where there are no non-zeroes\n    \n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # A number can be represented as a sum of non-zero powers of 2\n    # if it can be expressed in binary form with distinct bits set to 1.\n    # This is equivalent to checking if the number is greater than 0\n    # and if it can be represented as a sum of distinct powers of 2.\n    \n    return n > 0 and (n & (n - 1)) == 0 or n > 0"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    if radius < 0:\n        raise ValueError(\"Radius must be a non-negative number.\")\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    unique_numbers = set()\n    for tup in list_of_tuples:\n        for num in tup:\n            unique_numbers.add(num)\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        return sub_arr[:k][::-1] + sub_arr[k:]\n\n    def find_max_index(sub_arr, n):\n        max_index = 0\n        for i in range(1, n):\n            if sub_arr[i] > sub_arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(arr)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(arr, i)\n        if max_index != i - 1:\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            arr = flip(arr, i)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(input_tuple):\n    return sum(1 for item in input_tuple if isinstance(item, list))"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    max_value = max(arr)\n    min_value = min(arr)\n    return max_value - min_value"}
{"task_id": "Mbpp/160", "solution": "def gcd_extended(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = gcd_extended(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x, y = gcd_extended(a, b)\n    \n    if n % gcd != 0:\n        return None\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    return [item for item in original_list if item not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):  # Loop from 0 to n // 2\n        term = n - 2 * i\n        if term > 0:  # Only add positive terms\n            total += term\n        else:\n            break  # Stop if the term is non-positive\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    if n < 1:\n        return 0\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for index, char in enumerate(s):\n        if char.isalpha() and ord(char) - ord('a') + 1 == index + 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    \n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    # Calculate pairs from even numbers and odd numbers\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"Count the occurrences of a number in a given list.\"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    if not numbers or start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        return 0\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(input_string):\n    count = 0\n    substring = 'std'\n    index = 0\n    \n    while index < len(input_string):\n        index = input_string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1  # Move to the next character to allow for overlapping occurrences\n    \n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(input_tuple):\n    # Use a set to track unique types\n    types = {type(item) for item in input_tuple}\n    # Check if all types are the same\n    return len(types) == 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    left = binary_search(arr, element, True)\n    if left == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    right = binary_search(arr, element, False)\n    \n    # Calculate the count of the element\n    count = right - left + 1\n    \n    # Check if the count is greater than n/2\n    return count > n // 2\n\ndef binary_search(arr, element, find_first):\n    low, high = 0, len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == element:\n            result = mid\n            if find_first:\n                high = mid - 1  # Search in the left half\n            else:\n                low = mid + 1   # Search in the right half\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, min(b, c))"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replacement_char):\n    return input_string.replace(\" \", replacement_char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    if not isinstance(lst, list) or not all(isinstance(x, (int, float)) for x in lst) or not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a list of numbers and n must be a positive integer.\")\n    \n    if n > len(lst):\n        n = len(lst)\n    \n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"Calculate the volume of a cube given its side length.\"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0b10101010  # This mask sets the even bits (0, 2, 4, 6, ...)\n    \n    # Use bitwise OR to set the even bits of n\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return {k: v for k, v in occurrences.items() if v > 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Create a memoization table to store results for subproblems\n    memo = {}\n\n    def count_sequences(last, length):\n        # Base case: if the length of the sequence is n, return 1\n        if length == n:\n            return 1\n        \n        # If the result is already computed, return it\n        if (last, length) in memo:\n            return memo[(last, length)]\n        \n        total = 0\n        next_value = last * 2\n        \n        # Count valid sequences starting from the next value\n        while next_value <= m:\n            total += count_sequences(next_value, length + 1)\n            next_value *= 2\n        \n        # Store the result in the memoization table\n        memo[(last, length)] = total\n        return total\n\n    total_sequences = 0\n    \n    # Start with each possible first element from 1 to m\n    for first in range(1, m + 1):\n        total_sequences += count_sequences(first, 1)\n    \n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    return list1[:-1] + list2"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    \"\"\"\n    Count the total number of characters in a given string.\n\n    Parameters:\n    input_string (str): The string to count characters from.\n\n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Calculate the square root of the given number\n    root = math.isqrt(n)\n    \n    # If the number is a perfect square, increment the root\n    if root * root == n:\n        root += 1\n    \n    # Return the next perfect square\n    return (root + 1) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    if n == 0:\n        return 0\n\n    # Create two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Initialize the increasing subsequence sums\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Initialize the decreasing subsequence sums\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    s = s.replace(\" \", \"\").lower()  # Remove spaces and convert to lowercase\n    n = len(s)\n    \n    # Create a 2D array to store lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table\n    for length in range(2, n + 1):  # length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the first array to a set for efficient lookups\n    set1 = set(arr1)\n    # Use a set comprehension to find the intersection\n    return [element for element in arr2 if element in set1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    magnitude, angle = cmath.polar(complex_number)\n    return (magnitude, angle)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(1 for item in lst if isinstance(item, int))"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n\n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a, b) for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n < 1:\n        return None\n    \n    newman_primes = []\n    k = 1\n    \n    while len(newman_primes) < n:\n        newman_candidate = (3 * k - 1) * (3 * k + 1) + 1\n        if is_prime(newman_candidate):\n            newman_primes.append(newman_candidate)\n        k += 1\n    \n    return newman_primes[-1]"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length.\")\n    \n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(a // b)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Check if L is greater than the length of the list\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the list.\")\n    \n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years < 0:\n        raise ValueError(\"Age cannot be negative\")\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    result = [[] for _ in range(n)]\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * (side_length ** 2)"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum((2 * i - 1) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return (6 * n * n) - (6 * n) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a given character.\n\n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Raises:\n    ValueError: If the input is not a single character.\n    \"\"\"\n    if not isinstance(char, str) or len(char) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    \n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    if n <= 0:\n        return 0\n    return sum((2 * i) ** 5 for i in range(1, n + 1))"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise ValueError(\"Both inputs must be tuples.\")\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for k in range(0, n + 1, 2):\n        total_sum += math.comb(n, k)\n    return total_sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {key: value for key, value in input_dict.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    for index, element in enumerate(tup):\n        if isinstance(element, tuple):\n            return index\n    return 0"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (4 * n - 3)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    for index, current in enumerate(array):\n        if current == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the integer to a string to iterate over each digit\n    num_str = str(num)\n    \n    # Create a frequency dictionary to count occurrences of each digit\n    frequency = {}\n    \n    for digit in num_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in frequency.items():\n        if count > int(digit):\n            return False\n            \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    # Check if all items in the list are equal to the given element\n    for item in lst:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(s):\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, s))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Function to calculate the maximum subarray sum using Kadane's algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the maximum subarray sum for the original array\n    max_kadane = kadane(arr)\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n\n    # If k is 1, return the maximum subarray sum of the original array\n    if k == 1:\n        return max_kadane\n\n    # Calculate the maximum prefix sum and suffix sum\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    # If total_sum is positive, we can add it (k-2) times to the result\n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    \n    for sublist in lists:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n            \n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(heterogeneous_list):\n    max_value = None\n    \n    for item in heterogeneous_list:\n        if isinstance(item, (int, float)):  # Check if the item is a number\n            if max_value is None or item > max_value:\n                max_value = item\n    \n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    \n    def flatten_helper(sublist):\n        for item in sublist:\n            if isinstance(item, list):\n                flatten_helper(item)\n            else:\n                flat_list.append(item)\n    \n    flatten_helper(nested_list)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    aggregate = {}\n    \n    for name, score in scores:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n            \n    max_name = max(aggregate, key=aggregate.get)\n    return (max_name, aggregate[max_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    from math import comb\n\n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) ** 2\n\n    return total_count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(value) for value in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('P') or word.startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return None"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Ensure k is greater than i\n    if k <= i:\n        return 0\n\n    # Initialize a list to store the maximum sum of increasing subsequences\n    max_sum = [0] * n\n\n    # Calculate the maximum sum of increasing subsequences up to index i\n    for j in range(i + 1):\n        max_sum[j] = arr[j]\n\n        for m in range(j):\n            if arr[j] > arr[m]:\n                max_sum[j] = max(max_sum[j], max_sum[m] + arr[j])\n\n    # Include the kth element in the sum\n    max_sum_with_k = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum_with_k = max(max_sum_with_k, max_sum[j])\n\n    return max_sum_with_k + arr[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    \n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    products = sorted(products, reverse=True)\n    \n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"Return the maximum of two numbers.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    position = 0\n    temp = n\n    \n    while temp > 0:\n        position += 1\n        temp >>= 1\n    \n    # Set the leftmost unset bit\n    return n | (1 << (position - 1))"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*args):\n    keys, values, scores = args\n    return [{keys[i]: {values[i]: scores[i]}} for i in range(len(keys))]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Create a memoization dictionary to store previously computed results\n    memo = {}\n\n    def f(n):\n        # Base case: if n is 0, the maximum sum is 0\n        if n == 0:\n            return 0\n        # Check if the result is already computed\n        if n in memo:\n            return memo[n]\n        \n        # Recursive case: calculate the maximum sum using the given equation\n        max_sum = max(f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5), n)\n        \n        # Store the computed result in the memoization dictionary\n        memo[n] = max_sum\n        return max_sum\n\n    return f(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    seen = set()\n    for item in tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s: str) -> str:\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n            \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s: str) -> bool:\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a >= b and a <= c) or (a <= b and a >= c):\n        return float(a)\n    elif (b >= a and b <= c) or (b <= a and b >= c):\n        return float(b)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, int):  # Check if the element is an integer\n            total_sum += sum(int(digit) for digit in str(abs(number)))  # Sum the digits of the absolute value\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n\n    # Step 1: Find the rightmost pair where the left digit is smaller than the right digit\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no such pair exists, return None (no bigger number can be formed)\n    if i == -1:\n        return None\n\n    # Step 2: Find the smallest digit on the right side of the found digit that is larger than it\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Step 3: Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Step 4: Reverse the digits to the right of the original position\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    # Initialize a variable to hold the minimum product\n    min_product = float('inf')  # Start with a very large number\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Calculate the product of the current tuple\n        product = tup[0] * tup[1]\n        \n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            \n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(heterogeneous_list):\n    min_value = float('inf')\n    \n    for item in heterogeneous_list:\n        if isinstance(item, (int, float)):\n            if item < min_value:\n                min_value = item\n                \n    return min_value if min_value != float('inf') else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(value in seq2 for value in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n\n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest numbers\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest numbers\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Calculate the products of the two largest and two smallest numbers\n    product1 = max1 * max2\n    product2 = min1 * min2\n\n    # Return the pair with the highest product\n    if product1 >= product2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    if not lst:\n        return None\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple, delimiter='-'):\n    return delimiter.join(str(element) for element in input_tuple)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    if n < 1:\n        raise ValueError(\"n must be a natural number (greater than 0)\")\n    \n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(sublists, element):\n    count = 0\n    for sublist in sublists:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  # Start with a big gap, then reduce the gap\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        \n        gap //= 2  # Reduce the gap for the next element\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple((a & b) for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    # The directrix of a parabola in the form y = a(x - h)^2 + k is given by the formula:\n    # directrix = k - (1 / (4 * a))\n    return k - (1 / (4 * a))"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(elem in list1 for elem in list2)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium given the lengths of the two parallel sides.\n    \n    Parameters:\n    a (float): Length of the first parallel side.\n    b (float): Length of the second parallel side.\n    c (float): Length of the non-parallel side (not used in median calculation).\n    \n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 != 0)"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen_pairs = set()\n    bidirectional_count = 0\n    \n    for a, b in tuples:\n        if (b, a) in seen_pairs:\n            bidirectional_count += 1\n        seen_pairs.add((a, b))\n    \n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    # Convert each integer to a string and join them together\n    joined_string = ''.join(map(str, int_list))\n    # Convert the joined string back to an integer\n    return int(joined_string)"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Define a simple list of common adverbs for demonstration purposes\n    adverbs = {\"clearly\", \"seriously\", \"unfortunately\"}\n    \n    # Normalize the sentence by removing punctuation and splitting into words\n    words = re.findall(r'\\b\\w+\\b', sentence)\n    \n    for index, word in enumerate(words):\n        if word in adverbs:\n            # Return the position in the original sentence\n            start_index = sentence.index(word)\n            return (0, start_index, word)\n    \n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side):\n    return 6 * (side ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    \n    positive_numbers = sum(1 for num in arr if num > 0)\n    total_numbers = len(arr)\n    \n    return positive_numbers / total_numbers"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = tuple(\n        (a * b for a, b in zip(t1, t2))\n        for t1, t2 in zip(tup1, tup2)\n    )\n    \n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [x ** 3 for x in numbers]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n\n    perrin = [3, 0, 2]  # Base cases for Perrin numbers\n    sum_perrin = sum(perrin)  # Initial sum for n = 0, 1, 2\n\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n\n    return sum_perrin"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string: str) -> str:\n    return ''.join(input_string.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    if n <= 0:\n        return 0\n    \n    even_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n            \n    return even_sum"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    # Use a regular expression to check for the presence of 'z' in the word\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # Months with 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(list_of_lists):\n    if not list_of_lists:\n        return []\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in list_of_lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    # Validate inputs\n    assert length >= 0 and width >= 0, \"Length and width must be non-negative.\"\n    \n    # Calculate area\n    area = length * width\n    return area"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(char for char in s if not char.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists if sublist]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for char in s if char.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    result = []\n    \n    def backtrack(start, path):\n        result.append(path)\n        for i in range(start, len(elements)):\n            backtrack(i + 1, path + [elements[i]])\n    \n    backtrack(0, [])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n\n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n\n        max_product = max(max_product, current_max)\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    return {key: value for key, value in input_dict.items() if value not in (None, '', [], {})}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize an array to store the maximum product for each element\n    max_prod = [0] * n\n\n    # Each element is a subsequence of length 1\n    for i in range(n):\n        max_prod[i] = arr[i]\n\n    # Compute the maximum product for increasing subsequences\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n\n    # Return the maximum product found\n    return max(max_prod)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    if not nums:\n        return False\n    \n    min_num = min(nums)\n    max_num = max(nums)\n    \n    return (max_num - min_num) == (len(nums) - 1) and len(set(nums)) == len(nums)"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert tuples in list2 to sets for easier comparison\n    set2 = {tuple(sorted(tup)) for tup in list2}\n    \n    # Find the intersection by checking sorted tuples in list1 against set2\n    intersection = {tuple(sorted(tup)) for tup in list1 if tuple(sorted(tup)) in set2}\n    \n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([char for char in s if not char.islower()])"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string and remove any negative sign\n    str_number = str(abs(number))\n    # Return the first character converted back to an integer\n    return int(str_number[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    even_count = sum(1 for x in arr if x % 2 == 0)\n    odd_count = n - even_count\n    return even_count * odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in s)"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings to access individual digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of per-digit differences\n    total_difference = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n    \n    return total_difference"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Create a set from both tuples to find the unique elements\n    union_set = set(tuple1) | set(tuple2)\n    # Convert the set back to a sorted tuple\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        current_length = len(sublist)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, target):\n    unique_elements = set(lst)  # Step to get unique elements\n    count = 0\n    n = len(unique_elements)\n    \n    if n < 2:\n        return 0  # Not enough unique elements to form pairs\n    \n    # Calculate the number of unordered pairs of unequal elements\n    count = n * (n - 1) // 2\n    \n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    from collections import Counter\n    \n    # Count occurrences of each number\n    count = Counter(nums)\n    \n    # Return numbers that appear exactly once\n    return [num for num, freq in count.items() if freq == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (height + radius)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    if not sub_list:  # An empty sublist is always a sublist\n        return True\n    if len(sub_list) > len(main_list):  # A longer sublist cannot be a sublist\n        return False\n    \n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n            \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n    \n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    \n    return interleaved"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    if isinstance(nested_tuple, tuple):\n        return tuple(extract_even(item) for item in nested_tuple if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple) and extract_even(item))\n    return ()"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the base area\n    base_area = base_edge ** 2\n    \n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the lateral area\n    lateral_area = 2 * base_edge * slant_height\n    \n    # Total surface area\n    total_surface_area = base_area + lateral_area\n    \n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n < 0:\n        return 0\n    # Initialize a list to store the Catalan numbers\n    catalan = [0] * (n + 1)\n    # Base case\n    catalan[0] = 1\n    \n    # Fill the catalan array using the recursive formula\n    for i in range(1, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    if n <= 0 or not items:\n        return []\n    \n    # Sort the items based on price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    if not arr:\n        return arr\n    n = n % len(arr)  # Handle cases where n is greater than the length of the list\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(numbers):\n    if not numbers:\n        return 0  # Handle the edge case of an empty list\n    return max(numbers) - min(numbers)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    # Ensure the range is valid\n    if start > end:\n        return squares\n    \n    # Calculate the lower and upper bounds for perfect squares\n    lower_bound = int(start**0.5)\n    upper_bound = int(end**0.5)\n    \n    # Collect perfect squares in the specified range\n    for i in range(lower_bound, upper_bound + 1):\n        square = i * i\n        if start <= square <= end:\n            squares.append(square)\n    \n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Return the rectangular coordinates as a tuple\n    return (x, y), (x - 2, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    parts = ip_address.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    return '.'.join(cleaned_parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for number in numbers:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return None  # or raise an exception if preferred"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1: str, s2: str) -> int:\n    if len(s1) != len(s2):\n        return None\n    \n    # Count the number of 1's and 0's in both strings\n    count1 = [0, 0]  # count1[0] for '0's, count1[1] for '1's\n    count2 = [0, 0]  # count2[0] for '0's, count2[1] for '1's\n    \n    for char in s1:\n        count1[int(char)] += 1\n    for char in s2:\n        count2[int(char)] += 1\n    \n    # If the counts of '1's and '0's do not match, return None\n    if count1 != count2:\n        return None\n    \n    # Identify mismatched positions\n    mismatches = []\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            mismatches.append((s1[i], s2[i]))\n    \n    # Count the number of swaps needed\n    ones_to_swap = sum(1 for x, y in mismatches if x == '1' and y == '0')\n    zeros_to_swap = sum(1 for x, y in mismatches if x == '0' and y == '1')\n    \n    # The number of swaps needed is the maximum of the two counts\n    return ones_to_swap  # or zeros_to_swap, they should be equal"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n\n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n\n    low, high = 0, len1\n\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = k - partition1\n\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == len1 else arr1[partition1]\n\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == len2 else arr2[partition2]\n\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n\n    raise ValueError(\"k is out of bounds\")"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(num)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    if not isinstance(number, (int, float)):\n        raise ValueError(\"Input must be an integer or a float.\")\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic_numbers = []\n    is_ludic = [True] * (n + 1)\n    is_ludic[0] = is_ludic[1] = False  # 0 and 1 are not considered ludic numbers\n\n    for i in range(2, n + 1):\n        if is_ludic[i]:\n            ludic_numbers.append(i)\n            for j in range(i * 2, n + 1, i):\n                is_ludic[j] = False\n\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    # Split the string into words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list back into a string\n    return ' '.join(reversed_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(input_string, pattern):\n    match = re.search(pattern, input_string)\n    if match:\n        return match.group(0), match.start(), match.end()\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # Explicitly put the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Validate input\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None  # or raise an exception\n\n    max_value = matrix[0][n]  # Initialize with the first element of the nth column\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]  # Update max_value if a larger value is found\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        avg = sum(tup) / len(tup)  # Calculate the average\n        averages.append(avg)        # Append to the results list\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    # Ensure both tuples are of the same length\n    if len(t1) != len(t2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Perform element-wise modulo\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(a / b)\n    \n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n    \n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    \n    return ''.join(letters) + ''.join(numbers)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    numbers.sort()\n    n = len(numbers)\n    dp = [1] * n  # Initialize the dp array\n\n    for i in range(n):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:  # Check divisibility\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)  # Return the size of the largest subset"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    if n <= 0:\n        return None\n\n    # Binary search on the smaller array\n    if arr1[n - 1] < arr2[0]:\n        return (arr1[n - 1] + arr2[0]) / 2.0\n    if arr2[n - 1] < arr1[0]:\n        return (arr2[n - 1] + arr1[0]) / 2.0\n\n    low, high = 0, n\n\n    while low <= high:\n        partition1 = (low + high) // 2\n        partition2 = (n + n) // 2 - partition1\n\n        maxLeft1 = float('-inf') if partition1 == 0 else arr1[partition1 - 1]\n        minRight1 = float('inf') if partition1 == n else arr1[partition1]\n\n        maxLeft2 = float('-inf') if partition2 == 0 else arr2[partition2 - 1]\n        minRight2 = float('inf') if partition2 == n else arr2[partition2]\n\n        if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:\n            if (n + n) % 2 == 0:\n                return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2.0\n            else:\n                return max(maxLeft1, maxLeft2)\n        elif maxLeft1 > minRight2:\n            high = partition1 - 1\n        else:\n            low = partition1 + 1\n\n    raise ValueError(\"Input arrays are not sorted or of the same size.\")"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [x ** n for x in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(input_string):\n    \"\"\"\n    Convert the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return input_string.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    \n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if not (dx == 0 and dy == 0):  # Exclude the original coordinate\n                adjacent_coords.append([x + dx, y + dy])\n    \n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    return ''.join('_' if char.isspace() else ' ' if char == '_' else char for char in input_string)"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero_count = 0\n    \n    # Move non-zero elements to the front\n    for num in lst:\n        if num != 0:\n            lst[non_zero_count] = num\n            non_zero_count += 1\n    \n    # Fill the remaining elements with zeroes\n    for i in range(non_zero_count, len(lst)):\n        lst[i] = 0\n    \n    return lst"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    \n    # Iterate through each pair of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    \n    return total_xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount1, amount2):\n    return amount1 == amount2"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    if velocity < 0 or temperature > 50 or temperature < -50:\n        raise ValueError(\"Invalid input values.\")\n    \n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return math.ceil(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name and name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    stack = []\n    result = []\n    \n    for char in s:\n        if char == '(':\n            stack.append(len(result))\n        elif char == ')':\n            if stack:\n                start = stack.pop()\n                result = result[:start]\n        else:\n            if not stack:\n                result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return (n * (7 * n - 5)) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    if len(s) < 3:\n        return False\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr) or k < 1:\n        return arr\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dct):\n    return tup + (dct,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[(0, 0)] * n for _ in range(n)]  # (total_cost, count)\n\n    dp[0][0] = (matrix[0][0], 1)\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            \n            max_cost, count = 0, 0\n            \n            if i > 0:\n                max_cost, count = dp[i-1][j]\n            if j > 0:\n                if dp[i][j-1][0] > max_cost:\n                    max_cost, count = dp[i][j-1]\n            \n            dp[i][j] = (max_cost + matrix[i][j], count + 1)\n\n    total_cost, count = dp[n-1][n-1]\n    return total_cost / count"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the specified power\n    result = base ** power\n    \n    # Convert the result to a string to access individual digits\n    result_str = str(result)\n    \n    # Sum the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list_a, list_b):\n    # Ensure both lists are of the same length\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    # Use a list comprehension to sum the elements of both lists element-wise\n    return [a + b for a, b in zip(list_a, list_b)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    return input_string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to its binary representation\n    binary_str = bin(n)[2:]  # Skip the '0b' prefix\n    length = len(binary_str)\n\n    # If the number has less than 3 bits, return it as is\n    if length < 3:\n        return n\n\n    # Toggle the middle bits\n    middle_bits = ''\n    for i in range(1, length - 1):\n        middle_bits += '1' if binary_str[i] == '0' else '0'\n\n    # Construct the new binary string\n    new_binary_str = binary_str[0] + middle_bits + binary_str[-1]\n\n    # Convert the new binary string back to an integer\n    return int(new_binary_str, 2)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(sorted_list, value):\n    low, high = 0, len(sorted_list)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if sorted_list[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    k = 1\n    while True:\n        triangular_number = k * (k + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return k\n        k += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple must have an even number of elements.\")\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    if len(s) == 0:\n        return True  # Consider empty string as having all same characters\n    \n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(2) * a**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    if not lst:\n        return lst\n    n = n % len(lst)  # Handle cases where n is greater than the length of the list\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    return any(element is None for element in input_tuple)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    results = []\n    for num in range(startnum, endnum + 1):\n        digits = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in digits):\n            results.append(num)\n    return results"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for char in s:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_strings):\n    return sorted(map(int, num_strings))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    # Check if the input is a list and a tuple\n    if isinstance(lst, list) and isinstance(tpl, tuple):\n        # Extend the list with the elements of the tuple\n        lst.extend(tpl)\n        return lst\n    else:\n        raise TypeError(\"First argument must be a list and second must be a tuple.\")"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    for i in range(n // 2):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize an array to store Jacobsthal numbers\n    jacobsthal = [0] * (n + 1)\n    jacobsthal[0] = 0\n    jacobsthal[1] = 1\n    \n    for i in range(2, n + 1):\n        jacobsthal[i] = jacobsthal[i - 2] + 2 * jacobsthal[i - 1]\n    \n    return jacobsthal[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of the tuple (the numeric value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k records from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    first = second = float('inf')\n    \n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    \n    return second if second != float('inf') else None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    reverse_count = 0\n    seen = {}\n\n    for string in string_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            reverse_count += seen[reversed_string]\n        \n        if string in seen:\n            seen[string] += 1\n        else:\n            seen[string] = 1\n\n    return reverse_count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_key = tuple(sublist)\n        if tuple_key in count_dict:\n            count_dict[tuple_key] += 1\n        else:\n            count_dict[tuple_key] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^[+-]?(\\d+(\\.\\d{2})?|\\.\\d{2})$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    if not lst:\n        return False\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month < 1 or month > 12:\n        raise ValueError(\"Month must be between 1 and 12.\")\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_numbers = []\n    num = 1\n    \n    while len(polite_numbers) < n:\n        # A number is polite if it is not a power of 2\n        if (num & (num - 1)) != 0:\n            polite_numbers.append(num)\n        num += 1\n    \n    return polite_numbers[n - 1]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_count = {}\n    \n    for number in numbers:\n        complement = target_sum - number\n        if complement in num_count:\n            count += num_count[complement]\n        \n        if number in num_count:\n            num_count[number] += 1\n        else:\n            num_count[number] = 1\n            \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2] + [item for item in list2 if item not in list1]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_number = 2 * i + 1  # Generate the i-th odd number\n        total_sum += odd_number ** 4  # Add the fourth power of the odd number\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    parentheses = {')': '(', '}': '{', ']': '['}\n\n    for char in expression:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or stack.pop() != parentheses[char]:\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(input_string, k):\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Filter out words of length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the remaining words back into a string\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    # Validate inputs\n    if not main_string or not substring:\n        return None\n    \n    # Initialize variables to track position\n    for i in range(len(main_string) - len(substring) + 1):\n        if main_string[i:i + len(substring)] == substring:\n            return (substring, i, i + len(substring) - 1)\n    \n    return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    element_count = {}\n    \n    # Count occurrences of each element\n    for num in lst:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Sum non-repeated elements\n    return sum(num for num, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed = []\n    current_sublist = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed.append(current_sublist)\n            current_sublist = [item]\n    \n    packed.append(current_sublist)\n    return packed"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for (a, b) in combinations(tuple_list, 2):\n        sum_tuple = tuple(sum(x) for x in zip(a, b))\n        result.append(sum_tuple)\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:  # Count the complementary divisor only if it's different\n                count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        # Calculate the number of odd-length subarrays that include arr[i]\n        left_count = i + 1\n        right_count = n - i\n        total_count = left_count * right_count\n        \n        # Count how many of those are odd-length\n        odd_count = (total_count + 1) // 2\n        \n        # Add the contribution of arr[i] to the total sum\n        total_sum += arr[i] * odd_count\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n\n    # Hue calculation\n    if delta == 0:\n        h = 0\n    elif max_c == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_c == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:  # max_c == b\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    # Saturation calculation\n    if max_c == 0:\n        s = 0\n    else:\n        s = (delta / max_c) * 100\n\n    # Value calculation\n    v = max_c * 100\n\n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for number in numbers:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None  # or raise an exception if preferred"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses and split the string by commas\n    elements = tuple_str.strip(\"()\").split(\",\")\n    # Convert each element to an integer and return as a tuple\n    return tuple(int(element.strip()) for element in elements)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_list, value):\n    left, right = 0, len(sorted_list)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if sorted_list[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    # Initialize a flag to track if all even indices are even\n    all_even = True\n    \n    # Iterate through the list with an index\n    for index in range(0, len(lst), 2):  # Step by 2 to get even indices\n        if lst[index] % 2 != 0:  # Check if the number is odd\n            all_even = False\n            break  # No need to check further if one is found\n    \n    return all_even"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    last_position = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            last_position = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return last_position"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(input_dict):\n    return sum(input_dict.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for number in range(l, r + 1):\n        if number % 2 != 0:\n            total_sum += number\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(array):\n    if not isinstance(array, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, (int, float)) for x in array):\n        raise ValueError(\"All elements in the array must be numeric.\")\n    \n    total = 0\n    for number in array:\n        total += number\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string: str) -> str:\n    return ''.join(input_string.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    x = int(n**0.5)\n    return x * x == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n            \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s: str) -> int:\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:  # Check if the number is odd\n            return number  # Return the first odd number found\n    return None  # Return None if no odd number is found"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    # Check if k is in the tuple\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        return False\n    \n    # Compare each element\n    for a, b in zip(tuple1, tuple2):\n        if not (b < a):  # Check if the second element is smaller than the first\n            return False\n            \n    return True"}
