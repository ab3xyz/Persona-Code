{"code": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_ludic(n):\n    def is_ludic(num):\n        primes = []\n        for i in range(2, num + 1):\n            is_prime = True\n            for p in primes:\n                if p * p > i:\n                    break\n                if i % p == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n        \n        # Check if num can be expressed as the sum of distinct primes\n        def can_form_sum(target, primes):\n            if target == 0:\n                return True\n            if target < 0 or not primes:\n                return False\n            return can_form_sum(target - primes[0], primes[1:]) or can_form_sum(target, primes[1:])\n        \n        return can_form_sum(num, primes)\n\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_ludic(i):\n            ludic_numbers.append(i)\n    \n    return ludic_numbers\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 31, in <module>\\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\\nAssertionError\\n')", "success": 0}
{"code": "def reverse_words(s):\n    # Step 1: Split the string into words (sequential structure)\n    words = s.split(' ')\n    \n    # Step 2: Initialize an empty list to hold the reversed words (sequential structure)\n    reversed_words = []\n    \n    # Step 3: Loop through the words in reverse order (loop structure)\n    for i in range(len(words) - 1, -1, -1):\n        reversed_words.append(words[i])  # Add each word to the reversed list\n    \n    # Step 4: Join the reversed list of words back into a string (sequential structure)\n    return ' '.join(reversed_words)\n\n# Assertions for testing\nassert reverse_words(\"python program\") == \"program python\"\nassert reverse_words(\"java language\") == \"language java\"\nassert reverse_words(\"indian man\") == \"man indian\"\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def prime_num(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef radian_degree(degree):\n    if not isinstance(degree, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n    \n    radians = degree * (math.pi / 180)\n    return radians\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Bell(0, 0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_kth_element(list1, L):\n    index = L - 1  # Convert to zero-based index\n    if 0 <= index < len(list1):\n        return [list1[i] for i in range(len(list1)) if i != index]\n    return list1\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_of_nth(test_list, N):\n    # Step 1: Initialize a variable to hold the maximum value\n    max_value = float('-inf')  # Start with the smallest possible value\n\n    # Step 2: Loop through each row in the matrix\n    for row in test_list:\n        # Step 3: Check if the Nth column index is valid\n        if N < len(row):\n            # Step 4: Compare the current value in the Nth column with max_value\n            if row[N] > max_value:\n                max_value = row[N]  # Update max_value if current is greater\n\n    # Step 5: Return the maximum value found\n    return max_value\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        if len(sublist) == 2:\n            first_elements.append(sublist[0])\n            second_elements.append(sublist[1])\n        elif len(sublist) > 2:\n            for i in range(len(sublist)):\n                if i % 2 == 0:\n                    first_elements.append(sublist[i])\n                else:\n                    second_elements.append(sublist[i])\n        else:\n            raise ValueError(\"Each sublist must contain at least two elements.\")\n    \n    return [first_elements, second_elements]\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 21, in <module>\\n    assert merge([[\\'x\\', \\'y\\',\\'z\\' ], [\\'a\\', \\'b\\',\\'c\\'], [\\'m\\', \\'n\\',\\'o\\']]) == [[\\'x\\', \\'a\\', \\'m\\'], [\\'y\\', \\'b\\', \\'n\\'],[\\'z\\', \\'c\\',\\'o\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def cummulative_sum(test_list):\n    # Initialize a variable to hold the cumulative sum\n    total_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for value in tup:\n            # Add the value to the total sum\n            total_sum += value\n            \n    # Return the final cumulative sum\n    return total_sum\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def average_tuple(nums):\n    # Step 1: Initialize a list to hold the sums of each index\n    sums = [0] * len(nums[0])\n    \n    # Step 2: Loop through each tuple in the input\n    for num_tuple in nums:\n        # Step 3: Loop through each number in the current tuple\n        for i in range(len(num_tuple)):\n            sums[i] += num_tuple[i]  # Add the number to the corresponding sum\n    \n    # Step 4: Calculate the average for each index\n    averages = [s / len(nums) for s in sums]\n    \n    return averages\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_modulo(test_tup1, test_tup2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through both tuples using a loop\n    for a, b in zip(test_tup1, test_tup2):\n        # Calculate the modulo of each pair of elements\n        mod_result = a % b\n        \n        # Append the result to the result list\n        result.append(mod_result)\n    \n    # Convert the result list back to a tuple before returning\n    return tuple(result)\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_Jumps(steps, d):\n    x, y = steps\n    total_distance = 0\n    \n    if d <= 0:\n        return 0\n    \n    jumps = 0\n    while total_distance < d:\n        jumps += 1\n        total_distance += (x + y)  # Each jump covers both x and y distances\n    \n    # Calculate the number of jumps needed to reach exactly d\n    if total_distance > d:\n        excess_distance = total_distance - d\n        if excess_distance <= x or excess_distance <= y:\n            return jumps - 0.5  # If we can adjust the last jump\n        else:\n            return jumps\n    \n    return jumps\nassert min_Jumps((3,4),11)==3.5\nassert min_Jumps((3,4),0)==0\nassert min_Jumps((11,14),11)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 22, in <module>\\n    assert min_Jumps((3,4),11)==3.5\\nAssertionError\\n')", "success": 0}
{"code": "def div_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    result = []\n    \n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Division by zero is not allowed.\")\n        result.append(nums1[i] / nums2[i])\n    \n    return result\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def move_num(test_str):\n    letters = ''\n    numbers = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n            \n    return letters + numbers\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def largest_subset(a):\n    # Step 1: Sort the array to facilitate the divisibility check\n    a.sort()\n    \n    # Step 2: Initialize a list to store the size of the largest subset ending at each element\n    n = len(a)\n    dp = [1] * n  # Each number can at least form a subset of size 1\n\n    # Step 3: Loop through each pair of numbers to check divisibility\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:  # If a[i] is divisible by a[j]\n                dp[i] = max(dp[i], dp[j] + 1)  # Update the size of the subset\n\n    # Step 4: Return the maximum size found in the dp array\n    return max(dp)\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_median(arr1, arr2, n):\n    # Step 1: Combine the two sorted arrays\n    combined = arr1 + arr2\n    combined.sort()  # Sequential structure to sort the combined array\n\n    # Step 2: Calculate the median\n    if n % 2 == 0:  # Branch structure to check if n is even\n        median = (combined[n - 1] + combined[n]) / 2.0  # Average of the two middle elements\n    else:\n        median = combined[n // 2]  # Middle element for odd n\n\n    return median  # Return the calculated median\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\\nAssertionError\\n')", "success": 0}
{"code": "def nth_nums(nums, n):\n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Calculate the n-th power of the current number\n        power = num ** n\n        # Append the result to the results list\n        results.append(power)\n    \n    # Return the list of results\n    return results\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_upper(string):\n    if string == \"\":\n        return \"\"\n    upper_string = \"\"\n    for char in string:\n        upper_string += char.upper()\n    return upper_string\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_List(newList):\n    if len(newList) <= 1:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def triangle_area(r):\n    # Step 1: Check if the radius is valid (non-negative)\n    if r < 0:\n        return None  # Invalid radius, return None\n    \n    # Step 2: Calculate the area of the largest triangle inscribed in a semicircle\n    # The area of the triangle is given by the formula: (1/2) * base * height\n    # For a semicircle with radius r, the base is the diameter (2 * r)\n    # The height is equal to the radius (r)\n    \n    area = (1/2) * (2 * r) * r  # Area calculation\n    \n    # Step 3: Return the calculated area\n    return area\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    expected = start\n    for i in range(end):\n        if i < len(array) and array[i] == expected:\n            expected += 1\n        elif i < len(array) and array[i] > expected:\n            break\n    \n    return expected\nassert find_First_Missing([0,1,2,3]) == 4\nassert find_First_Missing([0,1,2,6,9]) == 3\nassert find_First_Missing([2,3,5,8,9]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_spaces(string):\n    result = []\n    for char in string:\n        if char == ' ':\n            result.append('%20')\n        else:\n            result.append(char)\n    return ''.join(result)\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(lst):\n    # Initialize an empty list to hold even numbers\n    even_numbers = []\n    \n    # Loop through each number in the input list\n    for number in lst:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If it is even, append it to the even_numbers list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_coordinates(ele, sub=[]):\n    # Step 1: Define the possible movements (adjacent coordinates)\n    movements = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)]\n    \n    # Step 2: Loop through each movement to calculate adjacent coordinates\n    for move in movements:\n        # Calculate new coordinates\n        new_x = ele[0] + move[0]\n        new_y = ele[1] + move[1]\n        \n        # Step 3: Branch to check if the new coordinates are valid\n        if (new_x, new_y) not in sub:\n            sub.append([new_x, new_y])\n    \n    return sub\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def replace_spaces(text):\n    modified_text = \"\"\n    \n    for char in text:\n        if char == ' ':\n            modified_text += '_'\n        elif char == '_':\n            modified_text += ' '\n        else:\n            modified_text += char\n            \n    return modified_text\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def move_zero(num_list):\n    if not num_list:\n        return []\n    \n    non_zero_list = []\n    zero_count = 0\n    \n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_count += 1\n            \n    return non_zero_list + [0] * zero_count\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pair_xor_Sum(arr, n):\n    # Initialize a variable to hold the sum of XORs\n    total_xor_sum = 0\n    \n    # Loop through each pair of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate the XOR of the current pair\n            xor_value = arr[i] ^ arr[j]\n            # Add the XOR value to the total sum\n            total_xor_sum += xor_value\n            \n    return total_xor_sum\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def heap_sort(iterable):\n    # Step 1: Build a max heap from the iterable\n    def heapify(arr, n, i):\n        largest = i  # Initialize largest as root\n        left = 2 * i + 1  # left = 2*i + 1\n        right = 2 * i + 2  # right = 2*i + 2\n\n        # Branch: Check if left child exists and is greater than root\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        # Branch: Check if right child exists and is greater than largest so far\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        # If largest is not root, swap and continue heapifying\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]  # Swap\n            heapify(arr, n, largest)\n\n    n = len(iterable)\n\n    # Build a maxheap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    # Step 2: One by one extract elements from heap\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        iterable[i], iterable[0] = iterable[0], iterable[i]  # Swap\n        # Call heapify on the reduced heap\n        heapify(iterable, i, 0)\n\n    return iterable\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Function to check whether there is no profit and no loss.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def wind_chill(v, t):\n    if v < 0 or t < -58 or t > 41:\n        return \"Invalid input\"\n    \n    wci = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    return round(wci)\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert wind_chill(120,35)==40\\nAssertionError\\n')", "success": 0}
{"code": "def sample_nam(sample_names):\n    total_length = 0\n    \n    if not sample_names:  # Branch structure to check for empty list\n        return total_length\n    \n    for name in sample_names:  # Loop structure to iterate through names\n        total_length += len(name)  # Add the length of each name to total_length\n    \n    return total_length  # Return the total length\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert sample_nam([\\'sally\\', \\'Dylan\\', \\'rebecca\\', \\'Diana\\', \\'Joanne\\', \\'keith\\'])==16\\nAssertionError\\n')", "success": 0}
{"code": "def remove_parenthesis(items):\n    if items:\n        result = items[0]\n        open_index = result.find('(')\n        if open_index != -1:\n            result = result[:open_index].strip()\n        return result\n    return \"\"\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_nonagonal(n):\n    if n <= 0:\n        return \"Input must be a positive integer.\"\n    return n * (7 * n - 5) // 2\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_wordz_middle(text):\n    if len(text) < 3:\n        return False\n    \n    text = text.strip()\n    \n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    \n    for char in text[1:-1]:\n        if char == 'z':\n            return True\n            \n    return False\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        k = len(input)\n    \n    reversed_part = []\n    \n    for i in range(k - 1, -1, -1):\n        reversed_part.append(input[i])\n    \n    return reversed_part + input[k:]\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_dict_to_tuple(test_tup, test_dict):\n    # Step 1: Create a new tuple that includes the original tuple\n    new_tup = test_tup\n    \n    # Step 2: Add the dictionary to the new tuple\n    new_tup = new_tup + (test_dict,)\n    \n    # Step 3: Return the new tuple\n    return new_tup\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maxAverageOfPath(cost):\n    rows = len(cost)\n    cols = len(cost[0])\n    \n    # Create a 2D array to store the maximum average cost to reach each cell\n    dp = [[0] * cols for _ in range(rows)]\n    \n    # Initialize the starting point\n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row (only can come from the left)\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    \n    # Fill the first column (only can come from above)\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    \n    # Fill the rest of the dp array\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    # The maximum total cost to reach the bottom-right corner\n    max_cost = dp[rows - 1][cols - 1]\n    \n    # Calculate the number of steps taken to reach the bottom-right corner\n    steps = (rows - 1) + (cols - 1)\n    \n    # Calculate the maximum average cost\n    max_average = max_cost / (steps + 1)\n    \n    return max_average\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_data(students, h, w):\n    # Initialize an empty dictionary to store the filtered results\n    filtered_students = {}\n    \n    # Loop through each student in the provided dictionary\n    for name, (height, weight) in students.items():\n        # Check if the student's height and weight meet the criteria\n        if height >= h and weight >= w:\n            # If they do, add them to the filtered results\n            filtered_students[name] = (height, weight)\n    \n    # Return the dictionary of filtered students\n    return filtered_students\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_same_pair(nums1, nums2):\n    # Initialize a counter for matching indices\n    count = 0\n    \n    # Loop through the indices of the lists\n    for i in range(min(len(nums1), len(nums2))):\n        # Check if the elements at the current index are the same\n        if nums1[i] == nums2[i]:\n            # If they are the same, increment the counter\n            count += 1\n            \n    # Return the total count of matching indices\n    return count\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power_base_sum(base, power):\n    # Step 1: Calculate the power\n    result = base ** power  # Sequential structure\n\n    # Step 2: Convert the result to a string to iterate over each digit\n    result_str = str(result)  # Sequential structure\n\n    # Step 3: Initialize a variable to hold the sum of the digits\n    digit_sum = 0  # Sequential structure\n\n    # Step 4: Loop through each character in the string representation of the result\n    for char in result_str:  # Loop structure\n        digit_sum += int(char)  # Convert character to integer and add to the sum\n\n    # Step 5: Return the final sum\n    return digit_sum  # Sequential structure\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef extract_quotation(text1):\n    extracted_values = []\n    \n    if '\"' in text1:\n        pattern = r'\"(.*?)\"'\n        matches = re.findall(pattern, text1)\n        \n        for match in matches:\n            extracted_values.append(match)\n    \n    return extracted_values\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_elements(test_tup):\n    # Ensure the input is a tuple and has at least two elements\n    if not isinstance(test_tup, tuple) or len(test_tup) < 2:\n        return ()\n    \n    # Initialize a list to store the products\n    result = []\n    \n    # Loop through the tuple to multiply adjacent elements\n    for i in range(len(test_tup) - 1):\n        product = test_tup[i] * test_tup[i + 1]\n        result.append(product)\n    \n    # Return the result as a tuple\n    return tuple(result)\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of equal length and returns a new list\n    where each element is the sum of the corresponding elements from the input lists.\n    \n    Parameters:\n    lst1 (list of int/float): The first list of numbers.\n    lst2 (list of int/float): The second list of numbers.\n    \n    Returns:\n    list of int/float: A new list containing the sums of the corresponding elements.\n    \"\"\"\n    # Ensure both lists are of the same length\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Loop through both lists and sum corresponding elements\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    \n    return result\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = [nums[0]]\n    \n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    \n    return result\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    \n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_specialchar(text):\n    # Define the characters to be replaced\n    characters_to_replace = [' ', ',', '.']\n    \n    # Iterate through each character in the list\n    for char in characters_to_replace:\n        # Replace each character with a colon\n        text = text.replace(char, ':')\n    \n    return text\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_first_occurrence(A, x):\n    if not A:\n        return -1\n    \n    for index in range(len(A)):\n        if A[index] == x:\n            return index\n            \n    return -1\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n            \n    return total_sum\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def set_middle_bits(n):\n    # Convert n to binary and get its length\n    binary_str = bin(n)[2:]  # Get binary representation without '0b'\n    length = len(binary_str)\n    \n    # If there are no middle bits, return n\n    if length <= 2:\n        return n\n    \n    # Create a list to hold the new bits\n    new_bits = list(binary_str)\n    \n    # Toggle the middle bits\n    for i in range(1, length - 1):\n        new_bits[i] = '1' if new_bits[i] == '0' else '0'\n    \n    # Convert the list back to a string and then to an integer\n    new_binary_str = ''.join(new_bits)\n    return int(new_binary_str, 2)\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 20, in <module>\\n    assert toggle_middle_bits(9) == 15\\nNameError: name \\'toggle_middle_bits\\' is not defined. Did you mean: \\'set_middle_bits\\'?\\n')", "success": 0}
{"code": "def left_insertion(a, x):\n    low, high = 0, len(a)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 30, in <module>\\n    assert rearrange_bigger(10)==False\\nAssertionError\\n')", "success": 0}
{"code": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU]'  # Regex pattern to match strings starting with a vowel\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return geometric_sum(n - 1) + (1 / (2 ** n))\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert geometric_sum(7) == 1.9921875\\nAssertionError\\n')", "success": 0}
{"code": "def find_Index(n):\n    index = 1\n    triangular_number = 1\n    \n    while True:\n        # Calculate the triangular number\n        triangular_number = index * (index + 1) // 2\n        \n        # Check if the number of digits is equal to n\n        if len(str(triangular_number)) == n:\n            return index\n        \n        # Increment the index for the next triangular number\n        index += 1\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        result[test_tup[i]] = test_tup[i + 1]\n    return result\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Characters_Same(s):\n    \"\"\"\n    Check if all characters in the string are the same.\n\n    :param s: Input string\n    :return: True if all characters are the same, False otherwise\n    \"\"\"\n    if not s:\n        return True  # An empty string is considered to have all same characters\n    \n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef area_tetrahedron(side):\n    if side <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    area = (math.sqrt(2) / 12) * (side ** 2) * math.sqrt(3)\n    return area\nassert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert area_tetrahedron(3)==15.588457268119894\\nAssertionError\\n')", "success": 0}
{"code": "def rotate_right(lst, m):\n    # Step 1: Calculate the effective number of rotations\n    n = len(lst)\n    m = m % n  # Handle cases where m is greater than n\n\n    # Step 2: Create a new list to hold the rotated values\n    rotated_list = [0] * n\n\n    # Step 3: Fill the new list with the rotated values\n    for i in range(n):\n        new_position = (i + m) % n\n        rotated_list[new_position] = lst[i]\n\n    return rotated_list\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any None value.\n\n    Parameters:\n    test_tup (tuple): The tuple to check.\n\n    Returns:\n    bool: True if there is at least one None value, False otherwise.\n    \"\"\"\n    if not isinstance(test_tup, tuple):\n        return False\n    \n    has_none = False\n    for value in test_tup:\n        if value is None:\n            has_none = True\n            break\n            \n    return has_none\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisible_by_digits(startnum, endnum):\n    results = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        divisible = True\n        for digit in str_num:\n            if digit != '0':\n                if num % int(digit) != 0:\n                    divisible = False\n                    break\n        if divisible:\n            results.append(num)\n    return results\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (math.pi * r ** 2) * (a / 360)\nassert sector_area(4,45)==6.283185307179586\nassert sector_area(9,45)==31.808625617596654\nassert sector_area(9,361)==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lcs_of_three(X, Y, Z):\n    # Lengths of the input strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D array to store lengths of longest common subsequence\n    L = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # Build the LCS array in a bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                # If characters match, increment the value from the previous indices\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    # If they don't match, take the maximum from the previous indices\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # The length of the longest common subsequence will be in L[m][n][o]\n    return L[m][n][o]\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def capital_words_spaces(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper() and i != 0:\n            result += \" \"\n        result += str1[i]\n    return result\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_numeric_strings(nums_str):\n    # Step 1: Convert the list of numeric strings to a list of integers\n    nums_int = []\n    for num in nums_str:  # Loop structure\n        nums_int.append(int(num))  # Sequential structure\n\n    # Step 2: Sort the list of integers\n    nums_int.sort()  # Sequential structure\n\n    # Step 3: Return the sorted list\n    return nums_int  # Sequential structure\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_tuple(test_list, test_tup):\n    # Check if the list is empty\n    if not test_list:\n        return list(test_tup)\n    \n    # Combine the list and tuple\n    for item in test_tup:\n        test_list.append(item)\n    \n    return test_list\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='243\\n', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\\nAssertionError\\n')", "success": 0}
{"code": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    \n    # Check if the current index is a valid index\n    if i >= n:\n        return True\n    \n    # Calculate the indices of the left and right children\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if the left child is valid and if it satisfies the min heap property\n    if left < n and arr[i] > arr[left]:\n        return False\n    \n    # Check if the right child is valid and if it satisfies the min heap property\n    if right < n and arr[i] > arr[right]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    jacobsthal = [0, 1]\n    \n    for i in range(2, n + 1):\n        next_num = jacobsthal[i - 1] + 2 * jacobsthal[i - 2]\n        jacobsthal.append(next_num)\n    \n    return jacobsthal[n]\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_k(test_list, K):\n    # Step 1: Sort the list based on the second element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Step 2: Select the first K elements from the sorted list\n    min_k_records = []\n    for i in range(K):\n        # Step 3: Append the selected records to the result list\n        min_k_records.append(sorted_list[i])\n    \n    return min_k_records\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_index_list(l1, l2, l3):\n    result = []  # Sequential structure: Initialize an empty list to store results\n    for i in range(min(len(l1), len(l2), len(l3))):  # Loop structure: Iterate through the indices of the lists\n        if l1[i] == l2[i] == l3[i]:  # Branch structure: Check if elements at the same index are equal\n            result.append(l1[i])  # If they are equal, append the element to the result list\n    return result  # Return the final list of common elements\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def second_smallest(numbers):\n    # Step 1: Remove duplicates and sort the list\n    unique_numbers = list(set(numbers))\n    \n    # Step 2: Check if there are at least two unique numbers\n    if len(unique_numbers) < 2:\n        return None\n    \n    # Step 3: Sort the unique numbers\n    unique_numbers.sort()\n    \n    # Step 4: Return the second smallest number\n    return unique_numbers[1]\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return False\nassert text_match_zero_one(\"ac\")==False\nassert text_match_zero_one(\"dc\")==False\nassert text_match_zero_one(\"abbbba\")==True\nassert text_match_zero_one(\"dsabbbba\")==True\nassert text_match_zero_one(\"asbbbba\")==False\nassert text_match_zero_one(\"abaaa\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert text_match_zero_one(\"abbbba\")==True\\nAssertionError\\n')", "success": 0}
{"code": "def count_reverse_pairs(test_list):\n    count = 0\n    seen = set()\n    \n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            count += 1\n        seen.add(string)\n    \n    return count\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of each sublist (converted to tuple)\n    sublist_count = defaultdict(int)\n    \n    for item in list1:\n        if isinstance(item, list):\n            # Convert list to tuple and count its occurrences\n            sublist_tuple = tuple(item)\n            sublist_count[sublist_tuple] += 1\n    \n    return dict(sublist_count)\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    pattern = r'^\\d+(\\.\\d{2})?$'\n    return bool(re.match(pattern, num))\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_Element(arr):\n    if not arr:\n        return False\n    first_element = arr[0]\n    for element in arr:\n        if element != first_element:\n            return False\n    return True\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumber_number(monthnum3):\n    months_with_30_days = [4, 6, 9, 11]\n    if monthnum3 in months_with_30_days:\n        return True\n    else:\n        return False\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"At least two elements are required\"\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert find_min_diff((1,5,3,19,18,25),6) == 1\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in find_min_diff\\n    arr.sort()\\nAttributeError: \\'tuple\\' object has no attribute \\'sort\\'\\n')", "success": 0}
{"code": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_polite(n):\n    polite_numbers = []\n    current_number = 1\n    \n    while len(polite_numbers) < n:\n        # Check if current_number is polite\n        if current_number % 2 == 1 or current_number % 2 == 0:\n            # Check if it can be expressed as a sum of distinct powers of 2\n            sum_of_powers = 0\n            for i in range(1, current_number + 1):\n                if (current_number & (1 << (i - 1))) != 0:\n                    sum_of_powers += 2 ** (i - 1)\n            if sum_of_powers == current_number:\n                polite_numbers.append(current_number)\n        \n        current_number += 1\n    \n    return polite_numbers[n - 1]\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert is_polite(7) == 11\\nAssertionError\\n')", "success": 0}
{"code": "def pair_wise(l1):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Loop through the list, stopping one element before the end\n    for i in range(len(l1) - 1):\n        # Create a tuple of the current item and the next item\n        pair = (l1[i], l1[i + 1])\n        # Append the pair to the list of pairs\n        pairs.append(pair)\n    \n    # Return the list of pairs\n    return pairs\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_pairs_count(arr, sum):\n    frequency = {}\n    count = 0\n    \n    for number in arr:\n        complement = sum - number\n        \n        if complement in frequency:\n            count += frequency[complement]\n        \n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    return count\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Diff(li1, li2):\n    result = []\n    \n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    \n    for item in li2:\n        if item not in li1:\n            result.append(item)\n    \n    return result\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n    \n    Parameters:\n    n (int): The number of first odd natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0  # or raise an error\n\n    sum_fourth_power = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_fourth_power += odd_number ** 4\n        \n    return sum_fourth_power\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_expression(exp):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in bracket_map.values():  # Opening brackets\n            stack.append(char)\n        elif char in bracket_map.keys():  # Closing brackets\n            if stack and stack[-1] == bracket_map[char]:\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) == 0\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    \n    for word in words:\n        if len(word) != K:\n            filtered_words.append(word)\n    \n    return ' '.join(filtered_words)\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def occurance_substring(text, pattern):\n    # Sequential structure: Initialize variables\n    start_index = 0\n    occurrences = []\n\n    # Loop structure: Iterate through the text to find occurrences of the pattern\n    while start_index < len(text):\n        start_index = text.find(pattern, start_index)\n        \n        # Branch structure: Check if the pattern was found\n        if start_index == -1:\n            break\n        else:\n            # Store the occurrence and its position\n            occurrences.append((pattern, start_index, start_index + len(pattern)))\n            start_index += 1  # Move to the next character for further searching\n\n    # Return the first occurrence if found, otherwise return None\n    return occurrences[0] if occurrences else None\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_position(nums):\n    result = True\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            result = False\n            break\n    return result\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_vowels(test_str):\n    # Initialize a counter for characters with vowel neighbors\n    count = 0\n    \n    # Define the set of vowels for easy checking\n    vowels = set('aeiou')\n\n    # Loop through the string, checking each character\n    for i in range(len(test_str)):\n        # Check if the current character is a letter\n        if test_str[i].isalpha():\n            # Check if the character has a vowel neighbor\n            if (i > 0 and test_str[i-1] in vowels) or (i < len(test_str) - 1 and test_str[i+1] in vowels):\n                count += 1\n\n    return count\nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert count_vowels(\\'bestinstareels\\') == 7\\nAssertionError\\n')", "success": 0}
{"code": "def find_sum(arr):\n    seen = set()\n    total_sum = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            total_sum += num\n        else:\n            total_sum -= num\n    return total_sum\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert find_sum([1,2,3,1,1,4,5,6]) == 21\\nAssertionError\\n')", "success": 0}
{"code": "def pack_consecutive_duplicates(list1):\n    # Initialize an empty list to hold the packed sublists\n    packed_list = []\n    \n    # Check if the input list is empty\n    if not list1:\n        return packed_list\n    \n    # Initialize a temporary list to hold the current group of duplicates\n    current_group = [list1[0]]\n    \n    # Loop through the input list starting from the second element\n    for i in range(1, len(list1)):\n        # Check if the current element is the same as the previous one\n        if list1[i] == list1[i - 1]:\n            # If it is, add it to the current group\n            current_group.append(list1[i])\n        else:\n            # If it is not, append the current group to the packed list\n            packed_list.append(current_group)\n            # Start a new group with the current element\n            current_group = [list1[i]]\n    \n    # Append the last group to the packed list\n    packed_list.append(current_group)\n    \n    return packed_list\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    # Step 1: Create an empty dictionary to store the counts of each unique sublist\n    sublist_count = {}\n    \n    # Step 2: Loop through each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple (to make it hashable)\n        sublist_tuple = tuple(sublist)\n        \n        # Step 3: Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # If it is, increment its count\n            sublist_count[sublist_tuple] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n            \n    # Return the dictionary containing the counts of unique sublists\n    return sublist_count\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_combinations(test_list):\n    result = []\n    \n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            # Branch to avoid adding the same tuple\n            if i != j:\n                # Calculate the sum of the tuples\n                sum_tuple = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n                # Append the result to the list\n                result.append(sum_tuple)\n    \n    # Remove duplicates by converting to a set and back to a list\n    result = list(set(result))\n    \n    # Sort the result for consistency\n    result.sort()\n    \n    return result\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 21, in <module>\\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\\nAssertionError\\n')", "success": 0}
{"code": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n):\n            if (end - start + 1) % 2 == 1:  # Check if the length is odd\n                total_sum += sum(arr[start:end + 1])  # Sum the subarray\n                \n    return total_sum\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    \n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    \n    if mx == mn:\n        h = 0  # achromatic\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    \n    v = mx * 100\n    \n    return (h, s * 100, v)\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for number in list1:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        elif first_odd is None and number % 2 != 0:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_str_int(test_str):\n    # Step 1: Remove the parentheses from the string\n    if test_str.startswith(\"(\") and test_str.endswith(\")\"):\n        test_str = test_str[1:-1]\n    \n    # Step 2: Split the string by commas to get individual string numbers\n    str_numbers = test_str.split(\",\")\n    \n    # Step 3: Convert each string number to an integer\n    int_tuple = tuple(int(num.strip()) for num in str_numbers)\n    \n    return int_tuple\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def right_insertion(a, x):\n    n = len(a)\n    if n == 0:\n        return 0\n    if x > a[-1]:\n        return n\n    for i in range(n):\n        if x <= a[i]:\n            return i\n    return n\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_three(text):\n    found = False\n    for i in range(len(text) - 3):\n        if text[i] == 'a' and text[i+1:i+4] == 'bbb':\n            found = True\n            break\n    return found\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def new_tuple(test_list, test_str):\n    if not test_list:\n        return (test_str,)\n    result = tuple(test_list)\n    return result + (test_str,)\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_position(nums):\n    result = True\n    for i in range(len(nums)):\n        if i % 2 == 0:  # Check if the index is even\n            if nums[i] % 2 != 0:  # Check if the number at that index is odd\n                result = False\n                break\n    return result\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_nested(test_tup):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each element in the input tuple\n    for item in test_tup:\n        # Check if the item is not a tuple\n        if not isinstance(item, tuple):\n            # If it's not a tuple, append it to the result\n            result.append(item)\n    \n    # Convert the result list back to a tuple and return it\n    return tuple(result)\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Continue searching to the right\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,3,2,3,6,8,9],3) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_starta_endb(text):\n    if text and text[0] == 'a' and text[-1] == 'b':\n        for char in text[1:-1]:\n            if char != 'b':\n                continue\n            return False\n        return True\n    return False\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert text_starta_endb(\"aabbbb\")\\nAssertionError\\n')", "success": 0}
{"code": "def return_sum(dict):\n    # Initialize a variable to hold the sum\n    total = 0\n    \n    # Loop through each value in the dictionary\n    for value in dict.values():\n        # Check if the value is numeric\n        if isinstance(value, (int, float)):\n            # Add the value to the total\n            total += value\n    \n    # Return the final sum\n    return total\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_odd(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l to r (inclusive).\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Check if the range is valid\n    if l > r:\n        return 0\n    \n    # Iterate through the range\n    for number in range(l, r + 1):\n        # Check if the number is odd\n        if number % 2 != 0:\n            total_sum += number\n    \n    return total_sum\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 26, in <module>\\n    assert sum_in_range(2,5) == 8\\nNameError: name \\'sum_in_range\\' is not defined\\n')", "success": 0}
{"code": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def left_rotate(n, d):\n    # Normalize d to ensure it's within the range of 0-31\n    d = d % 32\n    \n    # If d is 0, no rotation is needed\n    if d == 0:\n        return n\n    \n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_all_spaces(text):\n    result = \"\"\n    for char in text:\n        if char != ' ':\n            result += char\n    return result\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count + (1 if x == y == z else 0)\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert test_three_equal(1,1,1) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def count_rotation(arr):\n    # Step 1: Initialize variables\n    n = len(arr)\n    low = 0\n    high = n - 1\n\n    # Step 2: Check if the array is already sorted\n    if arr[low] < arr[high]:\n        return 0\n\n    # Step 3: Use binary search to find the point of rotation\n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if mid is the point of rotation\n        if mid < high and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if mid > low and arr[mid] < arr[mid - 1]:\n            return mid\n        \n        # Decide which half to continue searching\n        if arr[mid] >= arr[low]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return 0\nassert count_rotation([3,2,1]) == 1\nassert count_rotation([4,5,1,2,3]) == 2\nassert count_rotation([7,8,9,1,2,3]) == 3\nassert count_rotation([1,2,3]) == 0\nassert count_rotation([1,3,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 28, in <module>\\n    assert count_rotation([3,2,1]) == 1\\nAssertionError\\n')", "success": 0}
{"code": "def is_perfect_square(n):\n    # Sequential structure: Check for negative numbers\n    if n < 0:\n        return False\n    \n    # Branch structure: Check if n is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # Loop structure: Use binary search to find the square root\n    left, right = 1, n // 2\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        \n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_product_even(arr):\n    for number in arr:\n        if number % 2 == 0:\n            return True\n    return False\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_list(lists):\n    # Initialize a variable to keep track of the maximum sum and the corresponding sublist\n    max_sum = float('-inf')  # Start with the lowest possible value\n    max_list = []  # This will hold the sublist with the maximum sum\n\n    # Loop through each sublist in the input list\n    for sublist in lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n\n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum  # Update the maximum sum\n            max_list = sublist  # Update the sublist with the maximum sum\n\n    # Return the sublist with the maximum sum\n    return max_list\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_odd(nums):\n    # Sequential structure: Iterate through the list of numbers\n    for num in nums:\n        # Branch structure: Check if the current number is odd\n        if num % 2 != 0:\n            # Return the first odd number found\n            return num\n    # If no odd number is found, return None\n    return None\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return False\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_smaller(test_tup1, test_tup2):\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    \n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_matrix(M):\n    row_sums = []\n    \n    for row in M:\n        row_sum = sum(row)\n        row_sums.append((row_sum, row))\n    \n    row_sums.sort(key=lambda x: x[0])\n    \n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Volume(l, b, h):\n    if l <= 0 or b <= 0 or h <= 0:\n        raise ValueError(\"Length, base, and height must be positive numbers.\")\n    \n    area = (1/2) * b * h\n    volume = area * l\n    return volume\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_lowercase_underscore(text):\n    for char in text:\n        if not (char.islower() or char == '_'):\n            return False\n    return True\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_perimeter(a):\n    if a <= 0:\n        return 0  # or raise ValueError(\"Side length must be positive\")\n    perimeter = 4 * a\n    return perimeter\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_dirty_chars(string1, string2):\n    chars_to_remove = set(string2)\n    result = []\n    \n    for char in string1:\n        if char not in chars_to_remove:\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_woodall(x):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    for n in range(x + 1):\n        if n + sum_of_digits(n) == x:\n            return True\n    return False\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert is_woodall(254) == False\\nAssertionError\\n')", "success": 0}
{"code": "def rev(num):\n    reversed_num = int(str(num)[::-1])\n    return (reversed_num * 2) == (num + 1)\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert check(70) == False\\nNameError: name \\'check\\' is not defined\\n')", "success": 0}
{"code": "def find_Max_Num(arr):\n    # Step 1: Convert the list of digits to strings for easy manipulation\n    str_arr = [str(num) for num in arr]\n    \n    # Step 2: Sort the array based on a custom comparator\n    str_arr.sort(key=lambda x: x*10, reverse=True)  # Multiply by 10 to handle cases like '9' and '34'\n    \n    # Step 3: Join the sorted strings to form the largest number\n    max_num = ''.join(str_arr)\n    \n    # Step 4: Convert the result back to an integer and return\n    return int(max_num)\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_octagonal(n):\n    if n <= 0:\n        return \"Input must be a positive integer.\"\n    return n * (3 * n - 2)\n\n# Test cases\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Substrings(s):\n    def digit_sum(substring):\n        return sum(int(char) for char in substring)\n    \n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n                \n    return count\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def smallest_num(xs):\n    if not xs:\n        return None  # or raise an exception\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_difference(test_list):\n    if not test_list:\n        return 0\n    \n    max_diff = 0\n    \n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def subject_marks(subjectmarks):\n    # Step 1: Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Step 2: Return the sorted list\n    return sorted_marks\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pos_count(lst):\n    count = 0\n    for number in lst:\n        if number > 0:\n            count += 1\n    return count\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        # Explicitly put the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n\n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            is_decreasing = False\n        elif A[i] < A[i - 1]:\n            is_increasing = False\n            \n    return is_increasing or is_decreasing\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_equal_tuple(Input):\n    if not Input:\n        return True  # If no tuples are provided, they are trivially of equal length.\n    \n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return False\n    return True\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert get_equal([(11, 22, 33), (44, 55, 66)]) == True\\nNameError: name \\'get_equal\\' is not defined\\n')", "success": 0}
{"code": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\\nAssertionError\\n')", "success": 0}
{"code": "def dif_Square(n):\n    if n < 0:\n        return False\n    if n % 2 == 0:\n        return False\n    return True\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n            \n    return True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\\nAssertionError\\n')", "success": 0}
{"code": "def find_tuples(test_list, K):\n    \"\"\"\n    This function returns a list of tuples where all elements are divisible by K.\n    \n    :param test_list: List of tuples to be checked\n    :param K: The divisor\n    :return: List of tuples with all elements divisible by K\n    \"\"\"\n    return [tup for tup in test_list if all(element % K == 0 for element in tup)]\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Diff(n):\n    n_str = str(n)\n    even_sum = 0\n    odd_sum = 0\n    \n    for i in range(len(n_str)):\n        if i % 2 == 0:\n            even_sum += int(n_str[i])\n        else:\n            odd_sum += int(n_str[i])\n    \n    return abs(even_sum - odd_sum) % 11 == 0\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def word_len(s):\n    \"\"\"\n    Check if the length of the given string is odd.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the length of the string is odd, False otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 == 0:\n        return False\n    else:\n        return True\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tetrahedral_number(n):\n    if n < 1:\n        return \"Input must be a positive integer.\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Assertions for testing\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_sphere(r):\n    if r < 0:\n        return \"Radius cannot be negative\"\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_Char(strr):\n    # Initialize the sum of ASCII values\n    ascii_sum = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # Compute the sum modulo 26\n    modulo_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' as the starting point)\n    result_char = chr(modulo_result + ord('a'))\n    \n    return result_char\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert get_Char(\"abc\") == \"f\"\\nAssertionError\\n')", "success": 0}
{"code": "def sequence(n):\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    \n    # Initialize the sequence with the first three values\n    p = [0, 1, 2]  # P(1) = 1, P(2) = 1, P(3) = 2\n    \n    if n < len(p):\n        return p[n]\n    \n    # Calculate the sequence values up to n\n    for i in range(3, n + 1):\n        p.append(p[p[i - 1]] + p[i - 1])\n    \n    return p[n]\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert sequence(10) == 6\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in sequence\\n    p.append(p[p[i - 1]] + p[i - 1])\\nIndexError: list index out of range\\n')", "success": 0}
{"code": "import math\n\ndef surfacearea_sphere(r):\n    if r <= 0:\n        raise ValueError(\"Radius must be a positive number.\")\n    \n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n\n# Example usage (not to be included in the final code):\n# assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n# assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\n# assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def centered_hexagonal_number(n):\n    # Step 1: Validate the input\n    if n < 1:\n        return None  # Return None for invalid input\n\n    # Step 2: Calculate the nth centered hexagonal number\n    # The formula for the nth centered hexagonal number is: 3n(n - 1) + 1\n    hexagonal_number = 3 * n * (n - 1) + 1\n\n    # Step 3: Return the result\n    return hexagonal_number\n\n# Test cases\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Step 1: Create a new dictionary to hold the merged results\n    merged_dict = {}\n\n    # Step 2: Define a function to merge a single dictionary into the merged_dict\n    def merge_single_dict(source_dict):\n        for key, value in source_dict.items():\n            # Step 3: If the key is not already in merged_dict, add it\n            if key not in merged_dict:\n                merged_dict[key] = value\n            # If the key is already present, we can choose to keep the existing value or ignore the new one\n            # Here we will keep the existing value\n\n    # Step 4: Merge all three dictionaries\n    merge_single_dict(dict1)\n    merge_single_dict(dict2)\n    merge_single_dict(dict3)\n\n    # Step 5: Return the merged dictionary\n    return merged_dict\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def closest_num(N):\n    if N <= 0:\n        return None  # or raise an error if preferred\n    closest = N - 1\n    return closest\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def len_log(list1):\n    if not list1:\n        return 0\n    \n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_substring(str1, sub_str):\n    # Sequential structure: Iterate through each string in the list\n    for string in str1:\n        # Branch structure: Check if the substring is in the current string\n        if sub_str in string:\n            return True  # Return True if found\n    # If loop completes without finding the substring, return False\n    return False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_undulating(n):\n    num_str = str(n)\n    previous_digit = num_str[0]\n    \n    for current_digit in num_str[1:]:\n        if current_digit == previous_digit:\n            return False\n        previous_digit = current_digit\n    \n    return True\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power(a, b):\n    # Step 1: Handle the case where b is 0 (any number to the power of 0 is 1)\n    if b == 0:\n        return 1\n    \n    # Step 2: Initialize result variable\n    result = 1\n    \n    # Step 3: Use a loop to multiply 'a' by itself 'b' times\n    for _ in range(b):\n        result *= a\n    \n    return result\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def index_minimum(test_list):\n    if not test_list:\n        return None\n    \n    min_value = test_list[0][1]\n    min_name = test_list[0][0]\n    \n    for name, value in test_list:\n        if value < min_value:\n            min_value = value\n            min_name = name\n            \n    return min_name\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency_lists(list1):\n    # Step 1: Initialize an empty dictionary to store frequencies\n    frequency_dict = {}\n    \n    # Step 2: Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Step 3: Loop through each element in the sublist\n        for element in sublist:\n            # Step 4: Check if the element is already in the dictionary\n            if element in frequency_dict:\n                # If it is, increment its count\n                frequency_dict[element] += 1\n            else:\n                # If it is not, add it to the dictionary with a count of 1\n                frequency_dict[element] = 1\n                \n    # Step 5: Return the frequency dictionary\n    return frequency_dict\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    \n    product = 1\n    total_sum = 0\n    \n    for number in numbers:\n        product *= number\n        total_sum += number\n    \n    if total_sum == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    result = product / total_sum\n    return result\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\\nAssertionError\\n')", "success": 0}
{"code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    \n    binary_result = ''\n    \n    while n > 0:\n        binary_result = str(n % 2) + binary_result\n        n = n // 2\n    \n    return binary_result\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n\n    num += 1  # Start checking from the next number\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds\")\n    \n    arr.sort()\n    return arr[k - 1]\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert kth_element([12,3,5,7,19], 2) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def snake_to_camel(word):\n    components = word.split('_')\n    \n    if not components:\n        return ''\n    \n    # Capitalize the first letter of the first component\n    camel_case = components[0].capitalize()\n    \n    # Loop through the remaining components\n    for component in components[1:]:\n        camel_case += component.capitalize()\n    \n    return camel_case\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def eulerian_num(n, m):\n    # Create a 2D list to store Eulerian numbers\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    A[0][0] = 1  # a(0, 0) = 1\n    for i in range(1, n + 1):\n        A[i][0] = 0  # a(n, 0) = 0 for n > 0\n        A[i][i] = 0  # a(n, n) = 0 for n > 0\n    \n    # Fill the table using the recursive relation\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (j + 1) * A[i - 1][j] + (i - j) * A[i - 1][j - 1]\n    \n    return A[n][m]\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert eulerian_num(3, 1) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def sort_sublists(input_list):\n    # Step 1: Initialize an empty list to hold the sorted sublists\n    sorted_list = []\n    \n    # Step 2: Loop through each sublist in the input list\n    for sublist in input_list:\n        # Step 3: Sort the current sublist and append it to the sorted_list\n        sorted_list.append(sorted(sublist))\n    \n    # Step 4: Return the list of sorted sublists\n    return sorted_list\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count(lst):\n    count_true = 0\n    for value in lst:\n        if value:\n            count_true += 1\n    return count_true\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_lists(test_list, test_tup):\n    # Step 1: Create a new tuple that starts with the elements of the given tuple\n    result = test_tup\n    \n    # Step 2: Loop through each element in the test_list\n    for item in test_list:\n        # Step 3: Append each item from the list to the result tuple\n        result += (item,)\n    \n    # Return the final tuple\n    return result\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_sorted_list(num1, num2, num3):\n    # Step 1: Combine all three lists into one\n    combined_list = num1 + num2 + num3\n    \n    # Step 2: Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    # Step 3: Return the sorted list\n    return sorted_list\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_Equivalent(s, n):\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 != 0\n\n    count = 0\n    length = len(s)\n    \n    for i in range(n):\n        if is_odd(s):\n            count += 1\n        s = s[-1] + s[:-1]  # Rotate the string to the right\n    \n    return count\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def common_in_nested_lists(nestedlist):\n    # Step 1: Initialize a set with the elements of the first sublist\n    common_elements = set(nestedlist[0])\n    \n    # Step 2: Loop through the remaining sublists\n    for sublist in nestedlist[1:]:\n        # Step 3: Update the common_elements set to keep only those elements that are also in the current sublist\n        common_elements.intersection_update(sublist)\n    \n    # Return the common elements as a list\n    return list(common_elements)\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_integer(text):\n    if text == \"\":\n        return False\n    \n    if text[0] == '-':\n        if len(text) == 1:\n            return False\n        text = text[1:]  # Remove the negative sign for further checks\n    \n    for char in text:\n        if not char.isdigit():\n            return False\n            \n    return True\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_dit(list1):\n    for item in list1:\n        if isinstance(item, dict) and len(item) > 0:\n            return False\n    return True\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert empty_dit([{1,2},{},{}])==False\\nAssertionError\\n')", "success": 0}
{"code": "def tuple_to_int(nums):\n    result_str = \"\"\n    \n    for num in nums:\n        result_str += str(num)\n    \n    if result_str:\n        return int(result_str)\n    return 0\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_to_float(test_list):\n    result = []\n    for tup in test_list:\n        converted_tup = (float(tup[0]), float(tup[1]))\n        result.append(converted_tup)\n    return result\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_list(string):\n    if string == \"\":\n        return []\n    return string.split()\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def search(arr):\n    n = len(arr)\n    \n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    for i in range(n):\n        if (i == 0 and arr[i] != arr[i + 1]) or \\\n           (i == n - 1 and arr[i] != arr[i - 1]) or \\\n           (0 < i < n - 1 and arr[i] != arr[i - 1] and arr[i] != arr[i + 1]):\n            return arr[i]\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product_tuple(list1):\n    max_product = 0\n    for a, b in list1:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit and sum_of_divisors(partner) == num:\n            amicable_sum += num\n\n    return amicable_sum\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef angle_complex(a, b):\n    if a == 0 and b == 0:\n        return None  # Undefined angle for the origin\n    return math.atan2(b.imag, a)  # Calculate the angle in radians\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        current_diff = count_0 - count_1\n        \n        if current_diff > max_diff:\n            max_diff = current_diff\n        \n        if current_diff < 0:\n            count_0 = 0\n            count_1 = 0\n    \n    return max_diff\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum(a, b):\n    common_divisor_sum = 0\n    min_value = min(a, b)\n    \n    for i in range(1, min_value + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisor_sum += i\n            \n    return common_divisor_sum\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_int(x, y):\n    # Step 1: Initialize a variable to hold the result\n    result = 0\n    \n    # Step 2: Use a loop to add 'x' to 'result', 'y' times\n    for i in range(y):\n        result += x  # Sequential structure: adding x to result\n    \n    # Step 3: Return the final result\n    return result\n\n# Test cases\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def long_words(n, str):\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    \n    # Calculate the magic constant\n    magic_constant = n * (n**2 + 1) // 2\n    \n    # Check the sum of each row\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_constant:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n    \n    return True\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_occurrences(nums):\n    frequency = {}\n    \n    # Count the frequency of each number\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n            \n    max_freq = 0\n    result = None\n    \n    # Find the number with the maximum frequency\n    for num, freq in frequency.items():\n        if freq > max_freq or (freq == max_freq and (result is None or num < result)):\n            max_freq = freq\n            result = num\n            \n    return result\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 22, in <module>\\n    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\\nAssertionError\\n')", "success": 0}
{"code": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    \n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(str_list)\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tup_string(tup1):\n    result = \"\"\n    \n    if not tup1:  # Check if the tuple is empty\n        return result\n    \n    for char in tup1:  # Loop through each character in the tuple\n        result += char  # Concatenate each character to the result string\n    \n    return result\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_negativenum(nums):\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def hexagonal_num(n):\n    if n <= 0:\n        return \"Input must be a positive integer.\"\n    return n * (2 * n - 1)\n\n# Test cases\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def zero_count(nums):\n    # Step 1: Initialize counters for zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    \n    # Step 2: Loop through each number in the array\n    for num in nums:\n        # Step 3: Branch to count zeroes and non-zeroes\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # Step 4: Calculate the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        return 0.0  # Avoid division by zero, return 0.0 if there are no non-zeroes\n    else:\n        return zero_count / (zero_count + non_zero_count)\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    sum_of_powers = 0\n    power = 1\n    \n    while power <= n:\n        if sum_of_powers + power <= n:\n            sum_of_powers += power\n        power *= 2\n    \n    return sum_of_powers == n\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert is_Sum_Of_Powers_Of_Two(10) == True\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    r (float): The radius of the circle\n    \n    Returns:\n    float: The circumference of the circle\n    \"\"\"\n    # Sequential structure: Calculate circumference\n    if r < 0:  # Branch structure: Check for negative radius\n        raise ValueError(\"Radius cannot be negative\")\n    \n    circumference = 2 * math.pi * r  # Calculate circumference\n    \n    return circumference  # Return the result\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_singly(test_list):\n    # Initialize an empty set to store unique numbers\n    unique_numbers = set()\n    \n    # Loop through each tuple in the list\n    for sublist in test_list:\n        # Loop through each number in the current tuple\n        for number in sublist:\n            # Add the number to the set (duplicates will be ignored)\n            unique_numbers.add(number)\n    \n    # Return the set of unique numbers\n    return unique_numbers\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\nassert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\nassert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pancake_sort(nums):\n    def flip(k):\n        return nums[:k][::-1] + nums[k:]\n\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums = flip(max_index + 1)\n            nums = flip(i)\n    return nums\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lists(Input):\n    if not isinstance(Input, tuple):\n        return 0  # or raise an error\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\\nAssertionError\\n')", "success": 0}
{"code": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0  # If there are fewer than 2 elements, no valid difference can be found\n    \n    min_element = arr[0]\n    max_difference = 0\n    \n    for num in arr[1:]:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    \n    return max_difference\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert max_Abs_Diff((9,3,2,5,1)) == 8\\nAssertionError\\n')", "success": 0}
{"code": "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert find_solution(2, 3, 7) == (2, 1)\\nAssertionError\\n')", "success": 0}
{"code": "def remove_elements(list1, list2):\n    # Convert list2 to a set for O(1) average time complexity lookups\n    remove_set = set(list2)\n    \n    # Initialize an empty result list\n    result_list = []\n    \n    # Loop through each element in list1\n    for element in list1:\n        # If the element is not in the remove_set, add it to the result_list\n        if element not in remove_set:\n            result_list.append(element)\n    \n    # Return the filtered result list\n    return result_list\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n    return total_sum\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef area_polygon(s, l):\n    if s < 3:\n        return 0  # or raise an error\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\nassert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\nassert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\nassert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def div_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return div_sum(a) == div_sum(b)\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert are_equivalent(23, 47) == True\\nAssertionError\\n')", "success": 0}
{"code": "def count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    \n    for index, char in enumerate(str1):\n        position_in_alphabet = ord(char) - ord('a') + 1\n        if position_in_alphabet == index + 1:\n            count += 1\n            \n    return count\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n                \n    return count\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_range_list(list1, m, n):\n    total_sum = 0\n    \n    # Check if indices are within the valid range\n    if m < 0 or n >= len(list1) or m > n:\n        return 0  # or raise an exception\n    \n    # Loop through the specified range and sum the values\n    for i in range(m, n + 1):\n        total_sum += list1[i]\n    \n    return total_sum\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def perimeter_pentagon(a):\n    if a <= 0:\n        return \"Invalid input: side length must be positive.\"\n    perimeter = a * 5\n    return perimeter\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):  # Loop through the string, stopping 2 characters before the end\n        if s[i:i+3] == 'std':     # Check if the substring 'std' is found\n            count += 1           # Increment the counter if found\n    return count                 # Return the total count\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_type(test_tuple):\n    if not test_tuple:  # Check if the tuple is empty\n        return True\n    \n    first_type = type(test_tuple[0])  # Get the type of the first element\n    \n    for element in test_tuple[1:]:  # Loop through the rest of the elements\n        if type(element) != first_type:  # Compare types\n            return False\n            \n    return True  # All elements have the same type\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_majority(arr, n, x):\n    # Step 1: Initialize a counter for occurrences of x\n    count = 0\n    \n    # Step 2: Loop through the array to count occurrences of x\n    for i in range(n):\n        if arr[i] == x:  # Branch structure to check if the current element is x\n            count += 1  # Increment the counter if it is\n    \n    # Step 3: Check if the count of x is greater than n // 2\n    if count > n // 2:  # Branch structure to determine if x is the majority\n        return True\n    else:\n        return False  # Return False if x is not the majority\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\nassert is_majority([1, 1, 2, 2], 5, 1) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in <module>\\n    assert is_majority([1, 1, 2, 2], 5, 1) == False\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in is_majority\\n    if arr[i] == x:  # Branch structure to check if the current element is x\\nIndexError: list index out of range\\n')", "success": 0}
{"code": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1s) in the binary representation of a given number.\n\n    Parameters:\n    n (int): The number to count set bits in.\n\n    Returns:\n    int: The number of set bits in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_values_string(str):\n    result = ''\n    for index in range(len(str)):\n        if index % 2 == 0:\n            result += str[index]\n    return result\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        minimum = a\n    elif b < c:\n        minimum = b\n    else:\n        minimum = c\n    return minimum\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r:\n        return False\n    \n    for i in range(l, r + 1):\n        if (n & (1 << i)) == 0:\n            return False\n            \n    return True\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\\nAssertionError\\n')", "success": 0}
{"code": "def re_arrange_array(arr, n):\n    # Step 1: Create two lists to hold negative and positive numbers\n    negative = []\n    positive = []\n    \n    # Step 2: Loop through the array and segregate negative and positive numbers\n    for num in arr:\n        if num < 0:  # Branch structure to check if the number is negative\n            negative.append(num)\n        else:\n            positive.append(num)  # Else case for positive numbers\n    \n    # Step 3: Combine the negative and positive lists\n    result = negative + positive  # Sequential structure to concatenate lists\n    \n    return result\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def replace_blank(str1, char):\n    \"\"\"\n    Replaces all blank spaces in str1 with the specified char.\n    \n    Parameters:\n    str1 (str): The string in which spaces will be replaced.\n    char (str): The character that will replace the spaces.\n    \n    Returns:\n    str: The modified string with spaces replaced by char.\n    \"\"\"\n    if not isinstance(str1, str) or not isinstance(char, str):\n        raise ValueError(\"Both str1 and char must be strings.\")\n    if len(char) != 1:\n        raise ValueError(\"char must be a single character.\")\n    \n    result = \"\"\n    for c in str1:\n        if c == ' ':\n            result += char\n        else:\n            result += c\n            \n    return result\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def larg_nnum(list1, n):\n    # Step 1: Sort the list in descending order (sequential structure)\n    sorted_list = sorted(list1, reverse=True)\n    \n    # Step 2: Initialize an empty list to hold the largest n numbers (sequential structure)\n    largest_numbers = []\n    \n    # Step 3: Use a loop to iterate through the sorted list and collect the largest n numbers (loop structure)\n    for i in range(n):\n        if i < len(sorted_list):  # Branch structure to ensure we don't go out of bounds\n            largest_numbers.append(sorted_list[i])\n    \n    # Step 4: Return the list of largest n numbers (sequential structure)\n    return largest_numbers\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsuface_cylinder(r, h):\n    # Step 1: Calculate the lateral surface area using the formula: 2 * \u03c0 * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    # Step 2: Return the calculated lateral surface area\n    return lateral_surface_area\n\n# Test cases\nassert math.isclose(lateralsuface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4, 5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4, 10), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr=\"SyntaxError: Non-UTF-8 code starting with '\\\\xa6' in file D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py on line 5, but no encoding declared; see https://python.org/dev/peps/pep-0263/ for details\\n\")", "success": 0}
{"code": "def volume_cube(l):\n    if l < 0:\n        raise ValueError(\"Side length must be non-negative\")\n    return l ** 3\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_bit_set_number(n):\n    result = n\n    for i in range(0, 32, 2):  # Assuming a 32-bit integer\n        result |= (1 << i)  # Set the even bit at position i\n    return result\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert even_bit_set_number(10) == 10\\nAssertionError\\n')", "success": 0}
{"code": "def check_occurences(test_list):\n    \"\"\"\n    Takes in a list of tuples and returns a dictionary mapping each unique tuple\n    to the number of times it occurs in the list.\n    \n    :param test_list: List of tuples\n    :return: Dictionary with tuples as keys and their counts as values\n    \"\"\"\n    tuple_count = {}\n    for t in test_list:\n        if t in tuple_count:\n            tuple_count[t] += 1\n        else:\n            tuple_count[t] = 1\n    return tuple_count\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\\nAssertionError\\n')", "success": 0}
{"code": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    if n == 0:\n        return 0\n    return n * (n + 1) // 2\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\\nAssertionError\\n')", "success": 0}
{"code": "def factorial(num):\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result\n\ndef get_total_number_of_sequences(m, n):\n    if n > m:\n        return 0\n    return factorial(m) // (factorial(n) * factorial(m - n))\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert get_total_number_of_sequences(10, 4) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def replace_list(list1, list2):\n    # Step 1: Check if list1 is not empty\n    if len(list1) > 0:\n        # Step 2: Remove the last element of list1\n        list1.pop()\n    \n    # Step 3: Extend list1 with elements of list2\n    for item in list2:\n        list1.append(item)\n    \n    # Step 4: Return the modified list1\n    return list1\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \n    Parameters:\n    str1 (str): The string to be counted.\n    \n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    # Initialize a counter to zero\n    character_count = 0\n    \n    # Iterate over each character in the string and increment the counter\n    for char in str1:\n        character_count += 1\n    \n    return character_count\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_Perfect_Square(N):\n    import math\n    \n    # Find the next integer greater than the square root of N\n    next_int = math.ceil(math.sqrt(N))\n    \n    # Return the square of that integer\n    return next_int * next_int\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert next_Perfect_Square(9) == 16\\nAssertionError\\n')", "success": 0}
{"code": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Step 1: Initialize arrays\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Step 2: Calculate maximum sum of increasing subsequences\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing[i] = max(increasing[i], increasing[j] + arr[i])\n\n    # Step 3: Calculate maximum sum of decreasing subsequences\n    for i in range(n - 1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + arr[i])\n\n    # Step 4: Calculate maximum sum of bitonic subsequences\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, increasing[i] + decreasing[i] - arr[i])\n\n    return max_sum_bitonic\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def babylonian_squareroot(number):\n    # Step 1: Check if the number is non-negative\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    \n    # Step 2: Initialize the guess\n    guess = number / 2.0\n    \n    # Step 3: Set a tolerance level for convergence\n    tolerance = 0.00001\n    \n    # Step 4: Loop until the guess is within the tolerance level\n    while True:\n        # Calculate a new guess\n        new_guess = (guess + number / guess) / 2.0\n        \n        # Check for convergence\n        if abs(new_guess - guess) < tolerance:\n            break\n        \n        # Update the guess\n        guess = new_guess\n    \n    return guess\nassert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 25, in <module>\\n    assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def lps(str):\n    # Clean the input string\n    s = str.replace(\" \", \"\").lower()\n    n = len(s)\n    \n    # Create a table to store lengths of longest palindromic subsequences\n    table = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        table[i][i] = 1\n    \n    # Fill the table\n    for length in range(2, n + 1):  # length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    \n    # The length of the longest palindromic subsequence is in table[0][n-1]\n    return table[0][n - 1]\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 24, in <module>\\n    assert lps(\"TENS FOR TENS\") == 5\\nAssertionError\\n')", "success": 0}
{"code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    else:\n        total = 0\n        for i in range(1, n):\n            total += 1.0 / i\n        return total\nassert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\nassert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\nassert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def intersection_array(array_nums1, array_nums2):\n    # Step 1: Create an empty list to store the intersection\n    intersection = []\n    \n    # Step 2: Loop through each element in the first array\n    for num in array_nums1:\n        # Step 3: Check if the current element is in the second array\n        if num in array_nums2:\n            # If it is, add it to the intersection list\n            intersection.append(num)\n    \n    # Step 4: Return the list of intersection elements\n    return intersection\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def insert_element(lst, element):\n    if not lst:\n        return []\n    \n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    \n    return result\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import cmath\n\ndef convert(numbers):\n    if isinstance(numbers, (int, float)):\n        complex_number = complex(numbers)\n        return cmath.polar(complex_number)\n    else:\n        raise ValueError(\"Input must be a number.\")\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def combinations_colors(l, n):\n    # Sequential structure: Initialize the result list\n    result = []\n    \n    # Recursive function to generate combinations\n    def generate_combination(current_combination, start):\n        # Base case: if the current combination is of length n, add it to the result\n        if len(current_combination) == n:\n            result.append(tuple(current_combination))\n            return\n        \n        # Loop structure: iterate through the colors starting from 'start'\n        for i in range(start, len(l)):\n            # Branch structure: include the current color and recurse\n            current_combination.append(l[i])\n            generate_combination(current_combination, i)  # Allow repetition by passing 'i'\n            current_combination.pop()  # Backtrack to explore other combinations\n    \n    # Start generating combinations\n    generate_combination([], 0)\n    \n    return result\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_numbers(a, b):\n    return (b, a)\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of tuples and returns a new tuple of tuples\n    where each inner tuple contains the maximum of the corresponding elements\n    in the input tuples.\n    \n    :param test_tup1: First input tuple of tuples\n    :param test_tup2: Second input tuple of tuples\n    :return: A tuple of tuples containing the maximum elements\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the elements of both tuples\n    for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2):\n        # Check if both inner tuples have the same length\n        if len(inner_tup1) != len(inner_tup2):\n            raise ValueError(\"Inner tuples must be of the same length\")\n        \n        # Create a new tuple with the maximum elements\n        max_tuple = tuple(max(a, b) for a, b in zip(inner_tup1, inner_tup2))\n        \n        # Append the maximum tuple to the result list\n        result.append(max_tuple)\n    \n    # Convert the result list back to a tuple of tuples\n    return tuple(result)\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    primes = []\n    current = 2  # Start checking for primes from 2\n    while len(primes) < n:\n        if is_prime(current):\n            primes.append(current)\n        current += 1\n    return primes[n - 1]\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert newman_prime(3) == 7\\nAssertionError\\n')", "success": 0}
{"code": "def division_elements(test_tup1, test_tup2):\n    # Initialize an empty tuple to store the results\n    result = ()\n    \n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Check if the divisor is not zero to avoid division by zero\n        if test_tup2[i] != 0:\n            # Perform the division and append the result to the result tuple\n            result += (test_tup1[i] // test_tup2[i],)\n        else:\n            # If the divisor is zero, append None or handle as needed\n            result += (None,)\n    \n    return result\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the input list into two parts where the length of the first part is L.\n    \n    Parameters:\n    list1 (list): The list to be split.\n    L (int): The length of the first part of the list.\n    \n    Returns:\n    tuple: A tuple containing the two resulting lists.\n    \"\"\"\n    # Ensure L is within the valid range\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be between 0 and the length of the input list.\")\n    \n    # Split the list\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dog_age(h_age):\n    if h_age < 0:\n        return 0  # Return 0 for negative ages\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_split(S, step):\n    # Initialize an empty list to hold the result\n    result = []\n    \n    # Determine the number of sublists needed\n    num_sublists = (len(S) + step - 1) // step\n    \n    # Create empty sublists\n    for _ in range(step):\n        result.append([])\n\n    # Loop through the original list and distribute elements into sublists\n    for index in range(len(S)):\n        # Determine which sublist to append the current element to\n        sublist_index = index % step\n        result[sublist_index].append(S[index])\n    \n    return result\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    if l <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    # Lateral surface area of a cube is 4 times the area of one face\n    lateral_surface_area = 4 * (l ** 2)\n    return lateral_surface_area\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares\n    of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0  # or raise an error\n\n    sum_squares = 0\n    odd_number = 1\n    \n    for i in range(n):\n        sum_squares += odd_number ** 2\n        odd_number += 2  # Move to the next odd number\n    \n    return sum_squares\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_star_num(n):\n    if n <= 0:\n        return None  # Handle invalid input\n    return 6 * n * (n - 1) + 1\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def ascii_value(k):\n    if len(k) != 1:\n        return -1  # Invalid input\n    return ord(k)\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function calculates the sum of even numbers that are located at even indices in the list.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The sum of even numbers at even indices.\n    \"\"\"\n    total_sum = 0\n    for index in range(0, len(arr), 2):  # Iterate over even indices\n        if arr[index] % 2 == 0:  # Check if the number at the even index is even\n            total_sum += arr[index]\n    return total_sum\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_Power_Sum(n):\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    \n    return total_sum\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rear_extract(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns a list containing the last element of each tuple.\n    \n    :param test_list: List[Tuple]\n    :return: List\n    \"\"\"\n    # Initialize an empty list to store the rear elements\n    rear_elements = []\n    \n    # Check if the input list is empty\n    if not test_list:\n        return rear_elements\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Append the last element of the tuple to the rear_elements list\n        rear_elements.append(tup[-1])\n    \n    return rear_elements\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def substract_elements(test_tup1, test_tup2):\n    # Initialize an empty tuple to store the results\n    result = ()\n    \n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the second tuple from the first\n        result += (test_tup1[i] - test_tup2[i],)\n    \n    return result\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += comb(n, k)\n    return sum_even\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_cylinder(r, h):\n    if r <= 0 or h <= 0:\n        return 0  # Return 0 for invalid input\n    volume = math.pi * (r ** 2) * h\n    return volume\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dict_filter(dict, n):\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n    \n    # Loop through each key-value pair in the input dictionary\n    for key, value in dict.items():\n        # Branch: Check if the value is greater than or equal to n\n        if value >= n:\n            # If true, add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n            \n    # Return the filtered dictionary\n    return filtered_dict\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, int):\n            count += 1\n        elif isinstance(element, tuple) and len(element) > 0 and isinstance(element[0], int):\n            count += 1\n    return count\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def is_num_decagonal(n):\n    if n <= 0:\n        return \"Input must be a positive integer.\"\n    return n * (4 * n - 3)\n\n# Test cases\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sequential_search(dlist, item):\n    \"\"\"\n    This function performs a sequential search for an item in a list.\n    \n    :param dlist: List of elements to search through\n    :param item: The item to search for\n    :return: Tuple (boolean, index) indicating if the item was found and its index\n    \"\"\"\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_unique(test_list):\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sub_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def validate(n):\n    from collections import Counter\n    \n    str_n = str(n)\n    digit_count = Counter(str_n)\n    \n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_element(lst, element):\n    if not lst:\n        return False\n    for item in lst:\n        if item != element:\n            return False\n    return True\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_two_three(text):\n    for i in range(len(text) - 2):\n        if text[i] == 'a':\n            if text[i + 1] == 'b':\n                if text[i + 2] == 'b':\n                    if i + 3 < len(text) and text[i + 3] == 'b':\n                        return True\n                    return True\n    return False\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum_repeated(a, n, k):\n    # Helper function to calculate maximum subarray sum using Kadane's algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate maximum subarray sum for the original array\n    max_subarray_sum = kadane(a)\n    \n    # Calculate total sum of the original array\n    total_sum = sum(a)\n    \n    # Calculate maximum prefix sum\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for x in a:\n        current_prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    # Calculate maximum suffix sum\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for x in reversed(a):\n        current_suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    # If k is 1, return the maximum subarray sum\n    if k == 1:\n        return max_subarray_sum\n    \n    # If k is 2, consider the maximum subarray that can span across two arrays\n    if k == 2:\n        return max(max_subarray_sum, max_suffix_sum + max_prefix_sum)\n\n    # If k > 2, consider the maximum subarray that can span across multiple arrays\n    return max(max_subarray_sum, max_suffix_sum + max_prefix_sum + total_sum * (k - 2))\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    if n <= 0:\n        return 0\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 2\n    return total_sum\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_length(list1):\n    if not list1:\n        return (0, None)\n    \n    max_length = 0\n    max_list = None\n    \n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return (max_length, max_list)\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_no_of_ways(n, k):\n    # Step 1: Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Step 2: Initialize variables for dynamic programming\n    same = k  # Ways to paint the last two posts the same color\n    diff = k * (k - 1)  # Ways to paint the last two posts different colors\n    \n    # Step 3: Loop through the number of posts from 3 to n\n    for i in range(3, n + 1):\n        temp = diff  # Store the current number of different color ways\n        # Update the number of ways for the current post\n        diff = (same + diff) * (k - 1)\n        same = temp  # Update the same color ways\n    \n    # Step 4: Return the total number of ways\n    return same + diff\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find(n, m):\n    if m == 0:\n        return \"Error: Division by zero\"\n    return n // m\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef otherside_rightangle(w, h):\n    if w <= 0 or h <= 0:\n        raise ValueError(\"Sides must be positive numbers.\")\n    \n    return math.sqrt(w**2 + h**2)\nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_val(listval):\n    max_value = float('-inf')  # Initialize max_value to negative infinity\n    for item in listval:        # Loop through each item in the list\n        if isinstance(item, (int, float)):  # Check if the item is a number\n            if item > max_value:  # Compare with current max_value\n                max_value = item   # Update max_value if current item is greater\n    return max_value  # Return the maximum value found\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_div(number):\n    sum_of_divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def get_Inv_Count(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def flatten_list(list1):\n    # Initialize an empty list to hold the flattened result\n    flattened = []\n    \n    # Loop through each element in the input list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # If it is a list, extend the flattened list with the flattened version of the element\n            flattened.extend(flatten_list(element))\n        else:\n            # If it is not a list, append the element to the flattened list\n            flattened.append(element)\n    \n    return flattened\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_aggregate(stdata):\n    # Step 1: Create a dictionary to hold the aggregate scores\n    aggregate_scores = {}\n    \n    # Step 2: Loop through each tuple in the list\n    for name, score in stdata:\n        # Step 3: Use a branch to check if the name is already in the dictionary\n        if name in aggregate_scores:\n            # If it is, add the score to the existing total\n            aggregate_scores[name] += score\n        else:\n            # If not, initialize it with the current score\n            aggregate_scores[name] = score\n    \n    # Step 4: Find the name with the maximum aggregate score\n    max_name = None\n    max_score = 0\n    for name, total in aggregate_scores.items():\n        # Step 5: Use a branch to check for the maximum score\n        if total > max_score:\n            max_score = total\n            max_name = name\n    \n    # Step 6: Return the name and the maximum score as a tuple\n    return (max_name, max_score)\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in <module>\\n    assert check(70) == False\\nNameError: name \\'check\\' is not defined\\n')", "success": 0}
{"code": "import math\n\ndef count_binary_seq(n):\n    # Step 1: Calculate the number of valid binary sequences of length 2n\n    # Using the combinatorial approach to find the count of sequences\n    if n == 0:\n        return 1.0  # Base case: there's one sequence of length 0 (the empty sequence)\n    \n    # Step 2: Initialize a variable to hold the count of valid sequences\n    count = 0\n    \n    # Step 3: Loop through all possible sums from 0 to n\n    for sum_value in range(n + 1):\n        # Calculate the number of ways to choose sum_value from n bits\n        # This is given by the binomial coefficient C(n, sum_value)\n        # The number of valid sequences for this sum_value is C(n, sum_value) * C(n, sum_value)\n        count += math.comb(n, sum_value) ** 2\n    \n    # Step 4: Return the final count\n    return float(count)\n\n# Test cases\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value))\n    return max_depth + 1\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Element(arr, ranges, rotations, index):\n    # Step 1: Calculate the effective rotation\n    n = len(arr)\n    effective_rotations = rotations % n\n    \n    # Step 2: Rotate the array\n    rotated_arr = arr[-effective_rotations:] + arr[:-effective_rotations]\n    \n    # Step 3: Initialize the result variable\n    result = None\n    \n    # Step 4: Loop through the ranges to find the element at the specified index\n    for start, end in ranges:\n        if start <= index <= end:\n            result = rotated_arr[index]\n            break\n    \n    return result\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def start_withp(words):\n    p_words = []\n    \n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    \n    return tuple(p_words) if len(p_words) == 2 else None\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_increasing_subseq(a, n, index, k):\n    # Step 1: Initialize a list to store the maximum sum of increasing subsequences\n    max_sum = [0] * n\n    \n    # Step 2: Fill the max_sum array with the values of the original array\n    for i in range(n):\n        max_sum[i] = a[i]\n    \n    # Step 3: Calculate the maximum sum of increasing subsequences\n    for i in range(index + 1):\n        for j in range(i):\n            if a[j] < a[i]:\n                max_sum[i] = max(max_sum[i], max_sum[j] + a[i])\n    \n    # Step 4: Include the kth element in the sum\n    max_result = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_result = max(max_result, max_sum[i])\n    \n    return max_result + a[k]\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def colon_tuplex(tuplex, m, n):\n    # Step 1: Check if the index m is within the bounds of the tuple\n    if m < 0 or m >= len(tuplex):\n        return tuplex  # Return the original tuple if m is out of bounds\n\n    # Step 2: Create a list from the tuple to allow modification\n    result = list(tuplex)\n\n    # Step 3: Check if the index m points to a list\n    if isinstance(result[m], list):\n        # Step 4: Append the value n to the list at index m\n        result[m].append(n)\n    else:\n        # Step 5: If it's not a list, create a new list with the current value and append n\n        result[m] = [result[m], n]\n\n    # Step 6: Convert the list back to a tuple and return it\n    return tuple(result)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def large_product(nums1, nums2, N):\n    # Step 1: Create a list to hold the products of each combination\n    products = []\n    \n    # Step 2: Use nested loops to calculate the product of each pair\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    # Step 3: Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Step 4: Return the top N products\n    return products[:N]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_tuple(str1):\n    # Step 1: Initialize an empty tuple to hold the characters\n    result = ()\n    \n    # Step 2: Loop through each character in the string\n    for char in str1:\n        # Step 3: Add the character to the tuple\n        result += (char,)\n    \n    # Step 4: Return the final tuple\n    return result\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert string_to_tuple(\"python 3.0\")==(\\'p\\', \\'y\\', \\'t\\', \\'h\\', \\'o\\', \\'n\\', \\'3\\', \\'.\\', \\'0\\')\\nAssertionError\\n')", "success": 0}
{"code": "def set_left_most_unset_bit(n):\n    # Step 1: Initialize result with n\n    result = n\n    \n    # Step 2: Check if n is all bits set\n    if n == (1 << n.bit_length()) - 1:\n        return result\n    \n    # Step 3: Loop to find the leftmost unset bit\n    for i in range(n.bit_length() - 1, -1, -1):\n        if (n & (1 << i)) == 0:  # Check if the bit is unset\n            result |= (1 << i)   # Set the leftmost unset bit\n            break\n    \n    return result\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_cone(r, h):\n    # Check for valid input\n    if r < 0 or h < 0:\n        return \"Invalid input: radius and height must be non-negative.\"\n    \n    # Calculate the volume\n    volume = (1/3) * math.pi * (r ** 2) * h\n    \n    return volume\n\n# Test cases\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lucas(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        L0, L1 = 2, 1\n        for i in range(2, n + 1):\n            L_next = L0 + L1\n            L0, L1 = L1, L_next\n        return L1\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_string(list_, string):\n    if not list_:\n        return []\n    \n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    \n    return result\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def convert_list_dictionary(l1, l2, l3):\n    # Initialize an empty list to hold the nested dictionaries\n    result = []\n    \n    # Loop through the indices of the input lists\n    for i in range(len(l1)):\n        # Create a new dictionary for each entry\n        entry = {l1[i]: {l2[i]: l3[i]}}\n        # Append the entry to the result list\n        result.append(entry)\n    \n    # Return the final list of nested dictionaries\n    return result\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_max_sum(n):\n    memo = {}\n\n    def helper(n):\n        if n <= 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        \n        max_sum = max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n        memo[n] = max_sum\n        return max_sum\n\n    return helper(n)\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_length_list(input_list):\n    # Step 1: Initialize variables to keep track of the maximum length and the corresponding list\n    max_length = 0\n    max_list = []\n\n    # Step 2: Loop through each list in the input list\n    for current_list in input_list:\n        # Step 3: Check if the current list's length is greater than the max_length found so far\n        if len(current_list) > max_length:\n            # Update max_length and max_list if a longer list is found\n            max_length = len(current_list)\n            max_list = current_list\n\n    # Step 4: Return the maximum length and the corresponding list\n    return max_length, max_list\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_distinct(test_tup):\n    unique_elements = set()\n    for element in test_tup:\n        if element in unique_elements:\n            return False\n        unique_elements.add(element)\n    return True\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # First pass: count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_char(string):\n    if len(string) == 0:\n        return \"Invalid\"\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def median_numbers(a, b, c):\n    # Create a list of the numbers\n    numbers = [a, b, c]\n    # Sort the list\n    numbers.sort()\n    # Return the middle number\n    return numbers[1]\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            for digit in str(abs(num)):\n                total_sum += int(digit)\n    return total_sum\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert sum_of_digits([[10,20,4,5,\\'b\\',70,\\'a\\']])==19\\nAssertionError\\n')", "success": 0}
{"code": "def bitwise_xor(test_tup1, test_tup2):\n    # Initialize an empty tuple to store the results\n    result = ()\n    \n    # Check if both tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise XOR operation on corresponding elements\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # Append the result to the result tuple\n        result += (xor_result,)\n    \n    return result\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_freq(test_list):\n    # Step 1: Create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # Step 2: Loop through each tuple in the provided list\n    for item in test_list:\n        # Step 3: Add the tuple to the set (duplicates will be ignored)\n        unique_tuples.add(item)\n    \n    # Step 4: Return the number of unique tuples\n    return len(unique_tuples)\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def add_nested_tuples(test_tup1, test_tup2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Loop through the elements of the tuples\n    for i in range(len(test_tup1)):\n        # Initialize a temporary list to store the sum of the current tuple elements\n        temp = []\n        \n        # Loop through the elements of the inner tuples\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements from both tuples\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        \n        # Append the summed tuple to the result list\n        result.append(tuple(temp))\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result)\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Parity(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the rightmost ascent\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # Step 2: If no ascent is found, return False\n    if i == -1:\n        return False\n    \n    # Step 3: Find the smallest digit on the right side of the ascent that is larger than digits[i]\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Step 4: Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 5: Reverse the digits to the right of the original position of digits[i]\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    return int(''.join(digits))\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                pairs.append([num1, num2])\n            else:\n                break\n    \n    return pairs\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\\nAssertionError\\n')", "success": 0}
{"code": "def min_product_tuple(list1):\n    min_product = float('inf')  # Initialize to a large value\n    for tup in list1:  # Loop through each tuple\n        product = tup[0] * tup[1]  # Calculate the product\n        if product < min_product:  # Check if it's the minimum\n            min_product = product  # Update minimum product\n    return min_product  # Return the minimum product found\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_val(listval):\n    min_value = float('inf')\n    \n    for item in listval:\n        if isinstance(item, int):\n            if item < min_value:\n                min_value = item\n                \n    return min_value\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def snake_to_camel(word):\n    if not word:\n        return \"\"\n    \n    words = word.split('_')\n    camel_case = ''.join(w.capitalize() for w in words)\n    \n    return camel_case\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(l):\n    result = []\n    for number in l:\n        if number % 2 == 0:\n            result.append(number)\n    return result\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_nth_element(list1, n):\n    # Initialize an empty list to store the nth elements\n    nth_elements = []\n    \n    # Loop through each tuple in the provided list\n    for item in list1:\n        # Check if the index n is within the bounds of the tuple\n        if n < len(item):\n            # Append the nth element to the nth_elements list\n            nth_elements.append(item[n])\n    \n    # Return the list of nth elements\n    return nth_elements\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def overlapping(list1, list2):\n    \"\"\"\n    Check if there is any overlap between two lists.\n\n    Parameters:\n    list1 (list): The first list to check.\n    list2 (list): The second list to check against.\n\n    Returns:\n    bool: True if there is any overlap, False otherwise.\n    \"\"\"\n    if not list1 or not list2:\n        return False\n    \n    set_list2 = set(list2)\n    for item in list1:\n        if item in set_list2:\n            return True\n    return False\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min2, min1)\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def group_tuples(Input):\n    grouped = {}\n    \n    for first, second in Input:\n        if first in grouped:\n            grouped[first].append(second)\n        else:\n            grouped[first] = [second]\n    \n    result = []\n    for key, values in grouped.items():\n        result.append((key, *values))\n    \n    return result\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def round_and_sum(list1):\n    total_sum = 0\n    \n    for num in list1:\n        total_sum += round(num)\n    \n    return total_sum\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\\nAssertionError\\n')", "success": 0}
{"code": "def cube_Sum(n):\n    \"\"\"\n    Calculate the sum of the cubes of the first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of even natural numbers to consider.\n    \n    Returns:\n    int: The sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    if n < 1:\n        return 0  # or raise an error\n\n    # Initialize the sum\n    cube_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        cube_sum += even_number ** 3\n    \n    return cube_sum\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def concatenate_tuple(test_tup):\n    # Step 1: Initialize an empty string to hold the result\n    result = \"\"\n    \n    # Step 2: Loop through each element in the tuple\n    for index, element in enumerate(test_tup):\n        # Step 3: Check if it's the first element\n        if index == 0:\n            result += str(element)  # Add the first element without a delimiter\n        else:\n            result += '-' + str(element)  # Add subsequent elements with a delimiter\n    \n    return result\n\n# Test cases\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    count = 0\n    \n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n        count += 1\n    \n    if count > 0:\n        average = sum_of_cubes / count\n    else:\n        average = 0\n    \n    return average\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_rear(test_tuple):\n    result = []\n    for item in test_tuple:\n        if len(item) > 0:\n            result.append(item[-1])\n    return result\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_element_in_list(list1, x):\n    count = 0  # Sequential structure: Initialize a counter\n    for sublist in list1:  # Loop structure: Iterate through each sublist\n        if x in sublist:  # Branch structure: Check if x is in the current sublist\n            count += 1  # Increment the counter if x is found\n    return count  # Return the final count\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_oddnumbers(nums):\n    odd_numbers = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def change_date_format(dt):\n    # Step 1: Split the input date string into components using the '-' delimiter (sequential structure)\n    year, month, day = dt.split('-')\n    \n    # Step 2: Rearrange the components into the desired format (dd-mm-yyyy) (sequential structure)\n    new_format = f\"{day}-{month}-{year}\"\n    \n    # Step 3: Return the newly formatted date (sequential structure)\n    return new_format\n\n# Test cases\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Start with a big gap, then reduce the gap\n\n    # Loop until the gap is reduced to 0\n    while gap > 0:\n        # Perform a gapped insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for my_list[i] is found\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            # Put temp (the original my_list[i]) in its correct location\n            my_list[j] = temp\n        \n        gap //= 2  # Reduce the gap for the next element\n\n    return my_list\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def and_tuples(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(0)\n    return tuple(result)\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\\nAssertionError\\n')", "success": 0}
{"code": "def parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola.\")\n    \n    # Calculate the directrix\n    directrix = -((b**2 - 4*a*c) / (4*a))\n    \n    return directrix\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert parabola_directrix(5,3,2)==-198\\nAssertionError\\n')", "success": 0}
{"code": "def common_element(list1, list2):\n    # Sequential structure: Check if either list is empty\n    if not list1 or not list2:\n        return None\n    \n    # Loop structure: Iterate through the first list\n    for element in list1:\n        # Branch structure: Check if the current element is in the second list\n        if element in list2:\n            return True\n    \n    # If no common elements were found, return None\n    return None\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def median_trapezium(base1, base2, height):\n    if base1 < 0 or base2 < 0:\n        raise ValueError(\"Base lengths must be non-negative.\")\n    \n    median = (base1 + base2) / 2\n    return median\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_greater(arr, number):\n    if not arr:  # Check if the array is empty\n        return True\n    \n    for element in arr:  # Loop through each element in the array\n        if number <= element:  # Branch: Compare number with the current element\n            return False  # If number is not greater, return False\n    \n    return True  # If number is greater than all elements, return True\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_one(text):\n    if len(text) < 2:  # Must be at least 'ab'\n        return False\n    \n    if text[0] == 'a':\n        count_b = 0\n        for char in text[1:]:\n            if char == 'b':\n                count_b += 1\n            else:\n                break\n        return count_b > 0  # Return True if there's at least one 'b'\n    \n    return False\nassert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit(n):\n    str_n = str(n)\n    if str_n:  # Check if the string is not empty\n        return int(str_n[-1])  # Return the last character as an integer\n    return None  # Handle the case where n is not a valid number\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def neg_nos(list1):\n    negative_numbers = []\n    for number in list1:\n        if number < 0:\n            negative_numbers.append(number)\n    return negative_numbers\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(str1):\n    result = \"\"\n    for index in range(len(str1)):\n        if index % 2 == 0:\n            result += str1[index]\n    return result\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert remove_odd(\"python\")==(\"yhn\")\\nAssertionError\\n')", "success": 0}
{"code": "def count_bidirectional(test_list):\n    # Step 1: Create a set to store unique pairs\n    unique_pairs = set()\n    \n    # Step 2: Loop through each tuple in the list\n    for pair in test_list:\n        # Step 3: Check if the reverse of the pair exists in the set\n        if (pair[1], pair[0]) in unique_pairs:\n            # If it exists, we have found a bidirectional pair\n            unique_pairs.remove((pair[1], pair[0]))  # Remove the reverse pair\n        else:\n            # If it does not exist, add the current pair to the set\n            unique_pairs.add(pair)\n    \n    # The remaining pairs in the set are unique and not bidirectional\n    # The count of bidirectional pairs is the original count minus the unique pairs\n    return (len(test_list) - len(unique_pairs)) // 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in <module>\\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def multiple_to_single(L):\n    result_str = \"\"\n    \n    for number in L:\n        result_str += str(number)\n    \n    if result_str == \"\":\n        return 0  # Handle empty list case if needed\n    \n    return int(result_str)\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_adverb_position(text):\n    # Step 1: Define a list of common adverbs for identification\n    adverbs = [\"clearly\", \"seriously\", \"unfortunately\"]\n    \n    # Step 2: Split the text into words\n    words = text.split()\n    \n    # Step 3: Loop through the words to find the first adverb\n    for index, word in enumerate(words):\n        # Step 4: Check if the word is an adverb\n        if word.rstrip('!.,?') in adverbs:  # Remove punctuation for comparison\n            # Step 5: Return the position and the adverb found\n            return (0, text.index(word), word.rstrip('!.,?'))\n    \n    # If no adverb is found, return None or an appropriate value\n    return None\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, \\'clearly\\')\\nAssertionError\\n')", "success": 0}
{"code": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given the length of one side.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    if l <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    surface_area = 6 * (l ** 2)\n    return surface_area\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def positive_count(nums):\n    positive_count = 0\n    total_count = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            \n    return positive_count / total_count if total_count > 0 else 0\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\\nAssertionError\\n')", "success": 0}
{"code": "def largest_neg(list1):\n    largest_negative = None  # Step 1: Initialize variable\n    for num in list1:  # Step 2: Loop through the list\n        if num < 0:  # Step 3: Check if the number is negative\n            if largest_negative is None or num < largest_negative:  # Step 3: Branch to update largest negative\n                largest_negative = num\n    return largest_negative  # Step 4: Return the result\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def trim_tuple(test_list, K):\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than K\n        if len(tup) > K:\n            # Trim the tuple by taking elements from index K to the end\n            trimmed_tup = tup[K:]\n        else:\n            # If the tuple length is less than or equal to K, return an empty tuple\n            trimmed_tup = ()\n        \n        # Append the trimmed tuple to the trimmed_list\n        trimmed_list.append(trimmed_tup)\n    \n    # Return the list of trimmed tuples as a string representation\n    return str(trimmed_list)\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 20, in <module>\\n    assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == \\'[(2,), (9,), (2,), (2,)]\\'\\nAssertionError\\n')", "success": 0}
{"code": "def index_multiplication(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result.append((tup1[0] * tup2[0], tup1[1] * tup2[1]))\n    \n    return tuple(result)\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Occurrence(tup, lst):\n    total_count = 0\n    for element in lst:\n        for item in tup:\n            if element == item:\n                total_count += 1\n    return total_count\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing the cubes of the original numbers.\n    \n    :param nums: List of integers or floats\n    :return: List of integers or floats\n    \"\"\"\n    # Initialize an empty list to store the cubes\n    cubes = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Calculate the cube of the number\n        cube = num ** 3\n        # Append the cube to the cubes list\n        cubes.append(cube)\n    \n    return cubes\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    \n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]  # P(0) = 3, P(1) = 0, P(2) = 2\n    total_sum = sum(perrin_numbers)  # Start with the sum of the first three numbers\n    \n    for i in range(3, n):\n        next_perrin = perrin_numbers[i-2] + perrin_numbers[i-3]\n        perrin_numbers.append(next_perrin)\n        total_sum += next_perrin\n    \n    return total_sum\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert cal_sum(9) == 49\\nAssertionError\\n')", "success": 0}
{"code": "def extract_string(str, l):\n    result = []\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    return result\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_whitespaces(text1):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \n    Parameters:\n    text1 (str): The string from which to remove whitespaces.\n    \n    Returns:\n    str: The string without any whitespaces.\n    \"\"\"\n    if not text1:  # Check if the input string is empty\n        return ''\n    \n    result = ''  # Initialize an empty string for the result\n    \n    for char in text1:  # Loop through each character in the input string\n        if char != ' ':  # Check if the character is not a whitespace\n            result += char  # Append non-whitespace characters to the result\n    \n    return result  # Return the final result without whitespaces\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The amount for which the item was sold.\n    \n    Returns:\n    float: The loss amount if there is a loss, otherwise 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\nassert loss_amount(1500,1200)==0\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert loss_amount(1500,1200)==0\\nAssertionError\\n')", "success": 0}
{"code": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even_factors += i\n    return sum_even_factors\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_wordz(text):\n    text = text.strip()\n    if not text:\n        return False\n    if 'z' in text:\n        return True\n    return False\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]  # January, March, May, July, August, October, December\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_string_list(stringlist):\n    # Initialize an empty list to hold the reversed strings\n    reversed_list = []\n    \n    # Loop through each string in the input list\n    for string in stringlist:\n        # Reverse the current string and append it to the reversed_list\n        reversed_list.append(string[::-1])\n    \n    # Return the list of reversed strings\n    return reversed_list\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min(lst):\n    if not lst:\n        return []\n    \n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rectangle_area(l, b):\n    if l <= 0 or b <= 0:\n        return \"Invalid input: Length and breadth must be positive numbers.\"\n    area = l * b\n    return area\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_uppercase(str1):\n    result = \"\"\n    for char in str1:\n        if char.islower():\n            result += char\n    return result\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])  # Append the first element\n    return result\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert upper_ctr(\\'PYthon\\') == 1\\nAssertionError\\n')", "success": 0}
{"code": "def combinations_list(list1):\n    # Step 1: Initialize the result list with an empty combination\n    result = [[]]\n    \n    # Step 2: Loop through each element in the input list\n    for element in list1:\n        # Step 3: For each element, create new combinations by adding it to existing combinations\n        new_combinations = [current + [element] for current in result]\n        result.extend(new_combinations)  # Add new combinations to the result\n    \n    # Return the final list of combinations\n    return result\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert combinations_list([\\'orange\\', \\'red\\', \\'green\\', \\'blue\\'])==[[], [\\'orange\\'], [\\'red\\'], [\\'red\\', \\'orange\\'], [\\'green\\'], [\\'green\\', \\'orange\\'], [\\'green\\', \\'red\\'], [\\'green\\', \\'red\\', \\'orange\\'], [\\'blue\\'], [\\'blue\\', \\'orange\\'], [\\'blue\\', \\'red\\'], [\\'blue\\', \\'red\\', \\'orange\\'], [\\'blue\\', \\'green\\'], [\\'blue\\', \\'green\\', \\'orange\\'], [\\'blue\\', \\'green\\', \\'red\\'], [\\'blue\\', \\'green\\', \\'red\\', \\'orange\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_value(dict, n):\n    # Step 1: Check if the dictionary is empty\n    if not dict:\n        return False  # An empty dictionary cannot have a matching value\n    \n    # Step 2: Extract the values from the dictionary\n    values = list(dict.values())\n    \n    # Step 3: Use a loop to check if all values are equal to n\n    for value in values:\n        if value != n:  # Branching structure to check each value\n            return False  # If any value does not match n, return False\n    \n    return True  # If all values match n, return True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def drop_empty(dict1):\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_product = 0\n    products = [1] * n  # Initialize products array\n\n    for i in range(n):\n        products[i] = arr[i]  # Start with the current element\n        for j in range(i):\n            if arr[j] < arr[i]:  # Check for increasing subsequence\n                products[i] = max(products[i], products[j] * arr[i])  # Update product\n\n        max_product = max(max_product, products[i])  # Update max product\n\n    return max_product\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in <module>\\n    assert max_product([3, 100, 4, 5, 150, 6]) == 3000\\nAssertionError\\n')", "success": 0}
{"code": "def add_pairwise(test_tup):\n    if len(test_tup) < 2:\n        return tuple()\n    \n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    \n    return tuple(result)\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 1):\n        if l[i + 1] - l[i] != 1:\n            return False\n            \n    return True\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_intersection(test_list1, test_list2):\n    # Step 1: Create a set to store the intersection results\n    intersection_set = set()\n    \n    # Step 2: Loop through each tuple in the first list\n    for tuple1 in test_list1:\n        # Step 3: Check if the tuple exists in the second list (considering order)\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):  # Compare as sets to ignore order\n                intersection_set.add(tuple1)  # Add to the intersection set if found\n    \n    # Return the final intersection set\n    return intersection_set\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 15, in <module>\\n    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\\nAssertionError\\n')", "success": 0}
{"code": "def replace_char(str1, ch, newch):\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_counter(dict1):\n    # Step 1: Convert the dictionary items to a list of tuples\n    items = list(dict1.items())  # Sequential structure\n\n    # Step 2: Sort the list of tuples by the second element (value) in descending order\n    items.sort(key=lambda x: x[1], reverse=True)  # Branch structure (using sort)\n\n    # Step 3: Return the sorted list of tuples\n    return items  # Sequential structure\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_sum(nums):\n    if not nums:\n        raise ValueError(\"List must not be empty\")\n    \n    smallest = float('inf')\n    largest = float('-inf')\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    return smallest + largest\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_lower(string):\n    result = \"\"\n    for char in string:\n        if 'A' <= char <= 'Z':\n            result += chr(ord(char) + 32)  # Convert to lower case\n        else:\n            result += char\n    return result\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_lowercase(str1):\n    result = \"\"\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_Digit(n):\n    # Convert the number to a string and handle negative numbers\n    str_n = str(abs(n))\n    \n    # Get the first character and convert it back to an integer\n    first_digit = int(str_n[0])\n    \n    return first_digit\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    odd_numbers = []\n    for number in list:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def difference(n):\n    if n < 1:\n        return 0  # or raise an exception\n\n    sum_n = 0\n    sum_cubes_n = 0\n    \n    for i in range(1, n + 1):\n        sum_n += i\n        sum_cubes_n += i ** 3\n    \n    difference = sum_cubes_n - sum_n\n    return difference\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Odd_Pair(A, N):\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def toggle_string(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def digit_distance_nums(n1, n2):\n    # Convert both numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter number with leading zeros\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    \n    # Initialize the total difference\n    total_difference = 0\n    \n    # Iterate over each digit and calculate the absolute difference\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum(a, size):\n    max_current = max_global = a[0]\n    \n    for i in range(1, size):\n        max_current = max(a[i], max_current + a[i])\n        if max_current > max_global:\n            max_global = max_current\n    \n    return max_global\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a sorted tuple\n    containing the union of the elements from both tuples.\n    \n    Parameters:\n    test_tup1 (tuple): The first input tuple.\n    test_tup2 (tuple): The second input tuple.\n    \n    Returns:\n    tuple: A sorted tuple containing the union of the elements from both tuples.\n    \"\"\"\n    # Convert tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Check for empty tuples\n    if not set1 and not set2:\n        return ()\n    elif not set1:\n        return tuple(sorted(set2))\n    elif not set2:\n        return tuple(sorted(set1))\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the union set to a sorted list and then to a tuple\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max_Length(lst):\n    max_length = 0  # Sequential structure to initialize max length\n    for sublist in lst:  # Loop structure to iterate through each sublist\n        if len(sublist) > max_length:  # Branch structure to check and update max length\n            max_length = len(sublist)\n    return max_length\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_values(text):\n    values = []\n    in_quotes = False\n    current_value = ''\n    \n    for char in text:\n        if char == '\"':\n            if in_quotes:\n                values.append(current_value)\n                current_value = ''\n            in_quotes = not in_quotes\n        elif in_quotes:\n            current_value += char\n            \n    return values\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Pairs(arr, n):\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    total_pairs = 0\n    unique_elements = list(count_dict.keys())\n    \n    # Check if there are at least two unique elements\n    if len(unique_elements) < 2:\n        return 0\n    \n    # Calculate the total number of unequal pairs\n    for count in count_dict.values():\n        total_pairs += count * (n - count)\n    \n    # Each pair is counted twice, so divide by 2\n    return total_pairs // 2\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split(word):\n    \"\"\"\n    Splits the given word into a list of individual characters.\n\n    Parameters:\n    word (str): The word to be split.\n\n    Returns:\n    list: A list containing individual characters of the input word.\n    \"\"\"\n    if not isinstance(word, str):\n        return []  # Return an empty list if the input is not a string\n\n    characters = []  # Initialize an empty list to hold characters\n    for char in word:  # Loop through each character in the word\n        characters.append(char)  # Append the character to the list\n\n    return characters  # Return the list of characters\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    total = 0\n    \n    for digit in str(n):\n        total += int(digit)\n    \n    return total\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def issort_list(list1):\n    if len(list1) <= 1:\n        return True\n    \n    ascending = True\n    descending = True\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            ascending = False\n        if list1[i] < list1[i + 1]:\n            descending = False\n    \n    return ascending or descending\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_list(length):\n    result = []\n    for _ in range(length):\n        result.append({})\n    return result\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_sublists(list1):\n    # Sequential structure: Iterate through each sublist\n    for sublist in list1:\n        # Branch structure: Check if the sublist is not empty\n        if sublist:\n            # Sort the current sublist\n            sublist.sort()\n    \n    # Return the modified list of lists\n    return list1\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def two_unique_nums(nums):\n    count = {}\n    unique_nums = []\n    \n    # Count occurrences of each number\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Collect numbers that occur exactly once\n    for num, cnt in count.items():\n        if cnt == 1:\n            unique_nums.append(num)\n    \n    return unique_nums\n\n# Example assertions (not to be included in the final code)\n# assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n# assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\n# assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # Convert list to set to get unique numbers\n    product = 1\n    \n    if not unique_numbers:  # Check if the set is empty\n        return 0\n    \n    for num in unique_numbers:  # Iterate through unique numbers\n        product *= num  # Multiply each number to the product\n    \n    return product  # Return the final product\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def surfacearea_cylinder(r, h):\n    # Step 1: Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    # Step 2: Calculate the area of the top and bottom circles\n    top_bottom_area = 2 * 3.14159 * r ** 2\n    \n    # Step 3: Calculate the total surface area\n    total_surface_area = lateral_surface_area + top_bottom_area\n    \n    # Return the total surface area rounded to two decimal places\n    return round(total_surface_area, 2)\n\n# Test cases\nassert surfacearea_cylinder(10, 5) == 942.45\nassert surfacearea_cylinder(4, 5) == 226.18800000000002\nassert surfacearea_cylinder(4, 10) == 351.848\nassert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 15, in <module>\\n    assert surfacearea_cylinder(10, 5) == 942.45\\nAssertionError\\n')", "success": 0}
{"code": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit_Factorial(n):\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    if n == 0 or n == 1:\n        return 1\n    \n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n        if last_digit == 0:  # If at any point the last digit is 0, we can return 0\n            return 0\n            \n    return last_digit\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def interleave_lists(list1, list2, list3):\n    # Step 1: Initialize an empty list to hold the interleaved elements\n    interleaved = []\n    \n    # Step 2: Use a loop to iterate through the indices of the input lists\n    for i in range(len(list1)):\n        # Step 3: Append the corresponding elements from all three lists\n        interleaved.append(list1[i])  # Sequential structure\n        interleaved.append(list2[i])  # Sequential structure\n        interleaved.append(list3[i])  # Sequential structure\n    \n    # Step 4: Return the interleaved list\n    return interleaved\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    if not set1:\n        return tuple(set2)\n    if not set2:\n        return tuple(set1)\n    \n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    return tuple(dissimilar_elements)\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for element in test_tuple:\n        if isinstance(element, int):\n            if even_fnc(element):\n                result.append(element)\n        elif isinstance(element, tuple):\n            nested_result = even_ele(element, even_fnc)\n            if nested_result:  # Only add if the nested result is not empty\n                result.append(nested_result)\n        else:\n            result.append(element)  # In case of other types, just append\n    return tuple(result)\n\n# Example even function\ndef is_even(num):\n    return num % 2 == 0\n\n# Test cases\nassert even_ele((4, 5, (7, 6, (2, 4)), 6, 8), is_even) == (4, (6, (2, 4)), 6, 8)\nassert even_ele((5, 6, (8, 7, (4, 8)), 7, 9), is_even) == (6, (8, (4, 8)))\nassert even_ele((5, 6, (9, 8, (4, 6)), 8, 10), is_even) == (6, (8, (4, 6)), 8, 10)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 23, in <module>\\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\\nNameError: name \\'extract_even\\' is not defined\\n')", "success": 0}
{"code": "import math\n\ndef surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    b (float): The length of the base edge of the pyramid.\n    s (float): The height of the pyramid from the base to the apex.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    if b <= 0 or s <= 0:\n        return \"Base edge and height must be positive values.\"\n    \n    # Calculate the area of the base\n    base_area = b ** 2\n    \n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    \n    # Calculate the area of one of the triangular faces\n    triangle_area = (b * slant_height) / 2\n    \n    # Calculate the total lateral area\n    lateral_area = 4 * triangle_area\n    \n    # Total surface area is the sum of the base area and the lateral area\n    total_surface_area = base_area + lateral_area\n    \n    return total_surface_area\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 33, in <module>\\n    assert surface_Area(3,4) == 33\\nAssertionError\\n')", "success": 0}
{"code": "def my_dict(dict1):\n    if isinstance(dict1, dict):\n        return len(dict1) == 0\n    return False\nassert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def catalan_number(num):\n    # Step 1: Create a list to store the Catalan numbers\n    catalan = [0] * (num + 1)\n    \n    # Step 2: Initialize the first Catalan number\n    catalan[0] = 1\n    \n    # Step 3: Use a loop to calculate the Catalan numbers up to num\n    for i in range(1, num + 1):\n        # Step 4: Calculate the ith Catalan number using the formula\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    # Step 5: Return the nth Catalan number\n    return catalan[num]\n\n# Test cases\nassert catalan_number(10) == 16796\nassert catalan_number(9) == 4862\nassert catalan_number(7) == 429\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_adverbs(text):\n    words = text.split()\n    for word in words:\n        if word.endswith(\"ly\"):\n            start_index = text.index(word)\n            end_index = start_index + len(word) - 1\n            return f'{start_index}-{end_index}: {word}'\n    return None\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == \\'0-7: Clearly\\'\\nAssertionError\\n')", "success": 0}
{"code": "def expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items from a list of items.\n\n    Parameters:\n    items (list of dict): A list of dictionaries where each dictionary represents an item with a 'price' key.\n    n (int): The number of most expensive items to find.\n\n    Returns:\n    list of dict: A list of the n most expensive items.\n    \"\"\"\n    # Step 1: Validate input\n    if not isinstance(items, list) or not all(isinstance(item, dict) and 'price' in item for item in items):\n        raise ValueError(\"Items must be a list of dictionaries with a 'price' key.\")\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Step 2: Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Step 3: Return the top n items\n    return sorted_items[:n]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_Arr(l, n):\n    \"\"\"\n    Splits the list at the nth element and appends the first part to the end.\n    \n    Parameters:\n    l (list): The list to be split and rearranged.\n    n (int): The index at which to split the list.\n    \n    Returns:\n    list: The rearranged list.\n    \"\"\"\n    # Step 1: Input validation\n    if not isinstance(l, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    if n < 0 or n > len(l):\n        raise ValueError(\"The index n must be within the range of the list length.\")\n    \n    # Step 2: Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Step 3: Concatenate the second part with the first part\n    rearranged_list = second_part + first_part\n    \n    return rearranged_list\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    listx (list): The list to be converted.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    if not isinstance(listx, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    return tuple(listx)\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_diff(nums):\n    \"\"\"\n    This function returns the difference between the largest and smallest values in a given list.\n    \n    Parameters:\n    nums (list): A list of numerical values.\n    \n    Returns:\n    int/float: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The list is empty\")\n    \n    max_value = max(nums)\n    min_value = min(nums)\n    \n    return max_value - min_value\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def perfect_squares(a, b):\n    perfect_squares_list = []\n    for num in range(a, b + 1):\n        root = int(num**0.5)\n        if root * root == num:\n            perfect_squares_list.append(num)\n    return perfect_squares_list\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    # Step 1: Convert polar coordinates to rectangular coordinates\n    x = r * math.cos(theta)  # Calculate the x-coordinate\n    y = r * math.sin(theta)  # Calculate the y-coordinate\n    \n    # Step 2: Create a complex number from the rectangular coordinates\n    complex_number = complex(x, y)\n    \n    # Step 3: Return the results as a tuple\n    return (x, y), complex_number\n\n# Test cases\nassert polar_rect(3, 4) == ((-2.0, -2.4492935982947064e-16), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7) == ((-2.0, -2.4492935982947064e-16), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17) == ((-2.0, -2.4492935982947064e-16), (-2+2.4492935982947064e-16j))\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert polar_rect(3, 4) == ((-2.0, -2.4492935982947064e-16), (-2+2.4492935982947064e-16j))\\nAssertionError\\n')", "success": 0}
{"code": "def swap_List(newList):\n    # Step 1: Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList  # Return the list as is\n\n    # Step 2: Swap the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # Step 3: Create a new list with swapped elements\n    swapped_list = [last_element] + newList[1:-1] + [first_element]\n    \n    return swapped_list\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from math import comb\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n    \n    Args:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    return comb(n, k)\n\ndef sum_Of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial coefficients for a given n.\n    \n    Args:\n    n (int): The upper limit for the binomial coefficient calculation.\n    \n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    if n < 1:\n        return 0\n    total_sum = 0\n    for k in range(n):\n        product = binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n        total_sum += product\n    return total_sum\n\n# Assertions for testing\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def removezero_ip(ip):\n    parts = ip.split('.')\n    cleaned_parts = [str(int(part)) for part in parts]\n    cleaned_ip = '.'.join(cleaned_parts)\n    return cleaned_ip\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for number in list1:\n        if first_even is None and number % 2 == 0:\n            first_even = number\n        elif first_odd is None and number % 2 != 0:\n            first_odd = number\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n    \n    return first_even - first_odd\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    count1 = str1.count('1')\n    count2 = str2.count('1')\n    \n    if count1 != count2:\n        return \"Not Possible\"\n    \n    mismatches = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            mismatches += 1\n            \n    return mismatches // 2\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import sys\n\ndef tuple_size(tuple_list):\n    # Step 1: Use a sequential structure to get the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    \n    # Step 2: Use a branch structure to check if the tuple is empty\n    if len(tuple_list) == 0:\n        return 0  # Return 0 if the tuple is empty\n    \n    # Step 3: Use a loop structure to iterate through the elements (if needed for further processing)\n    # In this case, we are just returning the size, so the loop is not necessary.\n    \n    return size\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_kth(arr1, arr2, k):\n    def kth(arr1, start1, end1, arr2, start2, end2, k):\n        # Base cases\n        if start1 > end1:\n            return arr2[start2 + k]\n        if start2 > end2:\n            return arr1[start1 + k]\n        \n        mid1 = (end1 - start1) // 2\n        mid2 = (end2 - start2) // 2\n        \n        # Branching based on the comparison of mid elements\n        if mid1 + mid2 < k:\n            if arr1[start1 + mid1] > arr2[start2 + mid2]:\n                return kth(arr1, start1, end1, arr2, start2 + mid2 + 1, end2, k - mid2 - 1)\n            else:\n                return kth(arr1, start1 + mid1 + 1, end1, arr2, start2, end2, k - mid1 - 1)\n        else:\n            if arr1[start1 + mid1] > arr2[start2 + mid2]:\n                return kth(arr1, start1, start1 + mid1 - 1, arr2, start2, end2, k)\n            else:\n                return kth(arr1, start1, end1, arr2, start2, start2 + mid2 - 1, k)\n    \n    return kth(arr1, 0, len(arr1) - 1, arr2, 0, len(arr2) - 1, k - 1)\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(number)\n    num_digits = len(digits)\n    \n    # Initialize sum of powers\n    sum_of_powers = 0\n    \n    # Loop through each digit and calculate the sum of powers\n    for digit in digits:\n        sum_of_powers += int(digit) ** num_digits\n    \n    # Return True if the sum of powers equals the original number, else False\n    return sum_of_powers == number\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_average(number):\n    if number <= 0:\n        return \"Input must be a positive integer.\"\n    \n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    \n    return total_sum, average\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Even(n):\n    if isinstance(n, int):  # Check if n is an integer\n        return n % 2 == 0  # Return True if n is even, False otherwise\n    return False  # Return False if n is not an integer\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    if not set1 or not set2:\n        return set()\n    \n    result = set()\n    for element in set1:\n        if element in set2:\n            result.add(element)\n    \n    return result\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\nassert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\nassert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_not_prime(n):\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import heapq\n\ndef heap_queue_largest(nums, n):\n    if n > len(nums):\n        return []\n    largest_nums = heapq.nlargest(n, nums)\n    return sorted(largest_nums, reverse=True)\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR the two numbers to find differing bits\n    xor_result = num1 ^ num2\n    \n    # Check if the result is not zero and is a power of two\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(15, 8) == False\nassert differ_At_One_Bit_Pos(2, 4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_char_long(text):\n    words = text.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    \n    return set(long_words)\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    with the squares of the individual elements.\n    \n    :param nums: List of numbers\n    :return: List of squared numbers\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        return []\n    \n    # Initialize an empty list to store the squared values\n    squared_list = []\n    \n    # Iterate through each element in the input list\n    for num in nums:\n        # Calculate the square of the element and append to the squared_list\n        squared_list.append(num ** 2)\n    \n    # Return the list of squared values\n    return squared_list\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Rotations(s):\n    if len(s) <= 1:\n        return 1\n    if s.count(s[0]) == len(s):\n        return 1\n    \n    for i in range(1, len(s)):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return len(s)\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
