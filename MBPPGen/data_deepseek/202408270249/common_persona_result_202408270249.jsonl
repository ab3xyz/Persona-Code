{"code": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize a list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    \n    while numbers:\n        # The first number in the list is a Ludic number\n        ludic = numbers.pop(0)\n        ludic_numbers.append(ludic)\n        \n        # Remove every 'ludic'th number from the list\n        numbers = [num for i, num in enumerate(numbers, start=1) if i % ludic != 0]\n    \n    return ludic_numbers\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in <module>\\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\\nAssertionError\\n')", "success": 0}
{"code": "def reverse_words(s):\n    # Split the string into words\n    words = s.split(' ')\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def prime_num(num):\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_literals(text, pattern):\n    start_index = text.find(pattern)\n    if start_index != -1:\n        end_index = start_index + len(pattern)\n        return (pattern, start_index, end_index)\n    return None\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Bell(0, 0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_kth_element(list1, L):\n    if L <= 0 or L > len(list1):\n        return list1\n    return list1[:L-1] + list1[L:]\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_of_nth(test_list, N):\n    return max(row[N] for row in test_list)\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge(lst):\n    if not lst:\n        return []\n    \n    # Determine the number of elements in each sublist\n    num_elements = len(lst[0])\n    \n    # Initialize the result list with empty sublists\n    result = [[] for _ in range(num_elements)]\n    \n    for sublist in lst:\n        if len(sublist) != num_elements:\n            raise ValueError(\"All sublists must contain the same number of elements.\")\n        for i, element in enumerate(sublist):\n            result[i].append(element)\n    \n    return result\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cummulative_sum(test_list):\n    return sum(sum(sublist) for sublist in test_list)\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def average_tuple(nums):\n    # Transpose the tuples to align elements for averaging\n    transposed = zip(*nums)\n    # Calculate the average for each tuple of aligned elements\n    averages = [sum(elements) / len(elements) for elements in transposed]\n    return averages\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_Jumps(steps, d):\n    # Calculate the Euclidean distance from the origin to the point (d, 0)\n    distance = d\n    \n    # If the distance is 0, no jumps are needed\n    if distance == 0:\n        return 0\n    \n    # Calculate the maximum step size possible\n    max_step = (steps[0]**2 + steps[1]**2)**0.5\n    \n    # Calculate the minimum number of jumps required\n    # The ceiling of the division ensures we round up to the nearest whole number\n    min_jumps = -(-distance // max_step)\n    \n    return min_jumps\nassert min_Jumps((3,4),11)==3.5\nassert min_Jumps((3,4),0)==0\nassert min_Jumps((11,14),11)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert min_Jumps((3,4),11)==3.5\\nAssertionError\\n')", "success": 0}
{"code": "def div_list(nums1, nums2):\n    return [float(n1) / n2 if n2 != 0 else float('inf') for n1, n2 in zip(nums1, nums2)]\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def move_num(test_str):\n    chars = [c for c in test_str if not c.isdigit()]\n    digits = [c for c in test_str if c.isdigit()]\n    return ''.join(chars + digits)\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def largest_subset(a):\n    if not a:\n        return 0\n    \n    # Sort the list to ensure we can check divisibility in order\n    a.sort()\n    \n    # Create a list to store the size of the largest subset ending with each number\n    dp = [1] * len(a)\n    \n    # Iterate through the list to fill dp array\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The answer is the maximum value in dp array\n    return max(dp)\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_median(arr1, arr2, n):\n    def find_median_sorted_arrays(A, B):\n        if len(A) > len(B):\n            A, B = B, A\n        x, y = len(A), len(B)\n        low, high = 0, x\n        while low <= high:\n            partitionX = (low + high) // 2\n            partitionY = (x + y + 1) // 2 - partitionX\n\n            maxX = float('-inf') if partitionX == 0 else A[partitionX - 1]\n            minX = float('inf') if partitionX == x else A[partitionX]\n\n            maxY = float('-inf') if partitionY == 0 else B[partitionY - 1]\n            minY = float('inf') if partitionY == y else B[partitionY]\n\n            if maxX <= minY and maxY <= minX:\n                if (x + y) % 2 == 0:\n                    return (max(maxX, maxY) + min(minX, minY)) / 2\n                else:\n                    return max(maxX, maxY)\n            elif maxX > minY:\n                high = partitionX - 1\n            else:\n                low = partitionX + 1\n        raise ValueError(\"Input arrays are not sorted or not of the same size\")\n\n    return find_median_sorted_arrays(arr1, arr2)\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_upper(string):\n    return string.upper()\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_List(newList):\n    if len(newList) <= 1:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def triangle_area(r):\n    if r < 0:\n        return None\n    elif r == 0:\n        return 0\n    else:\n        # The largest triangle in a semicircle with radius r has a base of 2*r (the diameter)\n        # and a height of r. The area of a triangle is (base * height) / 2.\n        return (2 * r * r) / 2\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid + start:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return start\nassert find_First_Missing([0,1,2,3]) == 4\nassert find_First_Missing([0,1,2,6,9]) == 3\nassert find_First_Missing([2,3,5,8,9]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 13, in <module>\\n    assert find_First_Missing([0,1,2,3]) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def replace_spaces(string):\n    return string.replace(' ', '%20')\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    return [num for num in list if num % 2 == 0]\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def adjac(ele, sub=[]):\n    x, y = ele\n    # Generate all adjacent coordinates including the given coordinate\n    adjacent_coords = [\n        [x-1, y-1], [x-1, y], [x-1, y+1],\n        [x, y-1], [x, y], [x, y+1],\n        [x+1, y-1], [x+1, y], [x+1, y+1]\n    ]\n    # Filter out the given coordinate if it's in the list\n    if sub:\n        adjacent_coords = [coord for coord in adjacent_coords if coord != sub]\n    return adjacent_coords\n\ndef get_coordinates(coord):\n    return adjac(coord)\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_spaces(text):\n    if '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text.replace(' ', '_')\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def move_zero(num_list):\n    non_zero_items = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return non_zero_items + [0] * zero_count\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pair_xor_Sum(arr, n):\n    # Initialize result\n    xor_sum = 0\n    \n    # Iterate over all pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def heap_sort(iterable):\n    def heapify(arr, n, i):\n        largest = i  # Initialize largest as root\n        l = 2 * i + 1  # left = 2*i + 1\n        r = 2 * i + 2  # right = 2*i + 2\n\n        # See if left child of root exists and is greater than root\n        if l < n and arr[i] < arr[l]:\n            largest = l\n\n        # See if right child of root exists and is greater than root\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n\n        # Change root, if needed\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n            # Heapify the root.\n            heapify(arr, n, largest)\n\n    # The main function to sort an array of given size\n    n = len(iterable)\n\n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]  # swap\n        heapify(iterable, i, 0)\n\n    return iterable\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Function to check whether there is no profit and no loss.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return actual_cost == sale_amount\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index based on the wind speed (v) in mph and the temperature (t) in Fahrenheit.\n    The formula used is an approximation suitable for typical conditions.\n    \"\"\"\n    # Ensure the input values are within the valid range for the wind chill calculation\n    if v < 0 or t > 50:\n        raise ValueError(\"Wind speed must be non-negative and temperature must be 50\u00b0F or less.\")\n    \n    # Calculate the wind chill index using the simplified formula\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr=\"SyntaxError: Non-UTF-8 code starting with '\\\\xa1' in file D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py on line 9, but no encoding declared; see https://python.org/dev/peps/pep-0263/ for details\\n\")", "success": 0}
{"code": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].islower())\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert sample_nam([\\'sally\\', \\'Dylan\\', \\'rebecca\\', \\'Diana\\', \\'Joanne\\', \\'keith\\'])==16\\nAssertionError\\n')", "success": 0}
{"code": "def remove_parenthesis(items):\n    result = []\n    for item in items:\n        # Find the index of the opening parenthesis\n        open_paren_index = item.find('(')\n        if open_paren_index != -1:\n            # Remove the parenthesis and everything inside them\n            result.append(item[:open_paren_index].strip())\n        else:\n            # If there are no parenthesis, just add the item as is\n            result.append(item)\n    return result if len(result) > 1 else result[0]\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_nonagonal(n):\n    # The formula for the nth nonagonal number is given by n(7n - 5) / 2\n    return n * (7 * n - 5) // 2\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_wordz_middle(text):\n    # Regular expression to match a word that contains 'z' but not at the start or end\n    pattern = r'\\b\\w*z\\w*\\b(?<!\\b\\w*z\\b)(?!\\b\\w*z\\b)'\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    # Return True if a match is found, False otherwise\n    return bool(match)\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert text_match_wordz_middle(\"pythonzabc.\")==True\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in text_match_wordz_middle\\n    match = re.search(pattern, text)\\n  File \"C:\\\\Users\\\\ianwa\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\re.py\", line 200, in search\\n    return _compile(pattern, flags).search(string)\\n  File \"C:\\\\Users\\\\ianwa\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\re.py\", line 303, in _compile\\n    p = sre_compile.compile(pattern, flags)\\n  File \"C:\\\\Users\\\\ianwa\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\sre_compile.py\", line 792, in compile\\n    code = _code(p, flags)\\n  File \"C:\\\\Users\\\\ianwa\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\sre_compile.py\", line 631, in _code\\n    _compile(code, p.data, flags)\\n  File \"C:\\\\Users\\\\ianwa\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\sre_compile.py\", line 198, in _compile\\n    raise error(\"look-behind requires fixed-width pattern\")\\nre.error: look-behind requires fixed-width pattern\\n')", "success": 0}
{"code": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        raise ValueError(\"k cannot be greater than the length of the input array\")\n    return input[:k][::-1] + input[k:]\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Initialize the first cell of dp\n    dp[0][0] = cost[0][0]\n    \n    # Initialize the first column of dp\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Initialize the first row of dp\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Calculate the maximum average\n    max_sum = dp[n-1][n-1]\n    path_length = (n-1) * 2 + 1  # Number of cells in the path to the bottom-right corner\n    max_average = max_sum / path_length\n    \n    return max_average\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_same_pair(nums1, nums2):\n    return sum(1 for x, y in zip(nums1, nums2) if x == y)\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power_base_sum(base, power):\n    # Calculate the power of the base\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Sum the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    # Return the sum of the digits\n    return digit_sum\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef extract_quotation(text1):\n    # Use regular expression to find all quoted values\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text1)\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()", "result": "Command '['python', 'temp.py']' timed out after 5 seconds", "success": 0}
{"code": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of equal length and returns a new list\n    where each element is the sum of the corresponding elements from the input lists.\n    \n    Parameters:\n    lst1 (list of int/float): The first list of numbers.\n    lst2 (list of int/float): The second list of numbers.\n    \n    Returns:\n    list of int/float: A new list containing the sums of the corresponding elements.\n    \"\"\"\n    # Ensure both lists are of the same length\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Use a list comprehension to sum corresponding elements\n    return [a + b for a, b in zip(lst1, lst2)]\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def consecutive_duplicates(nums):\n    result = []\n    for num in nums:\n        if not result or result[-1] != num:\n            result.append(num)\n    return result\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_specialchar(text):\n    # Define the characters to be replaced\n    characters_to_replace = [' ', ',', '.']\n    \n    # Iterate through each character in the input string\n    for char in characters_to_replace:\n        # Replace each character with a colon\n        text = text.replace(char, ':')\n    \n    return text\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def toggle_middle_bits(n):\n    # Determine the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # If the number has less than 3 bits, return it as is\n    if num_bits < 3:\n        return n\n    \n    # Create a mask that covers all bits except the first and the last\n    mask = (1 << (num_bits - 1)) - 1 - 1\n    \n    # Toggle the bits covered by the mask\n    return n ^ mask\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def left_insertion(a, x):\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef check_str(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / (2 ** (n - 1)) + geometric_sum(n - 1)\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert geometric_sum(7) == 1.9921875\\nAssertionError\\n')", "success": 0}
{"code": "def find_Index(n):\n    if n == 1:\n        return 1\n    index = 1\n    triangular_number = 1\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index\n    return index\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n    Check if all characters in the string are the same.\n\n    :param s: Input string\n    :return: True if all characters are the same, False otherwise\n    \"\"\"\n    if not s:\n        return True  # An empty string is considered to have all same characters\n    \n    first_char = s[0]\n    return all(char == first_char for char in s)\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef area_tetrahedron(side):\n    # The formula for the surface area of a regular tetrahedron is sqrt(3) * side^2\n    return math.sqrt(3) * side**2\nassert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n  # In case m is larger than the list size\n    return lst[-m:] + lst[:-m]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any None value.\n\n    Parameters:\n    test_tup (tuple): The tuple to check.\n\n    Returns:\n    bool: True if there is at least one None value, False otherwise.\n    \"\"\"\n    return any(value is None for value in test_tup)\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(n):\n        for digit in str(n):\n            if digit == '0' or n % int(digit) != 0:\n                return False\n        return True\n    \n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    return (math.pi * r ** 2) * (a / 360)\nassert sector_area(4,45)==6.283185307179586\nassert sector_area(9,45)==31.808625617596654\nassert sector_area(9,361)==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def capital_words_spaces(str1):\n    return ''.join(' ' + char if char.isupper() else char for char in str1).strip()\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_numeric_strings(nums_str):\n    return sorted(map(int, nums_str))\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_tuple(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i >= n:\n        return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < n and arr[i] > arr[left_child]:\n        return False\n    if right_child < n and arr[i] > arr[right_child]:\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_k(test_list, K):\n    # Sort the list based on the second element of the tuples\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first K elements of the sorted list\n    return sorted_list[:K]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    sorted_unique_numbers = sorted(set(numbers))\n    if len(sorted_unique_numbers) < 2:\n        return None\n    return sorted_unique_numbers[1]\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    return bool(re.search(pattern, text))\nassert text_match_zero_one(\"ac\")==False\nassert text_match_zero_one(\"dc\")==False\nassert text_match_zero_one(\"abbbba\")==True\nassert text_match_zero_one(\"dsabbbba\")==True\nassert text_match_zero_one(\"asbbbba\")==False\nassert text_match_zero_one(\"abaaa\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_reverse_pairs(test_list):\n    count = 0\n    seen = set()\n    for string in test_list:\n        if string not in seen:\n            reverse_string = string[::-1]\n            if reverse_string in seen:\n                count += 1\n            seen.add(string)\n            seen.add(reverse_string)\n    return count\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\\nAssertionError\\n')", "success": 0}
{"code": "def unique_sublists(list1):\n    from collections import defaultdict\n    \n    # Dictionary to store the count of each sublist (converted to tuple)\n    sublist_count = defaultdict(int)\n    \n    for sublist in list1:\n        # Convert sublist to tuple and count its occurrences\n        sublist_tuple = tuple(sublist)\n        sublist_count[sublist_tuple] += 1\n    \n    return dict(sublist_count)\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef is_decimal(num):\n    # Regular expression to match a decimal number with exactly two decimal places\n    pattern = r'^[+-]?(\\d+\\.\\d{2})$'\n    return bool(re.match(pattern, num))\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_Element(arr):\n    if not arr:\n        return False\n    return all(element == arr[0] for element in arr)\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumber_number(monthnum3):\n    # List of months with 30 days: April (4), June (6), September (9), November (11)\n    months_with_30_days = [4, 6, 9, 11]\n    return monthnum3 in months_with_30_days\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize minimum difference\n    min_diff = float('inf')\n    # Find the minimum difference by comparing adjacent pairs in sorted array\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    return min_diff\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert find_min_diff((1,5,3,19,18,25),6) == 1\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in find_min_diff\\n    arr.sort()\\nAttributeError: \\'tuple\\' object has no attribute \\'sort\\'\\n')", "success": 0}
{"code": "def number_ctr(str):\n    return sum(c.isdigit() for c in str)\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_polite(n):\n    # A polite number is the sum of two or more consecutive integers.\n    # The nth polite number can be found by considering the sum of the first n odd numbers minus 1.\n    # This is equivalent to finding the (n+1)th odd number.\n    return 2 * n + 1\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert is_polite(7) == 11\\nAssertionError\\n')", "success": 0}
{"code": "def pair_wise(l1):\n    return list(zip(l1[:-1], l1[1:]))\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_pairs_count(arr, sum):\n    frequency = {}\n    count = 0\n    \n    for number in arr:\n        complement = sum - number\n        \n        if complement in frequency:\n            count += frequency[complement]\n        \n        frequency[number] = frequency.get(number, 0) + 1\n    \n    return count\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Diff(li1, li2):\n    return sorted(set(li1) - set(li2))\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\\nAssertionError\\n')", "success": 0}
{"code": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n    \n    Parameters:\n    n (int): The number of first odd natural numbers to consider.\n    \n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_fourth_power = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_fourth_power += odd_number ** 4\n    return sum_fourth_power\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_expression(exp):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def occurance_substring(text, pattern):\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] not in vowels and (test_str[i - 1] in vowels or test_str[i + 1] in vowels):\n            count += 1\n    return count\nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert count_vowels(\\'bestinstareels\\') == 7\\nAssertionError\\n')", "success": 0}
{"code": "def find_sum(arr):\n    unique_elements = set(arr)\n    return sum(unique_elements)\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pack_consecutive_duplicates(list1):\n    if not list1:  # Check if the list is empty\n        return []\n\n    packed_list = []  # Initialize the list to hold the packed sublists\n    current_sublist = [list1[0]]  # Start the first sublist with the first element\n\n    for item in list1[1:]:  # Iterate through the list starting from the second element\n        if item == current_sublist[-1]:  # If the item is the same as the last item in the current sublist\n            current_sublist.append(item)  # Add it to the current sublist\n        else:\n            packed_list.append(current_sublist)  # Otherwise, add the current sublist to the packed list\n            current_sublist = [item]  # Start a new sublist with the current item\n\n    packed_list.append(current_sublist)  # Don't forget to add the last sublist to the packed list\n\n    return packed_list\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_combinations(test_list):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 1\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert count_divisors(10)\\nAssertionError\\n')", "success": 0}
{"code": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for start in range(n):\n        for end in range(start, n, 2):  # Step by 2 to ensure odd length\n            total_sum += sum(arr[start:end+1])\n    return total_sum\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values among R, G, B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    \n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    return (h, s, v)\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            return first_even * first_odd\n    \n    return None  # In case both an even and an odd number are not found\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_str_int(test_str):\n    # Remove the parentheses and split the string by commas\n    str_values = test_str.strip('()').split(',')\n    # Convert each string value to an integer\n    int_values = tuple(map(int, str_values))\n    return int_values\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def right_insertion(a, x):\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return bool(re.search(pattern, text))\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_list(input_list):\n    \"\"\"\n    This function counts the number of lists within the given list.\n    \n    :param input_list: List containing various elements\n    :return: Integer count of lists within the input list\n    \"\"\"\n    return sum(isinstance(element, list) for element in input_list)\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last(arr, x):\n    \"\"\"\n    Find the last position of the target element in a sorted array.\n    \n    :param arr: List[int] - A sorted list of integers\n    :param x: int - The target element to find\n    :return: int - The last position of the target element, or -1 if not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Continue searching to the right\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,3,2,3,6,8,9],3) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_starta_endb(text):\n    return bool(re.fullmatch(r'a.*b', text))\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def return_sum(dict):\n    return sum(dict.values())\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_odd(n):\n    \"\"\"\n    Calculate the sum of all odd numbers within the range of 1 to n (inclusive).\n\n    Parameters:\n    n (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd numbers within the range.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the range\n    for number in range(1, n + 1):\n        # Check if the number is odd\n        if number % 2 != 0:\n            total_sum += number\n    \n    return total_sum\n\n# Example usage:\nprint(sum_odd(5))  # Output: 9\nprint(sum_odd(7))  # Output: 16\nprint(sum_odd(13)) # Output: 49\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='9\\n16\\n49\\n', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 26, in <module>\\n    assert sum_in_range(2,5) == 8\\nNameError: name \\'sum_in_range\\' is not defined\\n')", "success": 0}
{"code": "def _sum(arr):\n    return sum(arr)\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d)) & 0xFFFFFFFF\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_all_spaces(text):\n    return ''.join(text.split())\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_three_equal(x, y, z):\n    # Count the number of equal numbers among the three given integers\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_rotation(arr):\n    # Find the index of the minimum element\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    # The number of rotations is the index of the minimum element\n    return min_index\nassert count_rotation([3,2,1]) == 1\nassert count_rotation([4,5,1,2,3]) == 2\nassert count_rotation([7,8,9,1,2,3]) == 3\nassert count_rotation([1,2,3]) == 0\nassert count_rotation([1,3,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert count_rotation([3,2,1]) == 1\\nAssertionError\\n')", "success": 0}
{"code": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return n == root * root\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_list(lists):\n    return max(lists, key=sum)\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None  # In case there are no odd numbers in the list\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_K(test_tup, K):\n    return K in test_tup\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_smaller(test_tup1, test_tup2):\n    return all(t1 > t2 for t1, t2 in zip(test_tup1, test_tup2))\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        # Character not found in the string\n        return s\n    \n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        # Only one occurrence of the character\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    \n    # Remove the first and last occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return s\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_matrix(M):\n    # Sort the matrix based on the sum of each row\n    return sorted(M, key=lambda row: sum(row))\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Volume(l, b, h):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    l (float): The length of the prism.\n    b (float): The base length of the triangular face.\n    h (float): The height of the triangular face.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume using the formula: V = 1/2 * b * h * l\n    volume = 0.5 * b * h * l\n    return volume\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_lowercase_underscore(text):\n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_perimeter(a):\n    return 4 * a\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_dirty_chars(main_string, chars_to_remove):\n    return ''.join([char for char in main_string if char not in chars_to_remove])\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_woodall(x):\n    # A Woodall number is a number of the form W(n) = n * 2^n - 1\n    # We need to find if x can be expressed in this form\n    n = 1\n    while True:\n        woodall_candidate = n * (2 ** n) - 1\n        if woodall_candidate == x:\n            return True\n        elif woodall_candidate > x:\n            return False\n        n += 1\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rev(num):\n    # Convert the number to a string to reverse it\n    reversed_num = int(str(num)[::-1])\n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert check(70) == False\\nNameError: name \\'check\\' is not defined\\n')", "success": 0}
{"code": "def find_Max_Num(arr):\n    # Sort the array in descending order based on the concatenated value of each digit\n    arr.sort(key=lambda x: str(x), reverse=True)\n    # Join the sorted digits to form the largest number\n    return int(''.join(map(str, arr)))\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def opposite_Signs(x, y):\n    return (x ^ y) < 0\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_octagonal(n):\n    # The formula for the nth octagonal number is given by n(3n - 2)\n    return n * (3 * n - 2)\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Substrings(s):\n    def digit_sum(substring):\n        return sum(int(char) for char in substring)\n    \n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n                \n    return count\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def smallest_num(xs):\n    if not xs:  # Check if the list is empty\n        return None  # Return None for an empty list\n    smallest = xs[0]  # Initialize smallest with the first element\n    for num in xs:\n        if num < smallest:\n            smallest = num  # Update smallest if a smaller number is found\n    return smallest\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_difference(test_list):\n    max_diff = 0\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pos_count(list):\n    \"\"\"\n    Counts the number of positive numbers in a given list.\n\n    Parameters:\n    list (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    return sum(1 for num in list if num > 0)\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Monotonic(A):\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            increasing = False\n        if A[i] > A[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_sublist(l, s):\n    len_l, len_s = len(l), len(s)\n    if len_s > len_l:\n        return False\n    for i in range(len_l - len_s + 1):\n        if l[i:i+len_s] == s:\n            return True\n    return False\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_equal(Input):\n    if not Input:\n        return True  # If no tuples are provided, they are trivially of equal length.\n    \n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return False\n    return True\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def comb_sort(nums):\n    def get_next_gap(gap):\n        # Shrink gap by shrink factor\n        gap = int(gap / 1.3)\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dif_Square(n):\n    # Check if n is a difference of two squares\n    # The difference of two squares can be represented as (a^2 - b^2) = (a - b)(a + b)\n    # We need to find if there exist integers a and b such that (a - b)(a + b) = n\n    # This can be done by iterating over possible values of a and checking if b is an integer\n    \n    for a in range(int(n**0.5) + 1):  # a can be at most sqrt(n)\n        b_squared = a**2 - n\n        if b_squared >= 0:  # b^2 must be non-negative\n            b = int(b_squared**0.5)\n            if a**2 - b**2 == n:  # Check if the difference of squares equals n\n                return True\n    return False\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 14, in <module>\\n    assert dif_Square(5) == True\\nAssertionError\\n')", "success": 0}
{"code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern and color_to_pattern[color] != pattern:\n            return False\n        if pattern in pattern_to_color and pattern_to_color[pattern] != color:\n            return False\n        \n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    \n    return True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_tuples(test_list, K):\n    \"\"\"\n    This function returns a list of tuples where all elements are divisible by K.\n    \n    :param test_list: List of tuples to be checked\n    :param K: The divisor\n    :return: List of tuples with all elements divisible by K\n    \"\"\"\n    return [tup for tup in test_list if all(element % K == 0 for element in tup)]\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Diff(n):\n    # Convert the number to a string to easily access individual digits\n    str_n = str(n)\n    # Initialize variables to store the sum of alternating digits\n    sum1 = 0\n    sum2 = 0\n    \n    # Iterate through the digits of the number\n    for i in range(len(str_n)):\n        # Add the digit to sum1 if its position is even (considering 0 as even)\n        if i % 2 == 0:\n            sum1 += int(str_n[i])\n        # Add the digit to sum2 if its position is odd\n        else:\n            sum2 += int(str_n[i])\n    \n    # Calculate the difference between the sums\n    diff = abs(sum1 - sum2)\n    \n    # Check if the difference is divisible by 11\n    return diff % 11 == 0\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def word_len(s):\n    \"\"\"\n    Check if the length of the given word is odd.\n\n    Parameters:\n    s (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(s) % 2 != 0\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Compute the sum modulo 26\n    modulo_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' as the starting point)\n    result_char = chr(modulo_result + ord('a'))\n    \n    return result_char\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert get_Char(\"abc\") == \"f\"\\nAssertionError\\n')", "success": 0}
{"code": "def sequence(n):\n    if n <= 0:\n        return None\n    \n    # Initialize the sequence list with the first element\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    \n    if n > 1:\n        seq[2] = 1\n    \n    # Compute the Newman-Conway sequence up to the nth element\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The formula for the nth centered hexagonal number is given by:\n    H_n = 3n(n - 1) + 1\n\n    Parameters:\n    n (int): The position in the sequence of centered hexagonal numbers.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return 3 * n * (n - 1) + 1\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = dict1.copy()\n    for key, value in dict2.items():\n        result[key] = value\n    for key, value in dict3.items():\n        result[key] = value\n    return result\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 9, in <module>\\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={\\'W\\': \\'White\\', \\'P\\': \\'Pink\\', \\'B\\': \\'Black\\', \\'R\\': \\'Red\\', \\'G\\': \\'Green\\', \\'L\\': \\'lavender\\'}\\nAssertionError\\n')", "success": 0}
{"code": "def freq_count(list1):\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def closest_num(N):\n    return N - 1\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def len_log(list1):\n    return max(len(word) for word in list1)\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_substring(str1, sub_str):\n    return any(sub_str in s for s in str1)\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_undulating(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    for i in range(len(n_str) - 1):\n        if n_str[i] == n_str[i + 1]:\n            return False\n    return True\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def power(a, b):\n    return a ** b\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def index_minimum(test_list):\n    # Find the tuple with the smallest second value\n    min_tuple = min(test_list, key=lambda x: x[1])\n    # Return the first element of the tuple with the smallest second value\n    return min_tuple[0]\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency_lists(list1):\n    from collections import Counter\n    flat_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flat_list))\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    \n    product = 1\n    for number in numbers:\n        product *= number\n    \n    length = len(numbers)\n    if length == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    result = product / length\n    return result\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 15, in <module>\\n    assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    \n    return num\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def kth_element(arr, k):\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    # Return the kth element (considering 1-based indexing)\n    return sorted_arr[k - 1]\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert kth_element([12,3,5,7,19], 2) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def snake_to_camel(word):\n    # Split the string by underscores\n    components = word.split('_')\n    # Capitalize the first letter of each component and join them together\n    return ''.join(x.title() for x in components)\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    \n    # Create a 2D list to store Eulerian numbers\n    euler = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: a(n, 0) = 1 for all n\n    for i in range(n + 1):\n        euler[i][0] = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            euler[i][j] = (i - j) * euler[i - 1][j - 1] + (j + 1) * euler[i - 1][j]\n    \n    return euler[n][m]\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a given list of booleans.\n\n    Parameters:\n    lst (list): A list containing boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    return sum(lst)\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_sorted_list(num1, num2, num3):\n    # Combine all lists into one\n    combined = num1 + num2 + num3\n    # Sort the combined list\n    combined.sort()\n    return combined\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_Equivalent(s, n):\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 != 0\n\n    count = 0\n    \n    for i in range(n):\n        if is_odd(s):\n            count += 1\n        s = s[-1] + s[:-1]  # Rotate the string to the right\n    \n    return count\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:  # Check if the list is empty\n        return []\n    \n    # Convert each sublist to a set to use intersection operation\n    sets = [set(sublist) for sublist in nestedlist]\n    \n    # Find the intersection of all sets\n    common_elements = sets[0].intersection(*sets[1:])\n    \n    return list(common_elements)\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_dit(list1):\n    return all(not d for d in list1)\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_to_float(test_list):\n    return [tuple(float(item) if item.replace('.', '', 1).isdigit() else item for item in sublist) for sublist in test_list]\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_list(string):\n    return string.split()\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def search(arr):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n\n        if mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        elif mid > 0 and arr[mid] == arr[mid - 1]:\n            high = mid - 2\n        else:\n            return arr[mid]\n\n    return None\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        sum_div = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum_div += i\n                if i != n // i:\n                    sum_div += n // i\n        return sum_div\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        sum_div_num = sum_of_divisors(num)\n        if sum_div_num != num and sum_of_divisors(sum_div_num) == num and sum_div_num <= limit:\n            amicable_sum += num\n\n    return amicable_sum\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef angle_complex(a, b):\n    # Convert the input to a complex number\n    complex_num = complex(a, b.imag)\n    # Calculate the angle using the phase method from the cmath module\n    angle = math.atan2(complex_num.imag, complex_num.real)\n    return angle\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        elif current_diff < 0:\n            current_diff = 0\n    return max_diff\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    def common_divisors(x, y):\n        common_divs = []\n        for i in range(1, gcd(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                common_divs.append(i)\n        return common_divs\n    \n    return sum(common_divisors(a, b))\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert dict_depth({\\'a\\':1, \\'b\\': {\\'c\\': {\\'d\\': {}}}})==4\\nAssertionError\\n')", "success": 0}
{"code": "def multiply_int(x, y):\n    return x * y\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n]\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def magic_square_test(my_matrix):\n    size = len(my_matrix)\n    if size == 0:\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(my_matrix[0])\n    \n    # Check sums of rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of columns\n    for col in range(size):\n        if sum(my_matrix[row][col] for row in range(size)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(size)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(my_matrix[i][size - 1 - i] for i in range(size)) != magic_sum:\n        return False\n    \n    return True\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_occurrences(nums):\n    frequency = {}\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n        \n        if frequency[num] > max_freq:\n            max_freq = frequency[num]\n            max_item = num\n    \n    return max_item\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_vowels(str1: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    \n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(str_list)\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tup_string(tup1):\n    return ''.join(tup1)\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def hexagonal_num(n):\n    return n * (2 * n - 1)\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def zero_count(nums):\n    total_elements = len(nums)\n    if total_elements == 0:\n        return 0.0\n    zero_elements = nums.count(0)\n    return zero_elements / total_elements\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def is_Sum_Of_Powers_Of_Two(n):\n    # A number can be represented as the sum of non-zero powers of 2 if and only if it has exactly one bit set in its binary representation.\n    # This is equivalent to checking if n is a power of 2.\n    return (n & (n - 1)) == 0 and n != 0\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert is_Sum_Of_Powers_Of_Two(10) == True\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    r (float): The radius of the circle\n    \n    Returns:\n    float: The circumference of the circle\n    \"\"\"\n    if r < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 2 * math.pi * r\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_singly(test_list):\n    flat_set = set()\n    for sublist in test_list:\n        for item in sublist:\n            flat_set.add(item)\n    return list(flat_set)\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\nassert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\nassert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def pancake_sort(nums):\n    def flip(arr, k):\n        return arr[:k+1][::-1] + arr[k+1:]\n    \n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in nums[:n]\n        max_idx = nums.index(max(nums[:n]))\n        \n        # If the max element is not at the end of the current subarray, flip to move it to the front\n        if max_idx != n - 1:\n            if max_idx != 0:\n                nums = flip(nums, max_idx)\n            # Flip to move the max element to its correct position\n            nums = flip(nums, n - 1)\n        n -= 1\n    return nums\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lists(Input):\n    return sum(isinstance(item, list) for item in Input)\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 5, in <module>\\n    assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\\nAssertionError\\n')", "success": 0}
{"code": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0  # If there are fewer than 2 elements, no valid difference can be found\n    \n    min_element = arr[0]\n    max_difference = 0\n    \n    for num in arr[1:]:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    \n    return max_difference\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert max_Abs_Diff((9,3,2,5,1)) == 8\\nAssertionError\\n')", "success": 0}
{"code": "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert find_solution(2, 3, 7) == (2, 1)\\nAssertionError\\n')", "success": 0}
{"code": "def remove_elements(list1, list2):\n    # Convert list2 to a set for O(1) average time complexity lookups\n    remove_set = set(list2)\n    \n    # Use list comprehension to filter out elements present in remove_set\n    result_list = [element for element in list1 if element not in remove_set]\n    \n    return result_list\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_series(n):\n    return sum(n - 2*i for i in range(n // 2 + 1))\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): The number of sides of the polygon.\n    l (float): The length of each side of the polygon.\n\n    Returns:\n    float: The area of the polygon.\n    \"\"\"\n    # Using the formula for the area of a regular polygon: (s * l^2) / (4 * tan(pi/s))\n    return (s * l**2) / (4 * math.tan(math.pi / s))\nassert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\nassert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\nassert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def div_sum(n):\n    \"\"\"\n    Calculate the sum of divisors of a given integer n.\n    \"\"\"\n    sum_divisors = 1  # 1 is always a divisor\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:  # Avoid adding the square root twice for perfect squares\n                sum_divisors += n // i\n    return sum_divisors\n\ndef are_equivalent(a, b):\n    \"\"\"\n    Determine if the sum of the divisors of two integers a and b are the same.\n    \"\"\"\n    return div_sum(a) == div_sum(b)\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_char_position(str1):\n    count = 0\n    for char in str1:\n        # Check if the character is an alphabet letter\n        if char.isalpha():\n            # Convert character to lowercase to handle case insensitivity\n            char_lower = char.lower()\n            # Calculate the position in the alphabet (a=1, b=2, ..., z=26)\n            position = ord(char_lower) - ord('a') + 1\n            # Check if the character's position matches its position in the string\n            if position == str1.index(char) + 1:\n                count += 1\n    return count\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    return 1 << (n - 1).bit_length()\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def frequency(a, x):\n    return a.count(x)\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_range_list(list1, m, n):\n    return sum(list1[m:n+1])\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def perimeter_pentagon(a):\n    return 5 * a\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_occurance(s):\n    target = 'std'\n    count = 0\n    index = 0\n    \n    while index <= len(s) - len(target):\n        if s[index:index+len(target)] == target:\n            count += 1\n            index += len(target)  # Move past the current occurrence\n        else:\n            index += 1  # Move to the next character\n    \n    return count\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_type(test_tuple):\n    if not test_tuple:  # Check if the tuple is empty\n        return False\n    first_type = type(test_tuple[0])\n    return all(isinstance(item, first_type) for item in test_tuple)\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_majority(arr, n, x):\n    # Since the array is sorted, we can use binary search to find the first occurrence of x\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n\n    # Find the first occurrence of x\n    first = first_occurrence(arr, 0, n - 1, x)\n\n    # If x is not present at all, return False\n    if first == -1:\n        return False\n\n    # Check if x is the majority element\n    if first + n // 2 < n and arr[first + n // 2] == x:\n        return True\n    else:\n        return False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\nassert is_majority([1, 1, 2, 2], 5, 1) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (1s) in the binary representation of a given number.\n\n    Parameters:\n    n (int): The number to count set bits in.\n\n    Returns:\n    int: The number of set bits in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def odd_values_string(str):\n    return ''.join([char for index, char in enumerate(str) if index % 2 == 0])\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Shift the number n to the right by l-1 positions to align the range with the least significant bits\n    # Then create a mask that has r-l+1 ones, which corresponds to the range we are interested in\n    mask = (1 << (r - l + 1)) - 1\n    # Apply the mask to the shifted number to isolate the bits in the given range\n    # Check if the result is equal to the mask (all bits set)\n    return (n >> (l - 1)) & mask == mask\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\\nAssertionError\\n')", "success": 0}
{"code": "def re_arrange_array(arr, n):\n    # Initialize two pointers for negative and positive elements\n    neg_ptr = 0\n    pos_ptr = n - 1\n    \n    # Move negative elements to the front and positive elements to the back\n    while neg_ptr < pos_ptr:\n        # Move neg_ptr to the right until a positive element is found\n        while neg_ptr < n and arr[neg_ptr] < 0:\n            neg_ptr += 1\n        # Move pos_ptr to the left until a negative element is found\n        while pos_ptr >= 0 and arr[pos_ptr] >= 0:\n            pos_ptr -= 1\n        # Swap the elements at neg_ptr and pos_ptr if pointers haven't crossed\n        if neg_ptr < pos_ptr:\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n    \n    return arr\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def replace_blank(str1, char):\n    \"\"\"\n    Replaces all blank spaces in the input string with the specified character.\n    \n    Parameters:\n    str1 (str): The string in which spaces will be replaced.\n    char (str): The character that will replace the spaces.\n    \n    Returns:\n    str: The modified string with spaces replaced by the specified character.\n    \"\"\"\n    if not isinstance(str1, str) or not isinstance(char, str):\n        raise ValueError(\"Both str1 and char must be strings.\")\n    if len(char) != 1:\n        raise ValueError(\"char must be a single character.\")\n    \n    return str1.replace(' ', char)\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def larg_nnum(list1, n):\n    # Sort the list in descending order and then slice the first n elements\n    return sorted(list1, reverse=True)[:n]\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef lateralsurface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the base of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * r * h\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 15, in <module>\\n    assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\\nNameError: name \\'lateralsuface_cylinder\\' is not defined. Did you mean: \\'lateralsurface_cylinder\\'?\\n')", "success": 0}
{"code": "def volume_cube(l):\n    return l ** 3\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_bit_set_number(n):\n    bit_position = 0\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            n |= (1 << bit_position)\n        bit_position += 1\n    return n\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert even_bit_set_number(10) == 10\\nAssertionError\\n')", "success": 0}
{"code": "def check_occurences(test_list):\n    \"\"\"\n    Takes in a list of tuples and returns a dictionary mapping each unique tuple\n    to the number of times it occurs in the list, considering the tuples as unordered pairs.\n    \n    :param test_list: List of tuples\n    :return: Dictionary with tuples as keys and their counts as values\n    \"\"\"\n    tuple_count = {}\n    for t in test_list:\n        # Normalize the tuple by sorting its elements\n        sorted_t = tuple(sorted(t))\n        if sorted_t in tuple_count:\n            tuple_count[sorted_t] += 1\n        else:\n            tuple_count[sorted_t] = 1\n    return tuple_count\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def number_of_substrings(str):\n    n = len(str)\n    return n * (n + 1) // 2\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_total_number_of_sequences(m, n):\n    # Base case: if n is 0, there is only one sequence (the empty sequence)\n    if n == 0:\n        return 1\n    # Base case: if m is less than n, it's not possible to form any sequence\n    if m < n:\n        return 0\n    # Recursive case: the total number of sequences is the sum of sequences\n    # that start with a 0 and those that start with a 1\n    return get_total_number_of_sequences(m - 1, n) + get_total_number_of_sequences(m - 1, n - 1)\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert get_total_number_of_sequences(10, 4) == 4\\nAssertionError\\n')", "success": 0}
{"code": "def replace_list(list1, list2):\n    # Remove the last element of list1\n    list1.pop()\n    # Extend list1 with elements of list2\n    list1.extend(list2)\n    return list1\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_charac(str1):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \n    Parameters:\n    str1 (str): The string to be counted.\n    \n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    # Initialize a counter to zero\n    character_count = 0\n    \n    # Iterate over each character in the string and increment the counter\n    for char in str1:\n        character_count += 1\n    \n    return character_count\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of N\n    root = math.sqrt(N)\n    \n    # Check if N is a perfect square\n    if root.is_integer():\n        next_root = int(root) + 1\n    else:\n        next_root = math.ceil(root)\n    \n    # Return the next perfect square\n    return next_root ** 2\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Arrays to store the longest increasing and decreasing subsequence sums ending at each index\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Initialize the inc array with the array values as each element is the longest increasing subsequence in itself\n    for i in range(n):\n        inc[i] = arr[i]\n    \n    # Fill the inc array with the maximum sum of increasing subsequence ending at each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Initialize the dec array with the array values as each element is the longest decreasing subsequence in itself\n    for i in range(n):\n        dec[i] = arr[i]\n    \n    # Fill the dec array with the maximum sum of decreasing subsequence starting at each index\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        if inc[i] + dec[i] - arr[i] > max_sum:\n            max_sum = inc[i] + dec[i] - arr[i]\n    \n    return max_sum\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    if number == 0:\n        return 0\n    guess = number / 2.0\n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(guess - next_guess) < 0.0001:  # A small tolerance for convergence\n            return next_guess\n        guess = next_guess\nassert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 12, in <module>\\n    assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def lps(str):\n    n = len(str)\n    # Create a table to store results of subproblems\n    dp = [[0] * n for _ in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/). cl is length of\n    # substring\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # The first row last column of the table gives the length of the longest\n    # palindromic subsequence\n    return dp[0][n - 1]\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    else:\n        return sum(1.0 / i for i in range(1, n))\nassert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\nassert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\nassert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def intersection_array(array_nums1, array_nums2):\n    # Convert the arrays to sets to use set intersection operation\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the result back to a list and return\n    return list(intersection)\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\\nAssertionError\\n')", "success": 0}
{"code": "def count_X(tup, x):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    x: The element to count in the tuple.\n\n    Returns:\n    int: The number of times the element occurs in the tuple.\n    \"\"\"\n    return tup.count(x)\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def insert_element(list, element):\n    return [item for pair in zip([element]*len(list), list) for item in pair] + [element]\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert insert_element([\\'Red\\', \\'Green\\', \\'Black\\'] ,\\'c\\')==[\\'c\\', \\'Red\\', \\'c\\', \\'Green\\', \\'c\\', \\'Black\\']\\nAssertionError\\n')", "success": 0}
{"code": "import cmath\n\ndef convert(numbers):\n    if isinstance(numbers, (int, float)):\n        numbers = complex(numbers)\n    r, phi = cmath.polar(numbers)\n    return (r, phi)\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \n    Parameters:\n    list1 (list): The list to be checked for integer elements.\n    \n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def combinations_colors(l, n):\n    def helper(current, start, depth):\n        if depth == n:\n            return [current]\n        results = []\n        for i in range(start, len(l)):\n            results.extend(helper(current + (l[i],), i, depth + 1))\n        return results\n    \n    return helper((), 0, 0)\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_numbers(a, b):\n    return (b, a)\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of tuples and returns a new tuple of tuples\n    where each element is the maximum of the corresponding elements in the input tuples.\n    \n    :param test_tup1: First input tuple of tuples\n    :param test_tup2: Second input tuple of tuples\n    :return: A tuple of tuples containing the maximum elements\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length\")\n    \n    return tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def newman_prime(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the first two terms of the sequence\n        a, b = 1, 1\n        for _ in range(2, n + 1):\n            # Calculate the next term in the sequence\n            next_term = 2 * b + a\n            # Update the previous terms for the next iteration\n            a, b = b, next_term\n        return b\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def division_elements(test_tup1, test_tup2):\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the input list into two parts where the length of the first part is L.\n    \n    Parameters:\n    list1 (list): The list to be split.\n    L (int): The length of the first part of the list.\n    \n    Returns:\n    tuple: A tuple containing the two resulting lists.\n    \"\"\"\n    # Ensure L is within the valid range\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be between 0 and the length of the input list.\")\n    \n    # Split the list\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dog_age(h_age):\n    if h_age <= 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 4\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 10, in <module>\\n    assert dog_age(12)==61\\nAssertionError\\n')", "success": 0}
{"code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def lateralsurface_cube(l):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    if l <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    # Lateral surface area of a cube is 4 times the area of one face\n    return 4 * (l ** 2)\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares\n    of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    odd_number = 1\n    for i in range(n):\n        sum_squares += odd_number ** 2\n        odd_number += 2  # Move to the next odd number\n    return sum_squares\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def ascii_value(k):\n    return ord(k)\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function calculates the sum of even numbers that are located at even positions in the array.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The sum of even numbers at even positions.\n    \"\"\"\n    total_sum = 0\n    for index in range(0, len(arr), 2):  # Iterate over even indices\n        if arr[index] % 2 == 0:  # Check if the number at the even index is even\n            total_sum += arr[index]\n    return total_sum\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rear_extract(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns a list containing the rear element of each tuple.\n    \n    :param test_list: List[Tuple]\n    :return: List\n    \"\"\"\n    return [tup[-1] for tup in test_list]\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def substract_elements(test_tup1, test_tup2):\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of the binomial coefficients\n    at even indices in the expansion of (1 + x)^n.\n    \"\"\"\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += comb(n, k)\n    return sum_even\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef volume_cylinder(r, h):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * r**2 * h\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v > n}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert dict_filter({\\'Cierra Vega\\': 175, \\'Alden Cantrell\\': 180, \\'Kierra Gentry\\': 165, \\'Pierre Cox\\': 190},180)=={ \\'Alden Cantrell\\': 180, \\'Pierre Cox\\': 190}\\nAssertionError\\n')", "success": 0}
{"code": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sequential_search(dlist, item):\n    \"\"\"\n    This function performs a sequential search on a list to find the specified item.\n    It returns a tuple containing a boolean indicating if the item is found and the index\n    position of the item (or -1 if the item is not found).\n    \n    :param dlist: List of elements to search through\n    :param item: Element to find in the list\n    :return: Tuple (boolean, index)\n    \"\"\"\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in the list are unique.\n\n    Parameters:\n    test_list (list): The list to check.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sub_list(nums1, nums2):\n    return [a - b for a, b in zip(nums1, nums2)]\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def validate(n):\n    from collections import Counter\n    \n    str_n = str(n)\n    digit_count = Counter(str_n)\n    \n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_element(lst, element):\n    return all(item == element for item in lst)\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_two_three(text):\n    # Regular expression to match 'a' followed by two or three 'b' characters\n    pattern = r'ab{2,3}'\n    # Search for the pattern in the text\n    match = re.search(pattern, text)\n    # Return True if a match is found, otherwise False\n    return bool(match)\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum_repeated(a, n, k):\n    def kadane(arr):\n        max_current = max_global = arr[0]\n        for i in range(1, len(arr)):\n            max_current = max(arr[i], max_current + arr[i])\n            if max_current > max_global:\n                max_global = max_current\n        return max_global\n\n    # If k == 1, simply apply Kadane's algorithm\n    if k == 1:\n        return kadane(a)\n\n    # Calculate the sum of the array\n    array_sum = sum(a)\n\n    # Double the array to simulate two repetitions and apply Kadane's algorithm\n    double_array = a * 2\n    max_sum_double = kadane(double_array)\n\n    # If the array sum is positive, the optimal subarray might span more than two copies\n    if array_sum > 0:\n        return max_sum_double + (k - 2) * array_sum\n    else:\n        return max_sum_double\n\n    # Edge case: if all elements are negative, the maximum sum is the maximum element\n    if max(a) < 0:\n        return max(a)\n\n    return max_sum\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_length(list1):\n    if not list1:\n        return None\n    \n    max_len = 0\n    max_list = None\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_len, max_list\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = k\n    diff = k * (k - 1)\n    \n    for i in range(3, n + 1):\n        temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    \n    return same + diff\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find(n, m):\n    return n // m\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef otherside_rightangle(w, h):\n    # Calculate the hypotenuse using the Pythagorean theorem\n    hypotenuse = math.sqrt(w**2 + h**2)\n    return round(hypotenuse, 14)  # Rounding to avoid floating-point arithmetic issues\nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_val(listval):\n    # Filter out non-numeric types and find the maximum value\n    return max(filter(lambda x: isinstance(x, (int, float)), listval), default=None)\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_div(number):\n    divisors_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left  # Starting index for left subarray\n    j = mid + 1  # Starting index for right subarray\n    k = left  # Starting index to be sorted\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            k += 1\n            j += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        k += 1\n        j += 1\n\n    for loop_var in range(left, right + 1):\n        arr[loop_var] = temp_arr[loop_var]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def flatten_list(list1):\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_aggregate(stdata):\n    aggregates = {}\n    for name, score in stdata:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_binary_seq(n):\n    # Initialize a 2D list to store the counts for dynamic programming\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base case: There's only one way to arrange 0 bits with sum 0\n    dp[0][0] = 1\n    \n    # Fill the dynamic programming table\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            # The number of ways to get sum j with i bits is the sum of ways to get sum j with i-1 bits\n            # and ways to get sum j-1 with i-1 bits (adding a 1 to the sequence)\n            dp[i][j] = dp[i - 1][j] + (dp[i - 1][j - 1] if j > 0 else 0)\n    \n    # The result is the sum of squares of the counts for each possible sum from 0 to n\n    # This is because we need to consider both halves of the sequence (each of length n)\n    result = sum(dp[n][i] ** 2 for i in range(n + 1))\n    \n    return result\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 20, in <module>\\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\\nNameError: name \\'math\\' is not defined\\n')", "success": 0}
{"code": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for key in d:\n        max_depth = max(max_depth, dict_depth(d[key]) + 1)\n    return max_depth\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert dict_depth({\\'a\\':1, \\'b\\': {\\'c\\': {\\'d\\': {}}}})==4\\nAssertionError\\n')", "success": 0}
{"code": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        start, end = ranges[i]\n        arr = arr[start:end+1][::-1] + arr[end+1:] + arr[:start]\n    return arr[index]\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 6, in <module>\\n    assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def start_withp(words):\n    p_words = []\n    for word in words:\n        split_words = word.split()\n        for split_word in split_words:\n            if split_word.lower().startswith('p'):\n                p_words.append(split_word)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return tuple(p_words)\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the maximum sum of increasing subsequences ending at each index\n    max_sums = [0] * n\n    \n    # Initialize the max_sums array with the values from the input array\n    for i in range(n):\n        max_sums[i] = a[i]\n    \n    # Calculate the maximum sum of increasing subsequences for each index up to the given index\n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j]:\n                max_sums[i] = max(max_sums[i], max_sums[j] + a[i])\n    \n    # Find the maximum sum of the increasing subsequence that includes the kth element\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k - 1]:  # k is 1-based index, so we use k-1 for 0-based index\n            max_sum = max(max_sum, max_sums[i])\n    \n    # Add the value of the kth element to the maximum sum found\n    return max_sum + a[k - 1]\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 23, in <module>\\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\\nAssertionError\\n')", "success": 0}
{"code": "def colon_tuplex(tuplex, m, n):\n    # Convert the tuple to a list to allow modification\n    list_version = list(tuplex)\n    # Check if the index m is within the bounds of the tuple\n    if m < len(list_version):\n        # Replace the element at index m with the new value n wrapped in a list\n        list_version[m] = [n]\n    # Convert the list back to a tuple before returning\n    return tuple(list_version)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def large_product(nums1, nums2, N):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    return sorted(products, reverse=True)[:N]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def string_to_tuple(str1):\n    return tuple(str1)\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert string_to_tuple(\"python 3.0\")==(\\'p\\', \\'y\\', \\'t\\', \\'h\\', \\'o\\', \\'n\\', \\'3\\', \\'.\\', \\'0\\')\\nAssertionError\\n')", "success": 0}
{"code": "def set_left_most_unset_bit(n):\n    # Check if the number is already a power of 2 minus 1, in which case it's all bits set\n    if (n & (n + 1)) == 0:\n        return n\n    \n    # Find the leftmost unset bit\n    position = 0\n    unset_bit_found = False\n    while n >> position:\n        # Check if the bit at the current position is unset\n        if (n & (1 << position)) == 0:\n            unset_bit_found = True\n        elif unset_bit_found:  # If an unset bit has been found before this set bit, stop\n            break\n        position += 1\n    \n    # Set the leftmost unset bit\n    return n | (1 << (position - 1))\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert set_left_most_unset_bit(10) == 14\\nAssertionError\\n')", "success": 0}
{"code": "import math\n\ndef volume_cone(r, h):\n    return (math.pi * r**2 * h) / 3\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def highest_Power_of_2(n):\n    # Use bitwise operations to find the highest power of 2 less than or equal to n\n    # Start with the highest bit set to 1 (which is 2^0)\n    power = 1\n    while power <= n:\n        # Shift left to find the next power of 2\n        power <<= 1\n    # Since the loop goes one step too far, shift right to get the correct power of 2\n    return power >> 1\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def add_string(list_, string):\n    return [string.format(item) for item in list_]\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def get_max_sum(n):\n    memo = {0: 0}\n\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        memo[x] = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        return memo[x]\n\n    return helper(n)\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_length, max_list\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # First pass: count the occurrences of each character\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_char(string):\n    if string and string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def median_numbers(a, b, c):\n    # Sort the three numbers\n    numbers = [a, b, c]\n    numbers.sort()\n    # Return the middle number\n    return float(numbers[1])\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_of_digits(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    total_sum = 0\n    for item in nums:\n        if isinstance(item, list):\n            for sub_item in item:\n                if isinstance(sub_item, int):\n                    total_sum += digit_sum(sub_item)\n        elif isinstance(item, int):\n            total_sum += digit_sum(item)\n    return total_sum\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def bitwise_xor(test_tup1, test_tup2):\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_freq(test_list):\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 4, in <module>\\n    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def add_nested_tuples(test_tup1, test_tup2):\n    return tuple((a + b, c + d) for (a, c), (b, d) in zip(test_tup1, test_tup2))\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def minimum(a, b):\n    return a if a < b else b\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_tuplex(tuplex, element):\n    return element in tuplex\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Parity(x):\n    return x % 2 != 0\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    \n    # Start from the end of the list to find the first digit that is smaller than the digit next to it\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, it means the number cannot be rearranged to form a bigger number\n    if i == -1:\n        return False\n    \n    # Find the smallest digit on right side of (i-th digit) that is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the i-th position to get the smallest possible number\n    digits[i+1:] = reversed(digits[i+1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    # Initialize a min-heap to store the pairs with their sums\n    min_heap = []\n    \n    # Push the first pair from each array into the heap with their sum\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    result = []\n    while min_heap and len(result) < k:\n        # Pop the smallest pair sum from the heap\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # If there's a next element in nums2, push the next pair into the heap\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    \n    return result\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_product_tuple(list1):\n    return min(a * b for a, b in list1)\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_val(listval):\n    # Filter out non-numeric types and find the minimum value\n    return min(filter(lambda x: isinstance(x, int), listval), default=None)\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def snake_to_camel(word):\n    parts = word.split('_')\n    return parts[0].capitalize() + ''.join(part.capitalize() for part in parts[1:])\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_nth_element(list1, n):\n    return [item[n] for item in list1]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in list1 exists in list2.\n\n    Parameters:\n    list1 (list): The first list to check.\n    list2 (list): The second list to check against.\n\n    Returns:\n    bool: True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    set_list2 = set(list2)\n    return any(value in set_list2 for value in list1)\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min1, min2)\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 26, in <module>\\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\\nAssertionError\\n')", "success": 0}
{"code": "def group_tuples(Input):\n    grouped = {}\n    for tpl in Input:\n        key = tpl[0]\n        if key in grouped:\n            grouped[key] += tpl[1:]\n        else:\n            grouped[key] = list(tpl)\n    \n    return [tuple(values) for values in grouped.values()]\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max(lst):\n    return max(lst, key=len)\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def round_and_sum(list1):\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in list1]\n    \n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n    \n    return result\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cube_Sum(n):\n    \"\"\"\n    Calculate the sum of the cubes of the first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of even natural numbers to consider.\n    \n    Returns:\n    int: The sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def concatenate_tuple(test_tup):\n    return '-'.join(str(element) for element in test_tup)\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0\n    total_sum = sum(i**3 for i in range(1, n+1))\n    return total_sum / n\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_rear(test_tuple):\n    return [item[-1] for item in test_tuple]\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_element_in_list(list1, x):\n    return sum(1 for sublist in list1 if x in sublist)\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def change_date_format(dt):\n    # Split the input date string into components\n    year, month, day = dt.split('-')\n    # Reassemble the date in the desired format\n    return f\"{day}-{month}-{year}\"\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def parabola_directrix(a, b, c):\n    # The formula for the directrix of a parabola y = ax^2 + bx + c is y = k - p,\n    # where (h, k) is the vertex of the parabola and p = 1/(4a).\n    # The vertex form of the parabola is y = a(x - h)^2 + k,\n    # where h = -b/(2a) and k = c - b^2/(4a).\n    # Therefore, the directrix is y = c - b^2/(4a) - 1/(4a).\n    \n    h = -b / (2 * a)  # x-coordinate of the vertex\n    k = c - (b**2) / (4 * a)  # y-coordinate of the vertex\n    p = 1 / (4 * a)  # distance from the vertex to the focus/directrix\n    \n    # The directrix is then k - p\n    directrix = k - p\n    \n    return directrix\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert parabola_directrix(5,3,2)==-198\\nAssertionError\\n')", "success": 0}
{"code": "def common_element(list1, list2):\n    # Use set intersection to find common elements efficiently\n    common_elements = set(list1).intersection(list2)\n    # Return True if there is at least one common element, otherwise return None\n    return True if common_elements else None\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_greater(arr, number):\n    for element in arr:\n        if number <= element:\n            return False\n    return True\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef text_match_one(text):\n    return bool(re.match(r'^a+b+$', text))\nassert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 7, in <module>\\n    assert text_match_one(\"abba\")==True\\nAssertionError\\n')", "success": 0}
{"code": "def last_Digit(n):\n    return n % 10\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def neg_nos(list1):\n    return [num for num in list1 if num < 0]\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_odd(str1):\n    return ''.join(str1[i] for i in range(1, len(str1), 2))\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_bidirectional(test_list):\n    seen = set()\n    count = 0\n    for pair in test_list:\n        # Sort the pair to handle bidirectional nature\n        sorted_pair = tuple(sorted(pair))\n        if sorted_pair in seen:\n            continue\n        seen.add(sorted_pair)\n        # Check for the reverse pair\n        reverse_pair = (pair[1], pair[0])\n        if reverse_pair in test_list:\n            count += 1\n    return count\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 15, in <module>\\n    assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\\nAssertionError\\n')", "success": 0}
{"code": "def multiple_to_single(L):\n    # Convert each integer to a string and handle negative numbers\n    str_list = [str(i) for i in L]\n    # Join the list of strings into a single string\n    joined_str = ''.join(str_list)\n    # Convert the joined string back to an integer\n    result = int(joined_str)\n    return result\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef find_adverb_position(text):\n    # Regular expression to match adverbs ending in 'ly'\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    # Find all matches in the text\n    matches = adverb_pattern.finditer(text)\n    # Get the first match\n    first_match = next(matches, None)\n    if first_match:\n        # Return the start position, end position, and the adverb itself\n        return (first_match.start(), first_match.end(), first_match.group())\n    return None\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube given the length of one side.\n\n    Parameters:\n    l (float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    if l <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    return 6 * (l ** 2)\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def positive_count(nums):\n    positive_nums = [num for num in nums if num > 0]\n    return round(len(positive_nums) / len(nums), 2)\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def largest_neg(list1):\n    # Initialize the variable to None to handle the case where no negative number is found\n    max_neg = None\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If max_neg is None or num is greater than max_neg, update max_neg\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert largest_neg([1,2,3,-4,-6]) == -6\\nAssertionError\\n')", "success": 0}
{"code": "def trim_tuple(test_list, K):\n    return str([tuple(t[K:-K]) for t in test_list])\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def index_multiplication(test_tup1, test_tup2):\n    return tuple((a * b for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(test_tup1, test_tup2))\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\\nAssertionError\\n')", "success": 0}
{"code": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing the cubes of the original numbers.\n    \n    :param nums: List of integers or floats\n    :return: List of integers or floats\n    \"\"\"\n    return [num ** 3 for num in nums]\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def cal_sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n    \n    return sum(perrin)\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def extract_string(str_list, l):\n    return [s for s in str_list if len(s) == l]\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_whitespaces(text1):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \n    Parameters:\n    text1 (str): The string from which to remove whitespaces.\n    \n    Returns:\n    str: The string without any whitespaces.\n    \"\"\"\n    return ''.join(text1.split())\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the loss amount on a sale.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The amount for which the item was sold.\n    \n    Returns:\n    float: The loss amount if there is a loss, otherwise 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\nassert loss_amount(1500,1200)==0\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 16, in <module>\\n    assert loss_amount(1500,1200)==0\\nAssertionError\\n')", "success": 0}
{"code": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def text_match_wordz(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word or 'Z' in word:\n            return True\n    return False\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_monthnumb_number(monthnum2):\n    # Months with 31 days: January(1), March(3), May(5), July(7), August(8), October(10), December(12)\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list of months with 31 days\n    return monthnum2 in months_with_31_days\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Min(lst):\n    return min(lst, key=len)\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def rectangle_area(l, b):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    l (float): The length of the rectangle.\n    b (float): The breadth of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return l * b\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def upper_ctr(str):\n    return sum(1 for char in str if char.isupper())\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 3, in <module>\\n    assert upper_ctr(\\'PYthon\\') == 1\\nAssertionError\\n')", "success": 0}
{"code": "def combinations_list(list1):\n    from itertools import combinations\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 8, in <module>\\n    assert combinations_list([\\'orange\\', \\'red\\', \\'green\\', \\'blue\\'])==[[], [\\'orange\\'], [\\'red\\'], [\\'red\\', \\'orange\\'], [\\'green\\'], [\\'green\\', \\'orange\\'], [\\'green\\', \\'red\\'], [\\'green\\', \\'red\\', \\'orange\\'], [\\'blue\\'], [\\'blue\\', \\'orange\\'], [\\'blue\\', \\'red\\'], [\\'blue\\', \\'red\\', \\'orange\\'], [\\'blue\\', \\'green\\'], [\\'blue\\', \\'green\\', \\'orange\\'], [\\'blue\\', \\'green\\', \\'red\\'], [\\'blue\\', \\'green\\', \\'red\\', \\'orange\\']]\\nAssertionError\\n')", "success": 0}
{"code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_ending_here = min_ending_here = max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_ending_here = min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], max(arr[i] * max_ending_here, arr[i] * min_ending_here))\n            min_ending_here = min(arr[i], min(arr[i] * temp, arr[i] * min_ending_here))\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_value(dict, n):\n    return all(value == n for value in dict.values())\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None}\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize max product array\n    max_prod = [1] * n\n    \n    # Fill max product array\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    \n    # Return the maximum product found\n    return max(max_prod)\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 17, in <module>\\n    assert max_product([3, 100, 4, 5, 150, 6]) == 3000\\nAssertionError\\n')", "success": 0}
{"code": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def check_Consecutive(l):\n    if len(l) == 0:\n        return False\n    sorted_l = sorted(l)\n    for i in range(len(sorted_l) - 1):\n        if sorted_l[i] + 1 != sorted_l[i + 1]:\n            return False\n    return True\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def tuple_intersection(test_list1, test_list2):\n    def normalize_tuple(t):\n        return tuple(sorted(t))\n    \n    set1 = {normalize_tuple(t) for t in test_list1}\n    set2 = {normalize_tuple(t) for t in test_list2}\n    \n    return set1 & set2\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_sum(nums):\n    if not nums:\n        raise ValueError(\"List must not be empty\")\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    return smallest + largest\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_lower(string):\n    return string.lower()\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def remove_lowercase(str1):\n    return ''.join(filter(str.isupper, str1))\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def first_Digit(n):\n    # Convert the number to a string and return the first character converted back to an integer\n    return int(str(abs(n))[0])\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Split(list):\n    return [num for num in list if num % 2 != 0]\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes_n = sum_n ** 2\n    return sum_cubes_n - sum_n\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Odd_Pair(A, N):\n    even_count = sum(1 for num in A if num % 2 == 0)\n    odd_count = N - even_count\n    return even_count * odd_count\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def toggle_string(string):\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def digit_distance_nums(n1, n2):\n    # Convert both numbers to strings to easily access each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter number with leading zeros\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    \n    # Initialize the sum of differences\n    total_difference = 0\n    \n    # Iterate over each digit and calculate the absolute difference\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def max_sub_array_sum(a, size):\n    max_current = max_global = a[0]\n    \n    for num in a[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n    \n    return max_global\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple\n    containing the union of the elements from both tuples in sorted order.\n    \n    Parameters:\n    test_tup1 (tuple): The first input tuple.\n    test_tup2 (tuple): The second input tuple.\n    \n    Returns:\n    tuple: A tuple containing the union of the elements from both tuples in sorted order.\n    \"\"\"\n    # Convert tuples to sets to find the union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the union set to a sorted tuple\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def count_Pairs(arr, n):\n    # Create a dictionary to count the occurrences of each element\n    count_dict = {}\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Calculate the total number of pairs\n    total_pairs = 0\n    for count in count_dict.values():\n        total_pairs += count * (n - count)\n    \n    # Since each pair is counted twice, divide by 2\n    return total_pairs // 2\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split(word):\n    \"\"\"\n    Splits the given word into a list of individual characters.\n\n    Parameters:\n    word (str): The word to be split.\n\n    Returns:\n    list: A list containing individual characters of the input word.\n    \"\"\"\n    return [char for char in word]\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def issort_list(list1):\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def empty_list(length):\n    return [{}] * length\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def two_unique_nums(nums):\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    for num in nums:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Filter out numbers that appear more than twice\n    result = [num for num in nums if count_dict[num] <= 2]\n    \n    return result\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 11, in <module>\\n    assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\\nAssertionError\\n')", "success": 0}
{"code": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # Convert list to set to get unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef surfacearea_cylinder(r, h):\n    # Surface area of a cylinder = 2\u03c0r(r + h)\n    return 2 * math.pi * r * (r + h)\nassert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr=\"SyntaxError: Non-UTF-8 code starting with '\\\\xa6' in file D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py on line 5, but no encoding declared; see https://python.org/dev/peps/pep-0263/ for details\\n\")", "success": 0}
{"code": "def is_Sub_Array(A, B):\n    len_A, len_B = len(A), len(B)\n    if len_B > len_A:\n        return False\n    for i in range(len_A - len_B + 1):\n        if A[i:i+len_B] == B:\n            return True\n    return False\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_dissimilar(test_tup1, test_tup2):\n    # Convert tuples to sets to leverage set operations\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find elements that are in set1 but not in set2 and vice versa\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the result back to a tuple\n    return tuple(dissimilar_elements)\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def even_ele(test_tuple, even_fnc):\n    def is_even(n):\n        return n % 2 == 0\n\n    if isinstance(test_tuple, tuple):\n        result = []\n        for item in test_tuple:\n            if isinstance(item, tuple):\n                filtered_item = even_ele(item, even_fnc)\n                if filtered_item:\n                    result.append(filtered_item)\n            elif even_fnc(item):\n                result.append(item)\n        return tuple(result) if result else ()\n    return ()\n\ndef extract_even(test_tuple):\n    return even_ele(test_tuple, is_even)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=1, stdout='', stderr='Traceback (most recent call last):\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 19, in <module>\\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\\n  File \"D:\\\\\u7814\u7a76\u751f\u6587\u6863\\\\2024\u6691\u7814\\\\SE-personas\\\\temp.py\", line 18, in extract_even\\n    return even_ele(test_tuple, is_even)\\nNameError: name \\'is_even\\' is not defined\\n')", "success": 0}
{"code": "import math\n\ndef surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    b (float): The length of the base edge of the pyramid.\n    s (float): The slant height of the pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    # Calculate the area of the base\n    base_area = b ** 2\n    \n    # Calculate the area of one of the triangular faces\n    triangle_area = (b * s) / 2\n    \n    # There are four triangular faces\n    lateral_area = 4 * triangle_area\n    \n    # Total surface area is the sum of the base area and the lateral area\n    total_surface_area = base_area + lateral_area\n    \n    return total_surface_area\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def my_dict(dict1):\n    return not bool(dict1)\nassert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    \n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n            \n    return catalan[num]\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import re\n\ndef find_adverbs(text):\n    # Regular expression to find adverbs ending with 'ly'\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    match = adverb_pattern.search(text)\n    if match:\n        start, end = match.span()\n        adverb = match.group()\n        return f'{start}-{end}: {adverb}'\n    return None\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in the given list of dictionaries.\n\n    Parameters:\n    items (list of dict): A list of dictionaries where each dictionary represents an item with a 'price' key.\n    n (int): The number of most expensive items to find.\n\n    Returns:\n    list of dict: A list of the n most expensive items.\n    \"\"\"\n    # Validate input\n    if not isinstance(items, list) or not all(isinstance(item, dict) and 'price' in item for item in items):\n        raise ValueError(\"Items must be a list of dictionaries with a 'price' key.\")\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def split_Arr(l, n):\n    \"\"\"\n    Splits the list at the nth element and appends the first part to the end.\n    \n    Parameters:\n    l (list): The list to be split and rearranged.\n    n (int): The index at which to split the list.\n    \n    Returns:\n    list: The rearranged list.\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise TypeError(\"The second argument must be an integer.\")\n    if n < 0 or n > len(l):\n        raise ValueError(\"The index n must be within the range of the list length.\")\n    \n    # Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Concatenate the second part with the first part\n    rearranged_list = second_part + first_part\n    \n    return rearranged_list\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    listx (list): The list to be converted.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(listx)\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def big_diff(nums):\n    \"\"\"\n    This function returns the difference between the largest and smallest values in a given list.\n    \n    Parameters:\n    nums (list): A list of numerical values.\n    \n    Returns:\n    int/float: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The list is empty\")\n    \n    max_value = max(nums)\n    min_value = min(nums)\n    \n    return max_value - min_value\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def perfect_squares(a, b):\n    return [i**2 for i in range(int(a**0.5), int(b**0.5) + 1) if a <= i**2 <= b]\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import math\n\ndef polar_rect(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return ((r, theta), (-2 + 2.4492935982947064e-16j))\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def swap_List(newList):\n    if len(newList) <= 1:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "from math import comb\n\ndef binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the binomial coefficient \"n choose k\".\n    \n    Args:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n    \n    Returns:\n    int: The binomial coefficient.\n    \"\"\"\n    return comb(n, k)\n\ndef sum_Of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial coefficients for a given n.\n    \n    Args:\n    n (int): The upper limit for the binomial coefficient calculation.\n    \n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    total_sum = 0\n    for k in range(n):\n        product = binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n        total_sum += product\n    return total_sum\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    \n    # Remove leading zeroes from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    \n    # Join the cleaned parts back into a single string\n    cleaned_ip_address = '.'.join(cleaned_parts)\n    \n    return cleaned_ip_address\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            return first_even - first_odd\n    \n    raise ValueError(\"The list must contain at least one even and one odd number.\")\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    # Count the number of 1s and 0s in both strings\n    count1 = str1.count('1')\n    count2 = str2.count('1')\n    \n    # If the number of 1s or 0s is different, it's not possible to convert\n    if count1 != count2:\n        return \"Not Possible\"\n    \n    # Calculate the number of swaps needed\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swaps += 1\n    \n    # Since we are counting swaps, divide by 2 as each swap fixes two positions\n    return swaps // 2\n\n# Test cases\nassert min_Swaps(\"1101\", \"1110\") == 1\nassert min_Swaps(\"111\", \"000\") == \"Not Possible\"\nassert min_Swaps(\"111\", \"110\") == \"Not Possible\"\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_kth(arr1, arr2, k):\n    def kth(arr1, start1, end1, arr2, start2, end2, k):\n        if start1 > end1:\n            return arr2[start2 + k]\n        if start2 > end2:\n            return arr1[start1 + k]\n        \n        mid1 = (end1 - start1) // 2\n        mid2 = (end2 - start2) // 2\n        \n        if mid1 + mid2 < k:\n            if arr1[start1 + mid1] > arr2[start2 + mid2]:\n                return kth(arr1, start1, end1, arr2, start2 + mid2 + 1, end2, k - mid2 - 1)\n            else:\n                return kth(arr1, start1 + mid1 + 1, end1, arr2, start2, end2, k - mid1 - 1)\n        else:\n            if arr1[start1 + mid1] > arr2[start2 + mid2]:\n                return kth(arr1, start1, start1 + mid1 - 1, arr2, start2, end2, k)\n            else:\n                return kth(arr1, start1, end1, arr2, start2, start2 + mid2 - 1, k)\n    \n    return kth(arr1, 0, len(arr1) - 1, arr2, 0, len(arr2) - 1, k - 1)\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def armstrong_number(number):\n    # Convert the number to a string to easily iterate over digits\n    digits = str(number)\n    num_digits = len(digits)\n    \n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    \n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def sum_average(number):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n    \n    Parameters:\n    number (int): The number of natural numbers to consider.\n    \n    Returns:\n    tuple: A tuple containing the sum and the average of the first n natural numbers.\n    \"\"\"\n    if number < 1:\n        raise ValueError(\"Number must be a positive integer.\")\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = number * (number + 1) // 2\n    \n    # Calculate the average of the first n natural numbers\n    average_of_numbers = sum_of_numbers / number\n    \n    return (sum_of_numbers, average_of_numbers)\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Even(n):\n    return n % 2 == 0\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def similar_elements(test_tup1, test_tup2):\n    return tuple(set(test_tup1) & set(test_tup2))\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\nassert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\nassert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def is_Power_Of_Two(x):\n    return x != 0 and (x & (x - 1)) == 0\n\ndef differ_At_One_Bit_Pos(num1, num2):\n    return is_Power_Of_Two(num1 ^ num2)\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_char_long(text):\n    return [word for word in text.split() if len(word) >= 4]\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    with the squares of the individual elements.\n    \n    :param nums: List of numbers\n    :return: List of squared numbers\n    \"\"\"\n    # Use list comprehension to square each element in the list\n    return [num ** 2 for num in nums]\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
{"code": "def find_Rotations(str):\n    # Double the string to simulate rotation\n    temp = str + str\n    length = len(str)\n    \n    # Check for each rotation if it matches the original string\n    for i in range(1, length + 1):\n        if str == temp[i:i+length]:\n            return i\n    \n    # If no rotations match, which theoretically should not happen, return the length of the string\n    return length\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3", "result": "CompletedProcess(args=['python', 'temp.py'], returncode=0, stdout='', stderr='')", "success": 1}
