{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            open_braces += 1\n            current_group += char\n        elif char == \")\":\n            open_braces -= 1\n            current_group += char\n            if open_braces == 0:\n                groups.append(current_group)\n                current_group = \"\"\n\n    return groups"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "def below_zero(operations: List[int]) -> bool:\n        balance = 0\n        for operation in operations:\n            balance += operation\n            if balance < 0:\n                return True\n        return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute difference between each element and the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n\n    # Calculate the average of the absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n\n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nesting_levels = []\n    for group in paren_string.split():\n        nesting_level = 0\n        for char in group:\n            if char == \"(\":\n                nesting_level += 1\n            elif char == \")\":\n                nesting_level -= 1\n        nesting_levels.append(nesting_level)\n    return nesting_levels"}
{"task_id": "HumanEval/7", "solution": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n        sum = 0\n        product = 1\n        for number in numbers:\n            sum += number\n            product *= number\n        return sum, product"}
{"task_id": "HumanEval/9", "solution": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_value = None\n    for num in numbers:\n        if max_value is None or num > max_value:\n            max_value = num\n        result.append(max_value)\n    return result"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    # Find the longest postfix of the supplied string that is a palindrome\n    palindromic_suffix = \"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n\n    # Append to the end of the string the reverse of a string prefix that comes before the palindromic suffix\n    prefix = string[:len(string) - len(palindromic_suffix)]\n    return prefix + palindromic_suffix[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))"}
{"task_id": "HumanEval/12", "solution": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Initialize the gcd as 1\n    gcd = 1\n\n    # Iterate through all the numbers from 1 to min(a, b)\n    for i in range(1, min(a, b)):\n        # Check if the number is divisible by both a and b\n        if a % i == 0 and b % i == 0:\n            # If it is, update the gcd\n            gcd = i\n\n    # Return the final gcd\n    return gcd"}
{"task_id": "HumanEval/14", "solution": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to handle case insensitivity\n    lowercase_string = string.lower()\n\n    # Use a set to store unique characters\n    unique_characters = set()\n\n    # Iterate through the lowercase string and add each character to the set\n    for character in lowercase_string:\n        unique_characters.add(character)\n\n    # Count the number of elements in the set to get the number of distinct characters\n    distinct_characters = len(unique_characters)\n\n    return distinct_characters"}
{"task_id": "HumanEval/17", "solution": "def parse_music(music_string: str) -> List[int]:\n        beats = []\n        for note in music_string:\n            if note == 'o':\n                beats.append(4)\n            elif note == 'o|':\n                beats.append(2)\n            elif note == '.|':\n                beats.append(1)\n            else:\n                raise ValueError(\"Invalid note: \" + note)\n        return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of numbers\n    numbers_list = numbers.split()\n\n    # Sort the list of numbers using the `sorted` function\n    sorted_numbers = sorted(numbers_list)\n\n    # Join the sorted numbers back into a string\n    sorted_numbers_str = \" \".join(sorted_numbers)\n\n    return sorted_numbers_str"}
{"task_id": "HumanEval/20", "solution": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_sum = float(\"inf\")\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)-1):\n        current_sum = numbers[i+1] - numbers[i]\n        if current_sum < closest_sum:\n            closest_sum = current_sum\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Calculate the range of the numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n\n    # Calculate the scale factor\n    scale_factor = 1 / range_num\n\n    # Apply the scale factor to each number\n    rescaled_numbers = []\n    for num in numbers:\n        rescaled_numbers.append((num - min_num) * scale_factor)\n\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "solution": "def filter_integers(values: List[Any]) -> List[int]:\n        return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Initialize a variable to store the largest divisor found so far\n    largest_divisor = 1\n\n    # Iterate from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # If i divides n evenly, update the largest divisor found so far\n        if n % i == 0:\n            largest_divisor = i\n\n    # Return the largest divisor found\n    return largest_divisor"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Initialize an empty string to store the flipped case\n    flipped_string = \"\"\n\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # If it is, flip it to uppercase\n            flipped_string += char.upper()\n        else:\n            # If it is not, flip it to lowercase\n            flipped_string += char.lower()\n\n    # Return the flipped string\n    return flipped_string"}
{"task_id": "HumanEval/28", "solution": "The code you provided is a Python function called `concatenate` that takes a list of strings as input and returns a single string that is the concatenation of all the strings in the list.\n\nThe function uses a for loop to iterate over the list of strings and concatenate them together using the `+=` operator. The `+=` operator is used to add the current string to the result string, which is initialized as an empty string.\n\nThe function also includes a check to ensure that the input list is not empty, and if it is, it returns an empty string.\n\nOverall, the function is well-written and easy to understand, and it provides a clear and concise way to concatenate a list of strings into a single string."}
{"task_id": "HumanEval/29", "solution": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Check if xs has even number of coefficients\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    # Check if largest non zero coefficient is not zero\n    if xs[-1] == 0:\n        raise ValueError(\"largest non zero coefficient must not be zero\")\n\n    # Find the zero point\n    x = 0\n    while poly(xs, x)!= 0:\n        x -= poly(xs, x) / xs[-1]\n\n    return x"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l):\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = sorted(l_copy[i:i+3])\n    return l_copy"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_odd = [l[i] for i in range(len(l)) if i % 2 == 1]\n    l_even.sort()\n    return l_odd + l_even"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    # Initialize the first two Fibonacci numbers\n    fib1 = 1\n    fib2 = 1\n    prime_fib = 0\n\n    # Iterate from the third Fibonacci number\n    for i in range(2, n):\n        # Calculate the next Fibonacci number\n        fib = fib1 + fib2\n\n        # Check if the number is prime\n        if is_prime(fib):\n            prime_fib = fib\n            break\n\n        # Update the previous two Fibonacci numbers\n        fib1 = fib2\n        fib2 = fib\n\n    return prime_fib\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is a prime number, False otherwise.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Iterate from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            return False\n\n    # If n is not divisible by any number from 2 to the square root of n, it is prime\n    return True"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Initialize a set to store the unique elements in the list\n    unique_elements = set()\n\n    # Iterate through the list and check if any three distinct elements sum to zero\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    # If a triple is found, return True\n                    return True\n\n    # If no triple is found, return False\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Abstract the problem by recognizing that the actual collisions do not affect the cars' trajectories\n    # Logically analyze that each car moving left to right will collide with each car moving right to left exactly once\n    # Simplify the solution by realizing that the number of collisions is simply the product of the number of cars moving in each direction\n    return n * n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Loop until x is 0\n    while x > 0:\n        # Get the remainder of x divided by base\n        remainder = x % base\n\n        # Add the remainder to the result string\n        result = str(remainder) + result\n\n        # Divide x by base\n        x = x // base\n\n    # Return the result string\n    return result"}
{"task_id": "HumanEval/45", "solution": "The `triangle_area` function is a simple function that calculates the area of a triangle given the length of one side and the height. The function uses the formula `Area = (1/2) * base * height` to calculate the area.\n\nThe function takes two arguments, `a` and `h`, which represent the length of the side and the height of the triangle, respectively. The function returns the area of the triangle.\n\nThe function is well-written and easy to understand. The variable names are descriptive and the code is organized in a logical manner. The function is also well-documented, with a docstring that explains the purpose of the function and the parameters it takes.\n\nOverall, the `triangle_area` function is a good example of a well-written and easy-to-understand function. It is a good starting point for a beginner to learn about functions and how to write them."}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # Initialize a list to store the last four computed values\n    last_four = [0, 0, 2, 0]\n\n    # Iterate from the 4th element to the n-th element\n    for i in range(4, n):\n        # Compute the current element as the sum of the previous four elements\n        current = last_four[0] + last_four[1] + last_four[2] + last_four[3]\n        # Add the current element to the list of last four elements\n        last_four.append(current)\n        # Remove the first element from the list, since we only need the last four elements\n        last_four.pop(0)\n\n    # Return the n-th element\n    return last_four[n - 1]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    # Step 1: Analyze the problem\n    # Understand the requirements and constraints of the median function\n    # Decide on the best algorithm to use (e.g., sorting the list and finding the middle element(s))\n\n    # Step 2: Plan the solution\n    # Decide on the best algorithm to use (e.g., sorting the list and finding the middle element(s))\n\n    # Step 3: Implement efficiently\n    # Write clean, efficient code that handles edge cases and is well-documented\n\n    # Step 4: Test thoroughly\n    # Ensure the function works correctly with various inputs, including odd and even-length lists, and negative numbers\n\n    # Sort the list\n    l.sort()\n\n    # Find the middle element(s)\n    if len(l) % 2 == 0:\n        # Even-length list\n        median = (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        # Odd-length list\n        median = l[len(l) // 2]\n\n    return median"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n\n    # Check if the string is empty or has only one character\n    if len(text) < 2:\n        return True\n\n    # Check if the first and last characters are the same\n    if text[0] == text[-1]:\n        # If they are, recursively check the remaining characters\n        return is_palindrome(text[1:-1])\n    else:\n        # If they are not, the string is not a palindrome\n        return False"}
{"task_id": "HumanEval/49", "solution": "This is a Python function that takes two integer arguments, `n` and `p`, and returns the result of `2^n modulo p`. The function is aware of numerical issues and uses the `pow` function from the `math` module to calculate the power of 2. The function then uses the `mod` function from the `math` module to calculate the modulo of the result.\n\nThe function is well-documented with examples and a brief description of the function's purpose. The examples demonstrate the function's behavior for different input values, which helps users understand how the function works and how to use it. The function's documentation also includes a brief description of the mathematical principles behind the function, which can be useful for users who want to understand the underlying math.\n\nOverall, this is a well-written and well-documented function that provides a clear and concise way to calculate the modulo of a power of 2."}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = set(\"aeiouAEIOU\")\n    return \"\".join(ch for ch in text if ch not in vowels)"}
{"task_id": "HumanEval/52", "solution": "The `below_threshold` function takes in two arguments: a list of numbers `l` and a threshold `t`. It returns `True` if all numbers in the list are below the threshold, and `False` otherwise.\n\nThe function works by iterating through the list `l` and checking if each number is below the threshold `t`. If any number is found to be above the threshold, the function returns `False`. If all numbers are below the threshold, the function returns `True`.\n\nThe function is implemented using a simple `for` loop and a conditional statement to check if each number is below the threshold. The function also uses the `all` function to check if all numbers in the list are below the threshold.\n\nThe function is well-suited for an INTJ programmer because it requires a deep focus on the problem, a logical analysis of the code, and a structured approach to writing and maintaining clean, efficient code. The INTJ's ability to think abstractly and come up with creative solutions to problems is also useful in debugging and optimizing code."}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\""}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Step 1: Count the occurrences of each character in both strings\n    count0 = {}\n    count1 = {}\n    for c in s0:\n        if c not in count0:\n            count0[c] = 1\n        else:\n            count0[c] += 1\n    for c in s1:\n        if c not in count1:\n            count1[c] = 1\n        else:\n            count1[c] += 1\n    # Step 2: Compare the counts of each character\n    for c in count0:\n        if c not in count1 or count0[c]!= count1[c]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= \"<\":\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\""}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # create a set of unique elements from both lists\n    unique_elements = set(l1).union(set(l2))\n    # create a list of common elements\n    common_elements = [element for element in unique_elements if element in l1 and element in l2]\n    # sort and return the list of common elements\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize a list to store the prime factors of n\n    prime_factors = []\n\n    # Loop through all the numbers from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # If the number is a factor of n, add it to the list of prime factors\n        if n % i == 0:\n            prime_factors.append(i)\n\n    # Return the largest prime factor\n    return max(prime_factors)"}
{"task_id": "HumanEval/60", "solution": "The `sum_to_n` function is a simple function that sums the numbers from 1 to n. It takes an integer `n` as input and returns the sum of the numbers from 1 to n.\n\nThe function works by using a for loop to iterate from 1 to n, and for each iteration, it adds the current number to a variable called `total`. The `total` variable is initialized to 0 before the loop starts, and it is returned as the final result.\n\nThe time complexity of the function is O(n), which means that the number of operations grows linearly with the size of the input. This is because the function needs to iterate through all the numbers from 1 to n, which takes O(n) time.\n\nThe space complexity of the function is O(1), which means that the amount of memory used by the function grows linearly with the size of the input. This is because the function only uses a single variable to store the total, and the size of the variable is constant regardless of the size of the input.\n\nOverall, the `sum_to_n` function is a simple and efficient way to sum the numbers from 1 to n. It is well-suited for small to medium-sized inputs, but it may not be the best choice for very large inputs."}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # Initialize a stack to keep track of opening brackets\n    stack = []\n\n    # Iterate through the string\n    for bracket in brackets:\n        # If the current bracket is an opening bracket, push it onto the stack\n        if bracket == \"(\":\n            stack.append(bracket)\n        # If the current bracket is a closing bracket, pop the topmost opening bracket from the stack\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    # If the stack is empty, then every opening bracket has a corresponding closing bracket\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Initialize the derivative list\n    derivative_list = []\n\n    # Iterate over the coefficients of the polynomial\n    for i in range(len(xs)):\n        # Calculate the derivative of the current term\n        derivative_term = xs[i] * (i + 1)\n\n        # Add the derivative term to the derivative list\n        derivative_list.append(derivative_term)\n\n    # Return the derivative list\n    return derivative_list"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a string\n    x_str = str(x)\n    \n    # Get the number of digits in the integer\n    num_digits = len(x_str)\n    \n    # Check if the shift is greater than the number of digits\n    if shift > num_digits:\n        # If so, reverse the digits and return the result\n        return x_str[::-1]\n    \n    # If the shift is less than or equal to the number of digits,\n    # circularly shift the digits to the right by the specified amount\n    shifted_digits = x_str[shift:] + x_str[:shift]\n    \n    # Return the shifted digits as a string\n    return shifted_digits"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # Initialize an empty list to store the upper case ASCII codes\n    upper_case_codes = []\n\n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is upper case\n        if char.isupper():\n            # If it is, add its ASCII code to the list\n            upper_case_codes.append(ord(char))\n\n    # Return the sum of the upper case ASCII codes\n    return sum(upper_case_codes)"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    apples, oranges = map(int, s.split()[0].split(\"and\")[0].split(\" \"))\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    # Find the smallest even value in the array\n    smallest_even = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n\n    # If there is no even value, return an empty list\n    if smallest_even == float('inf'):\n        return []\n\n    # Return the smallest even value and its index\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    max_freq = 0\n    res = -1\n    for i in lst:\n        freq = lst.count(i)\n        if freq > max_freq and i > 0:\n            max_freq = freq\n            res = i\n    return res"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + [max_val] + strange_sort_list(lst[:min_val] + lst[min_val+1:])\n\nThis function first checks if the input list is empty, and if so, returns an empty list. Otherwise, it finds the minimum and maximum values in the list using the `min` and `max` functions, respectively. It then returns a list containing the minimum value, the maximum value, and the result of recursively calling the `strange_sort_list` function on the remaining integers in the list, excluding the minimum and maximum values. This ensures that the minimum and maximum values are selected in the correct sequence, and the function returns the list in the strange order specified in the problem."}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        return round(math.sqrt(a * b * (a + b + c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the object is balanced (palindromic list)\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    # Initialize a variable to keep track of the minimum number of changes needed\n    min_changes = float('inf')\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the element is the same as the element at the opposite index\n        if arr[i] == arr[len(arr) - i - 1]:\n            # If they are the same, continue to the next element\n            continue\n        # If they are not the same, find the minimum number of changes needed to make them the same\n        min_changes = min(min_changes, abs(arr[i] - arr[len(arr) - i - 1]))\n\n    # Return the minimum number of changes needed\n    return min_changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(list1, list2):\n        list1_total = sum(len(s) for s in list1)\n        list2_total = sum(len(s) for s in list2)\n        if list1_total < list2_total:\n            return list1\n        elif list1_total > list2_total:\n            return list2\n        else:\n            return list1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            for k in range(j+1, len(prime_numbers)):\n                if a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k]:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    if a < 0:\n        a = -a\n    x = 1\n    while x ** 3 <= a:\n        if x ** 3 == a:\n            return True\n        x += 1\n    return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    # Convert the hexadecimal string to a list of digits\n    digits = [int(digit, 16) for digit in num]\n\n    # Count the number of prime digits\n    prime_digits = 0\n    for digit in digits:\n        if is_prime(digit):\n            prime_digits += 1\n\n    return prime_digits\n\ndef is_prime(n):\n    # Check if n is a prime number\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length == 1:\n        return True\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1)):\n        num = i * 10**(n-1) + 1\n        if str(num)[0] == '1' or str(num)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert N to a string\n    N_str = str(N)\n    \n    # Initialize the sum of digits to 0\n    sum_digits = 0\n    \n    # Iterate over each digit in N_str\n    for digit in N_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Add the digit to the sum of digits\n        sum_digits += digit_int\n    \n    # Convert the sum of digits to a binary string\n    sum_digits_bin = bin(sum_digits)[2:]\n    \n    # Return the binary string\n    return sum_digits_bin"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    result = 0\n    for i, element in enumerate(lst):\n        if element % 2 == 0 and i % 2 == 1:\n            result += element\n    return result"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    return''.join([sorted(word) for word in words])"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate through the nested lists\n    for row in lst:\n        # Find the index of x in the current row\n        index = row.index(x) if x in row else None\n\n        # If x is found in the current row, add its coordinates to the list\n        if index is not None:\n            coordinates.append((row.index(x), index))\n\n    # Sort the coordinates by row in ascending order\n    coordinates.sort(key=lambda x: x[0])\n\n    # Sort the coordinates of each row by column in descending order\n    for row in coordinates:\n        row.sort(key=lambda x: x[1], reverse=True)\n\n    return coordinates"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Calculate the sum of the first and last indices\n    first_index = array[0]\n    last_index = array[-1]\n    sum_first_last = first_index + last_index\n\n    # Check if the sum is odd or even\n    if sum_first_last % 2 == 0:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)\n    else:\n        # Sort the array in ascending order\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Initialize an empty string to store the encrypted text\n    encrypted_text = \"\"\n\n    # Iterate through each character in the input string\n    for char in s:\n        # If the character is a letter, rotate it down by two places\n        if char.isalpha():\n            # Get the index of the character in the alphabet\n            index = ord(char) - ord(\"a\")\n\n            # Rotate the index by two places\n            new_index = (index + 2) % 26\n\n            # Get the new character from the rotated index\n            new_char = chr(ord(\"a\") + new_index)\n\n            # Add the new character to the encrypted text\n            encrypted_text += new_char\n\n        # If the character is not a letter, add it to the encrypted text as is\n        else:\n            encrypted_text += char\n\n    # Return the encrypted text\n    return encrypted_text"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    else:\n        sorted_lst = sorted(lst)\n        for i in range(len(sorted_lst)):\n            if sorted_lst[i]!= sorted_lst[i-1]:\n                return sorted_lst[i]\n        return None"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    return (x + y == z or x + z == y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    # Step 1: Identify the requirements\n    # Swap case of all letters\n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet\n\n    # Step 2: Plan the solution\n    # Break down the problem into smaller tasks\n    # Create a function to swap case of all letters\n    # Create a function to replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet\n\n    # Step 3: Implement the code\n    # Write clean, efficient code to perform the required transformations\n    # Use a dictionary to map each vowel to the letter that appears 2 places ahead of it in the english alphabet\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o':'m', 'u': 'p'}\n\n    # Swap case of all letters\n    encoded_message = ''\n    for char in message:\n        if char.islower():\n            encoded_message += char.upper()\n        else:\n            encoded_message += char.lower()\n\n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet\n    for char in encoded_message:\n        if char in vowel_map:\n            encoded_message = encoded_message.replace(char, vowel_map[char])\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def largest_prime_sum(lst):\n    prime_numbers = []\n    for num in lst:\n        if is_prime(num):\n            prime_numbers.append(num)\n    prime_numbers.sort(reverse=True)\n    sum_of_digits = 0\n    for prime in prime_numbers:\n        sum_of_digits += sum(int(digit) for digit in str(prime))\n    return sum_of_digits\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = [key for key in dict.keys() if key.islower()]\n    upper_case_keys = [key for key in dict.keys() if key.isupper()]\n    if len(lower_case_keys) == len(upper_case_keys) == 0:\n        return False\n    if len(lower_case_keys) > 0 and len(upper_case_keys) > 0:\n        return False\n    return True"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    prime_numbers = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nThis function first checks if the input `n` is a prime number by using the `is_prime` function. If it is, it adds it to the `prime_numbers` list. Then, it returns the list of prime numbers up to `n`.\n\nThe `is_prime` function first checks if the input `n` is less than or equal to 1, in which case it is not prime. Then, it checks if `n` is divisible by any number between 2 and the square root of `n` (inclusive), using a for loop. If it is divisible by any number, it is not prime, and the function returns False. Otherwise, it returns True.\n\nThis function is efficient because it uses the Sieve of Eratosthenes algorithm, which is an efficient method for finding prime numbers up to a given number. The Sieve of Eratosthenes algorithm works by iteratively marking as composite (not prime) the multiples of each prime, starting with 2. It does this by using a boolean array to keep track of which numbers have been marked as composite. This allows it to efficiently find prime numbers up to a given number, making it a fast and efficient method for solving this problem."}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    product = 0\n    while b > 0:\n        product += a % 10 * b % 10\n        a //= 10\n        b //= 10\n    return product % 10"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    return round(float(value))"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    # Initialize the list to store the number of stones in each level\n    stone_counts = []\n\n    # Loop through each level, starting from the first level\n    for level in range(n):\n        # If the level is odd, the number of stones in the next level is the next odd number\n        if level % 2 == 1:\n            stone_counts.append(level * 2 + 1)\n        # If the level is even, the number of stones in the next level is the next even number\n        else:\n            stone_counts.append(level * 2)\n\n    return stone_counts"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    words = []\n    for word in s.split(\",\"):\n        words.append(word.strip())\n    return words"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x % 2 == 0 and x <= y:\n        return x\n    else:\n        for i in range(x, y+1, 2):\n            if i % 2 == 0:\n                return i\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum / (m - n + 1)\n    rounded = round(avg)\n    binary = bin(rounded)[2:]\n    return binary"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate through the input list\n    for num in x:\n        # Check if the number has any even digits\n        if not any(digit % 2 == 0 for digit in str(num)):\n            # If not, add it to the result list\n            result.append(num)\n\n    # Return the sorted result list\n    return sorted(result)"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n    result.sort()\n    result.reverse()\n    return [f\"{num}\" for num in result]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_count += 1\n        elif str(i) == str(i)[::-1] and i % 2 == 1:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    # Initialize a flag to keep track of whether an exchange is possible\n    exchange_possible = False\n\n    # Iterate through the elements of lst1\n    for i in range(len(lst1)):\n        # If the current element of lst1 is odd, check if there is an even element in lst2 that can be exchanged\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                # If an even element is found in lst2, exchange it with the current element of lst1 and set the exchange_possible flag to True\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    exchange_possible = True\n                    break\n\n    # If no exchange was possible, return \"NO\"\n    if not exchange_possible:\n        return \"NO\"\n\n    # If an exchange was possible, check if all the elements of lst1 are now even\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n\n    # If all the elements of lst1 are now even, return \"YES\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    return [str(len([i for i in lst[j] if int(i) % 2 == 1])) + \"n the str\" + str(j + 1) + \"ng \" + str(j + 1) + \" of the \" + str(j + 1) + \"nput.\" for j in range(len(lst))]"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize variables\n    min_sum = float('inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n\n    # Iterate through the array\n    for i in range(len(nums)):\n        # Add the current element to the current sum\n        current_sum += nums[i]\n\n        # If the current sum is less than the minimum sum, update the minimum sum and the start and end indices\n        if current_sum < min_sum:\n            min_sum = current_sum\n            start_index = i\n            end_index = i + 1\n\n        # If the current sum is greater than the minimum sum, update the start index\n        elif current_sum > min_sum:\n            start_index = i\n\n    # Return the minimum sum and the start and end indices\n    return min_sum, start_index, end_index"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    wells = sum(grid[i][j] for i in range(rows) for j in range(cols))\n    return wells // capacity + (wells % capacity > 0)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Convert each element in the array to its binary representation\n    binary_arr = [bin(x)[2:] for x in arr]\n\n    # Count the number of ones in each binary representation\n    ones_count = [binary_arr[i].count(\"1\") for i in range(len(binary_arr))]\n\n    # Sort the array based on the number of ones in each binary representation\n    sorted_arr = sorted(arr, key=lambda x: ones_count[arr.index(x)])\n\n    # Sort the array based on the decimal value if the number of ones is the same\n    sorted_arr = sorted(sorted_arr, key=lambda x: x)\n\n    return sorted_arr"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the selected words\n    selected_words = []\n\n    # Iterate over the words and count the number of consonants in each word\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char.islower():\n                consonant_count += 1\n\n        # If the word contains exactly n consonants, add it to the selected words list\n        if consonant_count == n:\n            selected_words.append(word)\n\n    # Return the list of selected words\n    return selected_words"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    # Find the last vowel in the word\n    last_vowel = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_vowel = word[i]\n            break\n    \n    # Find the last consonant in the word\n    last_consonant = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in consonants:\n            last_consonant = word[i]\n            break\n    \n    # Find the next vowel after the last consonant\n    next_vowel = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            next_vowel = word[i]\n            break\n    \n    # Check if the next vowel is between two consonants\n    if next_vowel!= \"\" and last_consonant!= \"\":\n        if word.index(next_vowel) > word.index(last_consonant) + 1:\n            return next_vowel\n    \n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    open_parens = 0\n    for paren in lst:\n        if paren == '(':\n            open_parens += 1\n        else:\n            open_parens -= 1\n        if open_parens < 0:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Get the current element\n        element = arr[i]\n\n        # Check if the element has at most two digits\n        if len(str(element)) <= 2:\n            # Add the element to the sum\n            sum += element\n\n    # Return the sum\n    return sum"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n\n    # Start with the given number n\n    current_number = n\n\n    # Iterate until the current number is 1\n    while current_number!= 1:\n        # If the current number is odd, add it to the list of odd numbers\n        if current_number % 2 == 1:\n            odd_numbers.append(current_number)\n        # If the current number is even, divide it by 2\n        else:\n            current_number = current_number // 2\n\n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Validate the format of the date string (mm-dd-yyyy)\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n\n    # Extract the month, day, and year from the date string\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n\n    # Check if the month is within the valid range (1-12)\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is within the valid range for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # Consider special cases like leap years for February\n    if month == 2 and year % 4 == 0:\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 == 1])"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n      return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = functools.reduce(operator.mul, signs)\n    return sum(abs(x) for x in arr) * product"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    # Initialize the visited cells as an empty set\n    visited = set()\n\n    # Initialize the current cell as the first cell in the grid\n    current = grid[0][0]\n\n    # Initialize the path as an empty list\n    path = []\n\n    # Loop until the path is of length k\n    while len(path) < k:\n        # If the current cell is not in the visited cells, add it to the path\n        if current not in visited:\n            path.append(current)\n            visited.add(current)\n\n        # Find the next cell to visit by checking the neighbors of the current cell\n        neighbors = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] not in visited and (i, j) not in neighbors:\n                    neighbors.append((i, j))\n\n        # If there are no neighbors to visit, return an empty list\n        if not neighbors:\n            return []\n\n        # Choose the neighbor with the smallest value\n        next_cell = min(neighbors, key=lambda x: grid[x[0]][x[1]])\n\n        # Update the current cell and the visited cells\n        current = next_cell\n        visited.add(current)\n\n    # Return the path\n    return path"}
{"task_id": "HumanEval/130", "solution": "def tribonacci(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci_list = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tribonacci_list.append(tribonacci_list[i - 1] + tribonacci_list[i - 2])\n            else:\n                tribonacci_list.append(tribonacci_list[i - 1] + tribonacci_list[i - 2] + tribonacci_list[i + 1])\n        return tribonacci_list"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    # Initialize a stack to keep track of the brackets\n    stack = []\n\n    # Iterate through the string\n    for char in string:\n        # If the character is an opening bracket, push it onto the stack\n        if char == '[':\n            stack.append(char)\n        # If the character is a closing bracket, pop the top element from the stack\n        # and check if it is an opening bracket\n        elif char == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n\n    # If the stack is not empty, there is an unmatched opening bracket\n    if len(stack) > 0:\n        return False\n\n    # If the stack is empty, all brackets are matched\n    return True"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum(int(math.ceil(x)) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] not in string.punctuation"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Initialize a variable to store the largest index\n    largest_index = -1\n\n    # Iterate through the array\n    for i in range(len(arr) - 1):\n        # Check if the current element is not greater than or equal to the element immediately preceding it\n        if arr[i] < arr[i + 1]:\n            # If it is not, update the largest index\n            largest_index = i\n\n    # Return the largest index\n    return largest_index"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == int or type(a) == float:\n            if a > float(b):\n                return a\n            elif float(b) > a:\n                return b\n            else:\n                return None\n        elif type(b) == int or type(b) == float:\n            if float(a) > b:\n                return a\n            elif b > float(a):\n                return b\n            else:\n                return None\n        else:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n\nNote: This function assumes that the input values are valid and can be converted to the correct data type. It also assumes that the input values are not equal to each other."}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # Check if n is a positive even number\n    if n % 2 == 0 and n > 0:\n        # Check if n can be written as the sum of four positive even numbers\n        if n == 2 or n == 4 or n == 6 or n == 8:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    # Identify the problem:\n    # - Replace single spaces with underscores\n    # - Replace more than two consecutive spaces with a hyphen\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Check if the file name contains more than three digits\n    if len(re.findall(r'\\d+', file_name)) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter from the latin alphabet\n    substring_before_dot = file_name.split('.')[0]\n    if not substring_before_dot or not substring_before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    substring_after_dot = file_name.split('.')[1]\n    if substring_after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i, entry in enumerate(lst):\n        if i % 3 == 0:\n            result += entry ** 2\n        elif i % 4 == 0:\n            result += entry ** 3\n        else:\n            result += entry\n    return result"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    word_lengths = [len(word) for word in sentence.split()]\n    prime_word_indices = [i for i, word_length in enumerate(word_lengths) if word_length in prime_numbers]\n    return \" \".join([sentence.split()[i] for i in prime_word_indices])"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    numerator_x, denominator_x = x.split(\"/\")\n    numerator_n, denominator_n = n.split(\"/\")\n    product = int(numerator_x) * int(numerator_n)\n    if product % int(denominator_x) == 0 and product % int(denominator_n) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Calculate the sum of digits for each number\n    sums = [sum(map(int, str(abs(num)))) for num in nums]\n\n    # Sort the numbers based on their sum of digits\n    sorted_nums = sorted(nums, key=lambda num: sums[nums.index(num)])\n\n    # Maintain the original order for numbers with the same sum of digits\n    result = []\n    for num in nums:\n        if len(result) == 0 or result[-1]!= num:\n            result.append(num)\n\n    return result\n\nThis function first calculates the sum of digits for each number in the input list using a list comprehension. It then sorts the numbers based on their sum of digits using the `sorted()` function with a custom `key` function that retrieves the corresponding sum of digits for each number. Finally, it maintains the original order for numbers with the same sum of digits by iterating over the sorted list and appending each number to the result list only if it is not already present in the list. The resulting list is returned."}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num // 10 % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        return tuple(reversed(planets[planet2_index+1:planet1_index]))\n    else:\n        return tuple(planets[planet1_index+1:planet2_index])\n    return ()"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n        result = []\n        for g, s in zip(game, guess):\n            result.append(abs(g - s))\n        return result"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # Initialize the strongest extension as the first extension in the list\n    strongest_extension = extensions[0]\n    # Initialize the strength of the strongest extension as the fraction of uppercase letters in its name\n    strength = len(re.findall(r'[A-Z]', strongest_extension))\n\n    # Iterate over the remaining extensions\n    for extension in extensions[1:]:\n        # Calculate the strength of the current extension\n        current_strength = len(re.findall(r'[A-Z]', extension))\n\n        # If the current extension has a stronger strength than the current strongest extension, update the strongest extension and its strength\n        if current_strength > strength:\n            strongest_extension = extension\n            strength = current_strength\n\n    # Return the strongest extension in the format ClassName.StrongestExtensionName\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    # Check if the second word is a substring of the first word\n    if b in a:\n        return True\n\n    # Check if any rotation of the second word is a substring of the first word\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    # If none of the above conditions are met, return False\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 10 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    roman_values = [1, 5, 10, 50, 100, 500, 1000]\n    result = ''\n\n    while number > 0:\n        for i in range(len(roman_values)):\n            if number >= roman_values[i]:\n                result += roman_numerals[i] * (number // roman_values[i])\n                number %= roman_values[i]\n                break\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2)"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    unique_chars = set()\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total = number + need\n    if total > remaining:\n        return [remaining, 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n\n    if not text:\n        return None\n\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"}
