{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    :param numbers: A list of floating point numbers\n    :param threshold: The minimum distance between two numbers\n    :return: True if any two numbers are closer than the threshold, False otherwise\n    \"\"\"\n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Initialize the minimum difference to infinity\n    min_diff = float('inf')\n\n    # Iterate over the sorted list of numbers\n    for i in range(1, len(numbers)):\n        # Calculate the difference between the current number and the previous number\n        diff = numbers[i] - numbers[i - 1]\n        \n        # Update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n\n        # If the minimum difference is less than or equal to the threshold, return True\n        if min_diff <= threshold:\n            return True\n\n    # If no two numbers are closer than the threshold, return False\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate groups of nested parentheses into separate strings.\n\n    Args:\n    paren_string (str): A string containing multiple groups of nested parentheses.\n\n    Returns:\n    List[str]: A list of strings, each representing a separate group of parentheses.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty stack to keep track of the opening parentheses\n    stack = []\n\n    # Initialize an empty string to build the current group\n    current_group = ''\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        # If the character is a closing parenthesis, pop the corresponding opening parenthesis from the stack\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            # If the stack is empty after popping, it means we've found a complete group\n            if not stack:\n                groups.append(current_group)\n                current_group = ''\n\n    return groups"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n\n    :param number: A positive floating point number\n    :return: The decimal part of the number\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Input number must be positive\")\n\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"Detects if the balance of a bank account falls below zero at any point given a list of deposit and withdrawal operations.\"\"\"\n    \n    # Initialize the balance to zero\n    balance = 0\n    \n    # Iterate over each operation in the list\n    for operation in operations:\n        # Update the balance by adding the current operation\n        balance += operation\n        \n        # If the balance falls below zero, immediately return True\n        if balance < 0:\n            return True\n    \n    # If the function hasn't returned True after iterating over all operations, the balance never fell below zero, so return False\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\nimport statistics\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = statistics.mean(numbers)\n    \n    # Calculate the absolute difference between each number and the mean\n    absolute_differences = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean of the absolute differences\n    mad = statistics.mean(absolute_differences)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of multiple groups of nested parentheses separated by spaces.\n    It returns a list of integers representing the deepest level of nesting for each group.\n\n    :param paren_string: A string of multiple groups of nested parentheses separated by spaces.\n    :return: A list of integers representing the deepest level of nesting for each group.\n    \"\"\"\n\n    # Split the input string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each group of parentheses\n    for group in groups:\n        # Initialize a counter to keep track of the current nesting level\n        current_level = 0\n\n        # Initialize a variable to store the maximum nesting level\n        max_level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current level\n            if char == '(':\n                current_level += 1\n\n                # Update the maximum level if the current level is greater\n                max_level = max(max_level, current_level)\n\n            # If the character is a closing parenthesis, decrement the current level\n            elif char == ')':\n                current_level -= 1\n\n        # Append the maximum nesting level for the current group to the results list\n        results.append(max_level)\n\n    # Return the list of results\n    return results"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to filter by.\n\n    Returns:\n        List[str]: A list of strings that contain the given substring.\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\nimport math\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers)\n    total_product = math.prod(numbers) if numbers else 1\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum elements.\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_values = [numbers[0]]\n    current_max = numbers[0]\n\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        max_values.append(current_max)\n\n    return max_values"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:  # handle empty string\n        return ''\n\n    for i in range(len(string), 0, -1):  # find the longest palindromic postfix\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            prefix = string[:i]  # find the prefix that comes before the palindromic postfix\n            return string + prefix[::-1]  # append the reverse of the prefix to the end of the string\n\n    # if no palindromic postfix is found, append the reverse of the entire string\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if inputs are of equal length\n    if len(a)!= len(b):\n        raise ValueError(\"Input strings must be of equal length\")\n\n    # Check if inputs consist only of 1s and 0s\n    if not set(a).issubset('01') or not set(b).issubset('01'):\n        raise ValueError(\"Input strings must consist only of 1s and 0s\")\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over the characters in the input strings\n    for char_a, char_b in zip(a, b):\n        # Perform XOR operation on the characters and append the result to the result string\n        result += str(int(char_a) ^ int(char_b))\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b\n\n    This function uses the Euclidean algorithm to find the GCD.\n    \"\"\"\n    # Ensure a is the larger number to simplify the algorithm\n    if b > a:\n        a, b = b, a\n    \n    # Base case: if b is 0, the GCD is a\n    if b == 0:\n        return a\n    \n    # Recursive case: call the function with b and the remainder of a/b\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    :param n: The upper limit of the sequence (inclusive)\n    :return: A string containing space-delimited numbers\n    \"\"\"\n    return''.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to handle case insensitivity\n    lower_case_string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_characters = set(lower_case_string)\n    \n    # Count the number of elements in the set to get the number of distinct characters\n    distinct_character_count = len(unique_characters)\n    \n    return distinct_character_count"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a music string into a list of integers representing the duration of each note.\n\n    Args:\n    music_string (str): A string representing musical notes in a special ASCII format.\n\n    Returns:\n    List[int]: A list of integers corresponding to the duration of each note in beats.\n    \"\"\"\n    # Define a dictionary to map note symbols to their corresponding durations\n    note_durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # Split the input string into individual notes\n    notes = music_string.split()\n\n    # Initialize an empty list to store the note durations\n    durations = []\n\n    # Iterate over each note in the input string\n    i = 0\n    while i < len(notes):\n        # Check if the current note is a whole note\n        if notes[i] == 'o':\n            # If the next note is also 'o', it's a whole note, so append the duration and move to the next note\n            if i + 1 < len(notes) and notes[i + 1] == 'o':\n                durations.append(note_durations['o'])\n                i += 2\n            # If the next note is not 'o', it's a half note or quarter note, so append the duration and move to the next note\n            else:\n                durations.append(note_durations['o'])\n                i += 1\n        # Check if the current note is a half note or quarter note\n        elif notes[i] in ['o|', '.|']:\n            # Append the duration and move to the next note\n            durations.append(note_durations[notes[i]])\n            i += 1\n\n    # Return the list of note durations\n    return durations"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlapping cases.\n\n    Args:\n        string (str): The original string to search in.\n        substring (str): The substring to search for.\n\n    Returns:\n        int: The number of times the substring appears in the string.\n    \"\"\"\n    if not substring:  # Edge case: empty substring\n        return 0\n\n    count = 0\n    start = 0\n\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos!= -1:\n            count += 1\n            start = pos + 1  # Move start to the next character\n        else:\n            break\n\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Define a dictionary to map word numbers to their integer equivalents\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into a list of word numbers\n    num_list: List[str] = numbers.split()\n\n    # Sort the list of word numbers based on their integer equivalents\n    sorted_num_list: List[str] = sorted(num_list, key=lambda x: num_dict[x])\n\n    # Join the sorted list of word numbers back into a string\n    sorted_numbers: str =''.join(sorted_num_list)\n\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    :param numbers: A list of floating point numbers\n    :return: A tuple of two numbers that are closest to each other\n    \"\"\"\n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Initialize the minimum difference and the pair of numbers with the minimum difference\n    min_diff = float('inf')  # Initialize with positive infinity\n    closest_pair = ()  # Initialize with an empty tuple\n\n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next number\n        diff = numbers[i + 1] - numbers[i]\n\n        # If the difference is less than the current minimum difference, update the minimum difference and the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    # Return the pair of numbers with the minimum difference\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Applies a linear transformation to a list of numbers, \n    such that the smallest number becomes 0 and the largest becomes 1.\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n\n    Returns:\n        List[float]: The rescaled list of numbers.\n    \"\"\"\n    \n    # Check if the list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The input list must have at least two elements.\")\n\n    # Find the minimum and maximum values in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Check for division by zero\n    if max_value == min_value:\n        return [0.0] * len(numbers)\n\n    # Apply the linear transformation\n    rescaled_numbers = [(x - min_value) / (max_value - min_value) for x in numbers]\n\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\"\n    Return the length of a given string.\n\n    This function takes a string as input and returns the number of characters in the string.\n\n    :param string: The input string.\n    :return: The length of the input string.\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start checking from the largest possible divisor, which is n-1\n    for i in range(n - 1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor, return it as the largest divisor\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\nfrom collections import OrderedDict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Create an OrderedDict to store the count of each number\n    count_dict = OrderedDict()\n    \n    # Iterate over the list to count the occurrence of each number\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Use a list comprehension to filter out numbers that occur more than once\n    return [num for num, count in count_dict.items() if count == 1]"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(char.swapcase() for char in string)"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate a list of strings into a single string.\n\n    Args:\n        strings (List[str]): A list of strings to be concatenated.\n\n    Returns:\n        str: A single string that is the result of concatenating all strings in the input list.\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    # Check if the number of coefficients is even\n    if len(xs) % 2!= 0:\n        raise ValueError(\"The number of coefficients must be even\")\n\n    # Check if the largest non-zero coefficient is at the end\n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must be at the end\")\n\n    # Define the tolerance for the approximation\n    tolerance = 1e-6\n\n    # Define the maximum number of iterations\n    max_iterations = 1000\n\n    # Initialize the lower and upper bounds\n    lower_bound = -1.0\n    upper_bound = 1.0\n\n    # Check if the polynomial has a root in the initial bounds\n    if poly(xs, lower_bound) * poly(xs, upper_bound) > 0:\n        raise ValueError(\"The polynomial does not have a root in the initial bounds\")\n\n    # Perform the bisection method\n    for _ in range(max_iterations):\n        # Calculate the midpoint\n        midpoint = (lower_bound + upper_bound) / 2\n\n        # Check if the midpoint is a root\n        if abs(poly(xs, midpoint)) < tolerance:\n            return midpoint\n\n        # Update the bounds\n        if poly(xs, midpoint) * poly(xs, lower_bound) < 0:\n            upper_bound = midpoint\n        else:\n            lower_bound = midpoint\n\n    # If the maximum number of iterations is reached, raise an error\n    raise ValueError(\"Failed to find a root within the maximum number of iterations\")"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n\n    :param l: The input list\n    :return: The modified list\n    \"\"\"\n    # Separate the elements at indices divisible by 3\n    third_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the elements at indices divisible by 3\n    third_elements.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Initialize a counter to keep track of the current index in third_elements\n    third_index = 0\n    \n    # Iterate over the input list\n    for i in range(len(l)):\n        # If the index is divisible by 3, append the next element from third_elements\n        if i % 3 == 0:\n            result.append(third_elements[third_index])\n            third_index += 1\n        # Otherwise, append the original element\n        else:\n            result.append(l[i])\n    \n    return result"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n\n    :param l: A list of integers\n    :return: The maximum element in the list\n    \"\"\"\n    if not l:\n        raise ValueError(\"List is empty\")\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    # Separate the even and odd indexed elements into different lists\n    even_elements = [l[i] for i in range(0, len(l), 2)]\n    odd_elements = [l[i] for i in range(1, len(l), 2)]\n\n    # Sort the even indexed elements\n    even_elements.sort()\n\n    # Combine the sorted even indexed elements with the odd indexed elements\n    result = []\n    for i in range(max(len(even_elements), len(odd_elements))):\n        if i < len(even_elements):\n            result.append(even_elements[i])\n        if i < len(odd_elements):\n            result.append(odd_elements[i])\n\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and it's also prime.\n    \n    Args:\n    n (int): The position of the prime Fibonacci number to find.\n    \n    Returns:\n    int: The n-th prime Fibonacci number.\n    \"\"\"\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Initialize the counter for prime Fibonacci numbers\n    count = 0\n    \n    # Loop until we find the n-th prime Fibonacci number\n    while True:\n        # Generate the next Fibonacci number\n        a, b = b, a + b\n        \n        # Check if the Fibonacci number is prime\n        if is_prime(b):\n            # Increment the counter\n            count += 1\n            \n            # If this is the n-th prime Fibonacci number, return it\n            if count == n:\n                return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()  # Sort the list to apply the two-pointer technique\n    for i in range(len(l) - 2):  # Iterate over the list with three pointers\n        if i > 0 and l[i] == l[i - 1]:  # Skip duplicates to ensure distinct elements\n            continue\n        left, right = i + 1, len(l) - 1  # Initialize two pointers\n        while left < right:  # Move the pointers based on the sum\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True  # Return True if a triple sum is found\n    return False  # Return False if no triple sum is found"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Since each car moving left to right will collide with each car moving right to left exactly once,\n    # the total number of collisions is the product of the number of cars in each set.\n    return n * n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(lst):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n\n    :param x: The input number to be converted.\n    :param base: The target base for the conversion.\n    :return: A string representation of the converted number.\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    \n    Parameters:\n    a (float): The length of a side of the triangle.\n    h (float): The height of the triangle.\n    \n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Side length and height must be positive numbers.\")\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n <= 3:\n        return [0, 0, 2, 0][n]\n    else:\n        fib_values = [0, 0, 2, 0]\n        for _ in range(4, n + 1):\n            fib_values.append(sum(fib_values))\n            fib_values.pop(0)\n        return fib_values[-1]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    \"\"\"\n    Return median of elements in the list l.\n    \n    :param l: A list of numbers\n    :return: The median of the numbers in the list\n    \"\"\"\n    # First, we sort the list in ascending order\n    sorted_l = sorted(l)\n    \n    # Then, we find the length of the list\n    n = len(sorted_l)\n    \n    # If the length of the list is odd, the median is the middle element\n    if n % 2!= 0:\n        # We use integer division (//) to find the index of the middle element\n        return sorted_l[n // 2]\n    \n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        # We use integer division (//) to find the indices of the two middle elements\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        # We return the average of the two middle elements\n        return (mid1 + mid2) / 2"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = ''.join(c for c in text if c.isalnum()).lower()  # Remove non-alphanumeric characters and convert to lowercase\n    return text == text[::-1]  # Compare the string with its reverse"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p using exponentiation by squaring.\n\n    This function uses the property of modular arithmetic that (a*b) % n = ((a % n) * (b % n)) % n.\n    It also uses the property of exponentiation that a^(b+c) = a^b * a^c.\n\n    :param n: The exponent\n    :param p: The modulus\n    :return: 2^n modulo p\n    \"\"\"\n    result = 1\n    base = 2 % p\n    \n    while n > 0:\n        # If n is odd, multiply the result by the base\n        if n % 2 == 1:\n            result = (result * base) % p\n        \n        # Square the base and divide n by 2\n        base = (base * base) % p\n        n = n // 2\n    \n    return result"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n\n    Args:\n        l (list): A list of integers.\n        t (int): The threshold value.\n\n    Returns:\n        bool: True if all numbers in the list are below the threshold, False otherwise.\n    \"\"\"\n    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n\n    Returns:\n        int: The sum of x and y.\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Convert both strings to sets to remove duplicate characters\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # Compare the two sets\n    return set0 == set1"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    This function uses an iterative approach to calculate the Fibonacci sequence.\n    It maintains a list of previously calculated Fibonacci numbers to avoid redundant calculations.\n\n    :param n: The position of the Fibonacci number to return.\n    :return: The n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the list with the first two Fibonacci numbers\n    fib_sequence = [0, 1]\n\n    # Calculate Fibonacci numbers up to the nth number\n    for i in range(2, n + 1):\n        # Calculate the next Fibonacci number as the sum of the previous two\n        next_fib = fib_sequence[i - 1] + fib_sequence[i - 2]\n        # Append the new Fibonacci number to the list\n        fib_sequence.append(next_fib)\n\n    # Return the nth Fibonacci number\n    return fib_sequence[n]"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    bracket_map = {\">\": \"<\"}\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop()!= bracket_map[bracket]:\n                return False\n\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n        l (list): A list of numbers.\n\n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert the lists to sets for efficient lookup and to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Use set intersection to find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list and sort it\n    result = sorted(list(common_elements))\n    \n    return result"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    \n    # Initialize the largest factor to 1\n    largest_factor = 1\n    \n    # Start checking from 2, the smallest prime number\n    i = 2\n    \n    # Continue checking until we've checked all numbers up to n\n    while i * i <= n:\n        # If n is divisible by i, then i is a factor\n        if n % i:\n            # If i is not a factor, increment it by 1\n            i += 1\n        else:\n            # If i is a factor, update the largest factor and divide n by i\n            largest_factor = i\n            n //= i\n    \n    # If n is a prime number greater than 1, it is the largest factor\n    if n > 1:\n        largest_factor = n\n    \n    return largest_factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function calculates the sum of all integers from 1 to n.\n    \n    Args:\n        n (int): The upper limit of the sum.\n    \n    Returns:\n        int: The sum of all integers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    \"\"\"\n    Compute the derivative of a polynomial represented by its coefficients.\n\n    Args:\n    xs (list): Coefficients of the polynomial, where xs[i] is the coefficient of x^i.\n\n    Returns:\n    list: Coefficients of the derivative of the polynomial.\n    \"\"\"\n    # Check if the input list is empty\n    if not xs:\n        return []\n\n    # Initialize an empty list to store the coefficients of the derivative\n    derivative_coeffs = []\n\n    # The derivative of x^n is n*x^(n-1), so we multiply each coefficient by its index\n    # We start from the second coefficient (index 1) because the derivative of a constant is 0\n    for i in range(1, len(xs)):\n        # Append the coefficient of the derivative to the list\n        derivative_coeffs.append(i * xs[i])\n\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n\n    The FibFib number sequence is defined as:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n    Args:\n    n (int): The index of the element to compute.\n\n    Returns:\n    int: The n-th element of the FibFib number sequence.\n    \"\"\"\n    # Handle base cases\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize a list to store the computed values\n    fibfib_values = [0, 0, 1]\n\n    # Compute the values up to the n-th element\n    for i in range(3, n + 1):\n        # Compute the i-th element as the sum of the three preceding elements\n        fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n\n    # Return the n-th element\n    return fibfib_values[n]"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.lower()\n    count = sum(1 for char in s if char in 'aeiou')\n    if s.endswith('y'):\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert the integer to a string to easily access and manipulate its digits\n    digits = str(x)\n    \n    # Calculate the effective shift, taking into account cases where shift > number of digits\n    effective_shift = shift % len(digits)\n    \n    # If the effective shift is 0, return the original digits\n    if effective_shift == 0:\n        return digits\n    \n    # Perform the circular shift by slicing the string\n    shifted_digits = digits[-effective_shift:] + digits[:-effective_shift]\n    \n    # If the shift is greater than the number of digits, return the digits reversed\n    if shift > len(digits):\n        return shifted_digits[::-1]\n    \n    # Return the shifted digits\n    return shifted_digits"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    This function calculates the sum of ASCII codes of uppercase characters in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The sum of ASCII codes of uppercase characters.\n    \"\"\"\n    # Initialize a variable to store the sum of ASCII codes\n    ascii_sum = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase character to the sum\n            ascii_sum += ord(char)\n    \n    # Return the sum of ASCII codes\n    return ascii_sum"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    Calculate the number of mango fruits in a basket given the total number of fruits and a string describing the number of apples and oranges.\n\n    Args:\n        s (str): A string representing the number of apples and oranges, e.g., \"5 apples and 6 oranges\".\n        n (int): The total number of fruits in the basket.\n\n    Returns:\n        int: The number of mango fruits in the basket.\n    \"\"\"\n    # Split the string into parts to extract the numbers of apples and oranges\n    parts = s.split()\n    \n    # Extract the numbers of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[4])\n    \n    # Calculate the number of mango fruits by subtracting the numbers of apples and oranges from the total\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    Plucks the node with the smallest even value from the given array.\n    \n    Args:\n        arr (list): A list of non-negative integers representing a branch of a tree.\n    \n    Returns:\n        list: A list containing the smallest even value and its index. If no even values are found, returns an empty list.\n    \"\"\"\n    \n    # Initialize the smallest even value and its index to None\n    smallest_even = None\n    smallest_even_index = None\n    \n    # Iterate over the array with enumerate to get both the index and value\n    for i, value in enumerate(arr):\n        # Check if the value is even\n        if value % 2 == 0:\n            # If smallest_even is None or the current value is smaller, update smallest_even and its index\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_even_index = i\n    \n    # If smallest_even is still None, return an empty list\n    if smallest_even is None:\n        return []\n    \n    # Return the smallest even value and its index\n    return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    max_num = -1\n    for num, freq in freq_dict.items():\n        if freq >= num and num > max_num:\n            max_num = num\n\n    return max_num"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        \n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    is_balanced = q == q[::-1]\n    \n    # Calculate the sum of the list elements\n    total_weight = sum(q)\n    \n    # Check if the sum of the list elements is less than or equal to the maximum possible weight\n    is_within_weight_limit = total_weight <= w\n    \n    # Return True if the object is balanced and within the weight limit, False otherwise\n    return is_balanced and is_within_weight_limit"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    \n    # Compare elements from the start and end of the array\n    for i in range(n // 2):\n        # If the elements are different, increment the changes counter\n        if arr[i]!= arr[n - i - 1]:\n            changes += 1\n    \n    # If the array has an odd length, the middle element doesn't need to be changed\n    return changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(string) for string in lst1)\n    total_chars_lst2 = sum(len(string) for string in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"Returns True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    \n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        \"\"\"Returns True if the given number is prime, False otherwise.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Generate all prime numbers less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n\n    # Check all combinations of three prime numbers\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n\n    # If no combination is found, return False\n    return False"}
{"task_id": "HumanEval/76", "solution": "import math\n\ndef is_simple_power(x, n):\n    if x <= 0 or n <= 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    log_result = math.log(x, n)\n    return math.isclose(log_result, round(log_result))"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Returns True if the given integer is a cube of some integer number.\n    \n    Parameters:\n    a (int): The input integer to check.\n    \n    Returns:\n    bool: True if the integer is a cube, False otherwise.\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1. / 3))\n    \n    # Check if the cube of the cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to binary format and returns it as a string.\n    \n    The string will have 'db' at the beginning and end, and each character in between will be '0' or '1'.\n    \n    Parameters:\n    decimal (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary representation of the decimal number as a string.\n    \"\"\"\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    binary = 'db' + binary + 'db'\n    \n    return binary"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"\n    Checks if a string is happy.\n    \n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string with a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Check if all characters in the current window are distinct\n        if len(set(s[i:i+3]))!= 3:\n            return False\n    \n    # If no windows with non-distinct characters were found, the string is happy\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of the string is a prime number.\"\"\"\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the total number of n-digit positive integers\n    total_numbers = 9 * (10 ** (n - 1))\n    \n    # Calculate the number of n-digit positive integers that start with 1\n    starts_with_one = 10 ** (n - 1)\n    \n    # Calculate the number of n-digit positive integers that end with 1\n    ends_with_one = 9 * (10 ** (n - 2)) * 9\n    \n    # Subtract the numbers that start and end with 1 to avoid double counting\n    starts_and_ends_with_one = 9 ** (n - 2) * 9\n    \n    # Return the total count of numbers that start or end with 1\n    return starts_with_one + ends_with_one - starts_and_ends_with_one"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the integer to a string to easily iterate over its digits\n    str_N = str(N)\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Add the integer value of the digit to the sum\n        sum_of_digits += int(digit)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    # Return the binary sum as a string\n    return binary_sum"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of even elements at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(num for idx, num in enumerate(lst) if idx % 2!= 0 and num % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of the input string.\n    \n    The ordered version of a string is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in ascending order\n    based on ascii value. The order of words and blank spaces in the sentence is preserved.\n    \"\"\"\n    return''.join(''.join(sorted(word, key=lambda c: (not c.isalnum(), c.lower()))) for word in s.split())"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over the rows in the list\n    for i, row in enumerate(lst):\n        # Iterate over the elements in the row\n        for j, elem in enumerate(row):\n            # Check if the element is equal to x\n            if elem == x:\n                # If it is, append the coordinate to the list\n                coordinates.append((i, j))\n    \n    # Sort the coordinates first by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    \n    # Return the sorted list of coordinates\n    return coordinates"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\n    first_last_sum = array[0] + array[-1]\n    sorted_array = sorted(array)\n\n    return sorted_array if first_last_sum % 2!= 0 else sorted_array[::-1]"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"\n    Encrypts a string by shifting the alphabet down by 2 * 2 places.\n\n    Args:\n        s (str): The string to be encrypted.\n\n    Returns:\n        str: The encrypted string.\n    \"\"\"\n    shift = 2 * 2  # Calculate the shift value\n    encrypted_string = \"\"  # Initialize an empty string to store the encrypted result\n\n    for char in s:  # Iterate over each character in the input string\n        if char.isalpha():  # Check if the character is a letter\n            ascii_offset = 65 if char.isupper() else 97  # Get the ASCII offset for uppercase or lowercase letters\n            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)  # Shift the character and wrap around if necessary\n            encrypted_string += encrypted_char  # Add the encrypted character to the result string\n        else:\n            encrypted_string += char  # If the character is not a letter, add it to the result string as is\n\n    return encrypted_string  # Return the encrypted string"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Returns None if there is no such element.\n    \n    :param lst: A list of integers\n    :return: The 2nd smallest element or None\n    \"\"\"\n    # Check if the list is empty or has less than 2 unique elements\n    if len(set(lst)) < 2:\n        return None\n    \n    # Remove duplicates by converting the list to a set\n    unique_lst = set(lst)\n    \n    # Remove the smallest element\n    unique_lst.remove(min(unique_lst))\n    \n    # Return the smallest element of the updated set\n    return min(unique_lst)"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the input string into sentences based on the given delimiters\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n\n    # Initialize a counter for boredoms\n    boredom_count = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Strip leading and trailing whitespace from the sentence\n        sentence = sentence.strip()\n\n        # Check if the sentence is not empty and starts with 'I'\n        if sentence and sentence[0].lower() == 'i':\n            # If the sentence starts with 'I', increment the boredom count\n            boredom_count += 1\n\n    # Return the total count of boredoms\n    return boredom_count"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing \n    all vowels with the letter that appears 2 places ahead of that vowel \n    in the English alphabet.\n\n    Args:\n        message (str): The input message to be encoded.\n\n    Returns:\n        str: The encoded message.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # Find the position of the vowel in the alphabet\n                if char.islower():\n                    vowel_pos = ord(char) - ord('a')\n                    # Replace the vowel with the letter 2 places ahead\n                    encoded_char = chr((vowel_pos + 2) % 26 + ord('a'))\n                else:\n                    vowel_pos = ord(char) - ord('A')\n                    # Replace the vowel with the letter 2 places ahead\n                    encoded_char = chr((vowel_pos + 2) % 26 + ord('A'))\n            else:\n                # Swap the case of the letter\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def largest_prime_digit_sum(lst):\n    \"\"\"\n    This function finds the largest prime value in a given list of integers and returns the sum of its digits.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of the digits of the largest prime number in the list.\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime.\n\n        Parameters:\n        n (int): The number to check.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        \"\"\"\n        Helper function to calculate the sum of the digits of a number.\n\n        Parameters:\n        n (int): The number to calculate the sum for.\n\n        Returns:\n        int: The sum of the digits of the number.\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    # Filter the list to only include prime numbers\n    prime_numbers = [num for num in lst if is_prime(num)]\n\n    # If no prime numbers are found, return 0\n    if not prime_numbers:\n        return 0\n\n    # Find the largest prime number\n    largest_prime = max(prime_numbers)\n\n    # Return the sum of the digits of the largest prime number\n    return digit_sum(largest_prime)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    key_types = set(type(key) for key in dict.keys())\n    if len(key_types) > 1 or list(key_types)[0]!= str:\n        return False\n\n    case_types = set(key.islower() for key in dict.keys())\n    return len(case_types) == 1"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"Return a list of prime numbers less than n.\"\"\"\n    \n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Iterate over all numbers less than n\n    for possiblePrime in range(2, n):\n        \n        # Assume number is prime until shown it is not\n        isPrime = True\n        \n        # Iterate over all numbers up to the square root of the possible prime\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            \n            # If the possible prime is divisible by any of these numbers, it is not prime\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        \n        # If the number is prime, add it to the list of primes\n        if isPrime:\n            primes.append(possiblePrime)\n    \n    # Return the list of primes\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    # Extract the unit digits of a and b using the modulus operator\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value. If the number is equidistant\n    from two integers, rounds it away from zero.\n\n    :param value: A string representing a number.\n    :return: The closest integer to the given value.\n    \"\"\"\n    # Convert the input string to a float\n    num = float(value)\n    \n    # Calculate the decimal part of the number\n    decimal_part = num - int(num)\n    \n    # If the decimal part is less than 0.5, round down\n    if decimal_part < 0.5:\n        return int(num)\n    \n    # If the decimal part is greater than 0.5, round up\n    elif decimal_part > 0.5:\n        return int(num) + 1\n    \n    # If the decimal part is exactly 0.5, round away from zero\n    else:\n        # If the number is positive, round up\n        if num >= 0:\n            return int(num) + 1\n        # If the number is negative, round down\n        else:\n            return int(num) - 1"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:  # n is even\n            n += 2\n        else:  # n is odd\n            n += 2\n        pile.append(n)\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # First, we replace all commas with spaces to make the string uniform\n    s = s.replace(\",\", \" \")\n    \n    # Then, we split the string into a list of words using space as the delimiter\n    # The split() function splits a string into a list where each word is a list item\n    words = s.split()\n    \n    # Finally, we return the list of words\n    return words"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n    \n    # Start from the largest number in the range and decrement by 1\n    for num in range(y, x - 1, -1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # If the number is even, return it\n            return num\n    \n    # If no even number is found in the range, return -1\n    return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"\n    Compute the average of integers from n through m, round to nearest integer, \n    and convert to binary. Return -1 if n is greater than m.\n\n    Args:\n        n (int): The start of the range (inclusive).\n        m (int): The end of the range (inclusive).\n\n    Returns:\n        str or int: The binary representation of the rounded average, or -1 if n > m.\n    \"\"\"\n    # Check if n is greater than m and return -1 if true\n    if n > m:\n        return -1\n\n    # Calculate the sum of integers from n through m\n    total = sum(range(n, m + 1))\n\n    # Calculate the average and round to the nearest integer\n    avg = round(total / (m - n + 1))\n\n    # Convert the rounded average to binary and return as a string\n    return bin(avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has any even digit.\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    # Filter out numbers with even digits and sort the result\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out numbers that are not between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each digit to its corresponding name\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [digit_names[num] for num in reversed_arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    def factorial(x):\n        \"\"\"Calculate the factorial of a number.\"\"\"\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    def sum_to_x(x):\n        \"\"\"Calculate the sum of numbers from 1 to x.\"\"\"\n        return x * (x + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to_x(i) for i in range(1, n + 1)]"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        tuple: A tuple containing the number of even and odd integer palindromes.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        # Convert the integer to a string to check if it's a palindrome\n        str_i = str(i)\n        \n        # Check if the string is equal to its reverse\n        if str_i == str_i[::-1]:\n            # If the integer is even, increment the even count\n            if i % 2 == 0:\n                even_count += 1\n            # If the integer is odd, increment the odd count\n            else:\n                odd_count += 1\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"Helper function to calculate the sum of digits of a number.\"\"\"\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n\n    return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_in_lst1 = [num for num in lst1 if num % 2 == 0]\n    odd_in_lst1 = [num for num in lst1 if num % 2!= 0]\n    even_in_lst2 = [num for num in lst2 if num % 2 == 0]\n    odd_in_lst2 = [num for num in lst2 if num % 2!= 0]\n\n    if len(odd_in_lst1) <= len(even_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, \n    return a dictionary of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    :param test: A string of space separated lowercase letters\n    :return: A dictionary with the most frequent letters and their counts\n    \"\"\"\n    # Remove spaces and convert the string to a list of letters\n    letters = test.replace(\" \", \"\")\n\n    # If the string is empty, return an empty dictionary\n    if not letters:\n        return {}\n\n    # Create a dictionary to store the frequency of each letter\n    frequency = {}\n\n    # Iterate over each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in frequency:\n            frequency[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            frequency[letter] = 1\n\n    # Find the maximum frequency\n    max_frequency = max(frequency.values())\n\n    # Create a dictionary to store the letters with the maximum frequency\n    max_frequency_letters = {}\n\n    # Iterate over each letter and its frequency in the frequency dictionary\n    for letter, freq in frequency.items():\n        # If the frequency is equal to the maximum frequency, add the letter to the max_frequency_letters dictionary\n        if freq == max_frequency:\n            max_frequency_letters[letter] = freq\n\n    # Return the dictionary with the letters and their counts\n    return max_frequency_letters"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    \"\"\"\n    Deletes all characters in string s that are equal to any character in string c\n    and checks if the resulting string is a palindrome.\n\n    Args:\n        s (str): The original string.\n        c (str): The string containing characters to be deleted from s.\n\n    Returns:\n        tuple: A tuple containing the resulting string and a boolean indicating\n            whether the resulting string is a palindrome.\n    \"\"\"\n\n    # Create a set of characters to be deleted for efficient lookups\n    chars_to_delete = set(c)\n\n    # Use a list comprehension to filter out characters to be deleted\n    result_list = [char for char in s if char not in chars_to_delete]\n\n    # Join the characters back into a string\n    result_string = ''.join(result_list)\n\n    # Check if the resulting string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n\n    return result_string, is_palindrome"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, string in enumerate(lst, start=1):\n        odd_digits = sum(1 for digit in string if int(digit) % 2!= 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    # Calculate the total number of water units in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times the bucket needs to be lowered\n    # by dividing the total number of water units by the bucket capacity\n    # and rounding up to the nearest whole number\n    bucket_lowerings = math.ceil(total_water / capacity)\n    \n    return bucket_lowerings"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"\n    Returns a list of words from string s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string.\n    n (int): The number of consonants.\n\n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define the set of vowels\n    vowels = set('aeiouAEIOU')\n\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each word in the string\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n\n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is not a vowel\n            if char not in vowels:\n                # Increment the consonant count\n                consonant_count += 1\n\n        # Check if the word has exactly n consonants\n        if consonant_count == n:\n            # Add the word to the result list\n            result.append(word)\n\n    # Return the result list\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Check if k is greater than the length of the array\n    if k > len(arr):\n        raise ValueError(\"k cannot be greater than the length of the array\")\n\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Return the first k elements of the sorted array\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2!= 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    :param arr: A non-empty array of integers\n    :type arr: list[int]\n    :param k: An integer representing the number of elements to consider\n    :type k: int\n    :return: The sum of the elements with at most two digits from the first k elements of arr\n    :rtype: int\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(min(k, len(arr))):\n        # Check if the current element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # Add the current element to the sum\n            total_sum += arr[i]\n    \n    # Return the sum\n    return total_sum"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz_sequence(num):\n        sequence = [num]\n        while num!= 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    sequence = collatz_sequence(n)\n    odd_numbers = sorted(set([num for num in sequence if num % 2!= 0]))\n    return odd_numbers"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. \n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    \n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date is in the correct format\n    if len(date)!= 10 or date[2]!= '-' or date[5]!= '-':\n        return False\n    \n    # Extract the month, day, and year from the date string\n    month, day, year = date.split('-')\n    \n    # Check if the month, day, and year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    # Convert the month, day, and year to integers\n    month, day, year = int(month), int(day), int(year)\n    \n    # Check if the month is within the valid range (1-12)\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is within the valid range for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        # Consider special cases like leap years for February\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    # If all checks pass, the date is valid\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    # First, try to split on whitespace\n    words = txt.split()\n    \n    # If no whitespace exists, try to split on commas\n    if len(words) == 1:\n        words = txt.split(',')\n        \n        # If no commas exist, count the number of lower-case letters with odd order in the alphabet\n        if len(words) == 1:\n            return sum(1 for char in txt.lower() if char.isalpha() and ord(char) % 2!= 0)\n    \n    return words"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Check if list is sorted in ascending order\n    if lst!= sorted(lst):\n        return False\n    \n    # Check if list has more than 1 duplicate of the same number\n    for num in set(lst):\n        if lst.count(num) > 2:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine whether the length of intersection of two intervals is a prime number.\"\"\"\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Check if the intervals intersect\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        sign_product *= 1 if num >= 0 else -1\n        magnitude_sum += abs(num)\n\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "solution": "from collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path = [float('inf')] * k\n    queue = deque([(grid[i][j], [grid[i][j]], i, j) for i in range(n) for j in range(n)])\n    \n    while queue:\n        val, path, x, y = queue.popleft()\n        if len(path) == k:\n            if path < min_path:\n                min_path = path\n        else:\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    queue.append((grid[nx][ny], path + [grid[nx][ny]], nx, ny))\n                    \n    return min_path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"\n    Generates the first n + 1 numbers of the Tribonacci sequence.\n\n    Args:\n        n (int): A non-negative integer.\n\n    Returns:\n        list: A list of the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    # Initialize the Tribonacci sequence with the first three numbers\n    trib = [1, 3, 2]\n\n    # If n is 0 or 1, return the corresponding Tribonacci sequence\n    if n <= 1:\n        return trib[:n + 1]\n\n    # Generate the Tribonacci sequence up to the nth number\n    for i in range(3, n + 1):\n        # If i is even, calculate the ith number using the formula 1 + i / 2\n        if i % 2 == 0:\n            trib.append(1 + i // 2)\n        # If i is odd, calculate the ith number using the recurrence relation\n        else:\n            # Calculate the next number in the sequence\n            next_num = trib[i - 2] + trib[i - 3] + trib[i - 1]\n            # Append the next number to the sequence\n            trib.append(next_num)\n\n    return trib"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    all_even = True\n    \n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2!= 0:\n            product *= digit\n            all_even = False\n    \n    return product if not all_even else 0"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in string:\n        if char == '[':\n            current_depth += 1\n            stack.append(char)\n            max_depth = max(max_depth, current_depth)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            current_depth -= 1\n    \n    return max_depth > 1 and not stack"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    \"\"\"Returns the sum of squared numbers in the given list, \n    after rounding each element to the upper integer (ceiling).\"\"\"\n    \n    # Use a list comprehension to round each element to the upper integer and square it\n    squared_numbers = [math.ceil(num) ** 2 for num in lst]\n    \n    # Sum up the squared numbers\n    total_sum = sum(squared_numbers)\n    \n    return total_sum"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Remove trailing whitespace\n    txt = txt.rstrip()\n    \n    # Check if the string is not empty\n    if not txt:\n        return False\n    \n    # Split the string into words\n    words = txt.split()\n    \n    # Check if the last word has a length of 1\n    if len(words[-1]) == 1:\n        # Check if the last character is an alphabetical character\n        return words[-1].isalpha()\n    \n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal \n    to the element immediately preceding it. If no such element exists then \n    returns -1.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The largest index of an element which is not greater than or equal \n        to the element immediately preceding it, or -1 if no such element exists.\n    \"\"\"\n    # Initialize the result as -1, assuming the array is sorted in ascending order\n    result = -1\n    \n    # Iterate over the array from the second element to the last element\n    for i in range(1, len(arr)):\n        # If the current element is not greater than the previous element, update the result\n        if arr[i] <= arr[i - 1]:\n            result = i\n    \n    # Return the result\n    return result"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b), where 'a' is the largest of negative integers, \n    and 'b' is the smallest of positive integers in a list.\n    \n    If there is no negative or positive integers, return them as None.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the largest negative integer and the smallest positive integer.\n    \"\"\"\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate over each integer in the list\n    for num in lst:\n        # Check if the integer is negative\n        if num < 0:\n            # If largest_negative is None or the current integer is larger, update largest_negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # Check if the integer is positive\n        elif num > 0:\n            # If smallest_positive is None or the current integer is smaller, update smallest_positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # Return the largest negative and smallest positive integers\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Normalize the input by replacing commas with dots and converting to float\n    def normalize(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        else:\n            return float(x)\n\n    # Normalize the inputs\n    a_norm = normalize(a)\n    b_norm = normalize(b)\n\n    # Compare the normalized values\n    if a_norm > b_norm:\n        # If a is larger, return a in its original type\n        if isinstance(a, str):\n            return a.replace('.', ',')\n        else:\n            return a\n    elif a_norm < b_norm:\n        # If b is larger, return b in its original type\n        if isinstance(b, str):\n            return b.replace('.', ',')\n        else:\n            return b\n    else:\n        # If the values are equal, return None\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is less than 8, in which case it cannot be the sum of 4 positive even numbers\n    if n < 8:\n        return False\n    \n    # Check if n is even, since the sum of 4 even numbers must be even\n    if n % 2!= 0:\n        return False\n    \n    # Initialize a counter for the number of even numbers that sum up to n\n    count = 0\n    \n    # Iterate over all even numbers from 2 to n\n    for i in range(2, n + 1, 2):\n        # Check if n is equal to the current even number plus 3 other even numbers\n        if n - i >= 6 and (n - i) % 2 == 0:\n            count += 1\n    \n    # Return True if n can be written as the sum of exactly 4 positive even numbers, False otherwise\n    return count > 0"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"\n    Calculate the Brazilian factorial of a given integer.\n\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The Brazilian factorial of n.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the result variable to 1\n    result = 1\n\n    # Calculate the factorial of each number from n to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of the current number\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n\n        # Multiply the result by the factorial of the current number\n        result *= factorial\n\n    # Return the final result\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    # Replace one or two consecutive spaces with underscores\n    text = re.sub(' +', lambda x: '_' * len(x.group(0)) if len(x.group(0)) <= 2 else '-', text)\n    # Replace remaining spaces (more than two consecutive) with hyphens\n    text = re.sub('_+', lambda x: '-' if len(x.group(0)) > 1 else '_', text)\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"\n    Validate a file name based on specific conditions.\n\n    Args:\n    file_name (str): The name of the file to be validated.\n\n    Returns:\n    str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    name, extension = file_name.split('.')\n\n    # Check if the substring before the dot starts with a latin alphabet letter\n    if not name[0].isalpha():\n        return 'No'\n\n    # Check if the substring before the dot is not empty\n    if not name:\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Count the number of digits in the file name\n    digit_count = sum(char.isdigit() for char in file_name)\n\n    # Check if there are more than three digits in the file name\n    if digit_count > 3:\n        return 'No'\n\n    # If all conditions are met, the file name is valid\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers, squares the integer entry if its index is a multiple of 3, \n    cubes the integer entry if its index is a multiple of 4 and not a multiple of 3, \n    and returns the sum of all entries.\n    \n    :param lst: A list of integers\n    :return: The sum of all entries after transformation\n    \"\"\"\n    return sum(\n        x**2 if i % 3 == 0 and i % 4!= 0 \n        else x**3 if i % 4 == 0 \n        else x \n        for i, x in enumerate(lst)\n    )"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Return a string containing words from the original sentence,\n    whose lengths are prime numbers, in the same order.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the prime words back into a sentence\n    return''.join(prime_words)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"\n    Simplify the expression x * n and return True if it evaluates to a whole number, False otherwise.\n\n    Args:\n        x (str): A string representation of a fraction in the format <numerator>/<denominator>.\n        n (str): A string representation of a fraction in the format <numerator>/<denominator>.\n\n    Returns:\n        bool: True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n\n    # Split the input strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product of the numerators is divisible by the product of the denominators\n    return product_num % product_den == 0"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Calculate the sum of digits for each number and store it along with the original index\n    nums_with_digit_sum = [(i, num, sum(int(digit) for digit in str(abs(num)))) for i, num in enumerate(nums)]\n    \n    # Sort the list based on the sum of digits and the original index\n    sorted_nums = sorted(nums_with_digit_sum, key=lambda x: (x[2], x[0]))\n    \n    # Return the sorted list of numbers\n    return [num for _, num, _ in sorted_nums]"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"\n    This function filters an array of numbers and returns the count of numbers \n    that are greater than 10 and both first and last digits are odd.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The count of numbers that meet the specified conditions.\n    \"\"\"\n    def is_odd_digit(num):\n        \"\"\"Check if a digit is odd.\"\"\"\n        return num % 2!= 0\n\n    def is_first_last_digit_odd(num):\n        \"\"\"Check if both first and last digits of a number are odd.\"\"\"\n        # Convert the number to a string to easily access the first digit\n        str_num = str(abs(num))  # Use absolute value to handle negative numbers\n        return is_odd_digit(int(str_num[0])) and is_odd_digit(int(str_num[-1]))\n\n    # Use a generator expression to filter the numbers and count them\n    return sum(1 for num in nums if num > 10 and is_first_last_digit_odd(num))"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    Returns the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    :param n: A positive integer\n    :return: The number of valid triples\n    \"\"\"\n    # Initialize count of triples\n    count = 0\n    \n    # Generate array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Iterate over all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    \n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    \n    return planets[idx1 + 1:idx2]"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Parameters:\n    n (int): The number to check for primality.\n    x (int): The value to return if n is prime.\n    y (int): The value to return if n is not prime.\n\n    Returns:\n    int: The value of x if n is prime, otherwise the value of y.\n    \"\"\"\n\n    # Define a helper function to check for primality\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        # A prime number must be greater than 1\n        if num <= 1:\n            return False\n        # Check from 2 to the square root of the number\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if n is prime and return the corresponding value\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    :param lst: A list of numbers\n    :return: The sum of squares of the odd numbers in the list\n    \"\"\"\n    # Filter out non-integer and negative values\n    filtered_list = [num for num in lst if isinstance(num, int) and num >= 0]\n    \n    # Square the odd numbers and sum them up\n    sum_of_squares = sum(num ** 2 for num in filtered_list if num % 2!= 0)\n    \n    return sum_of_squares"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    \"\"\"Return an array of absolute differences between scores and guesses.\"\"\"\n    return [abs(g - s) for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    This function determines the strongest extension for a given class.\n    \n    Parameters:\n    class_name (str): The name of the class.\n    extensions (list): A list of extensions.\n    \n    Returns:\n    str: A string in the format 'ClassName.StrongestExtensionName' representing the class with its strongest extension.\n    \"\"\"\n    \n    # Initialize the strongest extension and its strength\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n    \n    # Iterate over each extension in the list\n    for extension in extensions[1:]:\n        # Calculate the strength of the current extension\n        strength = calculate_strength(extension)\n        \n        # If the current extension's strength is greater than the max strength, update the strongest extension and max strength\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    \n    # Return the class name with the strongest extension\n    return f\"{class_name}.{strongest_extension}\"\n\n\ndef calculate_strength(extension):\n    \"\"\"\n    This function calculates the strength of an extension.\n    \n    Parameters:\n    extension (str): The name of the extension.\n    \n    Returns:\n    int: The strength of the extension, calculated as the number of uppercase letters minus the number of lowercase letters.\n    \"\"\"\n    \n    # Calculate the number of uppercase and lowercase letters in the extension's name\n    uppercase_count = sum(1 for char in extension if char.isupper())\n    lowercase_count = sum(1 for char in extension if char.islower())\n    \n    # Return the strength of the extension\n    return uppercase_count - lowercase_count"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    Checks if the second word or any of its rotations is a substring in the first word.\n\n    Args:\n        a (str): The first word.\n        b (str): The second word.\n\n    Returns:\n        bool: True if the second word or any of its rotations is a substring in the first word, False otherwise.\n    \"\"\"\n    # Concatenate the first word with itself to account for rotations\n    double_a = a + a\n    \n    # Check if the second word or any of its rotations is a substring in the concatenated word\n    for i in range(len(b)):\n        # Rotate the second word by i positions\n        rotated_b = b[i:] + b[:i]\n        \n        # Check if the rotated word is a substring in the concatenated word\n        if rotated_b in double_a:\n            return True\n    \n    # If no rotation of the second word is a substring in the first word, return False\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): The input integer.\n\n    Returns:\n        tuple: A tuple containing the count of even and odd digits.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    # Convert the integer to a string to easily iterate over each digit\n    for digit in str(abs(num)):\n        # Convert the digit back to an integer to check if it's even or odd\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define a dictionary mapping integers to their roman numeral equivalents\n    roman_numerals = {\n        1000:'m', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    # Initialize an empty string to store the roman numeral representation\n    roman = ''\n\n    # Iterate over the dictionary in descending order of integer values\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        # Calculate the number of times the current roman numeral can fit into the number\n        count = number // value\n        # Subtract the value of the current roman numeral times the count from the number\n        number -= count * value\n        # Append the current roman numeral times the count to the result string\n        roman += numeral * count\n\n    # Return the roman numeral representation in lowercase\n    return roman.lower()"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to ensure a and b are the shorter sides\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the square of the hypotenuse (c) is equal to the sum of the squares of the other two sides\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"\n    This function finds the word with the maximum number of unique characters \n    in a given list of strings. If multiple strings have the same maximum \n    number of unique characters, it returns the one that comes first in \n    lexicographical order.\n\n    Args:\n        words (list): A list of strings.\n\n    Returns:\n        str: The word with the maximum number of unique characters.\n    \"\"\"\n\n    # Initialize the maximum number of unique characters and the corresponding word\n    max_unique_chars = 0\n    max_unique_word = \"\"\n\n    # Iterate over each word in the list\n    for word in words:\n        # Find the number of unique characters in the current word\n        unique_chars = len(set(word))\n\n        # If the current word has more unique characters than the previous maximum,\n        # or if it has the same number of unique characters but comes first in \n        # lexicographical order, update the maximum\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_unique_word):\n            max_unique_chars = unique_chars\n            max_unique_word = word\n\n    # Return the word with the maximum number of unique characters\n    return max_unique_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate the total number of eaten carrots and the remaining carrots after meals.\n\n    Args:\n        number (int): The number of carrots already eaten.\n        need (int): The number of carrots needed to eat.\n        remaining (int): The number of remaining carrots in stock.\n\n    Returns:\n        list: A list containing the total number of eaten carrots and the remaining carrots.\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Evaluates an algebraic expression built from the given operator and operand lists.\n\n    Args:\n    operator (list): A list of basic algebra operations.\n    operand (list): A list of non-negative integers.\n\n    Returns:\n    int: The result of the evaluated algebraic expression.\n    \"\"\"\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate over the operators and remaining operands\n    for op, num in zip(operator, operand[1:]):\n        # Use a dictionary to map operator symbols to their corresponding functions\n        operations = {\n            '+': lambda x, y: x + y,\n            '-': lambda x, y: x - y,\n            '*': lambda x, y: x * y,\n            '//': lambda x, y: x // y,\n            '**': lambda x, y: x ** y\n        }\n        \n        # Apply the current operation to the result and the current operand\n        result = operations[op](result, num)\n    \n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    # Create a new MD5 hash object\n    md5_hash = hashlib.md5()\n\n    # Update the hash object with the bytes of the input string\n    md5_hash.update(text.encode('utf-8'))\n\n    # Get the hexadecimal representation of the hash\n    md5_hex = md5_hash.hexdigest()\n\n    return md5_hex"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Generate even integers between a and b\n    even_integers = [i for i in range(a, b + 1) if i % 2 == 0]\n    \n    return even_integers"}
