{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    # Return the result as a tuple (or any other desired format)\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    min_heap = []\n    for num in numbers:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heapreplace(min_heap, num)\n    return sorted(min_heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    set_bits = bin(xor_result).count('1')\n    return set_bits == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(numbers):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list containing the squares of the input numbers.\n    \"\"\"\n    return [num ** 2 for num in numbers]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(input_str, char):\n    # Find the first occurrence of the character\n    first_occ = input_str.find(char)\n    # Find the last occurrence of the character\n    last_occ = input_str.rfind(char)\n\n    # Remove the first and last occurrence of the character\n    if first_occ != -1 and last_occ != -1:\n        return input_str[:first_occ] + input_str[first_occ+1:last_occ] + input_str[last_occ+1:]\n    else:\n        return input_str"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums_and_rows = list(zip(row_sums, matrix))\n\n    # Sort the list of tuples based on the sum of the rows\n    row_sums_and_rows.sort()\n\n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for _, row in row_sums_and_rows]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n\n    # Calculate the volume of the prism\n    volume = triangular_area * length\n\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(input_string):\n    pattern = \"^[a-z]+(_[a-z]+)*$\"\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    perimeter = 4 * side_length\n    return perimeter"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(main_string, chars_to_remove):\n    result_string = \"\"\n    for char in main_string:\n        if char not in chars_to_remove:\n            result_string += char\n    return result_string"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    n = 0\n    while True:\n        woodall_num = n * (2 ** n) + 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert the list of digits into a list of strings\n    str_digits = [str(digit) for digit in digits]\n\n    # Sort the list of strings in descending order\n    str_digits.sort(reverse=True)\n\n    # Join the sorted list of strings into a single string\n    max_num_str = ''.join(str_digits)\n\n    # Convert the resulting string back into an integer and return it\n    return int(max_num_str)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (5 * n - 3)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n\n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    def stirling_number2(n, k):\n        s = [[0] * (k + 1) for _ in range(n + 1)]\n        s[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, min(i, k) + 1):\n                s[i][j] = j * s[i - 1][j] + s[i - 1][j - 1]\n        return s[n][k]\n\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum(stirling_number2(i, k) for k in range(i + 1))\n    return bell[n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    direction = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if direction == 0:\n            direction = arr[i] - arr[i - 1]\n            continue\n        if (direction > 0) != (arr[i] - arr[i - 1] >= 0):\n            return False\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(larger_list, sublist):\n    sublist_length = len(sublist)\n    for i in range(len(larger_list) - sublist_length + 1):\n        if larger_list[i:i+sublist_length] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i - j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n\n    pattern_dict = {}\n\n    for i in range(len(list1)):\n        if list1[i] in pattern_dict:\n            if pattern_dict[list1[i]] != list2[i]:\n                return False\n        else:\n            pattern_dict[list1[i]] = list2[i]\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(elem % k == 0 for elem in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n\n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    # The formula to calculate the volume of a sphere is (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n\n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n\n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n\n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    # Initialize the sequence with the first two numbers\n    seq = [1, 1]\n\n    # Iterate from the 3rd position to the nth position\n    for i in range(2, n):\n        # Find the number of times the previous number appears in the sequence\n        count = seq.count(seq[i-1])\n\n        # Append the result to the sequence\n        seq.append(count)\n\n    # Return the nth number in the sequence\n    return seq[n-1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # The formula for the nth centered hexagonal number is 6n(n-1) + 1\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n <= 0:\n        return None\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) % 2 != 0:\n        return False\n    for i in range(0, len(num_str), 2):\n        if num_str[i] != num_str[i+1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(base, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= base\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_index = None\n\n    for item in tuples_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_index = item[0]\n\n    return min_index"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n -= 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Initialize a 2D array to store Eulerian numbers\n    eulerian = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Base cases\n    for i in range(n + 1):\n        eulerian[i][0] = 1\n        eulerian[i][i] = 1\n\n    # Compute Eulerian numbers using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, min(i, m) + 1):\n            eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n\n    return eulerian[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    for sublist in lst:\n        sublist.sort()\n    return lst"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    counter = 0\n    for element in bool_list:\n        if element:\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    # Convert the tuple to a list\n    result = list(tpl)\n    # Extend the list with the elements of the given list\n    result.extend(lst)\n    # Convert the list back to a tuple\n    result = tuple(result)\n    # Return the resulting tuple\n    return result"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge the lists\n    merged_list = list1 + list2 + list3\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Return the sorted list\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary, n):\n    rotated_binaries = set()\n    for _ in range(n):\n        binary = binary[1:] + binary[0]\n        rotated_binaries.add(binary)\n\n    odd_count = 0\n    for rotated_binary in rotated_binaries:\n        num = int(rotated_binary, 2)\n        if num % 2 != 0:\n            odd_count += 1\n\n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dict_list):\n    # Iterate over each dictionary in the list\n    for d in dict_list:\n        # If any dictionary is not empty, return False\n        if d:\n            return False\n    # If all dictionaries are empty, return True\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Convert each integer in the tuple to a string\n    str_list = [str(i) for i in tup]\n\n    # Concatenate all the strings to form a single string\n    concatenated_str = ''.join(str_list)\n\n    # Convert the resulting string back to an integer and return it\n    return int(concatenated_str)"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(input_list):\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if isinstance(input_list[i][j], str) and input_list[i][j].replace('.', '', 1).isdigit():\n                input_list[i][j] = float(input_list[i][j])\n    return input_list"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n\n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    # Initialize maximum product as 0\n    max_product = 0\n\n    # Iterate over each tuple in the list\n    for tuple in tuples_list:\n        # Calculate the product of the numbers in the tuple\n        product = abs(tuple[0] * tuple[1])\n\n        # If the product is greater than the current maximum product, update the maximum product\n        if product > max_product:\n            max_product = product\n\n    # Return the maximum product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        j = sum_divisors(i)\n        if i != j and sum_divisors(j) == i:\n            amicable_sum += i\n\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = count_0 - count_1\n\n        if diff < 0:\n            count_0 = 0\n            count_1 = 0\n        elif diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(num1: int, num2: int) -> int:\n    \"\"\"\n    Function to multiply two integers.\n\n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The product of num1 and num2.\n    \"\"\"\n    return num1 * num2"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, word_list):\n    words = word_list.split()\n    output = [word for word in words if len(word) > n]\n    return output"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the input is a square matrix\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n\n    # Calculate the sum of the first row\n    magic_sum = sum(matrix[0])\n\n    # Check each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the anti-diagonal\n    if sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    # If all checks pass, return True\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Step 1: Initialize an empty dictionary\n    freq_dict = {}\n\n    # Step 2: Iterate through the list and increment the count in the dictionary\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Step 3: Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_freq_item = [item for item, freq in freq_dict.items() if freq == max_freq]\n\n    # Step 4: Return the item with the maximum frequency\n    return max_freq_item[0]"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 1:\n            return n == 1 or is_Sum_Of_Powers_Of_Two(n - 1)\n        n = n // 2\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    result_set = set()\n    for tup in lst:\n        for num in tup:\n            result_set.add(num)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(max_idx)\n            flip(i - 1)\n\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n\n    for num in arr:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n\n    if n % gcd != 0:\n        return None\n\n    x *= n // gcd\n    y *= n // gcd\n\n    return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    return [element for element in original_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(divisors)\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "import math\n\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** math.ceil(math.log2(n))"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    sublist = numbers[start:end+1]\n    return sum(sublist)"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n\n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    count = 0\n    start = 0\n    while True:\n        index = s.find('std', start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 3\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    if arr[n//2] == element:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n\n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n\n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n\n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n\n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n\n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replace_char):\n    return input_string.replace(' ', replace_char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    volume = side_length ** 3\n    return volume"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Start from the least significant bit (1) and iterate through all bits\n    bit_position = 1\n    while bit_position <= n:\n        # Set the bit at the current position\n        n |= bit_position\n        # Move to the next even bit position\n        bit_position <<= 2\n    return n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    occurrences = {}\n    for tup in lst:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n + n*(n-1)//2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    count = 0\n    for i in range(1, m//2 + 1):\n        count += get_total_number_of_sequences(i, n-1)\n    return count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize increasing and decreasing arrays\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Calculate maximum sum of increasing subsequence\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and increasing[i] < increasing[j] + arr[i]:\n                increasing[i] = increasing[j] + arr[i]\n\n    # Calculate maximum sum of decreasing subsequence\n    for i in range(n-1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i] and decreasing[i] < decreasing[j] + arr[i]:\n                decreasing[i] = decreasing[j] + arr[i]\n\n    # Calculate maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing[i] + decreasing[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the arrays to sets\n    set1 = set(arr1)\n    set2 = set(arr2)\n\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n\n    # Convert the intersection set back to a list\n    result = list(intersection)\n\n    return result"}
{"task_id": "Mbpp/250", "solution": "def count_X(t, x):\n    count = 0\n    for e in t:\n        if e == x:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(input_list, element):\n    result = []\n    for item in input_list:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    magnitude = abs(complex_num)\n    angle = cmath.phase(complex_num)\n    return (magnitude, angle)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return [tuple(comb) for comb in combinations_with_replacement(colors, n)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    # Step 1: Understand the Problem\n    # A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    # The task is to count the number of prime numbers less than a given non-negative number.\n\n    # Step 2: Research Efficient Algorithms\n    # The Sieve of Eratosthenes is an efficient algorithm for finding all primes smaller than a given number.\n\n    # Step 3: Plan the Implementation\n    # 1. Create a boolean array \"prime[0..n]\" and initialize all entries it as true.\n    # 2. A value in prime[i] will finally be false if i is Not a prime, otherwise true.\n    # 3. Iterate through the numbers up to sqrt(n) and mark their multiples as not prime.\n    # 4. Count the number of prime numbers less than n.\n\n    # Step 4: Write and Test the Code\n    primes = [True for i in range(n)]\n    p = 2\n    while (p * p <= n):\n        if (primes[p] == True):\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    prime_count = 0\n    for p in range(2, n):\n        if primes[p]:\n            prime_count += 1\n    return prime_count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n\n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        max_pair = max(tuple1[i], tuple2[i])\n        result.append(max_pair)\n    return tuple(result)"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num**2 * 2**num - 1):\n            count += 1\n        num += 1\n    return num**2 * 2**num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    results = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed\")\n        results.append(tuple1[i] / tuple2[i])\n\n    return tuple(results)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 2:\n        dog_years = human_age * 10.5\n    else:\n        dog_years = 21 + (human_age - 2) * 4\n    return dog_years"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Based on the given test cases, the pattern seems to be:\n    # star_num(n) = 6 * n^2 - 9 * n + 2\n    return 6 * n**2 - 9 * n + 2"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n\n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n\n    Returns:\n    int: ASCII value of the character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n\n    # Return the ASCII value using the ord() function\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    subtracted_elements = []\n    for i in range(len(tuple1)):\n        subtracted_elements.append(tuple1[i] - tuple2[i])\n\n    return tuple(subtracted_elements)"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n+1, 2):\n        coeff = math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n        sum += coeff\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    volume = math.pi * radius ** 2 * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n\n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(input_tuple, target_element):\n    counter = 0\n    for element in input_tuple:\n        if element == target_element:\n            return counter\n        counter += 1\n    return \"Target element not found in the tuple\""}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    found = False\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == element:\n            found = True\n            index = i\n            break\n    return (found, index)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n\n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n\n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    total_sum = sum(arr)\n    if total_sum < 0:\n        return 0\n    else:\n        max_sum_original = max_sub_array_sum(arr)\n        max_sum_modified = max(max_sum_non_contiguous(arr, n-1) + max_sum_non_contiguous(arr, 0), max_sum_original)\n        return max(max_sum_original, max_sum_modified * k + total_sum)\n\ndef max_sub_array_sum(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef max_sum_non_contiguous(arr, end):\n    if end < 0:\n        return 0\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(end + 1):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n\n    max_len = 0\n    max_list = []\n\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    side3 = math.sqrt(side1**2 + side2**2)\n    return side3"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out the integers from the list\n    int_lst = [i for i in lst if isinstance(i, int)]\n\n    # If there are no integers in the list, return None\n    if not int_lst:\n        return None\n\n    # Return the maximum value among the integers\n    return max(int_lst)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n\n    # Iterate through all possible divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    # Create a dictionary to store the aggregate scores for each name\n    aggregate_scores = {}\n\n    # Iterate through the list of tuples\n    for name, score in tuples_list:\n        # If the name is already in the dictionary, add the score to the existing aggregate score\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        # If the name is not in the dictionary, add it with the current score as the aggregate score\n        else:\n            aggregate_scores[name] = score\n\n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n\n    # Return the name with the maximum aggregate score and the aggregate score\n    return max_name, aggregate_scores[max_name]"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    dp = [0] * (2 * n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(2 * n, i - 1, -1):\n            dp[j] += dp[j - i]\n\n    return dp[n] * dp[n]"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    depth = 1\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return tuple(p_words)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    max_sum = dp[k]\n    for j in range(i + 1, k):\n        if arr[j] > arr[i]:\n            max_sum = max(max_sum, dp[j])\n\n    return max_sum + arr[i]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i * j)\n    products.sort(reverse=True)\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n\n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n\n    # Set the left-most unset bit\n    n |= (1 << position)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n\n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    formatted_elements = []\n    for element in elements:\n        formatted_element = format_string.format(element)\n        formatted_elements.append(formatted_element)\n    return formatted_elements"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys1, keys2, values):\n    return [{key1: {key2: value}} for key1, key2, value in zip(keys1, keys2, values)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 2:\n        return n\n    else:\n        return max((get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    return len(input_tuple) == len(set(input_tuple))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n\n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) > 0 and s[0] == s[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(num_list):\n    total_sum = 0\n    for num in num_list:\n        if isinstance(num, int):\n            num_str = str(abs(num))\n            for digit in num_str:\n                total_sum += int(digit)\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, el):\n    return el in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/407", "solution": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Generate all permutations of the digits\n    perms = permutations(digits)\n\n    # Convert the permutations back to integers and sort them\n    nums = sorted(int(''.join(p)) for p in perms)\n\n    # Find the next bigger number\n    for num in nums:\n        if num > n:\n            return num\n\n    # If no next bigger number is found, return None\n    return None"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = None\n    for element in lst:\n        if isinstance(element, (int, float)):\n            if min_value is None or element < min_value:\n                min_value = element\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    result = []\n    for t in tuples_list:\n        result.append(t[n])\n    return result"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple, delimiter='-'):\n    # Convert each element of the tuple to a string\n    string_elements = [str(element) for element in input_tuple]\n\n    # Join the strings using the delimiter\n    concatenated_string = delimiter.join(string_elements)\n\n    # Return the concatenated string\n    return concatenated_string"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(input_tuple):\n    # Initialize an empty list to store the last characters\n    last_chars = []\n\n    # Iterate over each string in the input tuple\n    for string in input_tuple:\n        # Extract the last character of the string and append it to the list\n        last_chars.append(string[-1])\n\n    # Return the list of last characters\n    return last_chars"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    counter = 0\n    for sublist in lst:\n        if element in sublist:\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_string):\n    year, month, day = date_string.split('-')\n    new_date_string = f'{day}-{month}-{year}'\n    return new_date_string"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Perform elementwise AND operation on the tuples\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    \"\"\"\n    Calculate the directrix of a parabola given its parameters.\n\n    Parameters:\n    a (float): Coefficient of x^2 in the parabola equation.\n    h (float): x-coordinate of the vertex of the parabola.\n    k (float): y-coordinate of the vertex of the parabola.\n\n    Returns:\n    float: The x-coordinate of the directrix of the parabola.\n    \"\"\"\n    # The directrix of a parabola is a line parallel to the axis of symmetry\n    # and located at a distance p from the vertex, where p is the distance from\n    # the vertex to the focus. For a parabola with equation y = a(x - h)^2 + k,\n    # the distance p is |a|.\n    p = abs(a)\n\n    # The x-coordinate of the directrix is the x-coordinate of the vertex minus p.\n    directrix_x = h - p\n\n    return directrix_x"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n\n    # If the intersection is not empty, return True\n    if intersection:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/432", "solution": "import math\n\ndef median_trapezium(a, b, c, d):\n    median = math.sqrt((b-a)**2 + (c-d)**2) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(num_list):\n    neg_nums = []\n    for num in num_list:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(input_string):\n    return ''.join([input_string[i] for i in range(len(input_string)) if i % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    # Create a set to store unique bidirectional pairs\n    bidirectional_pairs = set()\n\n    # Iterate through the list of tuples\n    for t in tuples:\n        # Create a sorted tuple to ensure (a, b) and (b, a) are considered the same\n        sorted_t = tuple(sorted(t))\n\n        # If the sorted tuple is already in the set, it's a bidirectional pair\n        if sorted_t in bidirectional_pairs:\n            continue\n\n        # If the reverse of the sorted tuple is in the set, it's a bidirectional pair\n        if sorted_t[::-1] in bidirectional_pairs:\n            continue\n\n        # If neither the sorted tuple nor its reverse is in the set, add it\n        bidirectional_pairs.add(sorted_t)\n\n    # Return the count of bidirectional pairs\n    return len(bidirectional_pairs)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(num_list):\n    result = \"\"\n    for num in num_list:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import nltk\n\ndef find_adverb_position(sentence):\n    # Tokenize the sentence into words and their parts of speech\n    words = nltk.word_tokenize(sentence)\n    pos_tags = nltk.pos_tag(words)\n\n    # Iterate through the words and their parts of speech\n    for i, (word, pos) in enumerate(pos_tags):\n        # If the part of speech is an adverb, return its position and the word\n        if pos == 'RB':\n            return i, i + len(word), word\n\n    # If no adverb is found, return None\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [num ** 3 for num in numbers]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        perrin_seq = [3, 0, 2]\n        for i in range(3, n):\n            perrin_seq[i % 3] = perrin_seq[(i - 1) % 3] + perrin_seq[(i - 2) % 3]\n        return sum(perrin_seq)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    result = []\n    for string in string_list:\n        if len(string) == size:\n            result.append(string)\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(input_string):\n    return 'z' in input_string"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n\n    # Check if the month number is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    for i in range(len(string_list)):\n        string_list[i] = string_list[i][::-1]\n    return string_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    area = length * width\n    return area"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    for char in s:\n        if char.islower():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(input_list):\n    first_elements = []\n    for sublist in input_list:\n        first_elements.append(sublist[0])\n    return first_elements"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    counter = 0\n    for char in input_string:\n        if char.isupper():\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n\n    combinations = []\n    for i in range(len(lst)):\n        current_element = lst[i]\n        remaining_elements = lst[i+1:]\n        sub_combinations = combinations_list(remaining_elements)\n\n        for sub_combination in sub_combinations:\n            combinations.append([current_element] + sub_combination)\n\n    return combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [0]*n\n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    results = []\n    for i in range(len(t) - 1):\n        results.append(t[i] + t[i + 1])\n    return tuple(results)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set()\n\n    for tup in set1:\n        if (tup[1], tup[0]) in set2:\n            intersection.add(tup)\n\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n    return sorted_dict"}
{"task_id": "Mbpp/476", "solution": "def big_sum(numbers):\n    smallest = min(numbers)\n    largest = max(numbers)\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    input_string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    # Ensure the number is an integer\n    if not isinstance(number, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Convert the number to a string\n    number_str = str(abs(number))\n\n    # Return the first character of the string, which is the first digit\n    return int(number_str[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n\n    # Find the difference\n    diff = sum_cubes - sum_n\n\n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n\n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(input_string):\n    result = \"\"\n    for char in input_string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the integers into strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Pad the shorter string with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n\n    # Calculate the sum of the per-digit difference\n    total_distance = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_distance += abs(int(digit1) - int(digit2))\n\n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums, size):\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets and perform union operation\n    union_set = set(tuple1).union(set(tuple2))\n    # Convert set back to tuple\n    union_tuple = tuple(union_set)\n    # Sort the tuple in ascending order\n    sorted_tuple = tuple(sorted(union_tuple))\n    # Return the sorted tuple\n    return sorted_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "from itertools import combinations\n\ndef count_Pairs(lst, n):\n    # Calculate the number of unique pairs using the combination formula\n    unique_pairs = len(set(combinations(lst, 2)))\n    return unique_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(num_list):\n    return list(set(num_list))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return surface_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    if sub_len > main_len:\n        return False\n\n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Convert tuples to sets for efficient lookup\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Find elements that are in tuple1 but not in tuple2, and vice versa\n    dissimilar_in_tuple1 = set1 - set2\n    dissimilar_in_tuple2 = set2 - set1\n\n    # Combine the dissimilar elements and return as a tuple\n    dissimilar_elements = tuple(dissimilar_in_tuple1.union(dissimilar_in_tuple2))\n    return dissimilar_elements"}
{"task_id": "Mbpp/580", "solution": "def extract_even(input_tuple):\n    output_tuple = ()\n    for element in input_tuple:\n        if isinstance(element, tuple):\n            output_tuple += (extract_even(element),)\n        elif element % 2 == 0:\n            output_tuple += (element,)\n    return output_tuple"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge * base_edge\n    perimeter = 4 * base_edge\n    slant_height = math.sqrt(height**2 + (base_edge/2)**2)\n    lateral_area = (perimeter * slant_height) / 2\n    total_area = base_area + lateral_area\n    return total_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n\n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    if 0 <= n < len(arr):\n        first_part = arr[n:]\n        second_part = arr[:n]\n        return first_part + second_part\n    else:\n        return \"Invalid input: n is out of range\""}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(lower, upper):\n    squares = []\n    for i in range(int(lower**0.5), int(upper**0.5) + 1):\n        square = i * i\n        if square >= lower and square <= upper:\n            squares.append(square)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    complex_representation = r * (math.cos(theta) + math.sin(theta) * 1j)\n    return (x, y), complex_representation"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    \"\"\"Calculate the binomial coefficient.\"\"\"\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n\ndef sum_Of_product(n):\n    \"\"\"Calculate the sum of the product of consecutive binomial coefficients.\"\"\"\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    list1 = list(bin1)\n    list2 = list(bin2)\n    swaps = 0\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            try:\n                swap_index = list1.index(list2[i], i+1)\n                list1[i], list1[swap_index] = list1[swap_index], list1[i]\n                swaps += 1\n            except ValueError:\n                return None\n\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n        if k == 0:\n            return min(arr1[i], arr2[j])\n    if i == len(arr1):\n        return arr2[j + k - 1]\n    else:\n        return arr1[i + k - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Compare the sum with the original number\n    return sum_of_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    \"\"\"\n    Function to get all lucid numbers smaller than or equal to a given integer.\n    A lucid number is a number that has only 1 and itself as its divisors.\n    \"\"\"\n    # Initialize an empty list to store lucid numbers\n    ludic_numbers = []\n\n    # Iterate through numbers from 1 to n\n    for num in range(1, n + 1):\n        # Initialize a counter for divisors\n        divisors = 0\n\n        # Check for divisors\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors += 1\n\n        # If the number has only 2 divisors (1 and itself), it's a lucid number\n        if divisors == 2:\n            ludic_numbers.append(num)\n\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n\n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    reversed_words = words[::-1]\n\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "import math\n\ndef prime_num(n):\n    if n < 2:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Calculate the nth Bell number using dynamic programming.\n\n    Parameters:\n    n (int): The position of the Bell number to calculate.\n\n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    # Initialize a table of Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    # Calculate Bell numbers using dynamic programming\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    # Check if k is within the range of the list\n    if k < len(lst):\n        # Use list slicing to remove the k'th element\n        return lst[:k] + lst[k+1:]\n    else:\n        # If k is out of range, return the original list\n        return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max_value = matrix[0][n]\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tuple_item in tuple_list:\n        for value in tuple_item:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    non_numeric = \"\"\n    numeric = \"\"\n    for char in s:\n        if char.isdigit():\n            numeric += char\n        else:\n            non_numeric += char\n    return non_numeric + numeric"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    # Sort the list\n    nums.sort()\n\n    # Initialize variables\n    largest = 0\n    current = 1\n\n    # Iterate through the list\n    for i in range(1, len(nums)):\n        # If the current number is divisible by the previous number\n        if nums[i] % nums[i - 1] == 0:\n            # Increment the current subset size\n            current += 1\n        else:\n            # Update the largest subset size if necessary\n            largest = max(largest, current)\n            # Reset the current subset size\n            current = 1\n\n    # Update the largest subset size one last time\n    largest = max(largest, current)\n\n    return largest"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    mid = size\n    if mid % 2 == 0:\n        return (merged_list[mid // 2 - 1] + merged_list[mid // 2]) / 2\n    else:\n        return merged_list[mid // 2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    result = []\n    for num in numbers:\n        result.append(num ** n)\n    return result"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    if ' ' in input_string:\n        return input_string.replace(' ', '_')\n    elif '_' in input_string:\n        return input_string.replace('_', ' ')\n    else:\n        return input_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Initialize an empty list to store non-zero elements\n    non_zero_elements = []\n\n    # Iterate through the input list\n    for num in nums:\n        # If the current element is not zero, append it to the non-zero elements list\n        if num != 0:\n            non_zero_elements.append(num)\n\n    # Append all zero elements to the non-zero elements list\n    non_zero_elements.extend([0] * nums.count(0))\n\n    # Return the modified list\n    return non_zero_elements"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(lst, n):\n    # Calculate the sum of XOR of all pairs\n    xor_sum = 0\n\n    # Iterate over each bit\n    for i in range(32):\n        # Count the number of numbers with the i-th bit set\n        count_set_bits = 0\n        for num in lst:\n            if (num & (1 << i)):\n                count_set_bits += 1\n\n        # Calculate the number of pairs with the i-th bit different\n        count_diff_bits = count_set_bits * (n - count_set_bits)\n\n        # Add the contribution of the i-th bit to the XOR sum\n        xor_sum += count_diff_bits * (1 << i)\n\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    # Calculate wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n\n    # Round the result to the next integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(input_string):\n    result = \"\"\n    flag = False\n    for char in input_string:\n        if char == '(':\n            flag = True\n        elif char == ')':\n            flag = False\n        elif not flag:\n            result += char\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters of the string\n    modified_s = s[1:-1]\n\n    # Check if 'z' is present in the modified string\n    if 'z' in modified_s:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    l = list(t)\n    l.append(d)\n    t_new = tuple(l)\n    return t_new"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    dp[n - 1][n - 1] = matrix[n - 1][n - 1]\n\n    for i in range(n - 2, -1, -1):\n        dp[i][n - 1] = dp[i + 1][n - 1] + matrix[i][n - 1]\n        dp[n - 1][i] = dp[n - 1][i + 1] + matrix[n - 1][i]\n\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) + matrix[i][j]\n\n    return dp[0][0] / (2 * n - 1)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n\n    # Initialize the sum of digits\n    sum_of_digits = 0\n\n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if len(lst) < 2:\n        return lst\n\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(radius, height):\n    lateral_surface_area = math.pi * radius * math.sqrt(radius**2 + height**2)\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Replace spaces with colon\n    input_string = input_string.replace(' ', ':')\n    # Replace commas with colon\n    input_string = input_string.replace(',', ':')\n    # Replace dots with colon\n    input_string = input_string.replace('.', ':')\n    return input_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        result += arr[i] * (i + 1) * (n - i)\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Create a mask with all bits set to 1 except the first and the last bit\n    mask = (1 << (n.bit_length() - 1)) - 2\n    # Perform XOR operation between the number and the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(input_string):\n    pattern = r'^[aeiouAEIOU]'\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if math.log10(triangular_number) + 1 == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(input_tuple):\n    result_dict = {}\n    for i in range(0, len(input_tuple), 2):\n        result_dict[input_tuple[i]] = input_tuple[i + 1]\n    return result_dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    # Calculate the area of a regular tetrahedron using the formula: sqrt(3) * edge_length^2\n    area = math.sqrt(3) * edge_length ** 2\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Calculate the index to split the list\n    split_index = len(lst) - n\n\n    # Rotate the list by slicing and concatenating\n    rotated_list = lst[split_index:] + lst[:split_index]\n\n    return rotated_list"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    if None in input_tuple:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        for d in num_str:\n            if num % int(d) != 0:\n                break\n        else:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(input_string):\n    result = ''\n    for i in range(len(input_string)):\n        if i != 0 and input_string[i].isupper():\n            result += ' '\n        result += input_string[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(string_list):\n    return sorted(string_list, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(list(tup))\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range((n//2) - 1, -1, -1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    # Handle edge cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Jacobsthal numbers\n    jacobsthal_nums = [0, 1]\n\n    # Calculate the nth Jacobsthal number iteratively\n    for i in range(2, n + 1):\n        jacobsthal_nums.append(jacobsthal_nums[i - 1] + 2 * jacobsthal_nums[i - 2])\n\n    return jacobsthal_nums[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuples_list, k):\n    # Sort the tuple list based on the second element of each tuple\n    sorted_list = sorted(tuples_list, key=lambda x: x[1])\n\n    # Return the first k tuples from the sorted list\n    return sorted_list[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return None if second_smallest == float('inf') else second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        num = float(s)\n        if '{:.2f}'.format(num) == s:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Iterate through the sorted array\n    for i in range(1, n):\n        # Update minimum difference\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    counter = 0\n    for char in input_string:\n        if char.isdigit():\n            counter += 1\n    return counter"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_numbers = []\n    current_power = 0\n\n    for _ in range(n):\n        polite_number = 2 ** current_power\n        polite_numbers.append(polite_number)\n        current_power += 1\n\n    return polite_numbers[n - 1]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    # Create a dictionary to store the frequency of each number in the list\n    num_freq = {}\n    for num in numbers:\n        if num in num_freq:\n            num_freq[num] += 1\n        else:\n            num_freq[num] = 1\n\n    # Initialize a variable to store the count of pairs\n    count = 0\n\n    # Iterate through the list of numbers\n    for num in numbers:\n        # Calculate the complement of the current number\n        complement = target_sum - num\n        # If the complement is in the dictionary and it's not the same number as the current number\n        if complement in num_freq and complement != num:\n            # Add the frequency of the complement to the count\n            count += num_freq[complement]\n        # If the complement is the same as the current number and its frequency is greater than 1\n        elif complement == num and num_freq[num] > 1:\n            # Add the number of pairs that can be formed using the current number\n            count += num_freq[num] * (num_freq[num] - 1) // 2\n\n    # Return the count of pairs\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd number and its fourth power\n        odd_num = 2 * i + 1\n        power_of_four = odd_num ** 4\n\n        # Add the power of four to the sum\n        sum += power_of_four\n\n    # Return the final sum\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            elif stack.pop() != closing_brackets[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    start_pos = main_string.find(sub_string)\n    if start_pos == -1:\n        return None\n    else:\n        end_pos = start_pos + len(sub_string) - 1\n        return (sub_string, start_pos, end_pos)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] == lst[i - 1]:\n            sublist.append(lst[i])\n        else:\n            result.append(sublist)\n            sublist = [lst[i]]\n    result.append(sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    def backtrack(index, current_sum, path):\n        if index == len(tuples):\n            result.add(tuple(sorted(path)))\n            return\n        for num in tuples[index]:\n            backtrack(index + 1, current_sum + num, path + [current_sum + num])\n        backtrack(index + 1, current_sum, path)\n\n    result = set()\n    backtrack(0, 0, [])\n    return list(result)"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values among R, G, B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate Hue (H)\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n\n    # Calculate Value (V)\n    v = max_val * 100\n\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split the string into a list\n    tuple_list = tuple_str.strip(\"()\").split(\", \")\n\n    # Convert each string in the list to an integer\n    tuple_list = [int(i) for i in tuple_list]\n\n    # Convert the list to a tuple\n    tuple_int = tuple(tuple_list)\n\n    return tuple_int"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    pattern = 'abbb'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "from bisect import bisect_right\n\ndef last(arr, x):\n    index = bisect_right(arr, x)\n    if index:\n        return index - 1\n    else:\n        return -1  # or raise an exception, depending on the desired behavior"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(input_string):\n    pattern = '^a.*b$'\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Shift the bits to the left by d places\n    left_shifted = n << d\n\n    # Handle the overflow by using the bitwise OR operator with the right-shifted bits\n    right_shifted = n >> (32 - d)\n    result = left_shifted | right_shifted\n\n    # Return the result, making sure it's a 32-bit number\n    return result & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(num1, num2, num3):\n    if num1 == num2 == num3:\n        return 3\n    elif num1 == num2 or num1 == num3 or num2 == num3:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    # INTJs prefer a planned and organized approach, so we'll start by initializing variables.\n    max_sum = float('-inf')\n    max_list = []\n\n    # INTJs are good at identifying the most efficient and effective solutions, so we'll use a single loop.\n    for lst in lists:\n        # INTJs rely on logic and objective analysis, so we'll calculate the sum of each list.\n        current_sum = sum(lst)\n\n        # If the current sum is greater than the max sum, we'll update the max sum and max list.\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    # INTJs are self-motivated and can focus deeply on complex problems, so we'll return the result directly.\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None  # In case there are no odd numbers in the list"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    # Iterate over the indices of the tuples\n    for i in range(len(tuple1)):\n        # If any element in tuple2 is not smaller than its corresponding element in tuple1\n        if tuple2[i] >= tuple1[i]:\n            # Return False\n            return False\n    # If all elements in tuple2 are smaller than their corresponding elements in tuple1\n    # Return True\n    return True"}
