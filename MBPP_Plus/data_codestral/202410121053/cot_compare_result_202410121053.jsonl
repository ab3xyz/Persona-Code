{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return [element for element in list1 if element in list2]"}
{"task_id": "Mbpp/3", "solution": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return xor != 0 and (xor & (xor - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    rotated = s\n    for i in range(1, len(s)):\n        rotated = rotated[1:] + rotated[0]\n        if rotated == s:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(input_string, char):\n    # Find the first occurrence of the character\n    first_occurrence = input_string.find(char)\n    # Remove the character from the string\n    if first_occurrence != -1:\n        input_string = input_string[:first_occurrence] + input_string[first_occurrence+1:]\n    # Find the last occurrence of the character\n    last_occurrence = input_string.rfind(char)\n    # Remove the character from the modified string\n    if last_occurrence != -1:\n        input_string = input_string[:last_occurrence] + input_string[last_occurrence+1:]\n    return input_string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, triangle_height, prism_height):\n    triangle_area = (base * triangle_height) / 2\n    prism_volume = triangle_area * prism_height\n    return prism_volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(input_string):\n    pattern = \"^[a-z]+(_[a-z]+)*$\"\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(main_string, chars_to_remove):\n    return ''.join([char for char in main_string if char not in chars_to_remove])"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    i = 0\n    while True:\n        woodall_number = i * (2 ** i) + 1\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        i += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to string\n    n_str = str(n)\n\n    # Reverse the string\n    reversed_str = n_str[::-1]\n\n    # Convert the reversed string back to number\n    reversed_n = int(reversed_str)\n\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert the list of digits into a list of strings\n    str_digits = [str(digit) for digit in digits]\n\n    # Sort the list of strings in descending order\n    str_digits.sort(reverse=True)\n\n    # Join the sorted list of strings into a single string\n    max_num_str = ''.join(str_digits)\n\n    # Convert the resulting string back into an integer\n    max_num = int(max_num_str)\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(num1, num2):\n    return (num1 < 0) != (num2 < 0)"}
{"task_id": "Mbpp/59", "solution": "def nth_octagonal_number(n):\n    return n * (5 * n - 3)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = float('-inf')\n    for pair in pairs:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell\n\ndef partition_bell_numbers(n):\n    bell = bell_number(n)\n    partitions = [[0 for i in range(n+1)] for j in range(n+1)]\n    partitions[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(j, i+1):\n                partitions[i][j] += bell[k][j] * partitions[i-k][j-1]\n    return partitions[n][n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    is_increasing = is_decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_decreasing = False\n        if arr[i] < arr[i - 1]:\n            is_increasing = False\n    return is_increasing or is_decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    sub_list_length = len(sub_list)\n    for i in range(len(main_list) - sub_list_length + 1):\n        if main_list[i:i + sub_list_length] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    # Get the length of the first tuple\n    length = len(tuples_list[0])\n\n    # Iterate over the rest of the tuples\n    for t in tuples_list[1:]:\n        # If the length of the current tuple is not equal to the first tuple's length, return False\n        if len(t) != length:\n            return False\n\n    # If we've checked all tuples and they all have the same length, return True\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = math.sqrt(n + i**2)\n        if j == int(j):\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        return all(list1[i] == list1[0] if list2[i] == list2[0] else list1[i] != list1[0] for i in range(len(list1)))"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, divisor):\n    result = []\n    for t in tuples_list:\n        if all(x % divisor == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    # Convert the number to string to iterate over its digits\n    str_n = str(n)\n\n    # Initialize the sum of alternating digits\n    sum_alt_digits = 0\n\n    # Iterate over the digits of the number\n    for i in range(len(str_n)):\n        # If the index is even, add the digit to the sum\n        if i % 2 == 0:\n            sum_alt_digits += int(str_n[i])\n        # If the index is odd, subtract the digit from the sum\n        else:\n            sum_alt_digits -= int(str_n[i])\n\n    # If the sum of alternating digits is divisible by 11, then the number is divisible by 11\n    return sum_alt_digits % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    ascii_sum = sum(ord(c) for c in s)\n    return chr((ascii_sum - 97) % 26 + 97)"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    seq = ['1']\n    for _ in range(1, n):\n        current_term = seq[-1]\n        new_term = ''\n        i = 0\n        while i < len(current_term):\n            count = 1\n            while i + 1 < len(current_term) and current_term[i] == current_term[i + 1]:\n                i += 1\n                count += 1\n            new_term += str(count) + current_term[i]\n            i += 1\n        seq.append(new_term)\n    return int(seq[-1])"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return len(max(words, key=len))"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    # Convert the number to a string\n    n = str(n)\n\n    # Iterate through the digits of the number\n    for i in range(len(n) - 1):\n        # Compare each digit with the next one\n        if n[i] == n[i + 1]:\n            # If they are the same, return False\n            return False\n\n    # If we've made it through all the digits without finding any pairs that are the same, return True\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(base, exponent):\n    return base ** exponent"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_index = None\n    for item in tuples_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_index = item[0]\n    return min_index"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lists):\n    min_length = float('inf')\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, math.isqrt(n) + 1):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    freq_dict = {}\n    flat_list = [item for sublist in lst for item in sublist]\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(num_list):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    while True:\n        n -= 1\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Check if k is within the valid range\n    if 1 <= k <= len(arr):\n        # Python uses 0-based indexing, so we subtract 1 from k\n        return arr[k - 1]\n    else:\n        # If k is out of range, return an error message\n        return \"Error: k is out of range\""}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    elif m == n:\n        return 0\n    else:\n        return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    return lst.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(input_list, input_tuple):\n    # Convert the tuple to a list\n    output_list = list(input_tuple)\n    # Extend the list with the elements from the input list\n    output_list.extend(input_list)\n    # Convert the list back to a tuple\n    output_tuple = tuple(output_list)\n    # Return the resulting tuple\n    return output_tuple"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = sorted(list1) + sorted(list2) + sorted(list3)\n    return sorted(merged_list)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    # Convert binary string to list of integers\n    binary_list = [int(i) for i in binary_string]\n\n    # Initialize count of odd digits\n    odd_count = sum(binary_list)\n\n    # Perform rotations\n    for _ in range(rotations):\n        # Remove last element and insert it at the beginning\n        last_element = binary_list.pop()\n        binary_list.insert(0, last_element)\n\n        # Update count of odd digits\n        odd_count += binary_list[-1] if binary_list[-1] == 1 else -1\n\n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lists):\n    # Convert the first list to a set\n    common_elements = set(lists[0])\n\n    # Iterate over the rest of the lists\n    for lst in lists[1:]:\n        # Update the set with the intersection of the current set and the current list\n        common_elements.intersection_update(lst)\n\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dicts(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(input_tuple):\n    result = ''\n    for num in input_tuple:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(i) if i.replace('.', '', 1).isdigit() else i for i in tup) for tup in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def find_unique(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            if mid % 2 == 1:\n                left = mid + 1\n            else:\n                right = mid - 2\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for t in tuples:\n        product = abs(t[0] * t[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    \"\"\"Calculate the sum of proper divisors of n.\"\"\"\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef is_amicable(n):\n    \"\"\"Check if n is an amicable number.\"\"\"\n    sum_divisors = sum_of_divisors(n)\n    return sum_of_divisors(sum_divisors) == n and sum_divisors != n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Sum all amicable numbers from 1 to limit.\"\"\"\n    return sum(i for i in range(1, limit) if is_amicable(i))"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(complex_number):\n    return cmath.phase(complex_number)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    count = 0\n    for char in s:\n        if char == '1':\n            count += 1\n        else:\n            count -= 1\n        max_diff = max(max_diff, abs(count))\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    total = 0\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, word_list):\n    # Split the string into a list of words\n    words = word_list.split()\n\n    # Use a list comprehension to filter out words that are shorter than n characters\n    long_words = [word for word in words if len(word) > n]\n\n    # Return the list of long words\n    return long_words"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    sum_check = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != sum_check:\n            return False\n\n    # Check columns\n    for col in range(len(matrix)):\n        if sum(matrix[row][col] for row in range(len(matrix))) != sum_check:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(len(matrix))) != sum_check:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix))) != sum_check:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    s = list(s)\n    vowels = set('aeiouAEIOU')\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    remaining = n\n    while remaining > 0:\n        if remaining & (remaining - 1) == 0:\n            return True\n        else:\n            remaining &= (remaining - 1)\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    unique_numbers = set()\n    for tuple_ in list_of_tuples:\n        for number in tuple_:\n            unique_numbers.add(number)\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(max_idx)\n            flip(i - 1)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return g, x - (b // a) * y, y\n\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n\n    return (x * (n // g), y * (n // g))"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    result = 0\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == (n / i):\n                result = result + i\n            else:\n                result = result + (i + n//i)\n    return result + 1\n\ndef are_equivalent(num1, num2):\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == chr(i + 97):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(num_list, target):\n    return num_list.count(target)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    return sum(numbers[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(input_string):\n    return input_string.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(input_tuple):\n    return all(isinstance(i, type(input_tuple[0])) for i in input_tuple)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Function to find the first occurrence of element in a sorted array\n    def first(arr, low, high, element, n):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or element > arr[mid - 1]) and arr[mid] == element:\n                return mid\n            elif element > arr[mid]:\n                return first(arr, mid + 1, high, element, n)\n            else:\n                return first(arr, low, mid - 1, element, n)\n        return -1\n\n    # Function to find the last occurrence of element in a sorted array\n    def last(arr, low, high, element, n):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == n - 1 or element < arr[mid + 1]) and arr[mid] == element:\n                return mid\n            elif element < arr[mid]:\n                return last(arr, low, mid - 1, element, n)\n            else:\n                return last(arr, mid + 1, high, element, n)\n        return -1\n\n    first_index = first(arr, 0, n - 1, element, n)\n    if first_index == -1:\n        return False\n    last_index = last(arr, first_index, n - 1, element, n)\n\n    # If the frequency of element is more than n/2, return True. Otherwise, return False.\n    return (last_index - first_index + 1) > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, min(b, c))"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(num_list, n):\n    num_list.sort(reverse=True)\n    return num_list[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    # The formula for the lateral surface area of a cylinder is 2 * pi * radius * height\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize a mask with all even bits set to 1\n    mask = 0xAAAAAAAA\n\n    # Perform bitwise AND operation with the given number\n    result = n & mask\n\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        count += i + 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        dp[i][1] = 1\n    for j in range(2, n+1):\n        for i in range(j, m+1):\n            dp[i][j] = sum(dp[k][j-1] for k in range(j, i//2 + 1))\n    return dp[m][n]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1.pop()  # Remove the last element from list1\n    list1.extend(list2)  # Add all elements of list2 to list1\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_characters(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    next_root = math.ceil(math.sqrt(n))\n    next_square = next_root * next_root\n    return next_square"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Step 2: Fill increasing array\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        increasing[i] = max(increasing[j] for j in range(i) if arr[j] < arr[i]) + arr[i]\n\n    # Step 3: Fill decreasing array\n    decreasing[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        decreasing[i] = max(decreasing[j] for j in range(i, n) if arr[j] < arr[i]) + arr[i]\n\n    # Step 4: Find maximum sum\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing[i] + decreasing[i] - arr[i])\n\n    # Step 5: Return maximum sum\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    def lps_helper(s, start, end):\n        if start == end:\n            return 1\n        if s[start] == s[end]:\n            return 2 + lps_helper(s, start + 1, end - 1)\n        return max(lps_helper(s, start + 1, end), lps_helper(s, start, end - 1))\n\n    return lps_helper(s, 0, len(s) - 1)"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, elem):\n    return tup.count(elem)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    r = abs(complex_number)\n    theta = cmath.phase(complex_number)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(1 for i in lst if isinstance(i, int))"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    # Generate all combinations of the elements in the list, repeating each element n times\n    combinations = list(product(lst, repeat=n))\n\n    # Convert each combination from a tuple to a list\n    combinations = [list(combination) for combination in combinations]\n\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        result.append((max(t1[0], t2[0]), max(t1[1], t2[1])))\n    return tuple(result)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_newman_shanks_williams_prime(num):\n        # Check if num is a Newman-Shanks-Williams prime\n        # This is a placeholder function and should be replaced with the actual implementation\n        pass\n\n    counter = 0\n    number = 2\n\n    while counter < n:\n        if is_newman_shanks_williams_prime(number):\n            counter += 1\n        number += 1\n\n    return number - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    return [input_list[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    # The lateral surface area of a cube is calculated as 4 * side_length * side_length\n    return 4 * side_length * side_length"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(n):\n        sum += (2 * i) ** 5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n            sum += coeff\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    volume = math.pi * radius ** 2 * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {key: value for key, value in input_dict.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup, elem):\n    return tup.index(elem)"}
{"task_id": "Mbpp/279", "solution": "def nth_decagonal_number(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    n = str(n)\n    freq = {}\n    for digit in n:\n        if digit not in freq:\n            freq[digit] = 1\n        else:\n            freq[digit] += 1\n        if freq[digit] > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    for item in lst:\n        if item != elem:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    total_sum = sum(arr)\n    max_sum = max(max_subarray_sum(arr), total_sum)\n\n    if max_sum > 0:\n        return max_sum * k\n    else:\n        return max_sum\n\ndef max_subarray_sum(arr):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(2, 2*n + 1, 2):\n        sum += i ** 2\n    return sum"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = 0\n    max_list = None\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Initialize max_value to None\n    max_value = None\n\n    # Iterate over each item in the list\n    for item in lst:\n        # If the item is a number and is greater than max_value, update max_value\n        if isinstance(item, (int, float)) and (max_value is None or item > max_value):\n            max_value = item\n\n    # Return the maximum value found\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    result = []\n    for i in nested_list:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    aggregate_scores = {}\n    for name, score in scores:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n    max_score_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_score_name, aggregate_scores[max_score_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(2):\n        count += count_binary_seq(n - 1) * 2\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        if not d:\n            return 0\n        else:\n            return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    p_words = []\n    for words in word_list:\n        for word in words.split():\n            if word[0].lower() == 'p':\n                p_words.append(word)\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = arr.copy()\n\n    for j in range(1, k+1):\n        for l in range(j):\n            if arr[j] > arr[l] and dp[l] + arr[j] > dp[j]:\n                dp[j] = dp[l] + arr[j]\n\n    return dp[i]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Step 1: Multiply each element of the first list with each element of the second list\n    products = [a*b for a in list1 for b in list2]\n\n    # Step 2: Sort the products in descending order\n    products.sort(reverse=True)\n\n    # Step 3: Return the first 'n' products\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    pos = 0\n    while (n & (1 << pos)) != 0:\n        pos += 1\n\n    # Set this bit to 1\n    n |= (1 << pos)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    volume = (1/3) * math.pi * (radius ** 2) * height\n    return volume"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**(i-1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    a, b = 2, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(i) for i in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    return [{key: {value1: value2}} for key, value1, value2 in zip(keys, values1, values2)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 5:\n        return n\n    else:\n        return max((get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    # Convert the tuple to a set\n    # A set in Python is an unordered collection of unique elements\n    unique_elements = set(input_tuple)\n\n    # If the length of the set is equal to the length of the tuple,\n    # it means that all elements in the tuple are unique\n    if len(unique_elements) == len(input_tuple):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in s:\n        if count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(input_string):\n    if input_string[0] == input_string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total = 0\n    for number in numbers:\n        while number > 0:\n            total += number % 10\n            number //= 10\n    return total"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    return len(set(tuples_list))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    if element in tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/406", "solution": "def find_parity(number):\n    # If the number modulo 2 is not equal to 0, then it's odd\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number into a list of digits\n    digits = list(str(n))\n\n    # Find the first digit from the right which is smaller than the digit next to it\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return -1  # No such digit found, so return -1\n\n    # Find the smallest digit on the right side of it which is larger than it\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    # Swap these two digits\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Sort the digits on the right side of the found digit in ascending order\n    digits[i + 1:] = sorted(digits[i + 1:])\n\n    # Convert the list of digits back into a number and return it\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = tuples[0][0] * tuples[0][1]\n    for t in tuples[1:]:\n        product = t[0] * t[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = float('inf')\n    for i in lst:\n        if isinstance(i, int):\n            min_value = min(min_value, i)\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"}
{"task_id": "Mbpp/418", "solution": "def find_max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n + 1, 2):\n        # Add the cube of the number to the sum\n        sum += i ** 3\n\n    # Return the final sum\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(str(i) for i in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n + 1):\n        # Add the cube of the current number to the sum\n        sum_of_cubes += i ** 3\n\n    # Return the average of the cubes\n    return sum_of_cubes / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return '-'.join([day, month, year])"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return -a / 4"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(item in list1 for item in list2)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, height):\n    median_length = (base1 + base2) / 2\n    return median_length"}
{"task_id": "Mbpp/433", "solution": "def check_greater(num_list, num):\n    return not all(i < num for i in num_list)"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    return abs(n) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(input_string):\n    return ''.join([input_string[i] for i in range(len(input_string)) if i % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count = 0\n    for t in tuples:\n        if (t[1], t[0]) in tuples:\n            count += 1\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    # Convert each integer to a string\n    str_list = [str(i) for i in int_list]\n\n    # Join all the strings into a single string\n    single_str = ''.join(str_list)\n\n    # Convert the single string back into an integer\n    single_int = int(single_str)\n\n    return single_int"}
{"task_id": "Mbpp/440", "solution": "import nltk\nfrom nltk.corpus import wordnet\n\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if wordnet.synsets(word, wordnet.ADV):\n            return i, i + len(word), word\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size * size"}
{"task_id": "Mbpp/442", "solution": "def positive_count(numbers):\n    positive_numbers = [num for num in numbers if num > 0]\n    ratio = len(positive_numbers) / len(numbers)\n    return ratio"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate over the indices of the tuples\n    for i in range(len(tuple1)):\n        # Multiply the elements at the current index in both tuples\n        # and append the result to the result list\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n\n    # Convert the result list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    counter = 0\n    for element in lst:\n        counter += tup.count(element)\n    return counter"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    return sum(perrin)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, max_length):\n    return [string for string in string_list if len(string) <= max_length]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(word):\n    return 'z' in word"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n\n    # Check if the given month is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(input_list):\n    return [string[::-1] for string in input_list]"}
{"task_id": "Mbpp/457", "solution": "def find_min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(input_string):\n    return ''.join([char for char in input_string if not char.isupper()])"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(lst):\n    return [sub[0] for sub in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1)))"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    if not nums:\n        return 0\n\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\n    for i in range(1, len(nums)):\n        dp[i] = nums[i]\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] * nums[i])\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i] + 1 != lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1 & set2\n    return list(intersection)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(input_string, old_char, new_char):\n    return input_string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(input_dict):\n    return sorted(input_dict.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Find the smallest and largest values in the array\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(input_string):\n    result = ''\n    i = 0\n    while i < len(input_string):\n        if input_string[i].isupper():\n            result += input_string[i]\n        i += 1\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_digit(n):\n    # Convert the number to a string\n    n_str = str(n)\n\n    # The first digit is the first character of the string\n    first_digit = int(n_str[0])\n\n    return first_digit"}
{"task_id": "Mbpp/554", "solution": "def split_odd_numbers(numbers):\n    return [number for number in numbers if number % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_naturals = n * (n + 1) // 2\n    sum_of_cubes = (sum_of_naturals ** 2)\n    return sum_of_cubes - sum_of_naturals"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(nums, target):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Make sure both numbers have the same number of digits\n    max_len = max(len(num1_str), len(num2_str))\n    num1_str = num1_str.zfill(max_len)\n    num2_str = num2_str.zfill(max_len)\n\n    total_distance = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        total_distance += abs(int(digit1) - int(digit2))\n\n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums):\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1).union(set(tuple2))\n    union_tuple = tuple(union_set)\n    return tuple(sorted(union_tuple))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(input_string):\n    return re.findall(r'\"([^\"]*)\"', input_string)"}
{"task_id": "Mbpp/564", "solution": "def count_pairs(lst):\n    # Initialize a counter for the pairs\n    count = 0\n\n    # Get the length of the list\n    n = len(lst)\n\n    # Iterate over each element in the list\n    for i in range(n):\n        # For each element, iterate over each other element in the list\n        for j in range(i + 1, n):\n            # If the elements are not equal, increment the counter\n            if lst[i] != lst[j]:\n                count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(input_string):\n    return [char for char in input_string]"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return lst == sorted(lst)"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    return list(set(lst))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    sub_len = len(sub_list)\n    main_len = len(main_list)\n\n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist starts at the current index\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n\n    # If no match is found, return False\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % 10\n    return result"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    output = []\n    for i in t:\n        if isinstance(i, tuple):\n            output.append(extract_even(i))\n        elif i % 2 == 0:\n            output.append(i)\n    return tuple(output)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n\n    # Calculate the slant height of the pyramid\n    slant_height = math.sqrt(height**2 + (base_edge/2)**2)\n\n    # Calculate the area of one triangular face\n    triangular_face_area = 0.5 * base_edge * slant_height\n\n    # Calculate the total surface area\n    total_surface_area = base_area + 4 * triangular_face_area\n\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def is_dict_empty(input_dict):\n    if not isinstance(input_dict, dict):\n        raise ValueError(\"Input should be a dictionary\")\n    return len(input_dict) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    catalan = [0 for i in range(n+1)]\n    catalan[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    first_part = arr[n:]\n    second_part = arr[:n]\n    return first_part + second_part"}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end + 1):\n        if int(i ** 0.5) ** 2 == i:\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    # Calculate binomial coefficients\n    def binomial_coefficient(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Calculate sum of product of consecutive binomial coefficients\n    sum_product = 0\n    for k in range(1, n + 1):\n        sum_product += binomial_coefficient(n, k) * binomial_coefficient(n, k - 1)\n\n    return sum_product"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    # Split the IP address into its four parts\n    parts = ip_address.split('.')\n\n    # Convert each part to an integer to remove leading zeroes, then convert back to string\n    parts = [str(int(part)) for part in parts]\n\n    # Join the four parts back together using '.' as the delimiter\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even - first_odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    list1 = list(str1)\n    list2 = list(str2)\n    swaps = 0\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            swap_index = list2.index(list1[i], i)\n            list2[i], list2[swap_index] = list2[swap_index], list2[i]\n            swaps += 1\n\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(input_tuple):\n    return sys.getsizeof(input_tuple)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    count = 0\n\n    while count < k:\n        if i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        elif i < len(arr1):\n            i += 1\n        else:\n            j += 1\n        count += 1\n\n    if i < len(arr1) and j < len(arr2):\n        return min(arr1[i], arr2[j])\n    elif i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to string to easily iterate over its digits\n    num_str = str(n)\n\n    # Calculate the sum of cubes of its digits\n    sum_cubes = sum(int(digit) ** 3 for digit in num_str)\n\n    # Check if the sum is equal to the number\n    return sum_cubes == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of first n natural numbers\n    total_sum = n * (n + 1) // 2\n\n    # Calculate the average\n    average = total_sum / n\n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(input_string):\n    seen_chars = set()\n    for char in input_string:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        seen = set()\n        current = i\n        while current not in seen and current <= n:\n            seen.add(current)\n            current = current * 2 + 1\n        if current <= n:\n            ludic_numbers.append(i)\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(input_string):\n    words = input_string.split(' ')\n    words.reverse()\n    return ' '.join(words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef degrees_to_radians(degrees):\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(input_string, pattern):\n    match = re.search(pattern, input_string)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    total_sum = 0\n    for tuple_item in tuple_list:\n        for value in tuple_item:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = ''\n    chars = ''\n    for char in s:\n        if char.isdigit():\n            nums += char\n        else:\n            chars = char + chars\n    return chars + nums"}
{"task_id": "Mbpp/620", "solution": "from collections import Counter\nfrom math import gcd\n\ndef largest_subset(nums):\n    gcd_list = [gcd(nums[i], nums[j]) for i in range(len(nums)) for j in range(i+1, len(nums))]\n    gcd_count = Counter(gcd_list)\n    return max(gcd_count.values()) if gcd_count else 0"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        median1 = merged_list[n//2]\n        median2 = merged_list[n//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = merged_list[n//2]\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(input_string):\n    return input_string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coord:\n                adjacent_coords.append([i, j])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    return input_string.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    non_zero = []\n    zero_count = 0\n\n    for num in nums:\n        if num != 0:\n            non_zero.append(num)\n        else:\n            zero_count += 1\n\n    non_zero.extend([0] * zero_count)\n\n    return non_zero"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(nums, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                total_sum += nums[i] ^ nums[j]\n    return total_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost, selling_price):\n    return cost == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_length_of_names(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)"}
{"task_id": "Mbpp/641", "solution": "def nth_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters of the string\n    s = s[1:-1]\n    # Check if 'z' is in the remaining string\n    return 'z' in s"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0.0] * n for _ in range(n)]\n\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] /= (i + j)\n\n    return dp[n-1][n-1]"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    # Filter the students based on height and weight\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    # Initialize a counter\n    count = 0\n\n    # Iterate over the indices of the lists\n    for i in range(len(list1)):\n        # If the values at the current index are the same, increment the counter\n        if list1[i] == list2[i]:\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate base to the power\n    result = base ** power\n\n    # Convert the result to a string\n    result_str = str(result)\n\n    # Initialize a variable to hold the total\n    total = 0\n\n    # Iterate over the digits\n    for digit in result_str:\n        # Convert the digit back to an integer and add it to the total\n        total += int(digit)\n\n    # Return the total\n    return total"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(input_tuple):\n    return tuple(input_tuple[i] * input_tuple[i + 1] for i in range(len(input_tuple) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    unique_lst = []\n    for num in lst:\n        if len(unique_lst) == 0 or num != unique_lst[-1]:\n            unique_lst.append(num)\n    return unique_lst"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Replace spaces with colons\n    output_string = input_string.replace(' ', ':')\n    # Replace commas with colons\n    output_string = output_string.replace(',', ':')\n    # Replace dots with colons\n    output_string = output_string.replace('.', ':')\n    return output_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        middle = (start + end) // 2\n\n        if arr[middle] == num:\n            result = middle\n            end = middle - 1\n        elif arr[middle] < num:\n            start = middle + 1\n        else:\n            end = middle - 1\n\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        total_sum += lst[i] * (i + 1) * (len(lst) - i)\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = len(bin(n)) - 2\n\n    # Create a mask with all bits set to 1, except for the first and last bits\n    mask = (1 << (num_bits - 1)) - 1 - 1\n\n    # Toggle the bits of n that correspond to the set bits in the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "from bisect import bisect_left\n\ndef left_insertion(arr, val):\n    return bisect_left(arr, val)"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match('^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(input_tuple):\n    return {input_tuple[i]: input_tuple[i + 1] for i in range(0, len(input_tuple), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(input_string):\n    return len(set(input_string)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    return None in input_tuple"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i, c in enumerate(s):\n        if i > 0 and c.isupper():\n            result += ' '\n        result += c\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    lst.extend(list(tpl))\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, 2*a + b\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the list based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k tuples from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n\n    # Iterate over the indices of the lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is common to all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If it is, append it to the list of common elements\n            common_elements.append(l1[i])\n\n    # Return the list of common elements\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    first_smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif first_smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i+1, len(str_list)):\n            if str_list[i] == str_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        num = float(s)\n        return '{:.2f}'.format(num) == s\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_days(month_number):\n    # Define the months with 30 days\n    months_with_30_days = [4, 6, 9, 11]\n\n    # Check if the month number is in the list of months with 30 days\n    if month_number in months_with_30_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference between adjacent elements\n    for i in range(1, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def nth_polite_number(n):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        temp = num\n        power = 1\n        while temp >= power:\n            temp -= power\n            power *= 2\n        if temp == 0:\n            count += 1\n    return num"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_dict = {}\n\n    for num in numbers:\n        diff = target_sum - num\n        if diff in num_dict:\n            count += num_dict[diff]\n        num_dict[num] = num_dict.get(num, 0) + 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [i for i in li1 if i not in set(li2)]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        odd_num = 2*i - 1\n        sum += odd_num ** 4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    bracket_pairs = {'(': ')', '{': '}', '[': ']'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            elif bracket_pairs[stack.pop()] != char:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split(' ')\n    new_words = [word for word in words if len(word) != k]\n    return ' '.join(new_words)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(main_string, sub_string):\n    index = main_string.find(sub_string)\n    if index != -1:\n        return sub_string, index, index + len(sub_string)\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Calculate the sum of non-repeated elements\n    sum_of_unique = 0\n    for num, count in freq.items():\n        if count == 1:\n            sum_of_unique += num\n\n    return sum_of_unique"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed = []\n    for num in lst:\n        if packed and num == packed[-1][-1]:\n            packed[-1].append(num)\n        else:\n            packed.append([num])\n    return packed"}
{"task_id": "Mbpp/780", "solution": "import itertools\n\ndef find_combinations(tuples_list):\n    sums = []\n    for r in range(1, len(tuples_list) + 1):\n        for combination in itertools.combinations(tuples_list, r):\n            sums.append(tuple(sum(x) for x in zip(*combination)))\n    return sums"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2 == 1:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n\n    v = max_val * 100\n\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Remove parentheses and split the string into a list\n    s = s[1:-1].split(', ')\n    # Convert each string in the list to an integer\n    s = [int(i) for i in s]\n    # Convert the list to a tuple\n    s = tuple(s)\n    # Return the tuple\n    return s"}
{"task_id": "Mbpp/786", "solution": "from bisect import bisect_right\n\ndef right_insertion(sorted_list, value):\n    return bisect_right(sorted_list, value)"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    pattern = 'ab{3}'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str):\n    return tuple(lst + [str])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    return tuple(i for i in input_tuple if not isinstance(i, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    return arr.index(x) if x in arr else -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = '^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            sum += num\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(array):\n    total = 0\n    for num in array:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(num1, num2, num3):\n    if num1 == num2 == num3:\n        return 3\n    elif num1 == num2 or num1 == num3 or num2 == num3:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root == int(root)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(i < j for i, j in zip(tuple1, tuple2))"}
