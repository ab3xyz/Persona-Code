{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    # Use heapq to create a max heap of the first n elements\n    max_heap = [-num for num in nums[:n]]\n    heapq.heapify(max_heap)\n\n    # Iterate over the remaining elements\n    for num in nums[n:]:\n        # If the current element is larger than the smallest element in the heap, replace it\n        if num > -max_heap[0]:\n            heapq.heapreplace(max_heap, -num)\n\n    # Convert the heap to a list and return it in descending order\n    return [-num for num in sorted(max_heap)]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return (xor & (xor - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(lst):\n    return [i ** 2 for i in lst]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    first_occurrence = s.find(c)\n    last_occurrence = s.rfind(c)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    matrix.sort(key=lambda row: sum(row))\n\n    return matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n\n    # Calculate the volume of the prism\n    volume = triangular_area * length\n\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    parts = s.split('_')\n    for part in parts:\n        if not part.islower():\n            return False\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    # A square has four sides, and the length of each side is equal to the side_length\n    # The perimeter of a square is the sum of the lengths of all its sides\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    result = \"\"\n    for char in s1:\n        if char not in s2:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    i = 1\n    while True:\n        woodall_number = i * (2 ** i) + i\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        i += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the digits to strings and join them to form a number\n    num = int(''.join(map(str, digits)))\n\n    return num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (5 * n - 3)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(num_list):\n    smallest = num_list[0]\n    for num in num_list:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n\n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    # Sort the list of tuples using the second value of each tuple\n    marks_list.sort(key=lambda x: x[1])\n    return marks_list"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Calculate Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Calculate number of partitions\n    partitions = [0 for i in range(n+1)]\n    partitions[0] = 1\n    partitions[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            partitions[i] += bell[i][j] * partitions[j]\n\n    return partitions[n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    direction = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if direction == 0:\n            direction = arr[i] - arr[i - 1]\n            continue\n        if (direction > 0) != (arr[i] - arr[i - 1] > 0):\n            return False\n\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    sublst_len = len(sublst)\n    for i in range(len(lst) - sublst_len + 1):\n        if lst[i:i+sublst_len] == sublst:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(arr) - gap):\n            j = i + gap\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                swapped = True\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    if root * root == n:\n        return True\n    for i in range(1, root + 1):\n        j = math.isqrt(n + i * i)\n        if j * j == n + i * i:\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns1, patterns2):\n    if len(patterns1) != len(patterns2):\n        return False\n\n    pattern_dict = {}\n    for i in range(len(patterns1)):\n        if patterns1[i] not in pattern_dict:\n            pattern_dict[patterns1[i]] = patterns2[i]\n        elif pattern_dict[patterns1[i]] != patterns2[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(elem % k == 0 for elem in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n\n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    This function calculates the volume of a sphere given its radius.\n    The formula for the volume of a sphere is (4/3) * \u03c0 * r^3.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n\n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n\n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n\n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def newman_conway_sequence(n):\n    if n <= 2:\n        return n\n\n    sequence = [1, 2]\n    index = 2\n\n    while len(sequence) < n:\n        index += 1\n        sums = set()\n        for i in range(len(sequence)):\n            for j in range(i, len(sequence)):\n                sums.add(sequence[i] + sequence[j])\n\n        while index in sums:\n            index += 1\n\n        sequence.append(index)\n\n    return sequence[n - 1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    # The formula to calculate the surface area of a sphere is 4 * pi * r^2\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # INTJs are intuitive and would first understand the mathematical formula for the nth centered hexagonal number\n    # The formula is: n * (2n - 1)\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Merge the first dictionary into the merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    # Merge the second dictionary into the merged_dict\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Merge the third dictionary into the merged_dict\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    # Return the merged dictionary\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    # Convert the number to a string for easier manipulation\n    n_str = str(n)\n\n    # Check if the length of the number is odd\n    if len(n_str) % 2 == 0:\n        return False\n\n    # Iterate over the string, comparing every two digits\n    for i in range(0, len(n_str) - 1, 2):\n        # If any pair of digits is not the same, return False\n        if n_str[i] != n_str[i + 1]:\n            return False\n\n    # If all pairs of digits are the same, return True\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    # Base case: if b is 0, return 1\n    if b == 0:\n        return 1\n\n    # Recursive case: use the formula a^b = a * a^(b-1)\n    else:\n        return a * power(a, b - 1)"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_index = None\n    for index, (_, value) in enumerate(tuples_list):\n        if value < min_value:\n            min_value = value\n            min_index = index\n    return tuples_list[min_index][0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    frequency = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Start from the next number\n    n += 1\n\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Check if the number is a palindrome\n    while num_str != num_str[::-1]:\n        # If not, increment the number and convert it to a string\n        n += 1\n        num_str = str(n)\n\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n <= 0 or m <= 0 or n < m:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    for sublist in lst:\n        sublist.sort()\n    return lst"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    return sum(lst)"}
{"task_id": "Mbpp/106", "solution": "def append_list_to_tuple(lst, tpl):\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    n = len(binary_string)\n    odd_count = binary_string.count('1')\n    if odd_count % 2 == 0:\n        return 0\n    else:\n        unique_rotations = rotations % n\n        if unique_rotations == 0:\n            return odd_count\n        else:\n            rotated_string = binary_string[-unique_rotations:] + binary_string[:-unique_rotations]\n            return rotated_string.count('1')"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lists):\n    # Convert the first list to a set\n    common_elements = set(lists[0])\n\n    # Iterate over the remaining lists\n    for lst in lists[1:]:\n        # Update the set with the intersection of the current set and the current list\n        common_elements.intersection_update(lst)\n\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    for d in lst:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    result = 0\n    for num in t:\n        result = result * 10 + num\n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [[float(i) for i in sublist] for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    # Split the string on the space character\n    result = input_string.split(' ')\n\n    # Return the list of strings\n    return result"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n\n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for t in tuples:\n        product = abs(t[0] * t[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        j = sum_divisors(i)\n        if i != j and sum_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    n = len(s)\n    count_0 = [0] * n\n    count_1 = [0] * n\n    count_0[0] = 1 if s[0] == '0' else 0\n    count_1[0] = 1 if s[0] == '1' else 0\n    for i in range(1, n):\n        count_0[i] = count_0[i-1] + (1 if s[i] == '0' else 0)\n        count_1[i] = count_1[i-1] + (1 if s[i] == '1' else 0)\n    min_count_0 = min(count_0)\n    max_count_1 = max(count_1)\n    return max_count_1 - min_count_0"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    This function takes two integers as input and returns their product.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of a and b.\n    \"\"\"\n    # Check if either of the numbers is zero\n    if a == 0 or b == 0:\n        return 0\n\n    # If b is negative, make it positive and change the sign of the result\n    negative = False\n    if b < 0:\n        negative = True\n        b = -b\n\n    # Initialize the result to 0\n    result = 0\n\n    # Add a to the result b times\n    for _ in range(b):\n        result += a\n\n    # If b was negative, change the sign of the result\n    if negative:\n        result = -result\n\n    return result"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    word_list = words.split()\n    long_words_list = [word for word in word_list if len(word) > n]\n    return long_words_list"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != magic_sum:\n        return False\n\n    # Check unique numbers\n    unique_numbers = set()\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] in unique_numbers:\n                return False\n            unique_numbers.add(matrix[i][j])\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_count = max(count_dict.values())\n    max_items = [k for k, v in count_dict.items() if v == max_count]\n    return max_items[0] if len(max_items) == 1 else max_items"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n & 1 == 1:\n            return True\n        n = n >> 1\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    # INTJs are good at understanding abstract concepts and applying them to solve problems.\n    # The formula for the circumference of a circle is 2 * pi * radius.\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    result = set()\n    for sublist in lst:\n        for item in sublist:\n            result.add(item)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(max_idx)\n            flip(i - 1)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def extended_gcd(x, y):\n        if x == 0:\n            return y, 0, 1\n        else:\n            g, y, x = extended_gcd(y % x, x)\n            return g, x - (y // x) * x, y\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n\n    a = a // g\n    b = b // g\n    n = n // g\n\n    g, x, y = extended_gcd(a, b)\n    x = x * n\n    y = y * n\n\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += (n - 2 * i)\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    divisors = [1]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return sum(divisors)\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"}
{"task_id": "Mbpp/168", "solution": "def count_occurrences(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    return sum(numbers[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n\n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    mid = n // 2\n    if arr[mid] == element:\n        count = arr.count(element)\n        return count > n // 2\n    elif arr[mid] < element:\n        return is_majority(arr[mid+1:], n//2, element)\n    else:\n        return is_majority(arr[:mid], mid, element)"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n\n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n\n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n\n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n\n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n\n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # The formula for the lateral surface area of a cylinder is 2 * pi * radius * height\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set\n    mask = 0xAAAAAAAA\n\n    # Perform bitwise OR operation with the number and the mask\n    result = n | mask\n\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    for t in lst:\n        sorted_t = tuple(sorted(t))\n        if sorted_t in occurrences:\n            occurrences[sorted_t] += 1\n        else:\n            occurrences[sorted_t] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D array to store the number of sequences\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # There is 1 way to choose a sequence of length 1\n    for i in range(1, m+1):\n        dp[1][i] = 1\n\n    # Fill in the dp table in bottom-up manner\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            # For each element, we can choose any number that is greater than or equal to twice the previous element but less than or equal to m\n            for k in range(j//2, j+1):\n                dp[i][j] += dp[i-1][k]\n\n    # The total number of sequences of length n is the sum of dp[n][i] for all i from 1 to m\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Remove the last element of the first list\n    list1 = list1[:-1]\n\n    # Extend the first list with the elements of the second list\n    list1.extend(list2)\n\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    count = 0\n    for char in s:\n        count += 1\n    return count"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # If the square of the root is equal to n, increment the root\n    if root * root == n:\n        root += 1\n    # Return the square of the next integer\n    return root * root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    lis = [0 for i in range(n)]\n    lds = [0 for i in range(n)]\n\n    lis[0] = arr[0]\n    for i in range(1, n):\n        lis[i] = arr[i]\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + arr[i]:\n                lis[i] = lis[j] + arr[i]\n\n    lds[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        lds[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + arr[i]:\n                lds[i] = lds[j] + arr[i]\n\n    max_bitonic_sum = lis[0] + lds[0] - arr[0]\n    for i in range(1, n):\n        max_bitonic_sum = max(max_bitonic_sum, lis[i] + lds[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequences of substrings.\n    # Initialize all values as 0\n    dp = [[0 for x in range(n)] for x in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are useless and not filled in the process.\n    # The gap between start and end indices\n    for gap in range(2, n+1):\n        # Fix the starting index\n        for i in range(n - gap + 1):\n            # Get the ending index of substring from starting index i and length gap\n            j = i + gap - 1\n\n            # If there are only 2 characters and both are same\n            if s[i] == s[j] and gap == 2:\n                dp[i][j] = 2\n            # If there are more than two characters, and first and last characters are same\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            # If the first and last characters are not same\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return [value for value in arr1 if value in arr2]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    # Calculate the magnitude (r) and phase angle (theta)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n\n    # Return the polar coordinates as a tuple\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    if n == 0:\n        return [()]\n    elif n == 1:\n        return [(color,) for color in colors]\n    else:\n        return [(color,) + combo for color in colors for combo in combinations_colors(colors, n-1)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return sum(sieve[2:])"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n\n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Sort both tuples in descending order based on the second element of each tuple\n    tuple1 = sorted(tuple1, key=lambda x: x[1], reverse=True)\n    tuple2 = sorted(tuple2, key=lambda x: x[1], reverse=True)\n\n    # Iterate over the sorted tuples and replace the first element of tuple1 with the first element of tuple2\n    # if the first element of tuple2 is greater than the first element of tuple1\n    for i in range(len(tuple1)):\n        if tuple2[i][0] > tuple1[i][0]:\n            tuple1[i] = (tuple2[i][0], tuple1[i][1])\n\n    # Return the maximized tuple\n    return tuple(tuple1)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_prime(num):\n        if not is_prime(num):\n            return False\n        for i in range(2, num):\n            if is_prime(i) and is_prime((num - i) // 2):\n                return True\n        return False\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return dog_years"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    star = [0] * (n + 1)\n    star[0] = 1\n    for i in range(1, n + 1):\n        star[i] = star[i - 1] + (2 * i - 1)\n    return star[n]"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n\n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n\n    Returns:\n    int: ASCII value of the character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n\n    # Return the ASCII value using the ord() function\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize a list to store binomial coefficients\n    coeff = [0] * (n + 1)\n    coeff[0] = 1\n\n    # Calculate binomial coefficients\n    for i in range(1, n + 1):\n        j = min(i, n - i)\n        while j > 0:\n            coeff[j] = coeff[j] + coeff[j - 1]\n            j -= 1\n        coeff[0] = 1\n\n    # Calculate the sum of even index binomial coefficients\n    sum_coeff = 0\n    for i in range(0, n + 1, 2):\n        sum_coeff += coeff[i]\n\n    return sum_coeff"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n\n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for i in t:\n        if i == t[t.index((4, 6))]:\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n\n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n\n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate sum of all elements in arr[]\n    total_sum = sum(arr)\n\n    # Calculate maximum sum subarray sum in arr[]\n    max_sum = max_sub_array_sum(arr, n)\n\n    # If total_sum is negative, return max_sum\n    if total_sum < 0:\n        return max_sum\n\n    # If total_sum is positive, return total_sum * k if k is greater than 1\n    # else return max_sum\n    return max(max_sum, total_sum * k) if k > 1 else max_sum\n\ndef max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n\n    max_len = 0\n    max_list = []\n\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero.\")\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = float('-inf')\n    for item in lst:\n        if isinstance(item, int):\n            max_value = max(max_value, item)\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n\n    # Iterate through all possible divisors\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Iterate over each element in the nested list\n    for element in nested_list:\n        # If the element is a list, recursively call the function to flatten it\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        # If the element is not a list, add it to the flattened list\n        else:\n            flattened_list.append(element)\n\n    # Return the flattened list\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    aggregates = {}\n    for name, value in tuples_list:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    return max(aggregates.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0 for _ in range(2 * n + 1)] for _ in range(n + 1)]\n\n    # Base case: when n is 0, there is only one binary sequence (an empty sequence)\n    dp[0][0] = 1\n\n    # Iterate over the length of the sequence\n    for i in range(1, n + 1):\n        # Iterate over the possible sums of the first i bits\n        for j in range(0, 2 * n + 1):\n            # If the current sum is 0, it means we have a sequence of all 0s\n            if j == 0:\n                dp[i][j] = dp[i - 1][j]\n            # If the current sum is greater than 0, it means we have a sequence with at least one 1\n            elif j > 0:\n                # The count of binary sequences is the sum of the count of binary sequences with sum j-1 and j\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    # The count of binary sequences with equal sums in the first and last n bits is the square of the count of binary sequences with sum n\n    return dp[n][n] ** 2"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = [word for word in words if word.startswith('p') or word.startswith('P')]\n    return p_words[0].split()[0], p_words[1].split()[0]"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n    max_sum = arr[0]\n\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for l in range(0, j):\n            if arr[l] < arr[j] and dp[l] + arr[j] > dp[j]:\n                dp[j] = dp[l] + arr[j]\n        if j == i:\n            dp[j] += arr[k]\n        max_sum = max(max_sum, dp[j])\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Initialize an empty list to store the products\n    products = []\n\n    # Iterate over the first n elements in both lists\n    for i in range(n):\n        # Multiply the ith element of list1 with the ith element of list2\n        # and append the product to the products list\n        products.append(list1[i] * list2[i])\n\n    # Return the products list\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n\n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n\n    # Set the left-most unset bit\n    n |= (1 << position)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while (2 ** power <= n):\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n\n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def apply_format(lst, fmt):\n    return [fmt.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    return [{key: {value: score}} for key, value, score in zip(keys, values, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4] + dp[i // 5], i)\n    return dp[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n\n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(num_list):\n    total_sum = 0\n    for num in num_list:\n        if isinstance(num, int):\n            num = abs(num)\n            while num > 0:\n                total_sum += num % 10\n                num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_unique_tuples(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Find the rightmost digit that is smaller than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # If no such digit is found, return None\n    if i == -1:\n        return None\n\n    # Find the rightmost digit that is larger than the digit at index i\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Swap the digits at indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Reverse the digits to the right of index i + 1\n    digits[i + 1:] = digits[i + 1:][::-1]\n\n    # Convert the list of digits back to a number\n    result = int(''.join(digits))\n\n    # Return the result\n    return result"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Initialize minimum value as None\n    min_value = None\n\n    # Iterate over each item in the list\n    for item in lst:\n        # If the item is a number and (min_value is None or item is less than min_value)\n        if isinstance(item, (int, float)) and (min_value is None or item < min_value):\n            # Update min_value\n            min_value = item\n\n    # Return the minimum value\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing only the even numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If the number is even, append it to the list of even numbers\n            even_numbers.append(number)\n\n    # Return the list of even numbers\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    This function takes a tuple and a delimiter as input.\n    It converts each element of the tuple to a string and then concatenates them using the provided delimiter.\n    \"\"\"\n    # Convert each element of the tuple to a string\n    str_list = [str(i) for i in tup]\n\n    # Join the strings using the delimiter\n    result = delimiter.join(str_list)\n\n    return result"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    rear_elements = [string[-1] for string in tuple_of_strings]\n    return rear_elements"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return '-'.join([day, month, year])"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # The directrix of a parabola y = ax^2 + bx + c is given by x = -b/(2a)\n    directrix = -b / (2 * a)\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Sort the lengths of the sides\n    sides = sorted([a, b, c])\n\n    # The median length is the middle number\n    return sides[1]"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    pairs = set()\n    for t in tuples:\n        if (t[1], t[0]) in pairs:\n            pairs.remove((t[1], t[0]))\n        else:\n            pairs.add(t)\n    return len(pairs)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    result = \"\"\n    for num in lst:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import nltk\nimport re\n\ndef find_adverb_position(sentence):\n    # Tokenize the sentence into words\n    words = nltk.word_tokenize(sentence)\n\n    # Part of speech tagging\n    tagged_words = nltk.pos_tag(words)\n\n    # Iterate over the tagged words\n    for i, word_tag in enumerate(tagged_words):\n        word, tag = word_tag\n\n        # Check if the word is an adverb (RB)\n        if tag == 'RB':\n            # Find the start and end position of the word in the sentence\n            start_pos = sentence.find(word)\n            end_pos = start_pos + len(word)\n\n            return start_pos, end_pos, word\n\n    # If no adverb is found, return None\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((x * y for x, y in zip(tuple1, tuple2)))"}
{"task_id": "Mbpp/446", "solution": "def count_occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    where each element is the cube of the corresponding element in the input list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of cubes of the numbers in the input list.\n    \"\"\"\n    # Initialize an empty list to store the cubes\n    cubes = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Calculate the cube of the number and append it to the cubes list\n        cubes.append(num ** 3)\n\n    # Return the list of cubes\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input.\n    It returns a new list containing all the strings from the input list that have a length equal to the specified size.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each string in the input list\n    for string in string_list:\n        # If the length of the string is equal to the specified size, add it to the result list\n        if len(string) == size:\n            result.append(string)\n\n    # Return the result list\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return True\n    return False"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = [string[::-1] for string in string_list]\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    This function calculates the area of a rectangle given its length and width.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n    \"\"\"\n    # ISTJs are detail-oriented and practical, so they check for valid input.\n    if length <= 0 or width <= 0:\n        raise ValueError(\"Length and width must be positive numbers.\")\n\n    # ISTJs use logic and objective criteria to make decisions, so they calculate the area using a simple formula.\n    area = length * width\n\n    # ISTJs prefer structure and order, so they return the result directly.\n    return area"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            result += s[i]\n            i += 1\n        else:\n            while i < len(s) and s[i].isupper():\n                i += 1\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sub[0] for sub in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        first_element = lst[0]\n        rest_elements = lst[1:]\n        combinations_without_first = combinations_list(rest_elements)\n        combinations_with_first = [ [first_element] + combination for combination in combinations_without_first ]\n        return combinations_without_first + combinations_with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    max_prod = dp[0]\n\n    for i in range(1, n):\n        max_val = 0\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                max_val = max(max_val, dp[j])\n        dp[i] = max_val * arr[i]\n        max_prod = max(max_prod, dp[i])\n\n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert each tuple to a set for efficient intersection operation\n    set_list1 = [set(t) for t in list1]\n    set_list2 = [set(t) for t in list2]\n\n    # Find the intersection of each set in list1 with each set in list2\n    intersection = [s1 & s2 for s1 in set_list1 for s2 in set_list2 if s1 & s2]\n\n    # Convert each set back to a tuple and remove duplicates\n    intersection = list(set(tuple(sorted(t)) for t in intersection))\n\n    return set(intersection)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    input_string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    while n >= 10:\n        n = n // 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [num for num in lst if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n\n    # Find the difference\n    diff = sum_cubes - sum_n\n\n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n\n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to iterate over their digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Pad the shorter number with leading zeros to make both numbers the same length\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n\n    # Calculate the sum of the per-digit difference\n    total_diff = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_diff += abs(int(digit1) - int(digit2))\n\n    return total_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(0, n):\n        max_ending_here = max_ending_here + arr[i]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1).union(set(tuple2))\n    return tuple(sorted(list(union_set)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    # Initialize the maximum length to 0\n    max_length = 0\n\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Update the maximum length if the current sublist is longer\n        max_length = max(max_length, len(sublist))\n\n    # Return the maximum length found\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    # Count the frequency of each element\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Count the number of pairs\n    pairs = 0\n    for key in freq:\n        pairs += freq[key] * (n - freq[key])\n\n    # Since each pair is counted twice, divide by 2\n    pairs = pairs // 2\n\n    return pairs"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through each digit in the number\n    while n > 0:\n        # Add the last digit to the total\n        total += n % 10\n\n        # Remove the last digit from the number\n        n //= 10\n\n    # Return the total sum of the digits\n    return total"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(lists):\n    # Use a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate over each list\n    for lst in lists:\n        # Iterate over each number in the list\n        for num in lst:\n            # Add the number to the set\n            unique_nums.add(num)\n\n    # Convert the set back to a list\n    unique_list = list(unique_nums)\n\n    # Return the list of unique numbers\n    return unique_list"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area of the cylinder using the formula: 2 * pi * radius * (radius + height)\n    surface_area = 2 * math.pi * radius * (radius + height)\n    return surface_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n\n    # Iterate through the main list\n    for i in range(main_len - sub_len + 1):\n        # Check if the sublist matches the slice of the main list\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    dissimilar = []\n    for i in tuple1:\n        if i not in tuple2:\n            dissimilar.append(i)\n    for i in tuple2:\n        if i not in tuple1:\n            dissimilar.append(i)\n    return tuple(dissimilar)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    def is_even(x):\n        return x % 2 == 0\n\n    def extract_even_helper(t):\n        if isinstance(t, tuple):\n            return tuple(extract_even_helper(x) for x in t if is_even(x) or isinstance(x, tuple))\n        else:\n            return t if is_even(t) else None\n\n    return extract_even_helper(nested_tuple)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    # Calculate the area of the base of the square pyramid\n    base_area = base_edge ** 2\n\n    # Calculate the height of the four triangular faces\n    face_height = (height ** 2 + (base_edge / 2) ** 2) ** 0.5\n\n    # Calculate the area of one triangular face\n    face_area = 0.5 * base_edge * face_height\n\n    # Calculate the total surface area\n    total_surface_area = base_area + 4 * face_area\n\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n\n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    first_part = arr[:n]\n    second_part = arr[n:]\n    return second_part + first_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    i = 1\n    while i * i <= end:\n        if i * i >= start:\n            squares.append(i * i)\n        i += 1\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real), x"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    # Calculate binomial coefficients\n    C = [[0 for x in range(n+1)] for x in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, n-i)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    # Calculate sum of the product of consecutive binomial coefficients\n    sum_product = 0\n    for i in range(n):\n        sum_product += C[n][i] * C[n][i+1]\n\n    return sum_product"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is None or first_odd is None:\n        return None\n    return first_even - first_odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(source, target):\n    if source.count('1') != target.count('1'):\n        return None\n\n    source = list(source)\n    target = list(target)\n    count = 0\n    for i in range(len(source)):\n        if source[i] != target[i]:\n            swap_index = source.index(target[i], i)\n            source[i], source[swap_index] = source[swap_index], source[i]\n            count += 1\n    return count"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, len(arr1))\n    j = k - i\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2, j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to find its length\n    num_str = str(num)\n    # Calculate the sum of each digit raised to the power of the length of the number\n    sum_of_digits = sum(int(digit) ** len(num_str) for digit in num_str)\n    # Check if the sum is equal to the original number\n    return sum_of_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = [True] * (n + 1)\n    ludics[0] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if ludics[i]:\n            for j in range(i * i, n + 1, i):\n                ludics[j] = False\n    return [i for i in range(1, n + 1) if ludics[i]]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n\n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    reversed_words = words[::-1]\n\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Extract the n'th column from the matrix\n    column = [row[n] for row in matrix]\n    # Return the max value from the extracted column\n    return max(column)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for t in tuple_list:\n        total_sum += sum(t)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        averages.append(sum(t) / len(t))\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    # Separate the numbers and the characters\n    numbers = [char for char in s if char.isdigit()]\n    characters = [char for char in s if not char.isdigit()]\n\n    # Concatenate the characters and numbers\n    result = ''.join(characters) + ''.join(numbers)\n\n    return result"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n\n    # Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging\n    for count in range(n + 1):\n        if i == n:\n            m1 = m2\n            m2 = list2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = list1[0]\n            break\n\n        if list1[i] <= list2[j]:\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n\n    return (m1 + m2) / 2.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    elif radius == 0:\n        return 0\n    else:\n        # The largest triangle that can be inscribed in a semicircle is a right triangle\n        # with the base as the diameter of the semicircle and the height as the radius\n        base = 2 * radius\n        height = radius\n        area = 0.5 * base * height\n        return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    \"\"\"\n    This function takes a string as input and replaces whitespaces with underscores\n    and vice versa.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over each character in the input string\n    for char in s:\n        # If the character is a whitespace, replace it with an underscore\n        if char == \" \":\n            result += \"_\"\n        # If the character is an underscore, replace it with a whitespace\n        elif char == \"_\":\n            result += \" \"\n        # If the character is neither a whitespace nor an underscore, keep it as is\n        else:\n            result += char\n\n    # Return the modified string\n    return result"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize a pointer to keep track of the position to insert the next non-zero element\n    non_zero_index = 0\n\n    # Iterate through the list\n    for i in range(len(nums)):\n        # If the current element is non-zero, move it to the position indicated by the pointer\n        if nums[i] != 0:\n            nums[non_zero_index] = nums[i]\n            # If the non-zero element was moved, increment the pointer\n            if i != non_zero_index:\n                nums[i] = 0\n            non_zero_index += 1\n\n    return nums"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    sum = 0\n    for i in range(0, 32):\n        zero_count = 0\n        one_count = 0\n        for j in range(0, n):\n            if (arr[j] & (1 << i)):\n                one_count += 1\n            else:\n                zero_count += 1\n        sum += (one_count * zero_count) * (1 << i)\n    return sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    # Check if the input values are within the valid range\n    if wind_velocity < 3 or temperature > 10 or temperature < -50:\n        raise ValueError(\"Input values are out of valid range\")\n\n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity**0.16 + 0.3965 * temperature * wind_velocity**0.16\n\n    # Round the result to the next integer and return it\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters\n    s = s[1:-1]\n    # Check if 'z' is in the remaining string\n    return 'z' in s"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    return t + (d,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    path_length = 2*n - 2\n    return dp[n-1][n-1] / path_length"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n\n    # Initialize the sum of digits\n    sum_of_digits = 0\n\n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        s = s.replace(char, ':')\n    return s"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Get the number of bits in the number\n    num_bits = len(bin(n)) - 2\n\n    # Create a mask with all bits set to 1 except the first and the last bit\n    mask = (1 << num_bits) - 1\n    mask = mask ^ (1 << (num_bits - 1))\n    mask = mask ^ 1\n\n    # Toggle the bits of the number using the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = '^[aeiouAEIOU]'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    low = 0\n    high = 10**n\n    while low <= high:\n        mid = (low + high) // 2\n        triangular_number = mid * (mid + 1) // 2\n        if math.log10(triangular_number) + 1 == n:\n            return mid\n        elif math.log10(triangular_number) + 1 < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return {t[i]: t[i + 1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    # Ensure n is within the range of the list\n    n = n % len(lst)\n\n    # Reverse the entire list\n    lst = lst[::-1]\n\n    # Reverse the first n elements\n    lst[:n] = lst[:n][::-1]\n\n    # Reverse the remaining elements\n    lst[n:] = lst[n:][::-1]\n\n    return lst"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    return None in t"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(num % int(digit) == 0 for digit in str_num):\n            divisible_numbers.append(num)\n    return divisible_numbers"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i != 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    # Initialize the first two Jacobsthal numbers\n    jacobsthal = [0, 1]\n\n    # Compute the Jacobsthal numbers iteratively\n    for i in range(2, n + 1):\n        jacobsthal.append(jacobsthal[i - 1] + 2 * jacobsthal[i - 2])\n\n    # Return the nth Jacobsthal number\n    return jacobsthal[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of the tuple\n    records.sort(key=lambda x: x[1])\n\n    # Return the first k records\n    return records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        num = float(s)\n        if '{:.2f}'.format(num) == s:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Find the minimum difference by comparing each pair of consecutive elements\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    i = 2\n    while i <= n:\n        j = 1\n        while j < i:\n            dp[i] += dp[j]\n            j += 1\n        dp[i] += i\n        i += 1\n    return dp[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, sum):\n    count = 0\n    num_dict = {}\n    for num in nums:\n        if sum - num in num_dict:\n            count += num_dict[sum - num]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize sum to 0\n    sum_of_powers = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd natural number\n        odd_num = 2 * i + 1\n\n        # Calculate the fourth power of the odd number\n        power_of_four = odd_num ** 4\n\n        # Add the power to the sum\n        sum_of_powers += power_of_four\n\n    # Return the final sum\n    return sum_of_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = ['(', '{', '[']\n    closing = [')', '}', ']']\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if opening.index(current_char) != closing.index(char):\n                return False\n    if stack:\n        return False\n    return True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split(' ')\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(s, sub):\n    start = s.find(sub)\n    if start != -1:\n        return (sub, start, start + len(sub))\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + count < len(lst) and lst[i] == lst[i + count]:\n            count += 1\n        packed.append(lst[i:i + count])\n        i += count\n    return packed"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    def helper(tuples, target, path, results):\n        if target < 0:\n            return\n        if target == 0:\n            results.append(tuple(sorted(path)))\n            return\n        for i in range(len(tuples)):\n            for num in tuples[i]:\n                helper(tuples[i+1:], target - num, path + [num], results)\n\n    results = []\n    helper(tuples, sum(sum(t) for t in tuples), [], results)\n    return list(set(results))"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        total += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            if odd is not None:\n                break\n        else:\n            odd = num\n            if even is not None:\n                break\n    return even * odd if even is not None and odd is not None else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(map(int, s[1:-1].split(', ')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'abbb'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "solution": "def last_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def count_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 2\n    if a == c:\n        count += 1\n    if b == c and a != b:\n        count += 2\n    return count"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lst:\n        if sum(sublist) > max_sum:\n            max_sum = sum(sublist)\n            max_list = sublist\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None  # In case there are no odd numbers in the list"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(i < j for i, j in zip(tuple1, tuple2))"}
