{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1 & set2)"}
{"task_id": "Mbpp/3", "solution": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return xor != 0 and (xor & (xor - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(input_string):\n    words = input_string.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    rotations = 1\n    for i in range(len(s) - 1):\n        rotated_s = s[i+1:] + s[:i+1]\n        if rotated_s == s:\n            return rotations\n        rotations += 1\n    return -1"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    # Find the first occurrence of the character\n    first_occ = s.find(c)\n\n    # If the character is not found, return the original string\n    if first_occ == -1:\n        return s\n\n    # Find the last occurrence of the character\n    last_occ = s.rfind(c)\n\n    # If the first and last occurrence are the same, return the string without that character\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ+1:]\n\n    # If the first and last occurrence are different, return the string without the first and last occurrence of the character\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height_of_triangle, height_of_prism):\n    base_area = (base * height_of_triangle) / 2\n    volume = base_area * height_of_prism\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(input_string):\n    pattern = \"^[a-z]+(_[a-z]+)*$\"\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return side_length * 4"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(main_string, dirty_chars):\n    result = ''\n    for char in main_string:\n        if char not in dirty_chars:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    n = 0\n    while True:\n        woodall_num = n * (2 ** n) + 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert each integer in the list to a string\n    str_digits = [str(digit) for digit in digits]\n\n    # Sort the list of strings in descending order\n    str_digits.sort(reverse=True)\n\n    # Join the sorted list of strings into a single string\n    max_num_str = ''.join(str_digits)\n\n    # Convert the resulting string back into an integer\n    max_num = int(max_num_str)\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(num1, num2):\n    return (num1 < 0) != (num2 < 0)"}
{"task_id": "Mbpp/59", "solution": "def find_octagonal_number(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    min_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n    return min_num"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = float('-inf')\n    for t in tuples:\n        diff = abs(t[1] - t[0])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(input_list):\n    total = 0\n    for element in input_list:\n        if type(element) is list:\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    sublst_len = len(sublst)\n    for i in range(len(lst) - sublst_len + 1):\n        if lst[i:i+sublst_len] == sublst:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    # Get the length of the first tuple\n    length = len(tuples_list[0])\n\n    # Iterate over the rest of the tuples\n    for t in tuples_list[1:]:\n        # If the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(t) != length:\n            return False\n\n    # If all tuples have the same length, return True\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        diff = n - i * i\n        if math.isqrt(diff) ** 2 == diff:\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        pattern1 = [i for i in range(len(set(list1))) for j in list1 if j == sorted(set(list1))[i]]\n        pattern2 = [i for i in range(len(set(list2))) for j in list2 if j == sorted(set(list2))[i]]\n        return pattern1 == pattern2"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    # If the difference between the sum of digits at odd places and the sum of digits at even places is 0 or divisible by 11, then the number is divisible by 11.\n    str_n = str(n)\n    sum_odd = sum(int(str_n[i]) for i in range(0, len(str_n), 2))\n    sum_even = sum(int(str_n[i]) for i in range(1, len(str_n), 2))\n    return (sum_odd - sum_even) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n*(n+1)*(n+2)//6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    sum_ascii = 0\n    for char in s:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n\n    seq = [1]\n    for _ in range(n - 1):\n        next_term = str(seq[-1]).count('1')\n        next_term += str(seq[-1]).count('2')\n        next_term += str(seq[-1]).count('3')\n        seq.append(next_term)\n\n    return seq[-1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Iterate over the string, checking each pair of adjacent digits\n    for i in range(len(num_str) - 1):\n        # If the pair of digits are not both odd or both even, return False\n        if (num_str[i] in '02468' and num_str[i + 1] in '02468') or (num_str[i] in '13579' and num_str[i + 1] in '13579'):\n            continue\n        else:\n            return False\n\n    # If we've made it through all the digits, return True\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_index = None\n    for item in tuples_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_index = item[0]\n    return min_index"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lists):\n    min_length = float('inf')\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "import math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, math.isqrt(n) + 1):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n\n    # Count the frequency of each element\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:]"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    while True:\n        n -= 1\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == m or m == 0:\n        return 1\n    else:\n        return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    result = list(tpl)\n    result.extend(lst)\n    return tuple(result)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    sorted_list = sorted(list1) + sorted(list2) + sorted(list3)\n    return sorted(sorted_list)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    count = 0\n    for _ in range(num_rotations):\n        if binary_string[-1] == '1':\n            count += 1\n        binary_string = binary_string[1:] + binary_string[0]\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    if s.strip().isdigit():\n        return True\n    elif s.startswith(('-', '+')) and s[1:].isdigit():\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dicts(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(input_tuple):\n    # Convert each integer in the tuple to a string\n    str_tuple = [str(i) for i in input_tuple]\n\n    # Join the strings together to form a single string\n    str_num = ''.join(str_tuple)\n\n    # Convert the string back to an integer\n    num = int(str_num)\n\n    return num"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(i) for i in tup) for tup in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def find_single_element(arr):\n    # If the array is empty, return None\n    if not arr:\n        return None\n\n    # If the array has only one element, return that element\n    if len(arr) == 1:\n        return arr[0]\n\n    # Check the first element\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    # Check the last element\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    # Check the elements in between\n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]\n\n    # If no single element is found, return None\n    return None"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for tup in tuples_list:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    \"\"\"Calculate the sum of all proper divisors of a number.\"\"\"\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == (n / i):\n                divisors_sum = divisors_sum + i\n            else:\n                divisors_sum = divisors_sum + (i + n//i)\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Calculate the sum of all amicable numbers from 1 to a specified number.\"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_divisors = sum_of_divisors(num)\n        if sum_divisors <= limit and num != sum_divisors and sum_of_divisors(sum_divisors) == num:\n            amicable_sum += num\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(complex_num):\n    return cmath.phase(complex_num)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n        max_diff = max(max_diff, abs(count_zero - count_one))\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    sum_check = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != sum_check:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != sum_check:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != sum_check:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != sum_check:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    max_count = max(freq_dict.values())\n    max_item = [item for item, count in freq_dict.items() if count == max_count]\n    return max_item[0]"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    sum_negative = 0\n    for num in numbers:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2*n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = sum(1 for i in arr if i == 0)\n    non_zeroes = len(arr) - zeroes\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        # Find the largest power of 2 that is less than or equal to n\n        power = 1\n        while power <= n:\n            power <<= 1\n        power >>= 1\n\n        # Subtract the power from n\n        n -= power\n\n    # If n is 0, then the answer is True\n    return n == 0"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    result_set = set()\n    for tuple_element in list_of_tuples:\n        for element in tuple_element:\n            result_set.add(element)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(max_idx)\n            flip(i - 1)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(input_tuple):\n    count = 0\n    for element in input_tuple:\n        if type(element) == list:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n\n    for num in arr:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return g, x - (b // a) * y, y\n\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        return (x * (n // g)) % (b // g), (y * (n // g)) % (a // g)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, n) if n % i == 0]\n        return sum(divisors)\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if ord(s[i]) - 97 == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    return sum(numbers[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(input_tuple):\n    return all(isinstance(i, type(input_tuple[0])) for i in input_tuple)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    # Find the middle element\n    mid = n // 2\n\n    # Check if middle element is the majority element\n    if arr[mid] == x:\n        # Count the occurrences of x in the left half\n        left_count = arr[:mid].count(x)\n        # If the total count of x is greater than n/2, return True\n        if left_count + mid > n // 2:\n            return True\n        else:\n            return False\n    # If x is less than the middle element, search in the left half\n    elif arr[mid] > x:\n        return is_majority(arr[:mid], mid, x)\n    # If x is greater than the middle element, search in the right half\n    else:\n        return is_majority(arr[mid+1:], n-mid-1, x)"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    binary = bin(n)[2:]\n    count = 0\n    for bit in binary:\n        if bit == '1':\n            count += 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    return ''.join([input_string[i] for i in range(len(input_string)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, min(b, c))"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replacement_char):\n    return input_string.replace(' ', replacement_char)"}
{"task_id": "Mbpp/232", "solution": "import heapq\n\ndef larg_nnum(lst, n):\n    return heapq.nlargest(n, lst)"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    result = n\n    for i in range(0, 32, 2):\n        result |= (1 << i)\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for t in tuples_list:\n        if t in occurrences:\n            occurrences[t] += 1\n        else:\n            occurrences[t] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2 - n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize the first row with 1s\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n\n    # Fill in the rest of the dp array\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j):\n                dp[i][j] += dp[i - 1][k]\n\n    # Sum up the values in the last row\n    total_sequences = sum(dp[n])\n\n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    next_root = math.isqrt(n) + 1\n    next_square = next_root ** 2\n    return next_square"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize arrays for increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Calculate maximum sum of increasing subsequence ending at each index\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[j] for j in range(i) if arr[j] < arr[i]) + arr[i]\n\n    # Calculate maximum sum of decreasing subsequence starting at each index\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[j] for j in range(i, n) if arr[j] < arr[i]) + arr[i]\n\n    # Calculate maximum sum of bitonic subsequence\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert_to_polar(complex_num):\n    # cmath.polar returns a tuple (r, phi) where r is the magnitude and phi is the phase\n    return cmath.polar(complex_num)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    maximized_tuples = []\n    for i in range(len(tuple1)):\n        maximized_tuples.append(max(tuple1[i], tuple2[i]))\n    return maximized_tuples"}
{"task_id": "Mbpp/260", "solution": "def is_newman_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years < 0:\n        return \"Age cannot be negative\"\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    return [input_list[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    sum = 0\n    num = 1\n    for _ in range(n):\n        sum += num ** 2\n        num += 2\n    return sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return n * (n + 1) // 2 + n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        sum += num ** 5\n        num += 2\n        count += 1\n\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(0, n+1, 2):\n        coeff = math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n        sum += coeff\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {key: value for key, value in input_dict.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(input_tuple):\n    count = 0\n    for element in input_tuple:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def nth_decagonal_number(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    # Convert the integer to a string to easily iterate over its digits\n    n_str = str(n)\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate over the digits in the string\n    for digit in n_str:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Iterate over the items in the dictionary\n    for digit, count in freq.items():\n        # If the frequency of a digit is greater than the digit itself, return False\n        if count > int(digit):\n            return False\n\n    # If we've made it this far, all digits have a frequency less than or equal to the digit itself, so return True\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    total_sum = sum(arr)\n    max_sub_array_sum = max(max_subarray_sum(arr), total_sum)\n    min_sub_array_sum = min(min_subarray_sum(arr), total_sum)\n\n    if total_sum < 0:\n        return max_sub_array_sum\n    else:\n        return max(max_sub_array_sum, total_sum * k - min_sub_array_sum)\n\ndef max_subarray_sum(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ndef min_subarray_sum(arr):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = float('-inf')\n    for i in lst:\n        if isinstance(i, int):\n            max_value = max(max_value, i)\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "import math\n\ndef sum_div(n):\n    sum = 0\n    for i in range(1, math.isqrt(n) + 1):\n        if n % i == 0:\n            sum += i\n            if i != n // i:\n                sum += n // i\n    return sum"}
{"task_id": "Mbpp/296", "solution": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left, inv_left = merge_sort(arr[:mid])\n    right, inv_right = merge_sort(arr[mid:])\n    merged, inv_merge = merge(left, right)\n\n    return merged, inv_left + inv_right + inv_merge\n\ndef merge(left, right):\n    merged = []\n    inv_count = 0\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n\n    return merged, inv_count\n\ndef get_Inv_Count(arr):\n    _, inv_count = merge_sort(arr)\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    result = []\n    for i in nested_list:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    aggregate_scores = {}\n    for name, score in scores:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n    max_score_name = max(aggregate_scores, key=aggregate_scores.get)\n    return max_score_name, aggregate_scores[max_score_name]"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0 for _ in range(2*n + 1)] for _ in range(n + 1)]\n\n    # There is only one binary sequence of length 0\n    dp[0][0] = 1\n\n    # Fill the dp array in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(0, 2*n + 1):\n            # If j is greater than or equal to i, then we can add 0 or 1 to the sequence\n            if j >= i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - i]\n            # If j is less than i, then we can only add 0 to the sequence\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    # Return the count of binary sequences where sum of first n bits is equal to sum of last n bits\n    return dp[n][n]"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        if word.lower().startswith('p'):\n            result.append(word)\n    return tuple(result[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp_k = [0] * n\n\n    dp[0] = arr[0]\n    dp_k[0] = arr[0] if k == 0 else 0\n\n    for j in range(1, n):\n        dp[j] = arr[j]\n        dp_k[j] = arr[j] if j == k else 0\n\n        for l in range(0, j):\n            if arr[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n\n                if l < i and j > k:\n                    dp_k[j] = max(dp_k[j], dp_k[l] + arr[j])\n\n    return max(dp_k)"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Step 1: Multiply each element of the first list with each element of the second list\n    products = [a*b for a in list1 for b in list2]\n\n    # Step 2: Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Step 3: Return the first 'n' elements from the sorted list\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    return max(num1, num2)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    return tuple(input_string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    pos = 0\n    while (n & (1 << pos)):\n        pos += 1\n\n    # Set this bit to 1\n    n |= (1 << pos)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    # Shift 1 to the left until it is greater than n\n    i = 1\n    while i <= n:\n        i = i << 1\n    # Return the previous power of 2\n    return i >> 1"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    return [{key: {value: score}} for key, value, score in zip(keys, values, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Create a memoization table to store the results of subproblems\n    memo = [0] * (n + 1)\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the maximum sum possible using the given equation\n        memo[i] = max(memo[i // 2] + memo[i // 3] + memo[i // 4] + memo[i // 5], i)\n\n    # Return the maximum sum possible for n\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    return len(input_tuple) == len(set(input_tuple))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in string:\n        if count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(input_string):\n    if input_string[0] == input_string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total = 0\n    for number in numbers:\n        for digit in str(number):\n            total += int(digit)\n    return total"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    if element in tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/406", "solution": "def find_parity(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert number into list of digits\n    digits = list(str(n))\n\n    # Find the first digit from right which is smaller than the next digit\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return -1\n\n    # Find the smallest digit on right side of (i)'th digit which is greater than digits[i]\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    # Swap the digits[i] and digits[j]\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Sort the digits to the right of (i)'th digit in ascending order\n    digits[i+1:] = sorted(digits[i+1:])\n\n    # Convert list of digits back into a number and return it\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    products = [x * y for x, y in tuples_list]\n    return min(products)"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = float('inf')\n    for i in lst:\n        if isinstance(i, (int, float)):\n            min_value = min(min_value, i)\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_product(numbers):\n    numbers.sort(reverse=True)\n    return (numbers[0], numbers[1])"}
{"task_id": "Mbpp/418", "solution": "def find_max_length_element(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple, delimiter='-'):\n    return delimiter.join(map(str, input_tuple))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(input_tuple):\n    return [string[-1] for string in input_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_string):\n    year, month, day = date_string.split('-')\n    return '-'.join([day, month, year])"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            arr[j] = temp\n\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(h, k, p):\n    return h - p"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2):\n    return (base1 + base2) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(num_list, num):\n    for i in num_list:\n        if i >= num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(input_list):\n    neg_list = []\n    for num in input_list:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(input_string):\n    result = \"\"\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            result += input_string[i]\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count_dict = {}\n    for t in tuples:\n        reversed_t = (t[1], t[0])\n        if reversed_t in count_dict:\n            count_dict[reversed_t] += 1\n        else:\n            count_dict[t] = 1\n    return len(count_dict)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    result = \"\"\n    for number in numbers:\n        result += str(number)\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b\\w*ly\\b', sentence)\n    if match:\n        return match.start(), match.end(), match.group()\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    return 6 * (side_length ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple(a*b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    sum = 0\n    a, b, c = 3, 0, 2\n\n    while True:\n        next_num = a + b\n        a, b, c = b, c, next_num\n\n        if next_num <= n:\n            sum += next_num\n        else:\n            break\n\n    return sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [string for string in string_list if len(string) <= size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    return input_string.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_days(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(input_list):\n    return [string[::-1] for string in input_list]"}
{"task_id": "Mbpp/457", "solution": "def find_min(lst):\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join([char for char in s if not char.isupper()])"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(input_list):\n    return [sublist[0] for sublist in input_list]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n\n    first_element = lst[0]\n    remaining_elements = lst[1:]\n\n    combinations_without_first = combinations_list(remaining_elements)\n    combinations_with_first = [combination + [first_element] for combination in combinations_without_first]\n\n    return combinations_without_first + combinations_with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    n = len(nums)\n    max_product = [0] * n\n    min_product = [0] * n\n\n    max_product[0] = min_product[0] = nums[0]\n    result = max_product[0]\n\n    for i in range(1, n):\n        if nums[i] > 0:\n            max_product[i] = max(nums[i], max_product[i - 1] * nums[i])\n            min_product[i] = min(nums[i], min_product[i - 1] * nums[i])\n        else:\n            max_product[i] = max(nums[i], min_product[i - 1] * nums[i])\n            min_product[i] = min(nums[i], max_product[i - 1] * nums[i])\n\n        result = max(result, max_product[i])\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] * arr[i]:\n                dp[i] = dp[j] * arr[i]\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(input_tuple):\n    results = []\n    for i in range(len(input_tuple) - 1):\n        results.append(input_tuple[i] + input_tuple[i + 1])\n    return tuple(results)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(numbers):\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] + 1 != numbers[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert the tuples to sets\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the sets\n    intersection = set1 & set2\n\n    # Convert the intersection set back to a set of tuples\n    tuple_intersection = set(tuple(sorted(t)) for t in intersection)\n\n    return tuple_intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(original_string, char_to_replace, replacement_char):\n    return original_string.replace(char_to_replace, replacement_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"}
{"task_id": "Mbpp/476", "solution": "def big_sum(numbers):\n    smallest = min(numbers)\n    largest = max(numbers)\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(input_string):\n    return ''.join([char for char in input_string if not char.islower()])"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/554", "solution": "def split_odd_numbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers**3"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) & 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    result = ''\n    for char in s:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Make sure both numbers have the same number of digits\n    len_diff = len(num1_str) - len(num2_str)\n    if len_diff > 0:\n        num2_str = num2_str.zfill(len(num1_str))\n    elif len_diff < 0:\n        num1_str = num1_str.zfill(len(num2_str))\n\n    total_diff = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        total_diff += abs(int(digit1) - int(digit2))\n\n    return total_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr):\n    max_current = max_global = arr[0]\n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Find the union of the sets\n    union_set = set1.union(set2)\n\n    # Convert the set back to a tuple and sort the elements\n    union_tuple = tuple(sorted(union_set))\n\n    return union_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(input_string):\n    return re.findall(r'\"([^\"]*)\"', input_string)"}
{"task_id": "Mbpp/564", "solution": "from collections import Counter\nfrom math import comb\n\ndef count_pairs(lst):\n    # Count the frequency of each element in the list\n    freq = Counter(lst)\n\n    # Calculate the total number of pairs\n    total_pairs = comb(len(lst), 2)\n\n    # Calculate the number of pairs with equal elements\n    equal_pairs = sum(comb(count, 2) for count in freq.values())\n\n    # Return the number of possible unordered pairs where both elements are unequal\n    return total_pairs - equal_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(numbers):\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "Mbpp/573", "solution": "from functools import reduce\nimport operator\n\ndef unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = reduce(operator.mul, unique_numbers)\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    sub_list_len = len(sub_list)\n    for i in range(len(main_list) - sub_list_len + 1):\n        if main_list[i:i+sub_list_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 10\n    return result"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(input_tuple):\n    result = []\n    for element in input_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(edge, height):\n    base_area = edge ** 2\n    triangle_area = 0.5 * edge * height\n    surface_area = base_area + 2 * 4 * triangle_area\n    return surface_area"}
{"task_id": "Mbpp/582", "solution": "def is_empty(dictionary):\n    return len(dictionary) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <= 1:\n        return 1\n\n    # Calculate the binomial coefficient\n    binomial_coeff = 1\n    for i in range(n + 1, 2 * n + 1):\n        binomial_coeff *= i\n    for i in range(1, n + 1):\n        binomial_coeff //= i\n\n    # Calculate the Catalan number\n    catalan_num = binomial_coeff // (n + 1)\n\n    return catalan_num"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end + 1):\n        if int(i ** 0.5) ** 2 == i:\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "import math\n\ndef sum_Of_product(n):\n    total = 0\n    for k in range(n):\n        total += math.comb(n, k) * math.comb(n, k+1)\n    return total"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    # Split the IP address into its four parts\n    parts = ip_address.split('.')\n\n    # Convert each part to an integer to remove any leading zeroes\n    # and then convert it back to a string\n    parts = [str(int(part)) for part in parts]\n\n    # Join the four parts back together using the '.' as a delimiter\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(num_list):\n    first_even = None\n    first_odd = None\n\n    for num in num_list:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    list1 = list(str1)\n    list2 = list(str2)\n    swaps = 0\n\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            swap_index = list2.index(list1[i], i)\n            list2[i], list2[swap_index] = list2[swap_index], list2[i]\n            swaps += 1\n\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    i = min(k // 2, len(arr1))\n    j = k - i\n\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2, j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to string to get its digits\n    num_str = str(n)\n\n    # Calculate the sum of cubes of its digits\n    sum_of_cubes = sum(int(digit) ** 3 for digit in num_str)\n\n    # Check if the sum of cubes is equal to the number\n    return sum_of_cubes == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = (n * (n + 1)) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(input_string):\n    char_set = set()\n    for char in input_string:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Create a boolean array \"prime[0..n]\" and initialize all entries as true.\n    # A value in prime[i] will finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Filter out the lucid numbers\n    lucid_numbers = []\n    for p in range(2, n+1):\n        if prime[p]:\n            # Check if p is divisible by any of its digits\n            divisible = False\n            for digit in str(p):\n                if int(digit) != 0 and p % int(digit) == 0:\n                    divisible = True\n                    break\n            if not divisible:\n                lucid_numbers.append(p)\n\n    return lucid_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split(' ')\n    words.reverse()\n    return ' '.join(words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef degrees_to_radians(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(input_string, pattern):\n    match = re.search(pattern, input_string)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell_triangle = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell_triangle[0][0] = 1\n\n    for i in range(1, n+1):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i-1][j-1] + bell_triangle[i][j-1]\n\n    return bell_triangle[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples_list):\n    total = 0\n    for tup in tuples_list:\n        for num in tup:\n            total += num\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    result = ''\n    for char in s:\n        if not char.isdigit():\n            result += char\n    for char in s:\n        if char.isdigit():\n            result += char\n    return result"}
{"task_id": "Mbpp/620", "solution": "from math import gcd\n\ndef largest_subset(nums):\n    n = len(nums)\n    dp = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 or nums[j] % nums[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 1:\n        return merged_list[size // 2]\n    else:\n        return (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/624", "solution": "def to_uppercase(input_string):\n    return input_string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius * radius) / 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2) if (i, j) != coord]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    # Replace whitespaces with underscores\n    output_string = input_string.replace(' ', '_')\n    # Replace underscores with whitespaces\n    output_string = output_string.replace('_', ' ')\n    return output_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    non_zero_nums = [num for num in nums if num != 0]\n    zero_nums = [num for num in nums if num == 0]\n    return non_zero_nums + zero_nums"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(nums, n):\n    sum = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            sum += nums[i] ^ nums[j]\n    return sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(initial_amount, final_amount):\n    return initial_amount == final_amount"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity ** 0.16 + 0.3965 * temperature * wind_velocity ** 0.16\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_length_of_names(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(string):\n    # Find all substrings that are enclosed within parentheses\n    substrings = re.findall(r'\\(.*?\\)', string)\n\n    # Iterate through each substring and replace it with an empty string\n    for substring in substrings:\n        string = string.replace(substring, '')\n\n    return string"}
{"task_id": "Mbpp/641", "solution": "def nth_nonagonal(n):\n    return n * (7*n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters of the string\n    s = s[1:-1]\n    # Check if 'z' is in the remaining string\n    return 'z' in s"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the subarray from index 0 to k\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dic):\n    return tup + (dic,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0.0] * n for _ in range(n)]\n\n    dp[0][0] = matrix[0][0]\n\n    # Initialize first row of dp[][]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    # Initialize first column of dp[][]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    # Fill up the dp[][] in bottom-up manner\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    # Divide by total number of cells to get the average\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = dp[i][j] / ((i+1) * (j+1))\n\n    return dp[n-1][n-1]"}
{"task_id": "Mbpp/722", "solution": "def filter_data(data, min_height, min_weight):\n    filtered_data = {}\n    for name, (height, weight) in data.items():\n        if height > min_height and weight > min_weight:\n            filtered_data[name] = (height, weight)\n    return filtered_data"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = pow(base, power)\n    result_str = str(result)\n    sum = 0\n    for digit in result_str:\n        sum += int(digit)\n    return sum"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall('\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(input_tuple):\n    return tuple(input_tuple[i] * input_tuple[i + 1] for i in range(len(input_tuple) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Replace spaces with colon\n    input_string = input_string.replace(' ', ':')\n    # Replace commas with colon\n    input_string = input_string.replace(',', ':')\n    # Replace dots with colon\n    input_string = input_string.replace('.', ':')\n    return input_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == num:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    sum_of_products = 0\n    for i in range(len(lst)):\n        sum_of_products += lst[i] * (i+1) * (len(lst)-i)\n    return sum_of_products"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = len(bin(n)) - 2\n\n    # Create a mask with all bits set to 1, except the first and the last bit\n    mask = (1 << (num_bits - 1)) - 2\n\n    # Toggle the bits of n using the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(sorted_list, value):\n    for i in range(len(sorted_list)):\n        if sorted_list[i] >= value:\n            return i\n    return len(sorted_list)"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(input_string):\n    # Define a regular expression pattern for vowels at the start of a string\n    pattern = '^[aeiouAEIOU]'\n\n    # Use the search function from the re module to check if the pattern is found in the input string\n    if re.search(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(input_string):\n    return len(set(input_string)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    for element in input_tuple:\n        if element is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * math.pi * radius**2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i > 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    # Convert each string in the list to an integer\n    lst = [int(i) for i in lst]\n    # Sort the list of integers\n    lst.sort()\n    # Return the sorted list\n    return lst"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    lst.extend(tpl)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        # check if left child exists\n        if 2 * i + 1 < n:\n            if arr[i] > arr[2 * i + 1]:\n                return False\n        # check if right child exists\n        if 2 * i + 2 < n:\n            if arr[i] > arr[2 * i + 2]:\n                return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = 2 * b + a, a\n    return a"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuples, k):\n    tuples.sort(key=lambda x: x[1])\n    return tuples[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    first_smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif first_smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i+1, len(str_list)):\n            if str_list[i] == str_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(num):\n    if num == 1:\n        return True\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            if i > (num // i) + 1:\n                return False\n            if i < (num // i) - 1:\n                return False\n    return True\n\ndef nth_polite_number(n):\n    count = 0\n    number = 1\n    while count < n:\n        if is_polite(number):\n            count += 1\n        if count == n:\n            return number\n        number += 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(input_list):\n    return [(input_list[i], input_list[i + 1]) for i in range(len(input_list) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    pair_count = 0\n    for num in numbers:\n        diff = target_sum - num\n        if diff in count_dict:\n            pair_count += count_dict[diff]\n            if diff == num:\n                pair_count -= 1\n\n    return pair_count // 2"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = ['{', '(', '[']\n    closing = ['}', ')', ']']\n    matching = {'}': '{', ')': '(', ']': '['}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != matching[char]:\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join(word for word in s.split() if len(word) != k)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(main_string, sub_string):\n    index = main_string.find(sub_string)\n    if index != -1:\n        return (sub_string, index, index + len(sub_string))\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            packed.append([lst[i]])\n        else:\n            packed[-1].append(lst[i])\n    return packed"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    # Generate all possible combinations of the given tuples\n    combinations_list = []\n    for r in range(1, len(tuples) + 1):\n        combinations_list.extend(combinations(tuples, r))\n\n    # Calculate the sum of each combination\n    sums = [sum(combination) for combination in combinations_list]\n\n    # Return the unique combinations of sums\n    return list(set(sums))"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate Hue (H)\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n\n    # Calculate Value (V)\n    v = max_val * 100\n\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    even = None\n    odd = None\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Remove the parentheses\n    s = s.strip('()')\n    # Split the string into a list of strings\n    str_list = s.split(', ')\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list to a tuple\n    return tuple(int_list)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_list, value):\n    for i, num in enumerate(sorted_list):\n        if value <= num:\n            return i\n    return len(sorted_list)"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    output_tuple = ()\n    for element in input_tuple:\n        if isinstance(element, tuple):\n            output_tuple += remove_nested(element)\n        else:\n            output_tuple += (element,)\n    return output_tuple"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = '^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(input_dict):\n    return sum(input_dict.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total = 0\n    for i in range(l, r + 1):\n        if i % 2 != 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/798", "solution": "def _sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root.is_integer()"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True"}
