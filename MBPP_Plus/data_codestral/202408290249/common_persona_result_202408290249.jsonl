{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    # Return the result as a tuple\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    # Create a max heap of the first n elements\n    max_heap = [-num for num in numbers[:n]]\n    heapq.heapify(max_heap)\n\n    # Iterate over the remaining elements\n    for num in numbers[n:]:\n        # If the current element is larger than the smallest element in the heap,\n        # replace the smallest element with the current element\n        if num > -max_heap[0]:\n            heapq.heapreplace(max_heap, -num)\n\n    # Convert the heap to a list and sort it in descending order\n    largest_numbers = [-num for num in max_heap]\n    largest_numbers.sort(reverse=True)\n\n    return largest_numbers"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return xor != 0 and (xor & (xor - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing the squares of the input numbers.\n\n    Args:\n    nums (list of int or float): A list of numbers.\n\n    Returns:\n    list of int or float: A list containing the squares of the input numbers.\n    \"\"\"\n    # Initialize an empty list to store the squared numbers\n    squared_nums = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Square the number and append it to the list of squared numbers\n        squared_nums.append(num ** 2)\n\n    # Return the list of squared numbers\n    return squared_nums"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(input_string, char):\n    # Find the first occurrence of the character\n    first_occurrence = input_string.find(char)\n\n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return input_string\n\n    # Find the last occurrence of the character\n    last_occurrence = input_string.rfind(char)\n\n    # Remove the first and last occurrence of the character\n    result = input_string[:first_occurrence] + input_string[first_occurrence+1:last_occurrence] + input_string[last_occurrence+1:]\n\n    return result"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and store it with the corresponding row\n    sum_rows = [(sum(row), row) for row in matrix]\n\n    # Sort the rows based on the sum of their elements\n    sum_rows.sort()\n\n    # Extract the sorted rows from the list of tuples\n    sorted_matrix = [row for _, row in sum_rows]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n\n    # Calculate the volume of the prism\n    volume = triangular_area * length\n\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    # Split the input string by underscore\n    parts = input_string.split('_')\n\n    # Check if all parts are lowercase\n    for part in parts:\n        if not part.islower():\n            return False\n\n    # If all parts are lowercase, return True\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the square.\n\n    Returns:\n    int or float: The perimeter of the square.\n    \"\"\"\n    # Check if the input is a non-negative number\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative number.\")\n\n    # Calculate the perimeter of a square (4 * side_length)\n    perimeter = 4 * side_length\n\n    return perimeter"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    # Create an empty string to store the result\n    result = \"\"\n\n    # Iterate over each character in the first string\n    for char in s1:\n        # If the character is not present in the second string, add it to the result\n        if char not in s2:\n            result += char\n\n    # Return the final result\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate through the array\n    for num in arr:\n        # If the number is already in the set, it's a duplicate\n        if num in unique_elements:\n            return True\n        # Otherwise, add it to the set\n        else:\n            unique_elements.add(num)\n\n    # If we've gone through the entire array without finding any duplicates, return False\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # A number is Woodall if it is of the form n * 2^n + 1 for some non-negative integer n\n    # First, check if n is greater than 1 (since 0 * 2^0 + 1 = 1 is not a Woodall number)\n    if n > 1:\n        # Then, check if n is of the form n * 2^n + 1 for some non-negative integer n\n        i = 1\n        while i <= n:\n            if n == i * (2 ** i) + 1:\n                return True\n            i += 1\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Convert each digit to a string\n    digits = [str(digit) for digit in digits]\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Join the digits to form a single string\n    max_num = ''.join(digits)\n\n    # Convert the string back to an integer\n    max_num = int(max_num)\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n\n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n\n            # Check if the sum of digits equals the length of the substring\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    # Initialize the smallest number as the first number in the list\n    smallest = numbers[0]\n\n    # Iterate over the list\n    for number in numbers:\n        # If the current number is smaller than the smallest number found so far, update the smallest number\n        if number < smallest:\n            smallest = number\n\n    # Return the smallest number\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n\n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks_list):\n    # Use the sorted() function with a lambda function as the key parameter\n    # The lambda function returns the second element of each tuple\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n    return sorted_list"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    direction = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if direction == 0:\n            direction = arr[i] - arr[i - 1]\n            continue\n        if (direction > 0 and arr[i] < arr[i - 1]) or (direction < 0 and arr[i] > arr[i - 1]):\n            return False\n\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    main_list_len = len(main_list)\n    sub_list_len = len(sub_list)\n\n    if sub_list_len > main_list_len:\n        return False\n\n    for i in range(main_list_len - sub_list_len + 1):\n        if main_list[i:i + sub_list_len] == sub_list:\n            return True\n\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    # Check if the number is non-negative\n    if n < 0:\n        return False\n\n    # Check if the square root of the number is an integer\n    root = math.isqrt(n)\n    if root * root == n:\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    i = 1\n    while i * i < n:\n        j = math.isqrt(n + i * i)\n        if j * j == n + i * i:\n            return True\n        i += 1\n\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(pattern1, pattern2):\n    if len(pattern1) != len(pattern2):\n        return False\n\n    mapping = {}\n    for i in range(len(pattern1)):\n        if pattern1[i] not in mapping:\n            mapping[pattern1[i]] = pattern2[i]\n        elif mapping[pattern1[i]] != pattern2[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    # Initialize an empty list to store the tuples that meet the criteria\n    result = []\n\n    # Iterate over each tuple in the list\n    for t in tuples_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % k == 0 for x in t):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(t)\n\n    # Return the list of tuples that meet the criteria\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n\n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    # The formula for the volume of a sphere is (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n\n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n\n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n\n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n < 1:\n        return None\n    if n <= 3:\n        return n - 1\n\n    seq = [0, 1, 1]\n    for i in range(3, n):\n        count = 1\n        while seq[i - count] != seq[i - count - 1]:\n            count += 1\n        seq.append(count)\n\n    return seq[n - 1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    This function calculates the surface area of a sphere given its radius.\n    The formula for the surface area of a sphere is 4 * pi * radius^2.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 6 * (n * (n - 1)) // 2 + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Create an empty dictionary to store the merged result\n    merged_dict = {}\n\n    # Iterate over each dictionary and update the merged_dict\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n\n    # Return the merged dictionary\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the closest smaller number.\n    \"\"\"\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string for easier manipulation\n    number_str = str(number)\n\n    # Check if the length of the number is odd\n    if len(number_str) % 2 == 0:\n        return False\n\n    # Iterate through the digits of the number\n    for i in range(len(number_str) - 2):\n        # Check if the current digit is equal to the next digit\n        if number_str[i] != number_str[i + 1]:\n            return False\n\n        # Check if the current digit is not equal to the digit two positions ahead\n        if number_str[i] == number_str[i + 2]:\n            return False\n\n    # If all conditions are met, the number is undulating\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    # Base case: if b is 0, the result is always 1\n    if b == 0:\n        return 1\n    # Recursive case: multiply a by the result of a to the power of (b-1)\n    else:\n        return a * power(a, b-1)"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the minimum value and the corresponding first value\n    min_value = float('inf')\n    min_first_value = None\n\n    # Iterate through the list of tuples\n    for first_value, second_value in tuples_list:\n        # If the second value is smaller than the current minimum value\n        if second_value < min_value:\n            # Update the minimum value and the corresponding first value\n            min_value = second_value\n            min_first_value = first_value\n\n    # Return the first value of the tuple with the smallest second value\n    return min_first_value"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lst for item in sublist]\n\n    # Initialize an empty dictionary to store frequencies\n    freq_dict = {}\n\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # Otherwise, add the item to the dictionary with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "from functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Start from the next integer\n    n -= 1\n    while True:\n        # Convert the integer to a string\n        s = str(n)\n        # Check if the string is a palindrome\n        if s == s[::-1]:\n            # If it is, return the integer\n            return n\n        # If not, decrement the integer and continue\n        n -= 1"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0:\n        return 1 if n == 0 else 0\n    if m > n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    # Iterate over each sublist in the main list\n    for sublist in lst:\n        # Sort the sublist in-place\n        sublist.sort()\n    # Return the modified list\n    return lst"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return bool_list.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    This function appends the given list to the given tuple.\n\n    Parameters:\n    lst (list): The list to be appended to the tuple.\n    tpl (tuple): The tuple to which the list will be appended.\n\n    Returns:\n    tuple: The resulting tuple after appending the list.\n    \"\"\"\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Merge the first two lists\n    merged_list = sorted(list1 + list2)\n\n    # Merge the result with the third list\n    merged_list = sorted(merged_list + list3)\n\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    # Convert binary string to integer\n    num = int(binary_string, 2)\n\n    # Initialize a set to store unique numbers\n    unique_numbers = set()\n\n    # Perform rotations\n    for _ in range(rotations):\n        # Rotate the binary string\n        binary_string = binary_string[-1] + binary_string[:-1]\n\n        # Convert rotated binary string to integer\n        num = int(binary_string, 2)\n\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the number to the set\n            unique_numbers.add(num)\n\n    # Return the count of unique odd numbers\n    return len(unique_numbers)"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Convert the first list to a set\n    common_elements = set(nested_lists[0])\n\n    # Iterate over the remaining lists\n    for lst in nested_lists[1:]:\n        # Update the set with the intersection of the current set and the current list\n        common_elements.intersection_update(lst)\n\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    result = 0\n    for i in t:\n        result = result * 10 + i\n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [[float(i) for i in sublist] for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    \"\"\"\n    This function takes a string as input and returns a list of strings,\n    where the input string is split on the space character.\n\n    :param input_string: str\n    :return: list of str\n    \"\"\"\n    return input_string.split(' ')\n\n# Test cases\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n\n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    # Initialize max_product as the product of the first pair of tuples\n    max_product = abs(tuples_list[0][0] * tuples_list[0][1])\n\n    # Iterate over the rest of the pairs of tuples\n    for tup in tuples_list[1:]:\n        # Calculate the product of the current pair of tuples\n        product = abs(tup[0] * tup[1])\n\n        # If the product is greater than max_product, update max_product\n        if product > max_product:\n            max_product = product\n\n    # Return the maximum product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    def is_amicable(num):\n        sum_divisors_num = sum_divisors(num)\n        return sum_divisors(sum_divisors_num) == num and sum_divisors_num != num\n\n    return sum(i for i in range(1, n) if is_amicable(i))"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Initialize variables\n    max_diff = 0\n    count = 0\n    prefix_sum = [0]\n\n    # Calculate prefix sum array\n    for bit in binary_string:\n        count += 1 if bit == '1' else -1\n        prefix_sum.append(count)\n\n    # Initialize min and max values\n    min_val = max_val = prefix_sum[0]\n\n    # Iterate over prefix sum array\n    for val in prefix_sum:\n        # Update min and max values\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n\n        # Update max difference\n        max_diff = max(max_diff, abs(max_val - min_val))\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a: int, b: int) -> int:\n    \"\"\"\n    This function takes two integers as input and returns their product.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two input integers.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, word_list):\n    # Split the word_list into a list of words\n    words = word_list.split()\n\n    # Use a list comprehension to filter out words that are shorter than n characters\n    long_words = [word for word in words if len(word) > n]\n\n    # Return the list of long words\n    return long_words"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    sum_diag = sum(matrix[i][i] for i in range(n))\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != sum_diag:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != sum_diag:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][n-i-1] for i in range(n)) != sum_diag:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    # Create a dictionary to store the frequency of each item\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # INTJs are logical and analytical, so they break down the problem into smaller parts\n    # In this case, they recognize that a number can be represented as the sum of powers of 2\n    # if its binary representation contains only 1s and 0s\n\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n\n    # If the binary representation contains only 1s and 0s, return True\n    # Otherwise, return False\n    return set(binary) <= {'1', '0'}"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst_of_lst):\n    # Initialize an empty set to store the unique numbers\n    unique_numbers = set()\n\n    # Iterate over each list in the list of lists\n    for sub_list in lst_of_lst:\n        # Iterate over each number in the current list\n        for number in sub_list:\n            # Add the number to the set\n            unique_numbers.add(number)\n\n    # Return the set of unique numbers\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sublist, k):\n        i = 0\n        while i < k:\n            sublist[i], sublist[k] = sublist[k], sublist[i]\n            i += 1\n            k -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(arr, max_idx)\n            flip(arr, i - 1)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Find the minimum and maximum elements in the array\n    min_elem = min(arr)\n    max_elem = max(arr)\n\n    # Return the absolute difference between the maximum and minimum elements\n    return abs(max_elem - min_elem)"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def gcd_extended(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x0 = x * (n // gcd)\n    y0 = y * (n // gcd)\n    return x0, y0"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    return [element for element in original_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, n + 1) if n % i == 0]\n        return sum(divisors)\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    # If n is 0, return 1 as the smallest power of 2\n    if n == 0:\n        return 1\n\n    # Find the position of the most significant bit in n\n    msb_position = 0\n    while (1 << msb_position) <= n:\n        msb_position += 1\n\n    # The smallest power of 2 greater than or equal to n is 2 raised to the position of the most significant bit\n    return 1 << msb_position"}
{"task_id": "Mbpp/168", "solution": "def frequency(num_list, target):\n    count = 0\n    for num in num_list:\n        if num == target:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(num_list, start_index, end_index):\n    # Check if indices are within the list bounds\n    if start_index < 0 or end_index >= len(num_list) or start_index > end_index:\n        raise ValueError(\"Invalid indices\")\n\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Iterate over the list from start_index to end_index\n    for i in range(start_index, end_index + 1):\n        # Add the current number to the total sum\n        total_sum += num_list[i]\n\n    # Return the total sum\n    return total_sum"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n\n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(s):\n    count = 0\n    start = 0\n    while start < len(s):\n        pos = s.find('std', start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Find the first occurrence of the element in the array\n    first = binary_search(arr, 0, n - 1, element, True)\n\n    # If the element is not present in the array, return False\n    if first == -1:\n        return False\n\n    # Find the last occurrence of the element in the array\n    last = binary_search(arr, 0, n - 1, element, False)\n\n    # If the frequency of the element is more than n/2, return True\n    return (last - first + 1) > n // 2\n\ndef binary_search(arr, low, high, element, find_first):\n    result = -1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == element:\n            result = mid\n            if find_first:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n\n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n\n    return min_val"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n\n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n\n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n\n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n\n    # Return the first n elements\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    # Formula for lateral surface area of a cylinder: 2 * pi * radius * height\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the cube.\n\n    Returns:\n    int or float: The volume of the cube.\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set to 1 and odd bits set to 0\n    mask = 0xAAAAAAAA\n    # Use bitwise OR operation to set all even bits of the number\n    result = n | mask\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for t in tuples_list:\n        # Sort the tuple to ensure that (a, b) and (b, a) are treated as the same\n        sorted_t = tuple(sorted(t))\n        if sorted_t in occurrences:\n            occurrences[sorted_t] += 1\n        else:\n            occurrences[sorted_t] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    # An INTJ programmer would use a mathematical formula to calculate the number of substrings\n    # The formula is n*(n+1)/2, where n is the length of the string\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D array to store the number of sequences\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # There is 1 sequence of length 1 for each number from 1 to m\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    # Fill the dp array using bottom-up approach\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # For each number j, count the number of sequences of length i-1\n            # that end with a number less than or equal to j//2\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n\n    # The total number of sequences of length n is the sum of dp[n][i] for i from 1 to m\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    count = 0\n    for char in input_string:\n        count += 1\n    return count\n\n# Test the function\nprint(count_charac(\"python programming\"))  # Expected output: 18\nprint(count_charac(\"language\"))  # Expected output: 8\nprint(count_charac(\"words\"))  # Expected output: 5"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill the inc array\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[j] for j in range(i) if arr[j] < arr[i]) + arr[i]\n\n    # Fill the dec array\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[j] for j in range(i, n) if arr[j] < arr[i]) + arr[i]\n\n    # Find the maximum sum of bitonic subsequence\n    max_bitonic = 0\n    for i in range(n):\n        max_bitonic = max(max_bitonic, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequences of substrings.\n    # Initialize all values as 0\n    dp = [[0 for x in range(n)] for x in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are useless and not filled in the process.\n    # The gap between start and end indexes\n    for gap in range(2, n+1):\n        # Fix the starting index\n        for i in range(n - gap + 1):\n            # Get the ending index of substring from starting index i and length gap\n            j = i + gap - 1\n\n            # If there are only 2 characters and both are same\n            if s[i] == s[j] and gap == 2:\n                dp[i][j] = 2\n            # If there are more than two characters, and first and last characters are same\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            # If first and last characters are not same\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert the arrays to sets\n    set1 = set(arr1)\n    set2 = set(arr2)\n\n    # Find the intersection of the two sets\n    intersection = set1 & set2\n\n    # Convert the intersection set back to a list\n    result = list(intersection)\n\n    return result"}
{"task_id": "Mbpp/250", "solution": "def count_X(input_tuple, element):\n    \"\"\"\n    This function takes in a tuple and an element, and returns the count of occurrences of the element in the tuple.\n\n    Parameters:\n    input_tuple (tuple): The input tuple.\n    element: The element to count occurrences of.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    # Initialize a counter\n    count = 0\n\n    # Iterate over the tuple\n    for item in input_tuple:\n        # If the current item is equal to the element, increment the counter\n        if item == element:\n            count += 1\n\n    # Return the counter\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_num):\n    # Calculate the magnitude (r) and phase angle (theta)\n    r = abs(complex_num)\n    theta = cmath.phase(complex_num)\n\n    # Return the polar coordinates as a tuple\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    if n == 0:\n        return [()]\n\n    combinations = []\n    for i in range(len(colors)):\n        for combination in combinations_colors(colors, n - 1):\n            combinations.append((colors[i],) + combination)\n\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    # Step 1: Understand the Problem\n    # A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    # The task is to count the number of prime numbers less than the given non-negative number.\n\n    # Step 2: Research Efficient Algorithms\n    # An efficient algorithm for finding prime numbers is the Sieve of Eratosthenes.\n\n    # Step 3: Plan the Implementation\n    # 1. Create a boolean array \"prime[0..n]\" and initialize all entries as true.\n    # 2. A value in prime[i] will finally be false if i is Not a prime, else true.\n    # 3. Iterate through the numbers up to the square root of n.\n    # 4. If prime[i] is not changed, then it is a prime.\n\n    # Step 4: Write and Test the Code\n    prime = [True for i in range(n)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of prime numbers\n    prime_count = 0\n    for p in range(2, n):\n        if prime[p]:\n            prime_count += 1\n\n    return prime_count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n\n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Zip the two tuples together\n    zipped_tuples = zip(tuple1, tuple2)\n\n    # For each pair of tuples, take the maximum of each element\n    maximized_tuples = [(max(a, b), max(c, d)) for (a, c), (b, d) in zipped_tuples]\n\n    # Return the maximized tuples as a tuple\n    return tuple(maximized_tuples)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_prime(num):\n        return is_prime(num) and is_prime((num - 1) // 2)\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Check if the tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate over the elements of the tuples\n    for i in range(len(tuple1)):\n        # Check for division by zero\n        if tuple2[i] == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n\n        # Perform the division and append the result to the list\n        result.append(tuple1[i] // tuple2[i])\n\n    # Convert the list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Check if L is within the valid range\n    if L < 0 or L > len(lst):\n        raise ValueError(\"L must be a non-negative integer less than or equal to the length of the list\")\n\n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return int(dog_years)\n\n# Test cases\nprint(dog_age(12))  # Output: 61\nprint(dog_age(15))  # Output: 73\nprint(dog_age(24))  # Output: 109"}
{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    return [input_list[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Initialize the first star number\n    star_num = 6\n    # Initialize the increment between star numbers\n    increment = 4\n\n    # Calculate the n'th star number\n    for _ in range(2, n + 1):\n        star_num += increment\n        increment += 2\n\n    return star_num"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n\n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n\n    Returns:\n    int: ASCII value of the character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n\n    # Return the ASCII value using the ord() function\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n    Parameters:\n    tuples_list (list): A list of tuples.\n\n    Returns:\n    list: A list containing the rear element of each tuple.\n    \"\"\"\n    # Using list comprehension to extract the last element of each tuple\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum\n    sum_coeff = 0\n\n    # Calculate the binomial coefficients\n    for i in range(n + 1):\n        # If the index is even, add the binomial coefficient to the sum\n        if i % 2 == 0:\n            sum_coeff += binomial_coefficient(n, i)\n\n    return sum_coeff\n\n# Helper function to calculate binomial coefficient\ndef binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    # The formula for the volume of a cylinder is \u03c0r\u00b2h\n    volume = math.pi * radius ** 2 * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n\n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n\n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n\n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum sum of a subarray in the given array\n    def max_sub_array_sum(a):\n        max_so_far = a[0]\n        curr_max = a[0]\n\n        for i in range(1, len(a)):\n            curr_max = max(a[i], curr_max + a[i])\n            max_so_far = max(max_so_far, curr_max)\n\n        return max_so_far\n\n    # Calculate the total sum of the given array\n    total_sum = sum(arr)\n\n    # If the total sum is negative, it means that the maximum sum of a subarray\n    # is the maximum element in the array\n    if total_sum < 0:\n        return max(arr)\n\n    # If k is 1, it means that we don't need to repeat the array, so we can\n    # use the Kadane's algorithm directly\n    if k == 1:\n        return max_sub_array_sum(arr)\n\n    # If the total sum is positive and k is greater than 1, it means that the\n    # maximum sum of a subarray is the total sum of the array repeated k times\n    # plus the maximum sum of a subarray that doesn't include the first and\n    # the last elements of the array\n    return total_sum * (k - 2) + max_sub_array_sum(arr[:-1]) + max_sub_array_sum(arr[1:])"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n\n    max_len = 0\n    max_list = []\n\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    This function takes two numbers as input, the dividend and the divisor,\n    and returns the quotient of the division, rounded down to the nearest integer.\n    \"\"\"\n    # Check if divisor is zero to avoid division by zero error\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n\n    # Calculate the quotient and round down to the nearest integer\n    quotient = dividend // divisor\n\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out the integers from the list\n    int_lst = [i for i in lst if isinstance(i, int)]\n\n    # If there are no integers in the list, return None\n    if not int_lst:\n        return None\n\n    # Return the maximum value among the integers\n    return max(int_lst)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n\n    # Iterate through all possible divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    # Create a dictionary to store the aggregated values\n    aggregate_dict = {}\n\n    # Iterate over the list of tuples\n    for name, value in tuples_list:\n        # If the name is already in the dictionary, add the value to the existing aggregate\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        # If the name is not in the dictionary, add it with the current value\n        else:\n            aggregate_dict[name] = value\n\n    # Find the name with the maximum aggregate value\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n\n    # Return the name and the maximum aggregate value as a tuple\n    return (max_name, aggregate_dict[max_name])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0 for _ in range(2 * n + 1)] for _ in range(n + 1)]\n\n    # Base case: when n is 0, there is only one sequence (an empty sequence)\n    dp[0][0] = 1\n\n    # Iterate over the length of the sequence\n    for i in range(1, n + 1):\n        # Iterate over the possible sums of the first n bits\n        for j in range(0, 2 * n + 1):\n            # If the current bit is 0, the sum remains the same\n            if j - 1 >= 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            # If the current bit is 1, the sum increases by 1\n            if j + 1 <= 2 * n:\n                dp[i][j] += dp[i - 1][j + 1]\n\n    # The count of binary sequences with equal sums in the first and last n bits\n    # is the number of sequences with a sum of n\n    return dp[n][n]"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary, depth=1):\n    if not isinstance(dictionary, dict) or not dictionary:\n        return depth\n    return max(dict_depth(v, depth + 1) for k, v in dictionary.items())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = [word for word in words if word.startswith('P') or word.startswith('p')]\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for l in range(0, j):\n            if arr[l] < arr[j] and dp[l] + arr[j] > dp[j]:\n                dp[j] = dp[l] + arr[j]\n\n    max_sum = dp[i] + arr[k]\n    for j in range(i+1, k):\n        if arr[j] > arr[i] and dp[j] + arr[k] > max_sum:\n            max_sum = dp[j] + arr[k]\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Sort the lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Initialize an empty list to store the products\n    products = []\n\n    # Iterate over the first n elements of both lists\n    for i in range(n):\n        # Multiply the ith element of list1 with the ith element of list2\n        # and append the result to the products list\n        products.append(list1[i] * list2[i])\n\n    # Return the products list\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n\n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n\n    # Set the left-most unset bit\n    n |= (1 << position)\n\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while (2 ** power <= n):\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n\n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n\n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    return [{key: {values1[i]: values2[i]}} for i, key in enumerate(keys)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Initialize a list to store the maximum sum for each number\n    dp = [0] * (n + 1)\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the maximum sum for the current number\n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4] + dp[i // 5], i)\n\n    # Return the maximum sum for n\n    return dp[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n\n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) > 0 and s[0] == s[-1]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        if isinstance(num, int):\n            num = abs(num)  # handle negative numbers\n            while num > 0:\n                total_sum += num % 10\n                num //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    # Convert the list to a set of tuples to remove duplicates\n    unique_tuples = set(lst)\n\n    # Return the number of unique tuples\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    \"\"\"\n    This function checks whether an element exists within a tuple.\n\n    Parameters:\n    tup (tuple): The tuple to check.\n    element: The element to search for.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    # INTJs prefer logical and objective analysis to make decisions\n    # In this case, we use the modulo operator to check if the number is odd\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Generate all permutations of the digits\n    perms = permutations(digits)\n\n    # Convert the permutations back to numbers and sort them\n    numbers = sorted(int(''.join(p)) for p in perms)\n\n    # Find the next bigger number\n    for num in numbers:\n        if num > n:\n            return num\n\n    # If no next bigger number is found, return None\n    return None"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = float('inf')\n    for item in lst:\n        if isinstance(item, int):\n            min_value = min(min_value, item)\n    return min_value if min_value != float('inf') else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    containing only the even numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n\n    # Iterate over each number in the input list\n    for number in numbers:\n        # Check if the number is even\n        if number % 2 == 0:\n            # If the number is even, append it to the list of even numbers\n            even_numbers.append(number)\n\n    # Return the list of even numbers\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n\n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n\n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    This function takes a tuple and a delimiter as input, and returns a string\n    that is the concatenation of all the elements in the tuple, separated by the delimiter.\n    \"\"\"\n    # Convert each element of the tuple to a string\n    str_elements = [str(elem) for elem in tup]\n\n    # Join the strings with the delimiter\n    result = delimiter.join(str_elements)\n\n    return result"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    # Initialize an empty list to store the last characters\n    last_chars = []\n\n    # Iterate over each string in the tuple\n    for string in tuple_of_strings:\n        # Extract the last character and append it to the list\n        last_chars.append(string[-1])\n\n    # Return the list of last characters\n    return last_chars"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    This function takes a list of sublists and an element as input.\n    It returns the count of sublists that contain the given element.\n\n    :param lst: A list of sublists\n    :param element: The element to search for in the sublists\n    :return: The count of sublists that contain the given element\n    \"\"\"\n    # Initialize a counter\n    count = 0\n\n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # If the element is in the sublist, increment the counter\n        if element in sublist:\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    # Split the date string into year, month, and day\n    year, month, day = date.split('-')\n\n    # Reorder the year, month, and day to dd-mm-yyyy format\n    new_date = '-'.join([day, month, year])\n\n    return new_date\n\n# Test the function\nprint(change_date_format(\"2026-01-02\"))  # Output: '02-01-2026'\nprint(change_date_format(\"2020-11-13\"))  # Output: '13-11-2020'\nprint(change_date_format(\"2021-04-26\"))  # Output: '26-04-2021'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of equal length and returns a new tuple\n    containing the elementwise AND of the input tuples.\n\n    Args:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the elementwise AND of the input tuples.\n    \"\"\"\n    # Check that the input tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Use a list comprehension to compute the elementwise AND of the input tuples\n    result = [x & y for x, y in zip(tuple1, tuple2)]\n\n    # Convert the result to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    \"\"\"\n    Calculate the directrix of a parabola given its parameters.\n\n    Parameters:\n    a (float): The coefficient of the quadratic term in the equation of the parabola.\n    h (float): The x-coordinate of the vertex of the parabola.\n    k (float): The y-coordinate of the vertex of the parabola.\n\n    Returns:\n    float: The x-coordinate of the directrix of the parabola.\n    \"\"\"\n    # The directrix of a parabola is given by the equation x = -p, where p is the distance from the vertex to the focus\n    p = 1 / (4 * a)\n    # The x-coordinate of the directrix is the x-coordinate of the vertex minus p\n    directrix = h - p\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is any intersection between the sets\n    if set1 & set2:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # The median length is the middle side\n    return sides[1]"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    # Initialize an empty list to store negative numbers\n    negative_numbers = []\n\n    # Iterate through the list of numbers\n    for num in numbers:\n        # If the number is negative, add it to the list\n        if num < 0:\n            negative_numbers.append(num)\n\n    # Return the list of negative numbers\n    return negative_numbers"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    # Create a set to store unique bidirectional pairs\n    bidirectional_pairs = set()\n\n    # Iterate through the list of tuples\n    for t in tuples:\n        # Add the tuple and its reverse to the set\n        bidirectional_pairs.add(tuple(sorted(t)))\n\n    # Return the size of the set, which is the count of unique bidirectional pairs\n    return len(bidirectional_pairs)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    result = ''\n    for num in lst:\n        result += str(num)\n    return int(result)"}
{"task_id": "Mbpp/440", "solution": "import nltk\nfrom nltk.corpus import wordnet\n\ndef find_adverb_position(sentence):\n    # Tokenize the sentence into words\n    words = nltk.word_tokenize(sentence)\n\n    # Get the part of speech tags for each word\n    pos_tags = nltk.pos_tag(words)\n\n    # Iterate through the words and their tags\n    for i, (word, tag) in enumerate(pos_tags):\n        # Check if the word is an adverb (RB in the Penn Treebank tag set)\n        if tag.startswith('RB'):\n            # Get the synset for the word\n            synset = wordnet.synsets(word)\n\n            # Check if the synset exists and if it's an adverb\n            if synset and synset[0].pos() == 'r':\n                # Return the index, end index, and the word\n                return i, i + len(word), word\n\n    # If no adverb is found, return None\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 3)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((x * y for x, y in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list\n    where each element is the cube of the corresponding element in the input list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list where each element is the cube of the corresponding element in the input list.\n    \"\"\"\n    # Initialize an empty list to store the cubes\n    cubes = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Calculate the cube of the number and append it to the cubes list\n        cubes.append(num ** 3)\n\n    # Return the cubes list\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n\n    # Calculate the remaining Perrin numbers\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n\n    # Return the sum of the first n Perrin numbers\n    return sum(perrin[:n])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of string values.\n\n    Args:\n    string_list (list): A list of strings.\n    size (int): The size of the strings to extract.\n\n    Returns:\n    list: A list of strings that have the specified size.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Iterate over each string in the input list\n    for string in string_list:\n        # If the length of the string is equal to the specified size,\n        # add it to the list of extracted strings\n        if len(string) == size:\n            extracted_strings.append(string)\n\n    # Return the list of extracted strings\n    return extracted_strings"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize the sum of even factors\n    sum_even_factors = 0\n\n    # Loop through all numbers up to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to the sum of even factors\n                sum_even_factors += i\n\n    # Return the sum of even factors\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    # INTJs prefer to break down problems and consider different approaches\n    # In this case, we'll use a simple approach: check if 'z' is in the text\n    return 'z' in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # ISTJ programmer would be detail-oriented and realistic\n    # They would consider the specific requirements of the function\n    # In this case, the months with 31 days are 1, 3, 5, 7, 8, 10, and 12\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(input_list):\n    reversed_list = []\n    for string in input_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            while i < len(s) and s[i].isupper():\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    # Initialize an empty list to store the first elements\n    first_elements = []\n\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the result list\n        first_elements.append(sublist[0])\n\n    # Return the list of first elements\n    return first_elements"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    # Base case: if the list is empty, return a list containing an empty list\n    if len(lst) == 0:\n        return [[]]\n\n    # Recursive case:\n    # 1. Get the first element of the list\n    # 2. Get all combinations of the rest of the list\n    # 3. For each combination, create a new combination that includes the first element\n    # 4. Combine the combinations from steps 2 and 3 and return the result\n    first_element = lst[0]\n    rest_of_list = lst[1:]\n    combinations_without_first = combinations_list(rest_of_list)\n    combinations_with_first = [ [first_element] + combination for combination in combinations_without_first ]\n    return combinations_without_first + combinations_with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    max_prod = dp[0]\n\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]*arr[i])\n        max_prod = max(max_prod, dp[i])\n\n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    # Create an empty list to store the results\n    result = []\n\n    # Iterate over the tuple up to the second-to-last element\n    for i in range(len(t) - 1):\n        # Add the current element and the next element, and append the result to the list\n        result.append(t[i] + t[i + 1])\n\n    # Convert the list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Convert the tuples to sets to remove duplicates and enable intersection operation\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n\n    # Find the intersection of the sets\n    intersection = set1 & set2\n\n    # Convert the sets back to tuples\n    intersection = {tuple(sorted(t)) for t in intersection}\n\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    # Sort the dictionary by value in descending order\n    sorted_dict = sorted(dictionary.items(), key=lambda item: item[1], reverse=True)\n    return sorted_dict"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Find the smallest and largest values in the array\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    input_string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    # Ensure the number is an integer\n    if not isinstance(number, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Convert the number to a string\n    number_str = str(abs(number))\n\n    # Return the first character of the string, converted back to an integer\n    return int(number_str[0])"}
{"task_id": "Mbpp/554", "solution": "def filter_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n\n    # Find the difference\n    diff = sum_cubes - sum_n\n\n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n\n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    toggled_string = \"\"\n    for char in s:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings to easily iterate over the digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Make sure the numbers have the same number of digits by padding with zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n\n    # Calculate the sum of the per-digit difference\n    total_diff = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_diff += abs(int(digit1) - int(digit2))\n\n    return total_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(0, n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Find the union of the two tuples\n    union = tuple(set(tuple1) | set(tuple2))\n    # Sort the union and return it\n    return tuple(sorted(union))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    # INTJs prefer a structured approach, so we start by initializing a variable to store the maximum length\n    max_length = 0\n\n    # INTJs are logical and objective, so we use a loop to iterate through each sublist in the input list\n    for sublist in lst:\n        # INTJs are good at understanding abstract concepts, so we calculate the length of the current sublist\n        length = len(sublist)\n\n        # INTJs make decisions based on rational analysis, so we compare the length of the current sublist to the maximum length found so far\n        if length > max_length:\n            # If the current sublist is longer than the previous longest sublist, we update the maximum length\n            max_length = length\n\n    # After checking all sublists, we return the maximum length found\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    # Initialize count of pairs\n    count = 0\n\n    # Count the number of unique elements in the list\n    unique_elements = len(set(lst))\n\n    # Calculate the number of possible unordered pairs where both elements are unequal\n    # This is equivalent to the number of combinations of 2 elements from a set of unique_elements\n    count = unique_elements * (unique_elements - 1)\n\n    # Return the count\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through each digit in the number\n    while n > 0:\n        # Add the last digit to the total\n        total += n % 10\n\n        # Remove the last digit from the number\n        n //= 10\n\n    # Return the total sum of digits\n    return total"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    # Iterate through each sublist in the main list\n    for sublist in list_of_lists:\n        # Sort the current sublist\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(numbers):\n    return list(set(numbers))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    if sub_len > main_len:\n        return False\n\n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Check if the lists are of the same length\n    if len(list1) == len(list2) == len(list3):\n        # Initialize an empty list to store the interleaved elements\n        interleaved_list = []\n        # Iterate over the indices of the lists\n        for i in range(len(list1)):\n            # Append the elements from each list to the interleaved list\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        # Return the interleaved list\n        return interleaved_list\n    else:\n        # Raise an error if the lists are not of the same length\n        raise ValueError(\"All lists must be of the same length.\")"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    # Find elements that are in tuple1 but not in tuple2\n    dissimilar1 = tuple(set(tuple1) - set(tuple2))\n\n    # Find elements that are in tuple2 but not in tuple1\n    dissimilar2 = tuple(set(tuple2) - set(tuple1))\n\n    # Combine the dissimilar elements from both tuples\n    dissimilar = dissimilar1 + dissimilar2\n\n    return dissimilar"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n\n    # Calculate the slant height of the lateral faces\n    slant_height = ((base_edge / 2) ** 2 + height ** 2) ** 0.5\n\n    # Calculate the area of one lateral face\n    lateral_face_area = 0.5 * base_edge * slant_height\n\n    # Calculate the total surface area\n    total_surface_area = base_area + 4 * lateral_face_area\n\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n\n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_arr(arr, n):\n    # Check if n is within the valid range\n    if n < 0 or n > len(arr):\n        raise ValueError(\"n is out of range\")\n\n    # Split the list at the nth element\n    first_part = arr[:n]\n    second_part = arr[n:]\n\n    # Add the first part to the end of the list\n    result = second_part + first_part\n\n    return result"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Loop through the range from start to end\n    for i in range(start, end + 1):\n        # Check if the current number is a perfect square\n        if int(i ** 0.5) ** 2 == i:\n            # If it is, append it to the list of squares\n            squares.append(i)\n\n    # Return the list of perfect squares\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real), x"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    # Function to calculate binomial coefficient\n    def binomial_coefficient(n, k):\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res = res * (n - i)\n            res = res // (i + 1)\n        return res\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    sum_product = 0\n    for k in range(n):\n        sum_product += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return sum_product"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        return None\n\n    return first_even - first_odd"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    # Convert binary strings to lists for easier manipulation\n    list1 = list(bin1)\n    list2 = list(bin2)\n\n    # Count the number of 1s and 0s in both lists\n    count1 = list1.count('1')\n    count2 = list2.count('1')\n\n    # If the number of 1s is not equal, it's impossible to convert one to the other\n    if count1 != count2:\n        return None\n\n    # Initialize swap count\n    swaps = 0\n\n    # Iterate over the lists\n    for i in range(len(list1)):\n        # If the current bits are not equal\n        if list1[i] != list2[i]:\n            # Find the index of the next bit that needs to be swapped\n            j = i + 1\n            while list1[j] != list2[i]:\n                j += 1\n\n            # Swap the bits\n            list1[i], list1[j] = list1[j], list1[i]\n\n            # Increment swap count\n            swaps += 1\n\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, len(arr1))\n    j = k - i\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2, j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to find its length\n    num_str = str(num)\n    num_len = len(num_str)\n\n    # Initialize the sum of the digits raised to the power of their length\n    sum_of_digits = 0\n\n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Add the digit raised to the power of its length to the sum\n        sum_of_digits += int(digit) ** num_len\n\n    # Check if the sum is equal to the original number\n    if sum_of_digits == num:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    \"\"\"\n    Return all lucid numbers smaller than or equal to a given integer.\n\n    A lucid number is a number that has no repeated digits and is not divisible by any of its digits.\n    \"\"\"\n    def is_ludic(num):\n        \"\"\"\n        Check if a number is a lucid number.\n        \"\"\"\n        # Convert the number to a string to easily access its digits\n        num_str = str(num)\n\n        # Check if the number has repeated digits\n        if len(num_str) != len(set(num_str)):\n            return False\n\n        # Check if the number is divisible by any of its digits\n        for digit in num_str:\n            if num % int(digit) == 0:\n                return False\n\n        return True\n\n    # Generate all lucid numbers up to n\n    ludic_numbers = [i for i in range(1, n + 1) if is_ludic(i)]\n\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n\n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    reversed_words = words[::-1]\n\n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Calculate the nth Bell number using dynamic programming.\n\n    :param n: The position of the Bell number to calculate.\n    :return: The nth Bell number.\n    \"\"\"\n    # Initialize the Bell triangle with zeros\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    # Calculate the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly fill the first column of each row with the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n\n        # Fill the rest of the columns using the formula: bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # Return the last element of the nth row, which is the nth Bell number\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if k < len(lst):\n        return lst[:k] + lst[k+1:]\n    else:\n        return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Extract the n'th column from the matrix\n    column = [row[n] for row in matrix]\n    # Return the maximum value in the column\n    return max(column)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[sub[i] for sub in lst] for i in range(2)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n\n    return ''.join(letters) + ''.join(numbers)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    # Sort the list\n    nums.sort()\n\n    # Initialize the divisibility graph\n    graph = {i: [] for i in nums}\n\n    # Fill the graph\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] % nums[i] == 0:\n                graph[nums[i]].append(nums[j])\n\n    # Find the largest subset\n    max_subset = 0\n    for node in graph:\n        stack = [node]\n        visited = set()\n        while stack:\n            curr = stack.pop()\n            if curr not in visited:\n                visited.add(curr)\n                stack.extend(graph[curr])\n        max_subset = max(max_subset, len(visited))\n\n    return max_subset"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n\n    while count < size:\n        if list1[i] < list2[j]:\n            m1 = list1[i]\n            i += 1\n        else:\n            m1 = list2[j]\n            j += 1\n        m2 = m1\n        if i < size and list1[i] < list2[j]:\n            m2 = list1[i]\n            i += 1\n        elif j < size:\n            m2 = list2[j]\n            j += 1\n        count += 1\n\n    return (m1 + m2) / 2.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 2 * radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    \"\"\"\n    This function takes a coordinate tuple (x, y) and returns a list of all adjacent coordinates.\n    \"\"\"\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n    input_string (str): The input string to be processed.\n\n    Returns:\n    str: The processed string with whitespaces and underscores replaced as required.\n    \"\"\"\n    if ' ' in input_string:\n        # Replace whitespaces with underscores\n        return input_string.replace(' ', '_')\n    else:\n        # Replace underscores with whitespaces\n        return input_string.replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n\n    Args:\n    num_list (list): A list of integers.\n\n    Returns:\n    list: A list with all zeroes moved to the end.\n    \"\"\"\n    # Initialize an empty list to store non-zero elements\n    non_zero_list = []\n\n    # Initialize a counter for zeroes\n    zero_count = 0\n\n    # Iterate through the input list\n    for num in num_list:\n        # If the number is not zero, append it to the non_zero_list\n        if num != 0:\n            non_zero_list.append(num)\n        # If the number is zero, increment the zero_count\n        else:\n            zero_count += 1\n\n    # Extend the non_zero_list with zeroes\n    non_zero_list.extend([0] * zero_count)\n\n    # Return the modified list\n    return non_zero_list"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(lst, n):\n    # Initialize result\n    result = 0\n\n    # Traverse all bits\n    for i in range(0, 32):\n\n        # Count number of 0's and 1's\n        # in ith bit of all numbers\n        count = 0\n        for j in range(0, n):\n            if (lst[j] & (1 << i)):\n                count += 1\n\n        # Calculate sum of XOR of all pairs\n        # with current bit\n        result += (count * (n - count) * (1 << i))\n\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    # Check if the input values are within the valid range\n    if wind_velocity < 3 or temperature > 10 or temperature < -50:\n        raise ValueError(\"Invalid input values\")\n\n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity**0.16 + 0.3965 * temperature * wind_velocity**0.16\n\n    # Round the result to the next integer and return it\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    # Remove the first and last characters\n    s = s[1:-1]\n    # Check if 'z' is present in the remaining string\n    return 'z' in s"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0.0]*n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    # Initialize first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n\n    # Initialize first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    # Fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    # Compute the maximum average\n    max_avg = dp[n-1][n-1] / (2*n - 1)\n\n    return max_avg"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test cases\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])) # Expected output: 4\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])) # Expected output: 4\nprint(count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])) # Expected output: 11\nprint(count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])) # Expected output: 1\nprint(count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])) # Expected output: 3"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n\n    # Initialize the sum of digits\n    sum_of_digits = 0\n\n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area using the formula: \u03c0rl\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Replace spaces, commas, and dots with a colon\n    output_string = input_string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return output_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    # Iterate through all possible sublists\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Get the number of bits in the number\n    num_bits = len(bin(n)) - 2\n\n    # Create a mask with all bits set to 1 except the first and the last bit\n    mask = (1 << num_bits) - 2\n\n    # Toggle the bits of the number using the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s: str) -> bool:\n    # Define a regular expression pattern for vowels at the start of a string\n    pattern = r'^[aeiouAEIOU]'\n\n    # Use the re.match() function to check if the string matches the pattern\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # INTJs are logical and analytical, so they start by defining a function to calculate the number of digits in a number\n    def count_digits(num):\n        return len(str(num))\n\n    # INTJs are goal-oriented and driven, so they set a target for the number of digits\n    target_digits = n\n\n    # INTJs are organized and decisive, so they start with a low index and increment it until they find the smallest triangular number with the target number of digits\n    index = 1\n    while True:\n        # The formula for the nth triangular number is n*(n+1)/2\n        triangular_number = index * (index + 1) // 2\n\n        # If the triangular number has the target number of digits, return the index\n        if count_digits(triangular_number) == target_digits:\n            return index\n\n        # If not, increment the index and continue the search\n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(input_tuple):\n    \"\"\"\n    Convert a tuple to a dictionary using adjacent elements.\n\n    Parameters:\n    input_tuple (tuple): A tuple containing an even number of elements.\n\n    Returns:\n    dict: A dictionary where keys are the elements at even indices in the input tuple,\n          and values are the elements at the next odd indices.\n    \"\"\"\n    # Check if the input tuple has an even number of elements\n    if len(input_tuple) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even number of elements\")\n\n    # Initialize an empty dictionary\n    result_dict = {}\n\n    # Iterate over the input tuple in steps of 2\n    for i in range(0, len(input_tuple), 2):\n        # Add each pair of elements as a key-value pair in the dictionary\n        result_dict[input_tuple[i]] = input_tuple[i + 1]\n\n    return result_dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return (math.sqrt(3) * edge_length ** 2) / 4"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a list to the right by n places.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    n (int): The number of places to rotate the list to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    # Ensure n is within the range of the list length\n    n = n % len(lst)\n\n    # Split the list into two parts at the (len(lst) - n)th index\n    # Then, concatenate the two parts in reverse order to achieve the rotation\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    \"\"\"\n    This function checks if the given tuple has any None value or not.\n    \"\"\"\n    for value in input_tuple:\n        if value is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits if d != 0):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i != 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_list):\n    return sorted(num_list, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    # Convert the tuple to a list\n    tpl_list = list(tpl)\n\n    # Extend the list with the tuple's elements\n    lst.extend(tpl_list)\n\n    # Return the modified list\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n\n    # Start from the first non-leaf node\n    for i in range(n // 2 - 1, -1, -1):\n        # If the parent node is greater than its child node, return False\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n\n    # If no violation is found, return True\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    # Initialize the first two Jacobsthal numbers\n    jacobsthal_nums = [0, 1]\n\n    # Calculate the nth Jacobsthal number\n    for i in range(2, n + 1):\n        jacobsthal_nums.append(jacobsthal_nums[i - 1] + 2 * jacobsthal_nums[i - 2])\n\n    return jacobsthal_nums[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n\n    # Return the first k records\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    # Create a dictionary to store the reverse of each string and its count\n    reverse_dict = {}\n    count = 0\n\n    # Iterate over each string in the list\n    for string in strings:\n        # Reverse the string\n        reversed_string = string[::-1]\n\n        # If the reversed string is already in the dictionary, increment the count\n        if reversed_string in reverse_dict:\n            count += reverse_dict[reversed_string]\n\n        # Add the string to the dictionary with a count of 1\n        reverse_dict[string] = reverse_dict.get(string, 0) + 1\n\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        # Try to convert the string to a float\n        num = float(s)\n\n        # Check if the number has exactly 2 decimal places\n        if '{:.2f}'.format(num) == s:\n            return True\n        else:\n            return False\n    except ValueError:\n        # If the conversion to float raises a ValueError, the string is not a decimal number\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference as a large number\n    min_diff = float('inf')\n\n    # Iterate through the sorted array\n    for i in range(1, n):\n        # Update minimum difference if current difference is smaller\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n\n    # Return the minimum difference\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Initialize a list to store polite numbers\n    polite_numbers = [0]\n\n    # Initialize a variable to keep track of the current number\n    current_number = 1\n\n    # Loop until we have found the nth polite number\n    while len(polite_numbers) < n:\n        # Check if the current number is polite\n        if all(current_number % i != 0 for i in range(2, int(current_number ** 0.5) + 1)):\n            # If the current number is polite, add it to the list\n            polite_numbers.append(current_number)\n        # Move on to the next number\n        current_number += 1\n\n    # Return the nth polite number\n    return polite_numbers[n - 1]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    # Create a dictionary to store the frequency of each number\n    frequency = {}\n    for num in numbers:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    # Initialize the count of pairs\n    count = 0\n\n    # Iterate through the numbers\n    for num in numbers:\n        # Calculate the complement needed to reach the target sum\n        complement = target_sum - num\n\n        # If the complement is in the frequency dictionary, add its frequency to the count\n        if complement in frequency:\n            count += frequency[complement]\n\n            # If the number and the complement are the same, subtract 1 from the count to avoid double-counting\n            if num == complement:\n                count -= 1\n\n    # Divide the count by 2 since each pair is counted twice\n    return count // 2"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    sum_of_powers = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Calculate the fourth power of the number and add it to the sum\n        sum_of_powers += i ** 4\n\n    # Return the final sum\n    return sum_of_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = ['{', '(', '[']\n    closing = ['}', ')', ']']\n    pairs = {'}': '{', ')': '(', ']': '['}\n\n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != pairs[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n\n    # Filter out the words with length k\n    filtered_words = [word for word in words if len(word) != k]\n\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n\n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    index = main_string.find(sub_string)\n    if index != -1:\n        return sub_string, index, index + len(sub_string)\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = []\n    current_sublist = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n\n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    def helper(tuples, target, start, path, result):\n        if target == 0 and len(path) > 1:\n            result.append(tuple(sorted(path)))\n            return\n        if target < 0 or start == len(tuples):\n            return\n        for i in range(start, len(tuples)):\n            for num in tuples[i]:\n                helper(tuples, target - num, i + 1, path + [num], result)\n\n    result = []\n    for r in range(2, len(tuples) + 1):\n        for subset in combinations(tuples, r):\n            target = sum(map(sum, subset))\n            helper(subset, target, 0, [], result)\n    return list(set(result))"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n\n    for i in range(n):\n        total += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n\n    return total"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff / max_val) * 100\n\n    v = max_val * 100\n\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if even is None and num % 2 == 0:\n            even = num\n        elif odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses from the string\n    tuple_str = tuple_str[1:-1]\n\n    # Split the string into a list of strings\n    str_list = tuple_str.split(', ')\n\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    pattern = re.compile(r'abbb')\n    match = pattern.search(s)\n    return match is not None"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the count of the number of lists in it.\n    \"\"\"\n    # Initialize a counter\n    count = 0\n\n    # Iterate over each element in the input list\n    for element in lst:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # If it is, increment the counter\n            count += 1\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # In Python, the number is not explicitly 32-bit.\n    # But we can use a bitmask to simulate a 32-bit number.\n    bitmask = 0xFFFFFFFF\n    n = n & bitmask\n\n    # In Python, the left shift operator '<<' is used to rotate bits to the left.\n    # But we need to consider the overflow.\n    # So, we use the bitmask to ensure that the number remains 32-bit.\n    return ((n << d) | (n >> (32 - d))) & bitmask"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers.\n    \"\"\"\n    # If all numbers are equal, return 3\n    if a == b == c:\n        return 3\n    # If two numbers are equal, return 2\n    elif a == b or a == c or b == c:\n        return 2\n    # If no numbers are equal, return 0\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None  # In case there are no odd numbers in the list"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(i < j for i, j in zip(tuple1, tuple2))"}
