{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor = num1 ^ num2\n    return (xor & (xor - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if all(s[j] == s[(j + i) % n] for j in range(n)):\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(input_str, char_to_remove):\n    # Remove first occurrence\n    input_str = input_str.replace(char_to_remove, '', 1)\n\n    # Reverse the string and remove the first occurrence of the character\n    input_str = input_str[::-1].replace(char_to_remove, '', 1)[::-1]\n\n    return input_str"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    # Calculate the area of the base triangle\n    base_area = 0.5 * base * height\n\n    # Calculate the volume of the triangular prism\n    volume = base_area * length\n\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    import re\n    pattern = \"^[a-z]+(_[a-z]+)*$\"\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(char for char in s1 if char not in s2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    n = 0\n    while True:\n        woodall_num = (n * (2 ** n)) + 1\n        if woodall_num == num:\n            return True\n        elif woodall_num > num:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    # Convert each integer to a string\n    nums = [str(num) for num in nums]\n\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n\n    # Join the list elements into a string and convert it back to an integer\n    max_num = int(''.join(nums))\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(num1, num2):\n    return (num1 < 0) != (num2 < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    return max(y - x for x, y in tuples)"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) == list:\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\ndef partition_bell_numbers(n):\n    bell = [bell_number(i) for i in range(n+1)]\n    part = [[0 for i in range(n+1)] for j in range(n+1)]\n    part[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if bell[j] <= i:\n                part[i][j] = part[i-bell[j]][max(j-1, 0)] + part[i][j-1]\n            else:\n                part[i][j] = part[i][j-1]\n\n    return part[n][n]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    direction = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if direction == 0:\n            direction = arr[i] - arr[i - 1]\n            if direction != 0:\n                break\n        elif (arr[i] - arr[i - 1]) * direction < 0:\n            return False\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    sublst_len = len(sublst)\n    for i in range(len(lst) - sublst_len + 1):\n        if lst[i:i+sublst_len] == sublst:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t) != length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(input_list):\n    gap = len(input_list)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(input_list) - gap):\n            j = i + gap\n            if input_list[i] > input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n                swapped = True\n\n    return input_list"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = math.sqrt(n + i * i)\n        if j == int(j):\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        pattern_dict = {}\n        for i in range(len(list1)):\n            if list1[i] not in pattern_dict:\n                pattern_dict[list1[i]] = list2[i]\n            elif pattern_dict[list1[i]] != list2[i]:\n                return False\n        return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for t in tuples_list:\n        if all(i % k == 0 for i in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    # Calculate the sum of the digits at even and odd positions separately\n    even_sum = sum(int(digit) for i, digit in enumerate(str(n)) if i % 2 == 0)\n    odd_sum = sum(int(digit) for i, digit in enumerate(str(n)) if i % 2 != 0)\n\n    # If the difference between the two sums is divisible by 11, then the number is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * math.pow(radius, 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    ascii_sum = sum(ord(c) - ord('a') for c in s)\n    return chr((ascii_sum % 26) + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    seq = [1, 1]\n    while len(seq) < n:\n        next_num = seq[-1]\n        count = 0\n        for i in range(len(seq) - 1, -1, -1):\n            if seq[i] == next_num:\n                next_num = len(seq) - i\n                break\n            count += 1\n        seq.extend([next_num] * count)\n    return seq[n - 1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 6 * (n * (n - 1)) // 2 + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    n = str(n)\n    for i in range(len(n) - 2):\n        if n[i] == n[i+1] or n[i+1] == n[i+2]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lists):\n    return min(len(lst) for lst in lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    frequency = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(num_list):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    while True:\n        n -= 1\n        if str(n) == str(n)[::-1]:\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    elif n > 0 and m >= 0:\n        return (2*m - n) * eulerian_num(n-1, m-1) + (n + 1) * eulerian_num(n-1, m)\n    else:\n        return 0"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return bool_list.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    # Convert binary string to list of integers\n    binary_list = [int(i) for i in binary_string]\n\n    # Initialize count of odd numbers\n    odd_count = sum(binary_list)\n\n    # Initialize count of rotations\n    rotation_count = 0\n\n    # Rotate the list and count odd numbers\n    while rotation_count < rotations:\n        # Rotate the list\n        binary_list = binary_list[-1:] + binary_list[:-1]\n\n        # Count odd numbers\n        odd_count = min(odd_count, sum(binary_list))\n\n        # Increment rotation count\n        rotation_count += 1\n\n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lists):\n    # Convert the first list to a set\n    common_elements = set(lists[0])\n\n    # Iterate over the rest of the lists\n    for lst in lists[1:]:\n        # Update the common_elements set with the intersection of the current set and the current list\n        common_elements.intersection_update(lst)\n\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    if s.strip().isdigit():\n        return True\n    elif s.startswith('-') or s.startswith('+'):\n        return s[1:].isdigit()\n    else:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(input_tuple):\n    return int(''.join(map(str, input_tuple)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(i) for i in sub) for sub in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    return max(abs(a*b) for a, b in tuples)"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    def is_amicable(num):\n        sum_num = sum_divisors(num)\n        return sum_divisors(sum_num) == num and sum_num != num\n\n    return sum(i for i in range(1, n+1) if is_amicable(i))"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    count = 0\n    max_diff = 0\n    for bit in binary_string:\n        if bit == '1':\n            count -= 1\n        else:\n            count += 1\n        max_diff = max(max_diff, abs(count))\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    common_divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    word_list = words.split()\n    return [word for word in word_list if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check rows\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != magic_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_freq = max(count_dict.values())\n    max_freq_items = [k for k, v in count_dict.items() if v == max_freq]\n    return max_freq_items[0] if max_freq_items else None"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n:\n        if n & 1 == 1:\n            return True\n        n >>= 1\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    return set(item for sublist in list_of_lists for item in sublist)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    for i in range(len(arr), 1, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            flip(max_idx)\n            flip(i - 1)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(input_tuple):\n    count = 0\n    for i in input_tuple:\n        if isinstance(i, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def gcd_extended(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n\n    x = x * (n // gcd)\n    y = y * (n // gcd)\n\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n\n    return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(0, n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, n // 2 + 1) if n % i == 0]\n        return sum(divisors) + n\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == alphabet[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** ((n - 1).bit_length())"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    return sum(numbers[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(input_tuple):\n    return all(isinstance(i, type(input_tuple[0])) for i in input_tuple)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    if count > n // 2:\n        return True\n    return False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, min(b, c))"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    # Return the first n elements\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Create a mask with all even bits set\n    mask = 0xAAAAAAAA\n\n    # Perform bitwise OR operation with the mask\n    result = n | mask\n\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(lst):\n    occurrences = {}\n    for tup in lst:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D array to store the number of sequences\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # There is 1 sequence of length 1 for each number from 1 to m\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    # Fill the dp array in bottom-up manner\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # For each number j, find the number of sequences of length i\n            # that end with j\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n\n    # The total number of sequences of length n is the sum of dp[n][i] for i from 1 to m\n    total_sequences = sum(dp[n])\n\n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    next_n = int(n**0.5) + 1\n    return next_n * next_n"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [0 for _ in range(n)]\n    dec = [0 for _ in range(n)]\n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n\n    max_bitonic = inc[0] + dec[0] - arr[0]\n\n    for i in range(1, n):\n        max_bitonic = max(max_bitonic, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n\n    # Create a table to store lengths of longest palindromic subsequence of substrings\n    dp = [[0 for x in range(n)] for x in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are useless and not filled in the process.\n    # The two for loops fill the table in a manner similar to Matrix Chain Multiplication DP solution\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert_to_polar(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return r, theta"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    return list(product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return sum(sieve[2:])"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(sorted(zip(tuple1, tuple2), key=lambda x: max(x), reverse=True))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_shanks_williams_prime(num):\n        return is_prime(num) and is_prime((num - 1) // 2)\n\n    def newman_shanks_williams_primes():\n        yield 2\n        yield 3\n        num = 5\n        while True:\n            if is_newman_shanks_williams_prime(num):\n                yield num\n            num += 2\n\n    count = 0\n    for prime in newman_shanks_williams_primes():\n        count += 1\n        if count == n:\n            return prime"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years < 0:\n        return \"Age cannot be negative\"\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length * side_length"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    return sum([(2*i + 1)**2 for i in range(n)])"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_power_sum(n):\n    return sum((2*i)**5 for i in range(1, n+1))"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    C = [[0 for x in range(n+1)] for x in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(min(i, n-i)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += C[n][i]\n\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {k: v for k, v in dictionary.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup, element):\n    return tup.index(element)"}
{"task_id": "Mbpp/279", "solution": "def nth_decagonal_number(n):\n    return (7 * n * n) - (5 * n) + 2"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    # Convert the integer to a string to easily iterate over its digits\n    n_str = str(n)\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate over the digits in the string\n    for digit in n_str:\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency\n        else:\n            freq[digit] += 1\n\n    # Iterate over the digits and their frequencies\n    for digit, count in freq.items():\n        # If the frequency of a digit is greater than the digit itself, return False\n        if count > int(digit):\n            return False\n\n    # If we've checked all the digits and haven't returned False, return True\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, elem):\n    return all(i == elem for i in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the sum of the array\n    arr_sum = sum(arr)\n\n    # If the sum is negative, return 0 as the maximum sum\n    if arr_sum < 0:\n        return 0\n\n    # If k is 1, find the maximum subarray sum in the array\n    if k == 1:\n        max_so_far = arr[0]\n        curr_max = arr[0]\n\n        for i in range(1, n):\n            curr_max = max(arr[i], curr_max + arr[i])\n            max_so_far = max(max_so_far, curr_max)\n\n        return max_so_far\n\n    # If k is greater than 1, the maximum sum is the sum of the array\n    return arr_sum * k"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    sum = 0\n    for i in range(2, 2*n + 1, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for i in lst:\n        if type(i) == int or type(i) == float:\n            if max_value is None or i > max_value:\n                max_value = i\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/296", "solution": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left, inv_left = merge_sort(arr[:mid])\n    right, inv_right = merge_sort(arr[mid:])\n\n    merged, inv_merge = merge(left, right)\n\n    return merged, inv_left + inv_right + inv_merge\n\ndef merge(left, right):\n    merged = []\n    inv_count = 0\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n\n    return merged, inv_count\n\ndef get_Inv_Count(arr):\n    _, inv_count = merge_sort(arr)\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    aggregate = {}\n    for name, value in lst:\n        if name in aggregate:\n            aggregate[name] += value\n        else:\n            aggregate[name] = value\n    return max(aggregate.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    dp = [[0 for _ in range(2*n + 1)] for _ in range(2*n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, 2*n + 1):\n        for j in range(0, 2*n + 1):\n            if j - 1 >= 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            dp[i][j] += dp[i - 1][j]\n\n    return sum(dp[2*n][j]**2 for j in range(2*n + 1))"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    p_words = [word for sublist in word_list for word in sublist.split() if word.lower().startswith('p')]\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, k, l):\n    dp = [0 for i in range(n)]\n    max_sum = 0\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and dp[i]< dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    for i in range(k, l):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum + arr[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # Sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Take the first n products\n    products = [list1[i] * list2[i] for i in range(n)]\n\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n\n    pos = 1\n    while (n & (1 << pos)) > 0:\n        pos += 1\n\n    return n | (1 << pos)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while (2 ** power <= n):\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    return [{key: {value1: value2}} for key, value1, value2 in zip(keys, values1, values2)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    # Initialize a list to store the maximum sum for each number\n    max_sum = [0] * (n + 1)\n\n    # Iterate over the numbers from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the maximum sum for the current number\n        max_sum[i] = max(max_sum[i // 2] + max_sum[i // 3] + max_sum[i // 4] + max_sum[i // 5], i)\n\n    # Return the maximum sum for the given number\n    return max_sum[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    return len(input_tuple) == len(set(input_tuple))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total = 0\n    for number in numbers:\n        total += sum(int(digit) for digit in str(number))\n    return total"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    return len(set(lst))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    if element in tup:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/406", "solution": "def find_parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "from itertools import permutations\n\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    perms = sorted(set(int(''.join(p)) for p in permutations(digits)))\n    for p in perms:\n        if p > n:\n            return p\n    return -1"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    return min(x*y for x, y in tuples)"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numeric_lst = [i for i in lst if isinstance(i, (int, float))]\n    # Return the minimum value if the list is not empty, otherwise return None\n    return min(numeric_lst) if numeric_lst else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    return (max1, max2) if max1 * max2 > min1 * min2 else (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def find_max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    return [s[-1] for s in tuple_of_strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    year, month, day = date.split('-')\n    return '-'.join([day, month, year])"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    return k - (1 / (4 * a))"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, side):\n    if base1 > base2:\n        base1, base2 = base2, base1\n    return 0.5 * ((base2 - base1) / side + 1) * side"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for i in arr:\n        if num <= i:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(n):\n    return abs(n) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return s[::2]"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    # Create a set to store the reversed tuples\n    reversed_tuples = {(t[1], t[0]) for t in tuples}\n\n    # Count the number of tuples that are also in the reversed set\n    count = sum(t in reversed_tuples for t in tuples)\n\n    # Divide by 2 because each bidirectional pair is counted twice\n    return count // 2"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    return int(''.join(map(str, int_list)))"}
{"task_id": "Mbpp/440", "solution": "import nltk\n\ndef find_adverb_position(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tagged = nltk.pos_tag(tokens)\n    for i, (word, tag) in enumerate(tagged):\n        if tag.startswith('RB'):\n            return (sentence.index(word), sentence.index(word) + len(word), word)\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size * size"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_numbers = [num for num in arr if num > 0]\n    return len(positive_numbers) / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a*b for a, b in zip(tuple1, tuple2)))"}
{"task_id": "Mbpp/446", "solution": "def count_occurrence(tup, lst):\n    return sum(tup.count(i) for i in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    while len(perrin) < n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(word):\n    return 'z' in word"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month == 2:\n        return False\n    elif month in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]"}
{"task_id": "Mbpp/457", "solution": "def find_min(lst):\n    return min(lst, key=len)"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    for i in range(len(s)):\n        if s[i].islower() or (i > 0 and s[i-1].islower()):\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1)))"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    max_ending_here = min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max(arr[i] * max_ending_here, arr[i] * min_ending_here))\n        min_ending_here = min(arr[i], min(arr[i] * temp, arr[i] * min_ending_here))\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def to_lower_case(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(input_string):\n    return ''.join([char for char in input_string if not char.islower()])"}
{"task_id": "Mbpp/479", "solution": "def first_digit(n):\n    while n >= 10:\n        n /= 10\n    return int(n)"}
{"task_id": "Mbpp/554", "solution": "def split_odd_even(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers**3"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) & 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    num1 = str(num1)\n    num2 = str(num2)\n\n    # Make the lengths of the numbers equal by padding with zeros\n    if len(num1) < len(num2):\n        num1 = num1.zfill(len(num2))\n    else:\n        num2 = num2.zfill(len(num1))\n\n    # Calculate the sum of the per-digit difference\n    difference_sum = sum(abs(int(n1) - int(n2)) for n1, n2 in zip(num1, num2))\n\n    return difference_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums):\n    max_current = max_global = nums[0]\n    for i in range(1, len(nums)):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets to remove duplicates and then merge them\n    merged_set = set(tuple1).union(set(tuple2))\n    # Convert the set back to a tuple and sort it\n    sorted_tuple = tuple(sorted(list(merged_set)))\n    return sorted_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_pairs(lst):\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return lst == sorted(lst)"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(lists):\n    # Flatten the list of lists\n    flat_list = [item for sublist in lists for item in sublist]\n\n    # Remove duplicates by converting the list to a set and then back to a list\n    unique_list = list(set(flat_list))\n\n    return unique_list"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    product = 1\n    unique_nums = set(lst)\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = math.pi * radius ** 2\n    side_area = 2 * math.pi * radius * height\n    return 2 * base_area + side_area"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(list1, list2):\n    if set(list2).issubset(set(list1)):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result = (result * i) % 10\n        return result"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [val for sublist in zip(list1, list2, list3) for val in sublist]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    return tuple(set(tuple1) ^ set(tuple2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    new_t = []\n    for i in t:\n        if isinstance(i, tuple):\n            new_t.append(extract_even(i))\n        elif i % 2 == 0:\n            new_t.append(i)\n    return tuple(new_t)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_area(base_edge, height):\n    base_area = base_edge ** 2\n    perimeter = 4 * base_edge\n    slant_height = math.sqrt(height ** 2 + (base_edge / 2) ** 2)\n    lateral_area = 0.5 * perimeter * slant_height\n    total_area = base_area + lateral_area\n    return total_area"}
{"task_id": "Mbpp/582", "solution": "def is_dict_empty(my_dict):\n    if not isinstance(my_dict, dict):\n        raise ValueError(\"Input should be a dictionary\")\n    return len(my_dict) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <=1 :\n        return 1\n\n    catalan = [0 for i in range(n+1)]\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] = catalan[i] + catalan[j] * catalan[i-j-1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda k: k['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    return [i*i for i in range(int(start**0.5), int(end**0.5)+1)]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"}
{"task_id": "Mbpp/591", "solution": "def swap_List(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    # Calculate binomial coefficients\n    C = [[0 for x in range(n+1)] for x in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, n-i)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    sum_product = 0\n    for i in range(n):\n        sum_product += C[n][i] * C[n][i+1]\n\n    return sum_product"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    octets = ip_address.split('.')\n    octets = [str(int(octet)) for octet in octets]\n    return '.'.join(octets)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    # Convert strings to lists for easier manipulation\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Count the number of 0's and 1's in the first string\n    count_0_str1 = list1.count('0')\n    count_1_str1 = list1.count('1')\n\n    # Count the number of 0's and 1's in the second string\n    count_0_str2 = list2.count('0')\n    count_1_str2 = list2.count('1')\n\n    # If the number of 0's and 1's don't match in both strings,\n    # it's not possible to convert one to the other\n    if count_0_str1 != count_0_str2 or count_1_str1 != count_1_str2:\n        return -1\n\n    # Initialize swap count\n    swap_count = 0\n\n    # Iterate over the first string\n    for i in range(len(list1)):\n        # If the current character in the first string doesn't match\n        # the current character in the second string\n        if list1[i] != list2[i]:\n            # If the current character in the first string is '0'\n            if list1[i] == '0':\n                # Find the next '1' in the first string\n                for j in range(i+1, len(list1)):\n                    if list1[j] == '1':\n                        # Swap the '0' and '1'\n                        list1[i], list1[j] = list1[j], list1[i]\n                        # Increment swap count\n                        swap_count += 1\n                        break\n            # If the current character in the first string is '1'\n            else:\n                # Find the next '0' in the first string\n                for j in range(i+1, len(list1)):\n                    if list1[j] == '0':\n                        # Swap the '1' and '0'\n                        list1[i], list1[j] = list1[j], list1[i]\n                        # Increment swap count\n                        swap_count += 1\n                        break\n\n    return swap_count"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, len(arr1))\n    j = k - i\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], i)\n    else:\n        return find_kth(arr1[i:], arr2, j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to string to find the number of digits\n    num_str = str(n)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** len(num_str)\n    # If the sum is equal to the original number, then it is an Armstrong number\n    return sum == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = (n * (n + 1)) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(input_string):\n    char_set = set()\n    for char in input_string:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    # Initialize a list to store ludic numbers\n    ludic_numbers = []\n\n    # Iterate over each number from 1 to n\n    for i in range(1, n + 1):\n        # Initialize a set to store visited numbers\n        visited = set()\n        # Initialize the current number\n        current = i\n\n        # Loop until the current number is already visited or it becomes 0\n        while current not in visited and current != 0:\n            # Add the current number to the visited set\n            visited.add(current)\n            # Calculate the next number\n            current = sum(int(digit) ** 2 for digit in str(current))\n\n        # If the current number is 0, it is a ludic number\n        if current == 0:\n            ludic_numbers.append(i)\n\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split(' ')\n    reverse_words = words[::-1]\n    return ' '.join(reverse_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef degrees_to_radians(degrees):\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n\n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[i[0] for i in lst], [i[1] for i in lst]]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuples_list):\n    return sum(sum(t) for t in tuples_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tup_tup):\n    return [sum(tup)/len(tup) for tup in tup_tup]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [a/b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(numbers)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    parent = list(range(max(nums) + 1))\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        parent[find(x)] = find(y)\n\n    for num in nums:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                union(num, i)\n                union(num, num // i)\n\n    return max(map(lambda x: parent.count(x), parent))"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    i = j = 0\n    m1 = m2 = -1\n\n    for count in range(size + 1):\n        if i == size:\n            m1 = m2\n            m2 = list2[0]\n            break\n        elif j == size:\n            m1 = m2\n            m2 = list1[0]\n            break\n        elif list1[i] < list2[j]:\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n\n    return (m1 + m2) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def to_uppercase(input_string):\n    return input_string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (math.sqrt(3) / 4) * (radius ** 2)"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(num_list):\n    non_zero_list = [num for num in num_list if num != 0]\n    zero_list = [num for num in num_list if num == 0]\n    return non_zero_list + zero_list"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(lst, n):\n    xor_sum = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            xor_sum += lst[i] ^ lst[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost, selling_price):\n    return cost == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity**0.16 + 0.3965 * temperature * wind_velocity**0.16\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_length_of_names(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)"}
{"task_id": "Mbpp/641", "solution": "def nth_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(word):\n    return 'z' in word[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_):\n    return tup + (dict_,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    max_avg = dp[n-1][n-1] / (2*n - 1)\n\n    return max_avg"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(a == b for a, b in zip(list1, list2))"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate base to the power\n    result = base ** power\n\n    # Convert the result to string to iterate over its digits\n    result_str = str(result)\n\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in result_str)\n\n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    return input_string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Get the number of bits in the number\n    num_bits = len(bin(n)) - 2\n\n    # Create a mask with all bits set to 1 except the first and the last bit\n    mask = (1 << (num_bits - 1)) - 2\n\n    # Toggle the bits of the number using the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match('^[aeiou]', s, re.I))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # Calculate the number of digits in n-th triangular number\n    # The n-th triangular number is n*(n+1)/2\n    # The number of digits in a number can be calculated using the formula:\n    # digits = floor(log10(number)) + 1\n    # So, the number of digits in n-th triangular number is:\n    # digits = floor(log10(n*(n+1)/2)) + 1\n    # We need to find the smallest n such that this number of digits is equal to given n\n\n    import math\n\n    # Start with a guess of n\n    i = n\n\n    # Keep increasing i until the number of digits in i*(i+1)/2 is equal to n\n    while math.floor(math.log10(i*(i+1)//2)) + 1 < n:\n        i += 1\n\n    return i"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(input_string):\n    return len(set(input_string)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return None in tup"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if i != 0 and s[i].isupper():\n            result += ' '\n        result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n\n    for i in range(n):\n        # Check if left child exists and is greater than parent\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n\n        # Check if right child exists and is greater than parent\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n+1):\n            a, b = b, 2*a + b\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n\n    # Return the first k records\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        num = float(s)\n        return '{:.2f}'.format(num) == s\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_days(month):\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def nth_polite_number(n):\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    i2 = i3 = i5 = 1\n    next2 = 2\n    next3 = 3\n    next5 = 5\n\n    for i in range(2, n + 1):\n        next_polite = min(next2, next3, next5)\n        dp[i] = next_polite\n\n        if next_polite == next2:\n            i2 += 1\n            next2 = dp[i2] * 2\n\n        if next_polite == next3:\n            i3 += 1\n            next3 = dp[i3] * 3\n\n        if next_polite == next5:\n            i5 += 1\n            next5 = dp[i5] * 5\n\n    return dp[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_dict = {}\n\n    for num in numbers:\n        complement = target_sum - num\n\n        if complement in num_dict:\n            count += num_dict[complement]\n\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum((2*i - 1)**4 for i in range(1, n+1))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = ['[', '{', '(']\n    closing = [']', '}', ')']\n    for i in expression:\n        if i in opening:\n            stack.append(i)\n        elif i in closing:\n            pos = closing.index(i)\n            if ((len(stack) > 0) and\n                (opening[pos] == stack[len(stack)-1])):\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/772", "solution": "def remove_length(input_string, k):\n    # Split the string into words\n    words = input_string.split(' ')\n\n    # Filter out the words with length k\n    filtered_words = [word for word in words if len(word) != k]\n\n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n\n    return result"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(s, sub):\n    index = s.find(sub)\n    if index != -1:\n        return (sub, index, index + len(sub))\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(x for x in lst if lst.count(x) == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + count < len(lst) and lst[i] == lst[i + count]:\n            count += 1\n        packed.append(lst[i:i + count])\n        i += count\n    return packed"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    sums = []\n    for r in range(2, len(tuples) + 1):\n        for combination in combinations(tuples, r):\n            sums.append(tuple(sum(x) for x in zip(*combination)))\n    return sums"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        total += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in lst:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(int(i) for i in s[1:-1].split(', '))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_list, value):\n    for i, existing_value in enumerate(sorted_list):\n        if existing_value >= value:\n            return i\n    return len(sorted_list)"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str):\n    return tuple(lst + [str])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    return tuple(i for i in input_tuple if not isinstance(i, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = '^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d)|(n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n\n    root = int(n**0.5)\n    return root*root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(i < j for i, j in zip(tuple1, tuple2))"}
