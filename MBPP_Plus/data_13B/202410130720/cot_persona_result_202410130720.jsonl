{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a list (or any other desired format)\n    return list(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(numbers, n):\n    # Create a min heap\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, -num)\n\n    # Pop the n largest elements from the heap\n    largest = []\n    for i in range(n):\n        largest.append(-heapq.heappop(heap))\n\n    return largest"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # Convert the numbers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # Find the position of the first difference\n    diff_pos = 0\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            diff_pos = i\n            break\n\n    # Check if the difference is only at one bit position\n    if diff_pos == 0:\n        return False\n\n    # Check if the difference is at only one bit position\n    for i in range(diff_pos + 1, len(bin1)):\n        if bin1[i]!= bin2[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Find the first occurrence of the character\n    first_index = string.find(char)\n    # Find the last occurrence of the character\n    last_index = string.rfind(char)\n    # Remove the first and last occurrence of the character\n    return string[:first_index] + string[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the rows based on the sum\n    sorted_rows = sorted(matrix, key=lambda row: row_sums[row])\n\n    # Return the sorted matrix\n    return sorted_rows"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    # Check if the input string is empty\n    if not input_string:\n        return False\n\n    # Check if the input string contains only lowercase letters and underscores\n    if not all(c.islower() or c == \"_\" for c in input_string):\n        return False\n\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    if \"_\" in input_string:\n        # Split the input string into a list of words\n        words = input_string.split(\"_\")\n\n        # Check if each word contains only lowercase letters\n        for word in words:\n            if not all(c.islower() for c in word):\n                return False\n\n    # If the input string passes all the checks, return True\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    # Initialize a list to store the prime factors of n\n    prime_factors = []\n\n    # Loop through the range of numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        # If the current number is a factor of n, add it to the list of prime factors\n        if n % i == 0:\n            prime_factors.append(i)\n\n    # Sort the list of prime factors in descending order\n    prime_factors.sort(reverse=True)\n\n    # Initialize a variable to store the sum of the prime factors\n    sum_of_prime_factors = 0\n\n    # Loop through the list of prime factors\n    for prime_factor in prime_factors:\n        # Add the current prime factor to the sum of prime factors\n        sum_of_prime_factors += prime_factor\n\n    # Return True if the sum of the prime factors is equal to n, otherwise return False\n    return sum_of_prime_factors == n"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Create a string from the sorted digits\n    num_str = ''.join(str(digit) for digit in sorted_digits)\n\n    # Convert the string to an integer\n    num = int(num_str)\n\n    return num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    # (2n-1) * (2n-3) * (2n-5) *... * 1\n    result = 1\n    for i in range(1, n+1):\n        result *= 2*i-1\n    return result"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    # Initialize a counter for the number of substrings\n    count = 0\n\n    # Iterate over each substring in the input string\n    for i in range(len(s)):\n        # Initialize a variable to store the sum of digits in the substring\n        sum_of_digits = 0\n\n        # Iterate over each character in the substring\n        for j in range(i, len(s)):\n            # If the character is a digit, add its value to the sum of digits\n            if s[j].isdigit():\n                sum_of_digits += int(s[j])\n\n        # If the sum of digits is equal to the length of the substring, increment the counter\n        if sum_of_digits == len(s[i:j]):\n            count += 1\n\n    # Return the counter\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(my_list):\n    smallest = my_list[0]\n    for num in my_list:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(my_list):\n    total = 0\n    for element in my_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(my_list):\n    count = 0\n    for num in my_list:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Initialize a list to store the Bell numbers\n    bell_list = [0, 1]\n\n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Calculate the Bell number for the current index\n        bell_list.append(bell_list[i-1] + bell_list[i-2])\n\n    # Return the Bell number for the given index\n    return bell_list[n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(my_list, sub_list):\n    # Check if the sublist is empty\n    if not sub_list:\n        return True\n\n    # Check if the main list is empty\n    if not my_list:\n        return False\n\n    # Check if the first element of the sublist is in the main list\n    if sub_list[0] not in my_list:\n        return False\n\n    # Recursively check if the remaining elements of the sublist are in the main list\n    return is_sublist(my_list[1:], sub_list[1:])"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup)!= first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(my_list):\n    gap = len(my_list)\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = int(gap / shrink)\n        swapped = False\n        for i in range(len(my_list) - gap):\n            if my_list[i] > my_list[i + gap]:\n                my_list[i], my_list[i + gap] = my_list[i + gap], my_list[i]\n                swapped = True\n    return my_list"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    # Mathematical insight:\n    # A number can be represented as the difference of two squares if it is of the form n = a^2 - b^2, which can be factored into n = (a + b)(a - b).\n    # Algorithm development:\n    # Develop an algorithm to check if the given number can be expressed in this form.\n    # Implementation:\n    # Write a Python function to implement this algorithm.\n\n    # Check if the number is a perfect square\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n\n    # Check if the number can be expressed as the difference of two squares\n    for i in range(1, sqrt_n):\n        a = i\n        b = sqrt_n - i\n        if a ** 2 - b ** 2 == n:\n            return True\n\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i]:\n            return False\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    return [tuple for tuple in tuples if all(element % k == 0 for element in tuple)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2!= 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    # Initialize the tetrahedral number sequence\n    tetrahedral_seq = [1, 4, 10, 20, 35, 56, 84]\n\n    # Check if the input is valid\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Find the nth tetrahedral number using the sequence\n    for i in range(n - 1):\n        tetrahedral_seq.append(tetrahedral_seq[i] + tetrahedral_seq[i - 1])\n\n    return tetrahedral_seq[n - 1]"}
{"task_id": "Mbpp/82", "solution": "def volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1,..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"}
{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    # Formula for centered hexagonal numbers:\n    # H(n) = (2n^2 - n) / 2\n    return (2 * n**2 - n) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        elif merged_dict[key]!= dict2[key]:\n            merged_dict[key] = \"Conflict\"\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n        elif merged_dict[key]!= dict3[key]:\n            merged_dict[key] = \"Conflict\"\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(my_list):\n    freq_dict = {}\n    for element in my_list:\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    # Find the closest smaller number by iterating through the numbers\n    # in the range [1, n) and finding the one that is closest to n\n    closest = None\n    for i in range(1, n):\n        if abs(i - n) < abs(closest - n):\n            closest = i\n    return closest"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    # Check if the number is a multiple of 3\n    if num % 3 == 0:\n        return True\n    \n    # Check if the number is a multiple of 5\n    if num % 5 == 0:\n        return True\n    \n    # Check if the number is a multiple of 7\n    if num % 7 == 0:\n        return True\n    \n    # If none of the above conditions are met, the number is not undulating\n    return False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(my_list):\n    min_value = None\n    min_index = None\n    for i, (name, value) in enumerate(my_list):\n        if min_value is None or value < min_value:\n            min_value = value\n            min_index = i\n    return my_list[min_index][0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    # Initialize an empty dictionary to store the frequencies\n    frequencies = {}\n\n    # Iterate over the lists\n    for lst in lists:\n        # Iterate over the elements in the list\n        for elem in lst:\n            # If the element is not already in the dictionary, add it with a frequency of 1\n            if elem not in frequencies:\n                frequencies[elem] = 1\n            # Otherwise, increment the frequency of the element\n            else:\n                frequencies[elem] += 1\n\n    return frequencies"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(lambda x, y: x * y, numbers)\n    length = len(numbers)\n    return product / length\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the integer to a string\n    str_n = str(n)\n\n    # Check if the string is a palindrome\n    if str_n == str_n[::-1]:\n        # If it is a palindrome, find the next smallest palindrome by incrementing the last digit\n        last_digit = str_n[-1]\n        next_last_digit = str(int(last_digit) + 1)\n        return int(str_n[:-1] + next_last_digit)\n    else:\n        # If it is not a palindrome, find the next smallest palindrome by finding the first digit that is not a palindrome and incrementing it\n        for i in range(len(str_n) - 1, -1, -1):\n            if str_n[i]!= str_n[len(str_n) - i - 1]:\n                next_digit = str(int(str_n[i]) + 1)\n                return int(str_n[:i] + next_digit + str_n[i + 1:])\n\n    # If the integer is already the next smallest palindrome, return it\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Initialize the Eulerian number to 0\n    a = 0\n\n    # Iterate through all possible values of k\n    for k in range(1, n + 1):\n        # Calculate the binomial coefficient\n        binomial_coeff = binomial(n, k)\n\n        # Calculate the power of m\n        power = m ** k\n\n        # Calculate the Eulerian number\n        a += binomial_coeff * power\n\n    # Return the Eulerian number\n    return a"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst_of_lsts):\n    for sublist in lst_of_lsts:\n        sublist.sort()\n    return lst_of_lsts"}
{"task_id": "Mbpp/105", "solution": "def count(my_list):\n    count = 0\n    for element in my_list:\n        if element == True:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(my_list, my_tuple):\n    return my_tuple + tuple(my_list)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n\n    # Iterate through the three lists simultaneously\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                # Check if the current element in each list is less than the next element\n                if list1[i] < list2[j] and list2[j] < list3[k]:\n                    # If so, add the current element to the merged list\n                    merged_list.append(list1[i])\n                    merged_list.append(list2[j])\n                    merged_list.append(list3[k])\n\n    # Return the merged sorted list\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    # Step 1: Convert the binary string to its numerical value\n    numerical_value = int(binary_string, 2)\n\n    # Step 2: Rotate the binary string the given number of times\n    rotated_binary_string = binary_string[num_rotations:] + binary_string[:num_rotations]\n\n    # Step 3: Check for odd values in the rotated binary string\n    odd_values = []\n    for i in range(len(rotated_binary_string)):\n        if rotated_binary_string[i] == \"1\":\n            odd_values.append(i)\n\n    # Step 4: Count the occurrences of odd values\n    num_occurrences = len(odd_values)\n\n    return num_occurrences"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set()\n    for nested_list in nested_lists:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.add(element)\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dit_list):\n    return all(not d for d in dit_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    result = 0\n    for i in range(len(tup)):\n        result = result * 10 + tup[i]\n    return result"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(my_list):\n    return [[float(x) for x in sublist] for sublist in my_list]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuple_list):\n    max_product = 0\n    for tuple in tuple_list:\n        product = tuple[0] * tuple[1]\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    amicable_numbers = []\n    for i in range(1, n+1):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable_number(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors == n"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Initialize variables to keep track of the current maximum difference\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate through the binary string\n    for i in range(len(binary_string)):\n        # If the current character is a 0, increment the current difference\n        if binary_string[i] == \"0\":\n            current_diff += 1\n        # If the current character is a 1, decrement the current difference\n        elif binary_string[i] == \"1\":\n            current_diff -= 1\n\n        # If the current difference is greater than the maximum difference, update the maximum difference\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    # Return the maximum difference\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the matrix is a square\n    if len(matrix)!= len(matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    for row in matrix:\n        for col in row:\n            if col not in range(1, len(matrix)**2 + 1):\n                return False\n\n    # Check if the rows, columns, and diagonals add up to the same value\n    for i in range(len(matrix)):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(len(matrix)))\n        diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n        if row_sum!= col_sum or row_sum!= diag_sum:\n            return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(my_list):\n    # create a dictionary to store the frequency of each item in the list\n    frequency = {}\n    for item in my_list:\n        if item not in frequency:\n            frequency[item] = 1\n        else:\n            frequency[item] += 1\n\n    # find the item with the maximum frequency\n    max_frequency = 0\n    max_item = None\n    for item, freq in frequency.items():\n        if freq > max_frequency:\n            max_frequency = freq\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    reversed_string = \"\"\n    for char in string:\n        if char in vowels:\n            reversed_string = char + reversed_string\n        else:\n            reversed_string += char\n    return reversed_string"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return False"}
{"task_id": "Mbpp/139", "solution": "def circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    flat_list = []\n    for sublist in list_of_lists:\n        for element in sublist:\n            if element not in flat_list:\n                flat_list.append(element)\n    return set(flat_list)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(my_list):\n    # Sort the list using the pancake sorting algorithm\n    #...\n    return my_list"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    # Find the maximum difference between any two elements in the array\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    # Check if a and b are coprime\n    if gcd(a, b)!= 1:\n        return None\n\n    # Find the greatest common divisor of a and n\n    d = gcd(a, n)\n\n    # Check if d is a multiple of b\n    if d % b == 0:\n        # Return the solution\n        return (d // b, d // a)\n\n    # If no solution exists, return None\n    return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(my_list, elements_to_remove):\n    return list(filter(lambda x: x not in elements_to_remove, my_list))"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    sum = 0\n    for i in range(n):\n        sum += n - 2*i\n    return sum"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(num1, num2):\n    divisors1 = get_divisors(num1)\n    divisors2 = get_divisors(num2)\n    return sum(divisors1) == sum(divisors2)\n\ndef get_divisors(num):\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i, char in enumerate(string):\n        if char.lower() == string[i].lower():\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(my_list):\n    count = 0\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            if my_list[i] ^ my_list[j] % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(my_list, num):\n    count = 0\n    for i in my_list:\n        if i == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(my_list, start, end):\n    return sum(my_list[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n    \n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    return string.replace(\" \", character)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(my_list, n):\n    return sorted(my_list, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "def lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Convert the number to binary\n    binary_str = bin(n)[2:]\n\n    # Iterate through the binary string and set all even bits to 1\n    for i in range(len(binary_str)):\n        if i % 2 == 0:\n            binary_str[i] = '1'\n\n    # Convert the binary string back to a number\n    return int(binary_str, 2)"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(my_list):\n    unique_tuples = set(my_list)\n    occurence_dict = {}\n    for tuple in unique_tuples:\n        occurence_dict[tuple] = my_list.count(tuple)\n    return occurence_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    # Initialize a counter for the number of substrings\n    num_substrings = 0\n\n    # Iterate over the characters in the string\n    for i in range(len(string)):\n        # Check if the current character is not the last character in the string\n        if i < len(string) - 1:\n            # Increment the counter for each substring that is not empty\n            num_substrings += 1\n\n    # Return the number of substrings\n    return num_substrings"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the sequences\n    sequences = []\n\n    # Iterate over the possible values of the first element\n    for i in range(1, m + 1):\n        # Add the first element to the sequence\n        sequence = [i]\n\n        # Iterate over the remaining elements\n        for j in range(1, n - 1):\n            # Add the next element to the sequence\n            sequence.append(sequence[j - 1] * 2)\n\n            # Check if the element is less than or equal to m\n            if sequence[j] > m:\n                break\n\n        # Add the sequence to the list of sequences\n        sequences.append(sequence)\n\n    # Return the total number of sequences\n    return len(sequences)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Step 1: Find the last element of list1\n    last_element = list1[-1]\n\n    # Step 2: Replace the last element of list1 with the elements of list2\n    list1[-1] = list2\n\n    # Step 3: Return the modified list\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    increasing = True\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is greater than the previous element, the sequence is increasing\n        if increasing and arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        # If the current element is less than the previous element, the sequence is decreasing\n        elif not increasing and arr[i] < arr[i-1]:\n            current_sum += arr[i]\n        # If the current element is equal to the previous element, the sequence is neither increasing nor decreasing\n        else:\n            current_sum = 0\n            increasing = True\n\n        # Update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    # Initialize the memoization table\n    memo = {}\n\n    # Initialize the longest palindromic subsequence length to 0\n    longest = 0\n\n    # Iterate over the characters in the string\n    for i in range(len(s)):\n        # Check if the current character is already in the memoization table\n        if s[i] in memo:\n            # If it is, update the longest palindromic subsequence length\n            longest = max(longest, memo[s[i]])\n        else:\n            # If it's not, calculate the longest palindromic subsequence length for the current character\n            longest = max(longest, lps_helper(s, i, i))\n\n    # Return the longest palindromic subsequence length\n    return longest\n\ndef lps_helper(s, i, j):\n    # Check if the current character is already in the memoization table\n    if s[i] in memo:\n        # If it is, return the memoized value\n        return memo[s[i]]\n    else:\n        # If it's not, calculate the longest palindromic subsequence length for the current character\n        longest = 0\n\n        # Iterate over the characters in the string\n        for k in range(i, len(s)):\n            # Check if the current character is a palindrome\n            if s[i] == s[k]:\n                # If it is, update the longest palindromic subsequence length\n                longest = max(longest, lps_helper(s, i + 1, k - 1))\n\n        # Return the longest palindromic subsequence length\n        return longest"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))"}
{"task_id": "Mbpp/250", "solution": "def count_X(my_tuple, element):\n    count = 0\n    for x in my_tuple:\n        if x == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(my_list, element):\n    new_list = []\n    for i in range(len(my_list)):\n        new_list.append(element)\n        new_list.append(my_list[i])\n    return new_list"}
{"task_id": "Mbpp/252", "solution": "def convert(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Iterate over the colors\n    for color in colors:\n        # Generate all combinations of the current color with the remaining colors\n        for combination in combinations_colors(colors[colors.index(color) + 1:], n - 1):\n            # Add the current color to the combination\n            combinations.append((color,) + combination)\n\n    # Return the list of combinations\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    # Initialize a list to store the prime numbers\n    prime_list = []\n\n    # Iterate from 2 to the given non-negative number\n    for i in range(2, n+1):\n        # Check if the current number is prime\n        if is_prime(i):\n            # If it is prime, add it to the list\n            prime_list.append(i)\n\n    # Return the length of the prime list\n    return len(prime_list)\n\n# Function to check if a number is prime\ndef is_prime(n):\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Initialize the maximized tuples\n    maximized_tuple1 = ()\n    maximized_tuple2 = ()\n\n    # Iterate through the tuples and find the maximum element in each position\n    for i in range(len(tuple1)):\n        maximized_tuple1 += (max(tuple1[i], tuple2[i]),)\n        maximized_tuple2 += (max(tuple1[i], tuple2[i]),)\n\n    return (maximized_tuple1, maximized_tuple2)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    # Initialize a list to store the prime numbers\n    prime_list = [2, 3]\n\n    # Iterate from 5 to n\n    for i in range(5, n + 1):\n        # Check if the number is prime\n        if is_prime(i):\n            # Add the prime number to the list\n            prime_list.append(i)\n\n    # Return the nth prime number\n    return prime_list[n - 1]\n\n# Check if a number is prime\ndef is_prime(n):\n    # Check if the number is divisible by 2 to n - 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] / tuple2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(my_list, L):\n    first_part = my_list[:L]\n    second_part = my_list[L:]\n    return first_part, second_part"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(my_list, n):\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Iterate through the input list and split it into sublists of size n\n    for i in range(0, len(my_list), n):\n        result.append(my_list[i:i+n])\n\n    # Return the resulting list of sublists\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    # Initialize a list to store the star numbers\n    star_nums = [1]\n\n    # Iterate from 2 to n\n    for i in range(2, n + 1):\n        # Find the next star number by adding the previous star numbers\n        star_nums.append(sum(star_nums))\n\n    # Return then'th star number\n    return star_nums[n - 1]"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(my_list):\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate over the list and check if the element is even and the index is even\n    for i, element in enumerate(my_list):\n        if element % 2 == 0 and i % 2 == 0:\n            sum += element\n\n    # Return the sum\n    return sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(my_list):\n    return [tup[-1] for tup in my_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    # Initialize variables\n    sum = 0\n    i = 0\n\n    # Iterate through the binomial coefficients\n    while i <= n:\n        # Check if the current coefficient is even\n        if i % 2 == 0:\n            # Add the current coefficient to the sum\n            sum += binomial_coeff(n, i)\n\n        # Increment the counter\n        i += 1\n\n    # Return the sum of the even binomial coefficients\n    return sum\n\n# Helper function to calculate the binomial coefficient\ndef binomial_coeff(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)"}
{"task_id": "Mbpp/276", "solution": "def volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple):\n    count = 0\n    for element in tuple:\n        if isinstance(element, tuple):\n            count += 1\n        else:\n            count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    # Convert the integer to a string to easily iterate over each digit\n    str_n = str(n)\n\n    # Count the frequency of each digit\n    digit_count = {}\n    for digit in str_n:\n        if digit not in digit_count:\n            digit_count[digit] = 1\n        else:\n            digit_count[digit] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item!= element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Loop through each subarray of length k\n    for i in range(len(arr) - k + 1):\n        # Calculate the sum of the current subarray\n        sum = 0\n        for j in range(k):\n            sum += arr[i + j]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if sum > max_sum:\n            max_sum = sum\n\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(num1, num2):\n    quotient = num1 // num2\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(side1, side2):\n    # Calculate the third side of a right-angled triangle\n    # using the Pythagorean theorem\n    return math.sqrt(side1**2 + side2**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(my_list):\n    max_val = None\n    for element in my_list:\n        if isinstance(element, int) and (max_val is None or element > max_val):\n            max_val = element\n    return max_val"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    # Initialize a dictionary to store the maximum aggregate for each name\n    max_aggregates = {}\n\n    # Iterate over the tuples and update the maximum aggregate for each name\n    for name, score in tuples:\n        if name not in max_aggregates or max_aggregates[name] < score:\n            max_aggregates[name] = score\n\n    # Find the name with the maximum aggregate\n    max_name = None\n    max_aggregate = None\n    for name, aggregate in max_aggregates.items():\n        if max_aggregate is None or aggregate > max_aggregate:\n            max_name = name\n            max_aggregate = aggregate\n\n    # Return the name with the maximum aggregate\n    return (max_name, max_aggregate)"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary sequence to a list of bits\n        bits = [int(x) for x in bin(i)[2:]]\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(bits[:n]) == sum(bits[n:]):\n            # Increment the count\n            count += 1\n\n    # Return the count\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    depth = 0\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth = max(depth, 1)\n    return depth"}
{"task_id": "Mbpp/305", "solution": "def start_withp(my_list):\n    result = []\n    for word in my_list:\n        if word.startswith('p'):\n            result.append(word)\n    return result"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(prefix, i, k, j):\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Initialize the current sum to 0\n    current_sum = 0\n\n    # Iterate over the prefix from i to j\n    for idx in range(i, j):\n        # Add the current element to the current sum\n        current_sum += prefix[idx]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    # sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # initialize an empty list to store the largest products\n    largest_products = []\n\n    # loop through both lists and find the largest product\n    for i in range(n):\n        largest_product = list1[i] * list2[i]\n        largest_products.append(largest_product)\n\n    # return the largest products in descending order\n    return largest_products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position))!= 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    # Find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(my_list, format_string):\n    return [format_string.format(i) for i in my_list]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append({list1[i]: {list2[i]: list3[i]}})\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(my_tuple):\n    # Step 1: Initialize a set to store unique elements\n    unique_elements = set()\n\n    # Step 2: Iterate through the tuple and add each element to the set\n    for element in my_tuple:\n        unique_elements.add(element)\n\n    # Step 3: Check if the length of the set is equal to the length of the tuple\n    if len(unique_elements) == len(my_tuple):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return s[0] == s[-1]"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(my_list):\n    total = 0\n    for num in my_list:\n        if isinstance(num, int):\n            total += sum(int(digit) for digit in str(num))\n        else:\n            total += sum(int(digit) for digit in str(num) if digit.isdigit())\n    return total"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(my_list):\n    unique_tuples = set()\n    for tup in my_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuple, element):\n    for i in range(len(tuple)):\n        if tuple[i] == element:\n            return True\n    return False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(num):\n    # Convert the number to a list of individual digits\n    digits = [int(digit) for digit in str(num)]\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Create a new number by concatenating the sorted digits\n    new_num = int(\"\".join(str(digit) for digit in sorted_digits))\n\n    return new_num"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(my_list):\n    min_val = None\n    for element in my_list:\n        if isinstance(element, int):\n            if min_val is None or element < min_val:\n                min_val = element\n        elif isinstance(element, str):\n            if min_val is None or element < min_val:\n                min_val = element\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(my_list):\n    return [x for x in my_list if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(my_list, n):\n    return [element[n] for element in my_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    # Check if any element in the first sequence is in the set of the second sequence\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_to_concatenate, delimiter=\"-\"):\n    concatenated_string = \"\"\n    for element in tuple_to_concatenate:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string.rstrip(delimiter)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(my_tuple):\n    result = []\n    for element in my_tuple:\n        result.append(element[-1])\n    return result"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(my_list, element):\n    count = 0\n    for sublist in my_list:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2!= 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_string):\n    year, month, day = date_string.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        if tup1[i] & tup2[i]:\n            result.append(1)\n        else:\n            result.append(0)\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the directrix of the parabola\n    directrix = (-b / (2 * a)) - (c / a)\n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(element in list2 for element in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    # Calculate the median length of the trapezium\n    median = (a + b + c) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(my_list):\n    return [x for x in my_list if x < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    result = \"\"\n    for i, char in enumerate(string):\n        if i % 2 == 0:\n            result += char\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count = 0\n    seen_pairs = set()\n    for t1, t2 in tuples:\n        if t1 < t2:\n            pair = (t1, t2)\n        else:\n            pair = (t2, t1)\n        if pair not in seen_pairs:\n            count += 1\n            seen_pairs.add(pair)\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(my_list):\n    result = 0\n    for num in my_list:\n        result = result * 10 + num\n    return result"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    # Step 1: Split the sentence into words\n    words = sentence.split()\n\n    # Step 2: Find the first adverb in the sentence\n    for i, word in enumerate(words):\n        if word in ADVERBS:\n            return (i, i + len(word), word)\n\n    # Step 3: If no adverb is found, return None\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] * tuple2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_list, element_list):\n    count = 0\n    for element in element_list:\n        count += tuple_list.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(my_list):\n    result = []\n    for num in my_list:\n        result.append(num ** 3)\n    return result"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the Perrin number for each i\n        perrin_num = (i * (i + 1)) // 2\n        # Add the Perrin number to the sum\n        sum += perrin_num\n    # Return the sum\n    return sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(my_list, size):\n    result = []\n    for i in range(size):\n        result.append(my_list[i])\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Initialize an empty list to store the even factors\n    factors = []\n\n    # Iterate from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        # If i is a factor of n, add it to the list of factors\n        if n % i == 0:\n            factors.append(i)\n\n    # Return the sum of the even factors\n    return sum(factors)"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return \"z\" in text"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    # Check if the month number is between 1 and 12\n    if not (1 <= month_number <= 12):\n        return False\n\n    # Check if the month number is a multiple of 7\n    if month_number % 7 == 0:\n        return True\n\n    # Check if the month number is a multiple of 3\n    if month_number % 3 == 0:\n        return True\n\n    # Check if the month number is a multiple of 5\n    if month_number % 5 == 0:\n        return True\n\n    # If none of the above conditions are met, return False\n    return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(width, height):\n    return width * height"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    # Step 1: Understand the requirements\n    # - Remove all uppercase substrings from the given string\n    # - Return the modified string\n\n    # Step 2: Devising a logical plan to implement the solution\n    # - Iterate through the characters of the string\n    # - If the character is uppercase, remove it from the string\n    # - If the character is lowercase, keep it in the string\n\n    # Step 3: Writing clean and efficient code to achieve the desired result\n    modified_string = \"\"\n    for char in string:\n        if char.isupper():\n            modified_string += char.lower()\n        else:\n            modified_string += char\n\n    return modified_string"}
{"task_id": "Mbpp/460", "solution": "def Extract(my_list):\n    return [sublist[0] for sublist in my_list]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(my_list):\n    combinations = []\n    for i in range(len(my_list)):\n        for j in range(i+1, len(my_list)):\n            combinations.append([my_list[i], my_list[j]])\n    return combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    # Initialize variables\n    max_product = 0\n    current_product = 1\n    min_product = 1\n    current_min = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the current product\n        current_product *= arr[i]\n\n        # Calculate the minimum product\n        if current_product < 0:\n            current_min = current_product\n\n        # Update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n        # Reset the current product if it is negative\n        if current_product < 0:\n            current_product = 1\n\n    # Return the maximum product\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(my_dict):\n    return {k: v for k, v in my_dict.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    # Initialize the maximum product to 0\n    max_prod = 0\n\n    # Loop through the array and find the maximum product\n    for i in range(len(arr)):\n        # Find the maximum product of the current element and the previous element\n        max_prod = max(max_prod, arr[i] * arr[i-1])\n\n    # Return the maximum product\n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tuple):\n    result = []\n    for i in range(len(tuple) - 1):\n        result.append(tuple[i] + tuple[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    # Sort the list to ensure that the numbers are in ascending order\n    sorted_lst = sorted(lst)\n\n    # Check if each element is followed by its consecutive number\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1!= sorted_lst[i + 1]:\n            return False\n\n    # If all elements are followed by their consecutive numbers, return True\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if t1 == t2:\n                intersection.add(t1)\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(my_dict):\n    return sorted(my_dict.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    largest = arr[0]\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            temp.append(char)\n        else:\n            result.append(''.join(temp))\n            temp = []\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_digit(n):\n    return str(n)[0]"}
{"task_id": "Mbpp/554", "solution": "def Split(my_list):\n    return [x for x in my_list if x % 2 == 1]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    diff = sum_cubes - sum_n\n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\nassert find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7) == 12\nassert find_Odd_Pair([1, 2, 3], 3) == 2"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert the numbers to strings\n    str1 = str(num1)\n    str2 = str(num2)\n\n    # Initialize the sum of the per-digit differences\n    sum_diff = 0\n\n    # Loop through each digit in both numbers\n    for i in range(len(str1)):\n        # Calculate the difference between the digits\n        diff = abs(int(str1[i]) - int(str2[i]))\n\n        # Add the difference to the sum\n        sum_diff += diff\n\n    # Return the sum of the per-digit differences\n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Initialize the current sum to 0\n    current_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Add the current element to the current sum\n        current_sum += arr[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is less than 0, set the current sum to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union = set(tuple1).union(set(tuple2))\n    return tuple(sorted(union))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(my_list, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if my_list[i]!= my_list[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    for sublist in list_of_lists:\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "def surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    # Check if the second list is a sublist of the first list\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    \n    # Handle the edge cases\n    if len(sub_list) == 0:\n        return False\n    \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    # Initialize an empty list to store the extracted even elements\n    extracted_even_elements = []\n\n    # Iterate over the nested tuple\n    for element in nested_tuple:\n        # If the element is a tuple, recursively call the function to extract even elements from the tuple\n        if isinstance(element, tuple):\n            extracted_even_elements.extend(extract_even(element))\n        # If the element is an integer, check if it is even and add it to the list of extracted even elements\n        elif isinstance(element, int):\n            if element % 2 == 0:\n                extracted_even_elements.append(element)\n\n    # Return the list of extracted even elements\n    return extracted_even_elements"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    # Calculate the surface area of the square pyramid\n    surface_area = (base_edge ** 2) * height\n    return surface_area"}
{"task_id": "Mbpp/582", "solution": "def is_empty_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the list at the nth element\n    first_part = arr[:n]\n    second_part = arr[n:]\n\n    # Add the first part to the end of the second part\n    second_part.extend(first_part)\n\n    # Return the modified list\n    return second_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end+1):\n        root = int(i**0.5)\n        if root**2 == i:\n            squares.append(i)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "def polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(my_list):\n    first_element = my_list[0]\n    last_element = my_list[-1]\n    my_list[0] = last_element\n    my_list[-1] = first_element\n    return my_list"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    result = 0\n    for i in range(n):\n        result += binomial(n, i) * binomial(n, i+1)\n    return result"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(my_list):\n    even_num = None\n    odd_num = None\n    for num in my_list:\n        if num % 2 == 0:\n            even_num = num\n            break\n        elif num % 2 == 1:\n            odd_num = num\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return abs(even_num - odd_num)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary_str1, binary_str2):\n    # Convert the binary strings to lists of 0s and 1s\n    binary_list1 = list(binary_str1)\n    binary_list2 = list(binary_str2)\n\n    # Initialize the number of swaps to 0\n    num_swaps = 0\n\n    # Iterate through the lists and compare the corresponding elements\n    for i in range(len(binary_list1)):\n        if binary_list1[i]!= binary_list2[i]:\n            # If the elements are not equal, increment the number of swaps\n            num_swaps += 1\n\n    # Return the number of swaps\n    return num_swaps"}
{"task_id": "Mbpp/596", "solution": "def tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    # find the middle index of the arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    # if the middle elements of the arrays are equal, return the element\n    if arr1[mid1] == arr2[mid2]:\n        return arr1[mid1]\n\n    # if the middle element of arr1 is less than the middle element of arr2,\n    # recurse on the right half of arr1 and the left half of arr2\n    if arr1[mid1] < arr2[mid2]:\n        return find_kth(arr1[mid1 + 1:], arr2[:mid2], k - 1)\n\n    # if the middle element of arr1 is greater than the middle element of arr2,\n    # recurse on the right half of arr2 and the left half of arr1\n    else:\n        return find_kth(arr1[:mid1], arr2[mid2 + 1:], k - 1)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a list of individual digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = 0\n    for digit in digits:\n        sum_of_cubes += digit ** 3\n\n    # Check if the sum of the cubes is equal to the original number\n    if sum_of_cubes == n:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_ludic(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    regex = re.compile(pattern)\n    match = regex.search(string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\n# Test cases\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n\n# Dynamic programming approach\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        dp = [0] * (n+1)\n        dp[1] = 1\n        for i in range(2, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[n]\n\n# Test cases\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(my_list, k):\n    return my_list[:k] + my_list[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max_value = None\n    for row in matrix:\n        if len(row) > n:\n            value = row[n]\n            if max_value is None or value > max_value:\n                max_value = value\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    result = 0\n    for t in tuple_list:\n        result += sum(t)\n    return result"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuple_of_tuples):\n    average_list = []\n    for tuple in tuple_of_tuples:\n        average = sum(tuple) / len(tuple)\n        average_list.append(average)\n    return average_list"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tup1, tup2):\n    if len(tup1)!= len(tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(x % y for x, y in zip(tup1, tup2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    num_list = []\n    char_list = []\n    for char in string:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    return ''.join(char_list + num_list)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    # Initialize a dictionary to keep track of the divisibility of each number\n    divisibility = {}\n    for number in numbers:\n        divisibility[number] = True\n\n    # Iterate through the numbers and mark the divisibility of each number as False if it is not divisible by any other number\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % numbers[j]!= 0:\n                divisibility[numbers[i]] = False\n                break\n\n    # Find the largest subset of numbers that are divisible\n    largest_subset = []\n    for number in numbers:\n        if divisibility[number]:\n            largest_subset.append(number)\n\n    return len(largest_subset)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # Step 1: Find the middle index of both lists\n    mid_index1 = size // 2\n    mid_index2 = size // 2\n\n    # Step 2: Find the median of the two middle elements\n    median = (list1[mid_index1] + list2[mid_index2]) / 2\n\n    # Step 3: If the size is odd, return the median\n    if size % 2 == 1:\n        return median\n\n    # Step 4: If the size is even, find the median of the two middle elements and the element before it\n    mid_index1 -= 1\n    mid_index2 -= 1\n    median = (list1[mid_index1] + list2[mid_index2] + list1[mid_index1 - 1] + list2[mid_index2 - 1]) / 4\n\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(my_list, n):\n    result = []\n    for num in my_list:\n        result.append(num ** n)\n    return result"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    elif radius == 0:\n        return 0\n    else:\n        # Use the formula for the area of a triangle:\n        # A = (b * h) / 2\n        # where b is the base and h is the height\n        # The base of the triangle is the radius of the semicircle\n        # The height of the triangle is half the radius\n        base = radius\n        height = radius / 2\n        area = (base * height) / 2\n        return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate_tuple):\n    x, y = coordinate_tuple\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adjacent_coordinates.append((i, j))\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    # Initialize an empty string to store the modified string\n    modified_string = \"\"\n\n    # Iterate through each character in the original string\n    for char in string:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_string += \"_\"\n        # Otherwise, add the character to the modified string\n        else:\n            modified_string += char\n\n    # Return the modified string\n    return modified_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(my_list):\n    # Step 1: Initialize a new list to store the non-zero elements\n    non_zero_list = []\n\n    # Step 2: Iterate through the input list and append non-zero elements to the new list\n    for element in my_list:\n        if element!= 0:\n            non_zero_list.append(element)\n\n    # Step 3: Append zeroes to the end of the new list\n    non_zero_list.extend([0] * my_list.count(0))\n\n    # Step 4: Return the new list\n    return non_zero_list"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(my_list, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += my_list[i] ^ my_list[j]\n    return sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_chill_index = round(35.74 + 0.6215 * temperature - 35.75 * (wind_velocity ** 0.16) + 0.4275 * temperature * (wind_velocity ** 0.16))\n    return int(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(string):\n    # Find the first opening parenthesis\n    opening_paren_index = string.find(\"(\")\n    # If there is no opening parenthesis, return the original string\n    if opening_paren_index == -1:\n        return string\n    # Find the corresponding closing parenthesis\n    closing_paren_index = string.find(\")\")\n    # If there is no closing parenthesis, return the original string\n    if closing_paren_index == -1:\n        return string\n    # Remove the parenthesis and what is in between them\n    return string[:opening_paren_index] + string[closing_paren_index+1:]"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n - 5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if the text is empty\n    if not text:\n        return False\n\n    # Check if the text starts with 'z'\n    if text[0] == 'z':\n        return False\n\n    # Check if the text ends with 'z'\n    if text[-1] == 'z':\n        return False\n\n    # Check if the text contains 'z' in the middle\n    if 'z' in text[1:-1]:\n        return False\n\n    # If none of the above conditions are met, return True\n    return True"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple_obj, dict_obj):\n    return tuple_obj + (dict_obj,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    # Initialize variables\n    max_average = 0\n    path = []\n\n    # Iterate over each cell in the matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            # If the current cell is the bottom-right cell, add it to the path\n            if i == len(matrix) - 1 and j == len(matrix[i]) - 1:\n                path.append((i, j))\n                break\n\n            # If the current cell is not the bottom-right cell, find the cell with the maximum average cost\n            max_average_cell = findMaxAverageCell(matrix, i, j)\n\n            # Add the maximum average cell to the path\n            path.append(max_average_cell)\n\n            # Update the maximum average\n            max_average = max(max_average, max_average_cell[2])\n\n    # Return the path with the maximum average cost\n    return path\n\ndef findMaxAverageCell(matrix, i, j):\n    # Initialize variables\n    max_average = 0\n    max_average_cell = None\n\n    # Iterate over each cell in the matrix\n    for k in range(len(matrix)):\n        for l in range(len(matrix[k])):\n            # If the current cell is not the bottom-right cell, find the cell with the maximum average cost\n            if k!= len(matrix) - 1 or l!= len(matrix[k]) - 1:\n                average = (matrix[k][l] + matrix[k + 1][l] + matrix[k][l + 1]) / 3\n                if average > max_average:\n                    max_average = average\n                    max_average_cell = (k, l, average)\n\n    # Return the cell with the maximum average cost\n    return max_average_cell"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] * tup[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(my_list):\n    # Step 1: Understand the Requirements\n    # Define what constitutes a \"consecutive duplicate\" and what the expected output should be\n    consecutive_duplicate = []\n    for i in range(len(my_list)):\n        if my_list[i]!= my_list[i-1]:\n            consecutive_duplicate.append(my_list[i])\n    return consecutive_duplicate"}
{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r, h):\n    # Calculate the lateral surface area of a cone\n    # using the formula: A = \u03c0r(r + h)\n    return math.pi * r * (r + h)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    # Initialize variables\n    n = len(arr)\n    result = 0\n\n    # Iterate over all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of the current subarray\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n\n            # Add the product to the result\n            result += prod\n\n    # Return the result\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to binary\n    binary_str = bin(n)[2:]\n\n    # Toggle the middle bits\n    middle_bits = binary_str[1:-1]\n    toggled_middle_bits = ''.join(reversed(middle_bits))\n\n    # Reconstruct the binary string with the toggled middle bits\n    toggled_binary_str = binary_str[:1] + toggled_middle_bits + binary_str[-1:]\n\n    # Convert the binary string back to an integer\n    return int(toggled_binary_str, 2)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    if pattern.match(string):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    # Initialize variables\n    triangular_number = 0\n    index = 0\n\n    # Iterate through the triangular numbers\n    while triangular_number < 10 ** n:\n        # Calculate the next triangular number\n        triangular_number += index\n\n        # Increment the index\n        index += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(my_tuple):\n    my_dict = {}\n    for i in range(0, len(my_tuple), 2):\n        my_dict[my_tuple[i]] = my_tuple[i+1]\n    return my_dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(edge_length):\n    # Calculate the surface area of a regular tetrahedron\n    surface_area = math.sqrt(3) * edge_length ** 2\n    # Calculate the volume of a regular tetrahedron\n    volume = (math.sqrt(2) / 6) * edge_length ** 3\n    # Calculate the area of the tetrahedron\n    area = 4 * surface_area / 3\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(my_list, n):\n    return my_list[n:] + my_list[:n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(my_tuple):\n    for element in my_tuple:\n        if element is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                break\n        else:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    words = string.split()\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] = word + \" \"\n    return \" \".join(words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(my_list):\n    return sorted(my_list, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(my_list, my_tuple):\n    my_list.extend(my_tuple)\n    return my_list"}
{"task_id": "Mbpp/751", "solution": "```\ndef check_min_heap(arr):\n    # Check if the array is a binary heap\n    if len(arr) == 0:\n        return False\n\n    # Check if the array is a binary heap\n    if len(arr) == 1:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 2:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 3:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 4:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 5:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 6:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 7:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 8:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 9:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 10:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 11:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 12:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 13:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 14:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 15:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 16:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 17:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 18:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 19:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 20:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 21:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 22:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 23:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 24:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 25:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 26:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 27:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 28:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 29:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 30:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 31:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 32:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 33:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 34:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 35:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 36:\n        return True\n\n    # Check if the array is a binary heap\n    if len(arr) == 37"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 11\n    if n == 6:\n        return 21\n    if n == 7:\n        return 43\n    if n == 8:\n        return 85\n    if n == 9:\n        return 171\n    if n == 10:\n        return 341\n    if n == 11:\n        return 683\n    if n == 12:\n        return 1365\n    if n == 13:\n        return 2731\n    if n == 14:\n        return 5461\n    if n == 15:\n        return 10923\n    if n == 16:\n        return 21845\n    if n == 17:\n        return 43691\n    if n == 18:\n        return 87381\n    if n == 19:\n        return 174763\n    if n == 20:\n        return 349525\n    if n == 21:\n        return 699051\n    if n == 22:\n        return 1398101\n    if n == 23:\n        return 2796203\n    if n == 24:\n        return 5592405\n    if n == 25:\n        return 11184811\n    if n == 26:\n        return 22369621\n    if n == 27:\n        return 44739243\n    if n == 28:\n        return 89478485\n    if n == 29:\n        return 178956971\n    if n == 30:\n        return 357913943\n    if n == 31:\n        return 715827885\n    if n == 32:\n        return 1431655767\n    if n == 33:\n        return 2863311531\n    if n == 34:\n        return 5726623263\n    if n == 35:\n        return 11453246585\n    if n == 36:\n        return 22906493171\n    if n == 37:\n        return 45812986343\n    if n == 38:\n        return 91625972735\n    if n == 39:\n        return 183251945471\n    if n == 40:\n        return 366503891143\n    if n == 41:\n        return 733007782345\n    if n == 42:\n        return 1466015564691\n    if n == 43:\n        return 2932031129383\n    if n == 44:\n        return 5864055417265\n    if n == 45:\n        return 11728110824531\n    if n == 46:\n        return 23456221649061\n    if n == 47:"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    return sorted(tuple_list, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(my_list):\n    # Sort the list in ascending order\n    my_list.sort()\n\n    # Find the second smallest number\n    second_smallest_num = None\n    for i in range(1, len(my_list)):\n        if my_list[i] < my_list[i-1]:\n            second_smallest_num = my_list[i]\n            break\n\n    return second_smallest_num"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "Here is the function you requested:\n\ndef unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict\n\nThis function takes a list of lists as input and returns a dictionary where each key is a tuple (converted from a list) and the value is the count of occurrences of that list in the input.\n\nHere is an example of how the function might be used:\n\n>>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\nThis function is efficient and straightforward, reflecting the INTJ's preference for logical and well-organized approaches."}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    try:\n        float_value = float(string)\n        return float_value % 1 == 0 and float_value >= 0 and float_value <= 100\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(my_list):\n    return len(set(my_list)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = arr[1] - arr[0]\n\n    # Iterate through the sorted array\n    for i in range(n - 1):\n        # Calculate the difference between consecutive elements\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Initialize a list to store the polite numbers\n    polite_numbers = [1]\n\n    # Iterate from 2 to n\n    for i in range(2, n + 1):\n        # Find the next polite number by adding the previous polite numbers\n        polite_numbers.append(polite_numbers[i - 1] + polite_numbers[i - 2])\n\n    # Return the nth polite number\n    return polite_numbers[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(my_list):\n    pairs = []\n    for i in range(len(my_list) - 1):\n        pairs.append((my_list[i], my_list[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize an empty list to store the first n odd natural numbers\n    odd_nums = []\n\n    # Use a loop to generate the first n odd natural numbers\n    for i in range(1, n + 1, 2):\n        odd_nums.append(i)\n\n    # Initialize a variable to store the sum of the fourth powers of the odd numbers\n    sum_of_powers = 0\n\n    # Compute the fourth power of each number within the loop\n    for num in odd_nums:\n        sum_of_powers += num ** 4\n\n    # Return the sum of the fourth powers of the odd numbers\n    return sum_of_powers\n\n# Test the function with test cases\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == \"{\":\n            stack.append(char)\n        elif char == \"}\":\n            if not stack or stack.pop()!= \"{\":\n                return False\n        elif char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack or stack.pop()!= \"[\":\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    return \" \".join([word for word in words if len(word)!= k])"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    # Initialize variables\n    occurrence = None\n    position = None\n\n    # Check if the substring is in the string\n    if substring in string:\n        # Find the position of the substring in the string\n        position = string.find(substring)\n\n        # Find the occurrence of the substring in the string\n        occurrence = string.count(substring)\n\n    # Return the occurrence and position of the substring\n    return (occurrence, position)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(my_list):\n    for i in range(1, len(my_list), 2):\n        if my_list[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(my_list):\n    result = []\n    current_sublist = []\n    for element in my_list:\n        if not current_sublist or element!= current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            result.append(current_sublist)\n            current_sublist = [element]\n    if current_sublist:\n        result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum\n    sum = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if len(arr[i:i+1]) % 2 == 1:\n            # Add the subarray to the sum\n            sum += arr[i:i+1]\n    # Return the sum\n    return sum\n\n# Test the function\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV color model\n    h, s, v = 0, 0, 0\n\n    # Calculate the maximum and minimum values of RGB\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    # Calculate the hue\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = (g - b) / (max_rgb - min_rgb)\n    elif max_rgb == g:\n        h = 2 + (b - r) / (max_rgb - min_rgb)\n    elif max_rgb == b:\n        h = 4 + (r - g) / (max_rgb - min_rgb)\n\n    # Calculate the saturation\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = (max_rgb - min_rgb) / max_rgb\n\n    # Calculate the value\n    v = max_rgb\n\n    # Return the HSV values\n    return h, s, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(my_list):\n    even_num = None\n    odd_num = None\n    for num in my_list:\n        if num % 2 == 0:\n            even_num = num\n            break\n        elif num % 2 == 1:\n            odd_num = num\n            break\n    if even_num and odd_num:\n        return even_num * odd_num\n    else:\n        return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses from the string\n    tuple_str = tuple_str.strip(\"()\")\n    # Split the string into a list of integers\n    int_list = tuple_str.split(\",\")\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int(i) for i in int_list)\n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(string):\n    if len(string) < 4:\n        return False\n    if string[0]!= \"a\":\n        return False\n    for i in range(1, 4):\n        if string[i]!= \"b\":\n            return False\n    return True"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    if isinstance(t, tuple):\n        result = []\n        for item in t:\n            if not isinstance(item, tuple):\n                result.append(item)\n        return tuple(result)\n    else:\n        return t"}
{"task_id": "Mbpp/792", "solution": "def count_list(my_list):\n    count = 0\n    for sublist in my_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, element):\n    # Find the last occurrence of the element in the array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == element:\n            return i\n    # If the element is not found, return -1\n    return -1"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(string):\n    if string.startswith(\"a\") and string.endswith(\"b\"):\n        return True\n    return False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(my_dict):\n    total = 0\n    for key, value in my_dict.items():\n        total += value\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2!= 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Convert the number to binary\n    binary_n = bin(n)[2:]\n    # Pad the binary string with zeros if necessary\n    binary_n = binary_n.zfill(32)\n    # Rotate the bits by d positions\n    rotated_binary_n = binary_n[d:] + binary_n[:d]\n    # Convert the rotated binary string back to decimal\n    rotated_n = int(rotated_binary_n, 2)\n    return rotated_n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(my_list):\n    max_sum = 0\n    max_list = []\n    for sublist in my_list:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2!= 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(t1 < t2 for t1, t2 in zip(tuple1, tuple2))"}
