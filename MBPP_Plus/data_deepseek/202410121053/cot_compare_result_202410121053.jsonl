{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1 & set2)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR the two numbers to find differing bits\n    xor_result = num1 ^ num2\n    \n    # Check if the result is a power of 2 (which means only one bit differs)\n    return (xor_result & (xor_result - 1)) == 0 and xor_result != 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    double_s = s + s\n    return double_s.find(s, 1)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    if char not in s:\n        return s\n    \n    first_index = s.index(char)\n    last_index = s.rindex(char)\n    \n    # Remove first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Remove last occurrence\n    if first_index <= last_index:\n        last_index -= 1\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Pair each row with its sum\n    paired_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the pairs based on the sum\n    sorted_pairs = sorted(paired_rows, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_pairs]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height_triangle, height_prism):\n    base_area = 0.5 * base * height_triangle\n    volume = base_area * height_prism\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    # Create a set of characters from str2 for O(1) lookup\n    set_str2 = set(str2)\n    \n    # Initialize an empty result string\n    result = []\n    \n    # Iterate through each character in str1\n    for char in str1:\n        # If the character is not in set_str2, append it to the result\n        if char not in set_str2:\n            result.append(char)\n    \n    # Join the list into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    n = 1\n    while True:\n        woodall_candidate = n * (2 ** n) - 1\n        if woodall_candidate == number:\n            return True\n        elif woodall_candidate > number:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reversed_num = int(str(num)[::-1])\n    return num == (2 * reversed_num) - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    largest_number = int(''.join(map(str, sorted_digits)))\n    \n    return largest_number"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def nth_octagonal_number(n):\n    return 3 * n * n - 2 * n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            length = j - i + 1\n            digit_sum = sum(int(char) for char in substring)\n            \n            if digit_sum == length:\n                count += 1\n    \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples_list):\n    max_diff = 0\n    for pair in tuples_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    # Initialize a table to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Bell(0) = 1\n    bell[0][0] = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n+1):\n        # Explicitly set the first element of the current row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    non_decreasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    non_increasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    return non_decreasing or non_increasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    if not sublist:\n        return True\n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    return all(len(tup) == first_length for tup in tuples_list)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    \n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    elif n % 4 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    \n    mapping = {}\n    used_values = set()\n    \n    for i in range(len(arr1)):\n        if arr1[i] in mapping:\n            if mapping[arr1[i]] != arr2[i]:\n                return False\n        else:\n            if arr2[i] in used_values:\n                return False\n            mapping[arr1[i]] = arr2[i]\n            used_values.add(arr2[i])\n    \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    num_str = str(number)\n    odd_sum = 0\n    even_sum = 0\n    \n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            even_sum += int(num_str[i])\n        else:\n            odd_sum += int(num_str[i])\n    \n    difference = abs(odd_sum - even_sum)\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    ascii_sum = sum(ord(char) for char in s)\n    mod_value = ascii_sum % 26\n    return chr(mod_value + 97)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1 or n == 2:\n        return 1\n    \n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n    sequence[2] = 1\n    \n    for i in range(3, n + 1):\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n    \n    return sequence[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    \n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n > 1:\n        return n - 1\n    else:\n        return None"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Check if the number has at least 3 digits\n    if len(num_str) < 3:\n        return False\n    \n    # Get the first two digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # Check if the first two digits are different\n    if first_digit == second_digit:\n        return False\n    \n    # Iterate through the string and check alternation\n    for i in range(2, len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first_digit:\n                return False\n        else:\n            if num_str[i] != second_digit:\n                return False\n    \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None\n    \n    min_tuple = tuples_list[0]\n    \n    for tup in tuples_list:\n        if tup[1] < min_tuple[1]:\n            min_tuple = tup\n    \n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    \n    min_length = len(list_of_lists[0])\n    \n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    from collections import defaultdict\n    \n    # Flatten the list of lists\n    flattened_list = [item for sublist in lists for item in sublist]\n    \n    # Initialize a dictionary to count frequencies\n    frequency_dict = defaultdict(int)\n    \n    # Count the frequency of each element\n    for item in flattened_list:\n        frequency_dict[item] += 1\n    \n    # Convert defaultdict to a regular dictionary\n    return dict(frequency_dict)"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    # Convert the decimal number to a binary string\n    binary_string = bin(decimal_number)[2:]\n    return binary_string"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of bounds for the given array\")\n    \n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_str = words[0].lower() + ''.join(word.capitalize() for word in words[1:])\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m, memo={}):\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if (n, m) in memo:\n        return memo[(n, m)]\n    \n    result = (n - m) * eulerian_num(n - 1, m - 1, memo) + (m + 1) * eulerian_num(n - 1, m, memo)\n    memo[(n, m)] = result\n    return result"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(booleans):\n    true_count = 0\n    for boolean in booleans:\n        if boolean:\n            true_count += 1\n    return true_count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    combined_list = list(tup)\n    combined_list.extend(lst)\n    return tuple(combined_list)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    combined_list = list1 + list2 + list3\n    return sorted(combined_list)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count_ones = s.count('1')\n    odd_count = 0\n    \n    # Check the original string\n    if count_ones % 2 != 0:\n        odd_count += 1\n    \n    # Check each rotation\n    for i in range(1, n):\n        # Update the count of '1's after rotation\n        count_ones += (s[i - 1] == '1') - (s[i - 1] == '0')\n        if count_ones % 2 != 0:\n            odd_count += 1\n    \n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Convert each nested list to a set\n    sets = [set(lst) for lst in nested_lists]\n    \n    # Find the intersection of all sets\n    common_elements = set.intersection(*sets)\n    \n    # Convert the result back to a list\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    if s.strip() == \"\":\n        return False\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dict_list):\n    for d in dict_list:\n        if d:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    result_str = ''.join(map(str, tup))\n    return int(result_str)"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(item) if isinstance(item, (int, float, str)) and item.replace('.', '', 1).isdigit() else item for item in sublist) for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    \n    return arr[low]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    \n    for tup in tuples_list:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    \n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_proper_divisors(n):\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_divisors = sum_of_proper_divisors(num)\n        if sum_divisors > num and sum_of_proper_divisors(sum_divisors) == num:\n            amicable_sum += num + sum_divisors\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(real, imag):\n    return cmath.phase(complex(real, imag))"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Dictionary to store the first occurrence of each difference\n    first_occurrence = {0: -1}\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for i, char in enumerate(binary_string):\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = count_0 - count_1\n        \n        if diff in first_occurrence:\n            max_diff = max(max_diff, i - first_occurrence[diff])\n        else:\n            first_occurrence[diff] = i\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def find_divisors(n):\n    divisors = set()\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.add(i)\n    return divisors\n\ndef sum_of_common_divisors(a, b):\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = divisors_a.intersection(divisors_b)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, text):\n    words = text.split()\n    result = [word for word in words if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n    \n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        col_sum = sum(matrix[row][col] for row in range(n))\n        if col_sum != target_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if main_diagonal_sum != target_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    if secondary_diagonal_sum != target_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    max_item = None\n    max_count = 0\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s) if char in vowels]\n    vowel_chars = [s[i] for i in vowel_indices]\n    vowel_chars.reverse()\n    \n    for i, v_index in enumerate(vowel_indices):\n        s_list[v_index] = vowel_chars[i]\n    \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    result = \"\"\n    for char in tup:\n        result += char\n    return result"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum([num for num in numbers if num < 0])"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_counter = 0\n    non_zero_counter = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_counter += 1\n        else:\n            non_zero_counter += 1\n    \n    if non_zero_counter == 0:\n        return 0\n    \n    return zero_counter / non_zero_counter"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    binary_representation = bin(n)\n    count_of_ones = binary_representation.count('1')\n    return count_of_ones == (len(binary_representation) - 2)"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_tuples):\n    result_set = set()\n    for tup in list_of_tuples:\n        for item in tup:\n            result_set.add(item)\n    return result_set"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, k):\n    \"\"\"Reverse the first k elements of the array.\"\"\"\n    arr[:k+1] = arr[:k+1][::-1]\n\ndef pancake_sort(arr):\n    n = len(arr)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted portion\n        max_idx = arr.index(max(arr[:n]))\n        \n        # If the maximum element is not already at the end of the unsorted portion\n        if max_idx != n - 1:\n            # Flip the maximum element to the front\n            if max_idx != 0:\n                flip(arr, max_idx)\n            # Flip the entire unsorted portion to move the maximum element to its correct position\n            flip(arr, n - 1)\n        \n        # Reduce the size of the unsorted portion\n        n -= 1\n    \n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    scale = n // gcd\n    return (x * scale, y * scale)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, remove_list):\n    return [item for item in main_list if item not in remove_list]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total_sum += term\n    return total_sum"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid indices\")\n    \n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    count = 0\n    sub_str = 'std'\n    step = len(sub_str)\n    \n    for i in range(len(s)):\n        if s[i:i+step] == sub_str:\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if not tup:\n        return True\n    \n    first_type = type(tup[0])\n    \n    for element in tup[1:]:\n        if type(element) != first_type:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    if n == 0:\n        return False\n    \n    def find_first_occurrence(arr, n, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element and (mid == 0 or arr[mid - 1] < element):\n                return mid\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    \n    def find_last_occurrence(arr, n, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element and (mid == n - 1 or arr[mid + 1] > element):\n                return mid\n            elif arr[mid] > element:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n    \n    first_index = find_first_occurrence(arr, n, element)\n    if first_index == -1:\n        return False\n    \n    last_index = find_last_occurrence(arr, n, element)\n    count = last_index - first_index + 1\n    \n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    return bin(n).count('1')"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    return negatives + positives"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replacement_char):\n    return ''.join(replacement_char if char == ' ' else char for char in input_string)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming 32-bit integer\n        mask |= (1 << i)\n    return num | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    count_dict = {}\n    for tup in tuples_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    memo = {}\n    \n    def count_sequences(current_value, remaining_length):\n        if remaining_length == 0:\n            return 1\n        if (current_value, remaining_length) in memo:\n            return memo[(current_value, remaining_length)]\n        \n        count = 0\n        for next_value in range(2 * current_value, m + 1):\n            count += count_sequences(next_value, remaining_length - 1)\n        \n        memo[(current_value, remaining_length)] = count\n        return count\n    \n    return count_sequences(1, n)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    return list1[:-1] + list2"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(num):\n    # Calculate the square root of the number\n    sqrt_num = math.sqrt(num)\n    \n    # Round up to the next integer\n    next_int = math.ceil(sqrt_num)\n    \n    # Return the square of the next integer\n    return next_int ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Step 1: Compute inc_sum array\n    inc_sum = [0] * n\n    for i in range(n):\n        inc_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n    \n    # Step 2: Compute dec_sum array\n    dec_sum = [0] * n\n    for i in range(n-1, -1, -1):\n        dec_sum[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n    \n    # Step 3: Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n    \n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    result = [elem for elem in arr2 if elem in set1]\n    return result"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x):\n    return tup.count(x)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    r, theta = cmath.polar(z)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(elements, n):\n    def generate_combinations(current, start):\n        if len(current) == n:\n            result.append(tuple(current))\n            return\n        for i in range(start, len(elements)):\n            current.append(elements[i])\n            generate_combinations(current, i)\n            current.pop()\n    \n    result = []\n    generate_combinations([], 0)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple((max(a, b) for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    \n    count = 1\n    a, b = 1, 1\n    while True:\n        a, b = b, 2 * b + a\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n\n# Example usage:\n# assert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    if L < 0 or L > len(lst):\n        raise ValueError(\"L is out of the valid range\")\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    else:\n        return 24 + (human_years - 2) * 5"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        sublist = [lst[j] for j in range(i, len(lst), n)]\n        result.append(sublist)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * (side_length ** 2)"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_of_squares += odd_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total_sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum_of_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_powers += even_number ** 5\n    return sum_of_powers"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    rear_elements = []\n    for tup in tuples_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    def binomial_coefficient(n, k):\n        if k > n:\n            return 0\n        if k == 0 or n == k:\n            return 1\n        k = min(k, n - k)  # Take advantage of symmetry\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n    \n    total_sum = 0\n    for k in range(0, n + 1, 2):\n        total_sum += binomial_coefficient(n, k)\n    \n    return total_sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    found = False\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            found = True\n            index = i\n            break\n    return (found, index)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    \n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    \n    # Dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Count the frequency of each digit\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    \n    # Validate the frequency of each digit\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    return bool(pattern.search(text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    if k == 0 or n == 0:\n        return 0\n    \n    # Create the modified array by repeating the original array k times\n    modified_array = arr * k\n    \n    # Initialize variables for Kadane's algorithm\n    max_ending_here = max_so_far = modified_array[0]\n    \n    # Apply Kadane's algorithm\n    for i in range(1, len(modified_array)):\n        max_ending_here = max(modified_array[i], max_ending_here + modified_array[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst_of_lsts):\n    max_len = 0\n    longest_lst = []\n    \n    for lst in lst_of_lsts:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            longest_lst = lst\n    \n    return (max_len, longest_lst)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    # Assume a and b are the legs of the triangle\n    c = math.sqrt(a**2 + b**2)\n    return round(c, 10)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    if not lst:\n        raise ValueError(\"List is empty\")\n    \n    max_value = lst[0]\n    \n    for item in lst:\n        if isinstance(item, (int, float)) and isinstance(max_value, (int, float)):\n            if item > max_value:\n                max_value = item\n        elif isinstance(item, str) and isinstance(max_value, str):\n            if item > max_value:\n                max_value = item\n        else:\n            raise TypeError(\"List contains incomparable types\")\n    \n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort_and_count(arr, temp_arr, 0, n-1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    aggregate_scores = {}\n    \n    for name, score in lst:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n    \n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    \n    return (max_name, max_score)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    def binomial_coefficient(n, k):\n        return math.comb(n, k)\n    \n    total_count = 0\n    for k in range(n + 1):\n        total_count += binomial_coefficient(n, k) ** 2\n    \n    return total_count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            max_depth = max(max_depth, dict_depth(d[key]))\n    return max_depth + 1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = []\n    for word in words:\n        if word.startswith('p') or word.startswith('P'):\n            p_words.append(word)\n        if len(p_words) == 2:\n            return tuple(p_words)\n    return ()"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array to store the maximum sum of increasing subsequences\n    dp = [0] * n\n    \n    # Fill dp array\n    for j in range(n):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[j] > arr[l]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Find the maximum sum including the kth element\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[k] > arr[j]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Create a mask with all bits set to 1\n    mask = (1 << n.bit_length()) - 1\n    \n    # Iterate from the leftmost bit to the rightmost bit\n    for i in range(n.bit_length() - 1, -1, -1):\n        # Check if the bit at position i is unset\n        if not (n & (1 << i)):\n            # Set the bit at position i\n            n |= (1 << i)\n            break\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    highest_power = 1\n    while highest_power * 2 <= n:\n        highest_power *= 2\n    return highest_power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    result = []\n    for i in range(len(ids)):\n        nested_dict = {ids[i]: {names[i]: scores[i]}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n <= 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    \n    # Calculate the sum of f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # Store the result in memo and return the maximum of sum_parts and n\n    memo[n] = max(sum_parts, n)\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if not s:\n        return \"Invalid\"\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    # Return the middle value\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        while number > 0:\n            total_sum += number % 10\n            number //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    return len(set(tuples_list))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the first digit that is smaller than the digit immediately to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, return the original number\n        return n\n    \n    # Step 2: Find the smallest digit on the right side of the identified digit that is larger than it\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Step 3: Swap the identified digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Sort the digits to the right of the swapped position in ascending order\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Step 5: Return the new number\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    if not tuples_list:\n        return None\n    \n    min_product = float('inf')\n    \n    for pair in tuples_list:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    \n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values and convert to numeric types\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # Find and return the minimum value\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    set_seq1 = set(seq1)\n    for item in seq2:\n        if item in set_seq1:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return ()\n    \n    sorted_arr = sorted(arr, reverse=True)\n    return (sorted_arr[0], sorted_arr[1])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = 0\n    max_list = []\n    \n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    \n    return max_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_cubes += even_number ** 3\n    return sum_of_cubes"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    average = total_sum / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings_tuple):\n    return [s[-1] for s in strings_tuple]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    parts = date.split('-')\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    \n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    result = []\n    for a, b in zip(tuple1, tuple2):\n        result.append(a & b)\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the y-coordinate of the vertex\n    k = c - (b**2) / (4 * a)\n    \n    # Calculate the directrix\n    directrix = k - (1 + 4 * a * c) / (4 * a)\n    \n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if element > num:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return int(str(number)[-1])"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    seen = {}\n    count = 0\n    \n    for t in tuples:\n        if t in seen:\n            count += 1\n        else:\n            seen[t] = True\n            reverse_t = (t[1], t[0])\n            if reverse_t in seen:\n                count += 1\n            else:\n                seen[reverse_t] = True\n    \n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Step 1: Convert each integer to a string\n    str_lst = [str(num) for num in lst]\n    \n    # Step 2: Concatenate all the string representations\n    concatenated_str = ''.join(str_lst)\n    \n    # Step 3: Convert the concatenated string back to an integer\n    result = int(concatenated_str)\n    \n    return result"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to find words ending with 'ly'\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    \n    # Find the first match\n    match = adverb_pattern.search(sentence)\n    \n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group(0)\n        return (start_pos, end_pos, adverb)\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side):\n    return 6 * (side ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    total_count = 0\n    positive_count = 0\n    \n    for num in arr:\n        total_count += 1\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / total_count"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        inner_result = tuple(a * b for a, b in zip(tuple1[i], tuple2[i]))\n        result.append(inner_result)\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    total_count = 0\n    for item in lst:\n        total_count += tup.count(item)\n    return total_count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [num ** 3 for num in numbers]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]\n    \n    # Generate Perrin numbers up to index n\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    \n    # Sum the Perrin numbers from P(0) to P(n)\n    return sum(perrin_numbers[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, length):\n    return [s for s in string_list if len(s) == length]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even_factors += i\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    return bool(pattern.search(text))"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "import re\n\ndef remove_uppercase(s):\n    # Use regex to find all uppercase substrings and replace them with an empty string\n    return re.sub(r'[A-Z]+', '', s)"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    def generate_combinations(current, remaining):\n        if not remaining:\n            return current\n        element = remaining[0]\n        new_combinations = [subset + [element] for subset in current]\n        return generate_combinations(current + new_combinations, remaining[1:])\n    \n    return generate_combinations([[]], elements)"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    current_max = current_min = 1\n    \n    for num in arr:\n        if num == 0:\n            current_max = current_min = 1\n            continue\n        \n        temp = current_max\n        current_max = max(num, current_max * num, current_min * num)\n        current_min = min(num, temp * num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    dp = arr[:]  # Initialize dp array with the same values as arr\n    \n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    if len(tup) < 2:\n        return ()\n    \n    result = tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n    return result"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1] + 1:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Normalize each tuple in both lists by converting them to sets\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n    \n    # Find the intersection of the two sets of normalized tuples\n    intersection = set1 & set2\n    \n    # Convert the resulting sets back to tuples\n    return {tuple(s) for s in intersection}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(input_string, old_char, new_char):\n    result = \"\"\n    for char in input_string:\n        if char == old_char:\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    largest = max(arr)\n    smallest = min(arr)\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Iterate through the string to find the first non-zero digit\n    for char in num_str:\n        if char.isdigit() and char != '0':\n            return int(char)\n\n    # If no non-zero digit is found, return None (though this case should not occur with valid input)\n    return None"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    odd_numbers = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_natural_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    even_count = 0\n    odd_count = 0\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count * odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    toggled = \"\"\n    for char in s:\n        if char.isupper():\n            toggled += char.lower()\n        elif char.islower():\n            toggled += char.upper()\n        else:\n            toggled += char\n    return toggled"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Ensure both strings are of the same length by padding with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    total_distance = 0\n    \n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for i in range(n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    combined_list = list(tuple1) + list(tuple2)\n    unique_elements = set(combined_list)\n    sorted_elements = sorted(unique_elements)\n    return tuple(sorted_elements)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        current_length = len(sublist)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    seen = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j] and (lst[j], lst[i]) not in seen:\n                count += 1\n                seen.add((lst[i], lst[j]))\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    result = []\n    for _ in range(N):\n        result.append({})\n    return result"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    count_dict = {}\n    \n    # Count occurrences of each number\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Filter numbers that appear only once\n    unique_nums = [num for num in nums if count_dict[num] == 1]\n    \n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    base_area = 2 * math.pi * radius**2\n    lateral_area = 2 * math.pi * radius * height\n    surface_area = base_area + lateral_area\n    return round(surface_area, 2)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    if not sub_list:\n        return True\n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i] == sub_list[0]:\n            if all(main_list[i + k] == sub_list[k] for k in range(len(sub_list))):\n                return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    \n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n    \n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All three lists must be of the same length\")\n    \n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    \n    return interleaved"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1 ^ set2\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(tup):\n    if not isinstance(tup, tuple):\n        return (tup,) if tup % 2 == 0 else ()\n    \n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            sub_result = extract_even(item)\n            if sub_result:\n                result.append(sub_result)\n        else:\n            if item % 2 == 0:\n                result.append(item)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the slant height\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the area of one triangular face\n    triangle_area = 0.5 * base_edge * slant_height\n    \n    # Calculate the total surface area\n    total_surface_area = base_area + 4 * triangle_area\n    \n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    if n <= 0 or n >= len(arr):\n        return arr\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    for num in range(start, end + 1):\n        root = int(math.sqrt(num))\n        if root * root == num:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return ((x, y), complex(x, y))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    # Split the IP address into segments\n    segments = ip_address.split('.')\n    \n    # Remove leading zeroes from each segment\n    cleaned_segments = [str(int(segment)) for segment in segments]\n    \n    # Join the cleaned segments back into a single string\n    cleaned_ip = '.'.join(cleaned_segments)\n    \n    return cleaned_ip"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    # Count the number of differing positions\n    diff_count = sum(1 for a, b in zip(bin1, bin2) if a != b)\n    return diff_count"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    \n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    \n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to access each digit\n    num_str = str(num)\n    \n    # Calculate the number of digits\n    num_digits = len(num_str)\n    \n    # Compute the sum of each digit raised to the power of the number of digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the computed sum is equal to the original number\n    return armstrong_sum == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    avg_n = sum_n / n\n    return (sum_n, avg_n)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize the list with numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    \n    while numbers:\n        # The first number in the list is a Lucid number\n        ludic_number = numbers.pop(0)\n        ludic_numbers.append(ludic_number)\n        \n        # Remove every nth element from the list\n        if numbers:\n            step = ludic_number\n            numbers = [num for i, num in enumerate(numbers) if (i + 1) % step != 0]\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return (None, -1, -1)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 0:\n        return 1\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if 1 <= k <= len(lst):\n        return lst[:k-1] + lst[k:]\n    return lst"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or not isinstance(matrix[0], list):\n        raise ValueError(\"Input must be a list of lists\")\n    if n < 0 or n >= len(matrix[0]):\n        raise ValueError(\"Column index out of range\")\n    \n    column = [row[n] for row in matrix]\n    return max(column)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        for value in tup:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    result = []\n    for inner_tuple in tuples:\n        average = sum(inner_tuple) / len(inner_tuple)\n        result.append(average)\n    return result"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    result = tuple(a % b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    result = [float(a) / b for a, b in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    numbers = ''\n    non_numbers = ''\n    \n    for char in s:\n        if char.isdigit():\n            numbers += char\n        else:\n            non_numbers += char\n    \n    return non_numbers + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    dp = [1] * len(nums)\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = []\n    i, j = 0, 0\n    \n    # Merge the two sorted lists\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # If there are remaining elements in list1\n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n    \n    # If there are remaining elements in list2\n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n    \n    # Calculate the median\n    mid = size - 1\n    median = (merged_list[mid] + merged_list[mid + 1]) / 2.0\n    \n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [x ** n for x in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    result = []\n    for char in s:\n        if char == ' ':\n            result.append('%20')\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    \n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            adjacent_coords.append([x + dx, y + dy])\n    \n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    s = s.replace(' ', '_')\n    s = s.replace('_', ' ')\n    s = s.replace(' ', '_')\n    return s"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zeroes = [x for x in lst if x != 0]\n    zero_count = len(lst) - len(non_zeroes)\n    return non_zeroes + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for bit in range(32):  # Assuming 32-bit integers\n        count = 0\n        for num in arr:\n            if num & (1 << bit):\n                count += 1\n        \n        total_sum += count * (n - count) * (1 << bit)\n    \n    return total_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a max-heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(initial_amount, final_amount):\n    return initial_amount == final_amount"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(V, T):\n    WCI = 13.12 + 0.6215 * T - 11.37 * V**0.16 + 0.3965 * T * V**0.16\n    return math.ceil(WCI)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Step 1: Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    \n    # Step 2: Calculate the length of each remaining name\n    lengths = [len(name) for name in filtered_names]\n    \n    # Step 3: Sum the lengths\n    total_length = sum(lengths)\n    \n    # Step 4: Return the total sum of the lengths\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(strings):\n    result = []\n    for s in strings:\n        cleaned = re.sub(r'\\([^)]*\\)', '', s)\n        result.append(cleaned)\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be less than or equal to the length of the array\")\n    \n    # Extract the subarray up to the k-th position\n    subarray = arr[:k]\n    \n    # Reverse the subarray\n    reversed_subarray = subarray[::-1]\n    \n    # Concatenate the reversed subarray with the remaining part of the original array\n    result = reversed_subarray + arr[k:]\n    \n    return result"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    count = [[0] * N for _ in range(N)]\n    \n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            from_top = dp[i-1][j] if i > 0 else float('-inf')\n            from_left = dp[i][j-1] if j > 0 else float('-inf')\n            \n            if from_top > from_left:\n                dp[i][j] = from_top + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = from_left + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n    \n    max_sum = dp[N-1][N-1]\n    num_cells = count[N-1][N-1]\n    \n    return max_sum / num_cells"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the result of base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string\n    for char in result_str:\n        # Convert the character to an integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"([^\"]*)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    s = s.replace(' ', ':')\n    s = s.replace(',', ':')\n    s = s.replace('.', ':')\n    return s"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    current_product = 1\n    \n    for i in range(n):\n        current_product *= arr[i]\n        total_sum += current_product\n    \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    \n    # Create a mask with all bits set to 1 except the first and last bits\n    mask = (1 << n.bit_length()) - 1\n    mask ^= 1  # Toggle the first bit\n    mask ^= (1 << (n.bit_length() - 1))  # Toggle the last bit\n    \n    # XOR the number with the mask to toggle the middle bits\n    toggled_middle = n ^ mask\n    \n    # Combine the toggled middle bits with the first and last bits\n    result = (toggled_middle & mask) | first_bit | last_bit\n    \n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    return bool(pattern.match(s))"}
{"task_id": "Mbpp/739", "solution": "def count_digits(num):\n    return len(str(num))\n\ndef find_Index(k):\n    n = 1\n    while True:\n        triangular_number = n * (n + 1) // 2\n        if count_digits(triangular_number) == k:\n            return n\n        n += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup) - 1, 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)  # Effective number of rotations\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(d != 0 and num % d == 0 for d in digits):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for i, char in enumerate(s):\n        if char.isupper() and i != 0:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(int(x) for x in lst)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[(i - 1) // 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    jacobsthal = [0] * (n + 1)\n    jacobsthal[0] = 0\n    jacobsthal[1] = 1\n    \n    for i in range(2, n + 1):\n        jacobsthal[i] = jacobsthal[i - 1] + 2 * jacobsthal[i - 2]\n    \n    return jacobsthal[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuples, k):\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    return sorted_tuples[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    if len(l1) != len(l2) or len(l2) != len(l3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    if len(lst) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    paired = set()\n    count = 0\n    \n    for s in string_list:\n        if s in paired:\n            continue\n        reverse_s = s[::-1]\n        if reverse_s in string_list and reverse_s not in paired:\n            count += 1\n            paired.add(s)\n            paired.add(reverse_s)\n    \n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s: str) -> bool:\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Find the minimum difference by comparing adjacent pairs in the sorted array\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Calculate the (n+1)th triangular number\n    triangular_number = (n + 1) * (n + 2) // 2\n    # Subtract 1 to get the nth polite number\n    return triangular_number - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    num_frequency = {}\n    \n    for num in nums:\n        required_num = target_sum - num\n        if required_num in num_frequency:\n            count += num_frequency[required_num]\n        \n        if num in num_frequency:\n            num_frequency[num] += 1\n        else:\n            num_frequency[num] = 1\n    \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    diff_set = set1 - set2\n    return sorted(list(diff_set))"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum_of_powers = 0\n    for i in range(1, 2*n, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            continue\n    \n    return stack == []"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(text, sub):\n    start_index = text.find(sub)\n    if start_index != -1:\n        end_index = start_index + len(sub)\n        return (sub, start_index, end_index)\n    return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0:  # Check if the index is odd\n            if lst[i] % 2 == 0:  # Check if the element is even\n                return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    element_count = {}\n    \n    # Count occurrences of each element\n    for num in lst:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Sum non-repeated elements\n    sum_non_repeated = sum(num for num in element_count if element_count[num] == 1)\n    \n    return sum_non_repeated"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_sublist = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current_sublist[-1]:\n            current_sublist.append(elem)\n        else:\n            result.append(current_sublist)\n            current_sublist = [elem]\n    \n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    result = []\n    n = len(tuple_list)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_tuple = (tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1])\n            result.append(sum_tuple)\n    \n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n):\n            if (end - start + 1) % 2 != 0:  # Check if the length is odd\n                total_sum += sum(arr[start:end+1])\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        else:  # max_val == b\n            h = (60 * ((r - g) / delta) + 240) % 360\n    \n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even * first_odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Remove parentheses and split by commas\n    elements = s.strip('()').split(',')\n    # Convert each element to an integer\n    int_elements = tuple(int(elem.strip()) for elem in elements)\n    return int_elements"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    result = []\n    for item in input_tuple:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(list_of_lists):\n    return len(list_of_lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target and (mid == len(arr) - 1 or arr[mid + 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    rotated = (n << d) | (n >> (32 - d))\n    # Mask to ensure the result is 32 bits\n    return rotated & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def count_equal_numbers(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    sqrt_num = int(math.sqrt(num))\n    return sqrt_num * sqrt_num == num"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    for element in tup:\n        if element == k:\n            return True\n    return False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for elem1, elem2 in zip(tuple1, tuple2):\n        if elem2 >= elem1:\n            return False\n    return True"}
