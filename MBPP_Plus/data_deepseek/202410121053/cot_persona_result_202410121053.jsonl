{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a list (or any other desired format)\n    return tuple(shared_elements)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    min_heap = []\n    \n    for num in nums:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heapreplace(min_heap, num)\n    \n    return sorted(min_heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # XOR the two numbers to find the differing bits\n    xor_result = num1 ^ num2\n    \n    # Count the number of 1s in the XOR result, which represents the differing bits\n    differing_bits_count = bin(xor_result).count('1')\n    \n    # Return True if there is exactly one differing bit, otherwise False\n    return differing_bits_count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    # Find the first occurrence of the character\n    first_index = s.find(char)\n    # Find the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If the character is not found or appears only once, return the original string\n    if first_index == -1 or first_index == last_index:\n        return s\n    \n    # Construct the new string excluding the first and last occurrence of the character\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Pair each row with its sum\n    paired_rows = [(sum(row), row) for row in matrix]\n    \n    # Sort the pairs based on the sum\n    sorted_pairs = sorted(paired_rows, key=lambda x: x[0])\n    \n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_pairs]\n    \n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume\n\n# Test the function with the given assertion\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(input_string):\n    # Define the regular expression pattern for sequences of lowercase letters joined by an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Search for the pattern in the input string\n    match = re.search(pattern, input_string)\n    \n    # Return True if the pattern is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(str1, str2):\n    # Create a set of characters to be removed for efficient lookup\n    chars_to_remove = set(str2)\n    \n    # Initialize an empty result string\n    result = []\n    \n    # Iterate through each character in the main string\n    for char in str1:\n        # If the character is not in the set of characters to be removed, append it to the result\n        if char not in chars_to_remove:\n            result.append(char)\n    \n    # Join the list into a string and return it\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(x):\n    n = 1\n    while True:\n        W_n = n * (2 ** n) - 1\n        if W_n == x:\n            return True\n        elif W_n > x:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Join the sorted digits to form the largest number\n    largest_number = ''.join(map(str, sorted_digits))\n    \n    # Convert the result back to an integer\n    return int(largest_number)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return 3 * n * n - 2 * n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            length = j - i + 1\n            digit_sum = sum(int(char) for char in substring)\n            \n            if digit_sum == length:\n                count += 1\n    \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    smallest = numbers[0]\n    for num in numbers[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = float('-inf')\n    \n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Initialize a 2D list to store Bell numbers\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # The first Bell number B(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # Explicitly set the first element of the row to the last element of the previous row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The Bell number B(n) is the first element of the nth row\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    non_increasing = True\n    non_decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            non_increasing = False\n        if arr[i] < arr[i - 1]:\n            non_decreasing = False\n    \n    return non_increasing or non_decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    # Edge case: if sublist is empty, it is always a sublist\n    if not sublist:\n        return True\n    \n    # Edge case: if sublist is longer than main_list, it cannot be a sublist\n    if len(sublist) > len(main_list):\n        return False\n    \n    # Iterate through main_list with a sliding window of the size of sublist\n    for i in range(len(main_list) - len(sublist) + 1):\n        # Check if the current segment of main_list matches sublist\n        if main_list[i:i + len(sublist)] == sublist:\n            return True\n    \n    # If no match is found, return False\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr\n    \n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    \n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n % 2 != 0 or n % 4 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    \n    def get_pattern(arr):\n        pattern = {}\n        next_index = 0\n        result = []\n        for item in arr:\n            if item not in pattern:\n                pattern[item] = next_index\n                next_index += 1\n            result.append(pattern[item])\n        return result\n    \n    return get_pattern(arr1) == get_pattern(arr2)"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize the sequence array with base cases\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    if n > 1:\n        seq[2] = 1\n    \n    # Compute the sequence up to n\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Update merged_dict with dict1\n    merged_dict.update(dict1)\n    \n    # Update merged_dict with dict2\n    merged_dict.update(dict2)\n    \n    # Update merged_dict with dict3\n    merged_dict.update(dict3)\n    \n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency_dict = {}\n    for element in lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n: int) -> int:\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Check if the number has at least three digits\n    if len(num_str) < 3:\n        return False\n    \n    # Get the first two distinct digits\n    first_digit = num_str[0]\n    second_digit = None\n    \n    for i in range(1, len(num_str)):\n        if num_str[i] != first_digit:\n            second_digit = num_str[i]\n            break\n    \n    # If no second distinct digit is found, it's not undulating\n    if second_digit is None:\n        return False\n    \n    # Check the alternating pattern\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first_digit:\n                return False\n        else:\n            if num_str[i] != second_digit:\n                return False\n    \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        result = 1\n        for _ in range(b):\n            result *= a\n        return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    # Initialize the variable with the first tuple in the list\n    min_tuple = tuples_list[0]\n    \n    # Iterate through the list starting from the second tuple\n    for current_tuple in tuples_list[1:]:\n        # Compare the second value of the current tuple with the smallest value found so far\n        if current_tuple[1] < min_tuple[1]:\n            # Update the smallest tuple if the current one is smaller\n            min_tuple = current_tuple\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    # Step 1: Flatten the list of lists\n    flattened_list = [item for sublist in lists for item in sublist]\n    \n    # Step 2: Count frequencies using a dictionary\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Step 3: Return the frequency dictionary\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component except the first one\n    camel_str = components[0] + ''.join(x.capitalize() for x in components[1:])\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m, memo={}):\n    # Base cases\n    if m == 0:\n        return 1\n    if m >= n:\n        return 0\n    \n    # Check if the value is already computed\n    if (n, m) in memo:\n        return memo[(n, m)]\n    \n    # Recursive formula with memoization\n    result = (n - m) * eulerian_num(n - 1, m - 1, memo) + (m + 1) * eulerian_num(n - 1, m, memo)\n    memo[(n, m)] = result\n    \n    return result"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    # Iterate over each sublist in the list of lists\n    for i in range(len(list_of_lists)):\n        # Sort the sublist in place\n        list_of_lists[i].sort()\n    # Return the modified list of lists\n    return list_of_lists"}
{"task_id": "Mbpp/105", "solution": "def count(booleans):\n    true_count = 0\n    for boolean in booleans:\n        if boolean:\n            true_count += 1\n    return true_count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    combined_list = list(tup) + lst\n    return tuple(combined_list)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    # Combine the three lists into one\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Return the sorted list\n    return combined_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    n = len(binary_str)\n    count_odd = 0\n    \n    for i in range(rotations):\n        rotated_str = binary_str[i:] + binary_str[:i]\n        num_value = int(rotated_str, 2)\n        if num_value % 2 != 0:\n            count_odd += 1\n    \n    return count_odd"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Initialize the set of common elements with the first list\n    common_elements = set(nested_lists[0])\n    \n    # Iterate through the remaining lists\n    for lst in nested_lists[1:]:\n        # Convert the current list to a set and find the intersection with common_elements\n        common_elements.intersection_update(lst)\n    \n    # Return the final set of common elements\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    for d in dict_list:\n        if d:  # This checks if the dictionary is not empty\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    # Convert each integer in the tuple to a string and concatenate them\n    concatenated_string = ''.join(str(num) for num in t)\n    # Convert the concatenated string back to an integer\n    result_integer = int(concatenated_string)\n    return result_integer"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for sublist in lst:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                new_sublist.append(element)\n        result.append(new_sublist)\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    \n    for pair in tuples_list:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    \n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_proper_divisors(n):\n    \"\"\"Calculate the sum of proper divisors of n.\"\"\"\n    total = 1\n    sqrt_n = int(n**0.5)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Sum all amicable numbers from 1 to the specified limit.\"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_divisors = sum_of_proper_divisors(num)\n        if sum_divisors > num and sum_of_proper_divisors(sum_divisors) == num:\n            amicable_sum += num + sum_divisors\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    current_diff = 0\n    max_diff = 0\n    \n    for char in binary_string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff > max_diff:\n            max_diff = current_diff\n        \n        if current_diff < 0:\n            current_diff = 0\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a: int, b: int) -> int:\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, text):\n    # Split the text into words\n    words = text.split()\n    \n    # Filter words that are longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    # Return the filtered list of words\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n    \n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency_dict = {}\n    \n    # Count the frequency of each item in the list\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in frequency_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    s_vowels = [char for char in s if char in vowels]\n    s_vowels.reverse()\n    \n    result = []\n    vowel_index = 0\n    \n    for char in s:\n        if char in vowels:\n            result.append(s_vowels[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary and count the number of '1's\n    binary_representation = bin(n)\n    count_of_ones = binary_representation.count('1')\n    \n    # Check if the number of '1's is equal to the number of bits in the binary representation\n    return count_of_ones == (len(binary_representation) - 2)"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    unique_numbers = set()\n    for sublist in list_of_lists:\n        for number in sublist:\n            unique_numbers.add(number)\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, k):\n    \"\"\"Reverses the first k elements of the array.\"\"\"\n    arr[:k] = arr[:k][::-1]\n\ndef pancake_sort(arr):\n    \"\"\"Sorts the array using the pancake sort algorithm.\"\"\"\n    n = len(arr)\n    while n > 1:\n        # Find the index of the maximum element in the unsorted portion\n        max_idx = arr.index(max(arr[:n]))\n        \n        # Flip the array to bring the maximum element to the front\n        flip(arr, max_idx + 1)\n        \n        # Flip the entire unsorted portion to move the maximum element to its correct position\n        flip(arr, n)\n        \n        # Reduce the size of the unsorted portion\n        n -= 1\n    \n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    # Ensure all lists are of the same length\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Initialize the count of identical elements\n    count = 0\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        # Compare elements at the same index in all three lists\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    # Return the count of identical elements at the same positions\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    factor = n // gcd\n    x = x0 * factor\n    y = y0 * factor\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, to_remove):\n    remove_set = set(to_remove)\n    return [item for item in lst if item not in remove_set]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total_sum += term\n    return total_sum"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    \"\"\"Helper function to calculate the sum of divisors of a given integer n.\"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    \"\"\"Function to determine if the sum of the divisors of two integers a and b are the same.\"\"\"\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    \n    for i, char in enumerate(s):\n        if ord(char) - ord('a') + 1 == i + 1:\n            count += 1\n    \n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = sum(1 for num in nums if num % 2 == 0)\n    odd_count = len(nums) - even_count\n    \n    def count_pairs(n):\n        return n * (n - 1) // 2\n    \n    return count_pairs(even_count) + count_pairs(odd_count)"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(nums, target):\n    count = 0\n    for num in nums:\n        if num == target:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    # Ensure the indices are within the valid range\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid start or end index\")\n    \n    # Calculate the sum of the sublist from start_index to end_index (inclusive)\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    count = 0\n    sub_len = 3  # Length of the substring 'std'\n    for i in range(len(s) - sub_len + 1):\n        if s[i:i+sub_len] == 'std':\n            count += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    def find_first_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        first_occurrence = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                first_occurrence = mid\n                high = mid - 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return first_occurrence\n\n    def find_last_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        last_occurrence = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == x:\n                last_occurrence = mid\n                low = mid + 1\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return last_occurrence\n\n    first = find_first_occurrence(arr, n, x)\n    if first == -1:\n        return False\n    \n    last = find_last_occurrence(arr, n, x)\n    count = last - first + 1\n    \n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, char):\n    return input_string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Return the first n elements\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Construct the mask with even bits set to 1\n    mask = 0\n    for i in range(0, 32, 2):  # Assuming 32-bit integers\n        mask |= (1 << i)\n    \n    # Set the even bits in the number using the mask\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    count_dict = {}\n    for tup in tuples_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize the dp array\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: sequences of length 1\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the dp array\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n    \n    # Sum up the number of sequences of length n\n    total_sequences = sum(dp[n][j] for j in range(1, m + 1))\n    \n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    # Ensure both lists are non-empty\n    if not list1 or not list2:\n        raise ValueError(\"Both lists must be non-empty\")\n    \n    # Remove the last element of the first list\n    list1.pop()\n    \n    # Append all elements of the second list to the first list\n    list1.extend(list2)\n    \n    # Return the modified first list\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    return len(input_string)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    # Find the integer part of the square root of n\n    root = math.isqrt(n)\n    # Increment the root to get the next integer\n    next_root = root + 1\n    # Return the square of the next integer\n    return next_root * next_root"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the inc array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    \n    # Fill the dec array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    \n    # Calculate the maximum sum of bitonic subsequences\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the diagonal elements\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the table\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    intersection_set = set1.intersection(set2)\n    return list(intersection_set)"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(a):\n    magnitude = abs(a)\n    if a >= 0:\n        phase_angle = 0.0\n    else:\n        phase_angle = math.pi\n    return (magnitude, phase_angle)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(elements, n):\n    def generate_combinations(current, start_index):\n        if len(current) == n:\n            result.append(tuple(current))\n            return\n        for i in range(start_index, len(elements)):\n            current.append(elements[i])\n            generate_combinations(current, i)\n            current.pop()\n    \n    result = []\n    generate_combinations([], 0)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a boolean array to track prime numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Implement the Sieve of Eratosthenes\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of prime numbers\n    return sum(is_prime)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(tuple(max(a, b) for a, b in zip(sub1, sub2)) for sub1, sub2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    \n    sequence = [1, 1]\n    count = 0\n    index = 2\n    \n    while True:\n        next_term = 2 * sequence[-1] + sequence[-2]\n        sequence.append(next_term)\n        \n        if is_prime(next_term):\n            count += 1\n            if count == n:\n                return next_term\n        \n        index += 1\n\n# Example usage:\n# assert newman_prime(3) == 7\n# assert newman_prime(4) == 17\n# assert newman_prime(5) == 41"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Perform element-wise division\n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ValueError(\"Division by zero is not allowed\")\n        result.append(a // b)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    # Ensure L is a valid integer and within the bounds of the list length\n    if not isinstance(L, int) or L < 0 or L > len(lst):\n        raise ValueError(\"L must be a non-negative integer and less than or equal to the length of the list\")\n    \n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(age):\n    if age <= 2:\n        return age * 10.5\n    else:\n        return 2 * 10.5 + (age - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    # Return the ASCII value using the ord() function\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total_sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [tup[-1] for tup in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(e1 - e2 for e1, e2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even_coeffs = 0\n    for k in range(0, n + 1, 2):\n        sum_even_coeffs += binomial_coefficient(n, k)\n    return sum_even_coeffs"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n    \n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n    \n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    \n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    def min_sub_array_sum(arr):\n        min_ending_here = min_so_far = arr[0]\n        for x in arr[1:]:\n            min_ending_here = min(x, min_ending_here + x)\n            min_so_far = min(min_so_far, min_ending_here)\n        return min_so_far\n\n    max_single = kadane(arr)\n    total_sum = sum(arr)\n    min_single = min_sub_array_sum(arr)\n\n    if k == 1:\n        return max_single\n\n    if total_sum > 0:\n        max_wrap = total_sum * k\n    else:\n        max_wrap = total_sum * k - min_single\n\n    return max(max_single, max_wrap)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    # Filter out integers from the list\n    integers = [x for x in lst if isinstance(x, int)]\n    # Return the maximum value among the filtered integers\n    return max(integers)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n    \n    # Iterate through all possible divisors\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    aggregate_dict = {}\n    \n    for name, value in tuples_list:\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        else:\n            aggregate_dict[name] = value\n    \n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    max_value = aggregate_dict[max_name]\n    \n    return (max_name, max_value)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    count = 0\n    for k in range(n + 1):\n        binomial_coeff = math.comb(n, k)\n        count += binomial_coeff ** 2\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    \n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            max_depth = max(max_depth, dict_depth(d[key]))\n    \n    return max_depth + 1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words_list):\n    selected_words = []\n    \n    for words in words_list:\n        split_words = words.split()\n        for word in split_words:\n            if word.lower().startswith('p'):\n                selected_words.append(word)\n            if len(selected_words) == 2:\n                return tuple(selected_words)\n    \n    return tuple(selected_words)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array\n    dp = arr[:]\n    \n    # Fill dp array\n    for j in range(i + 1):\n        for l in range(j):\n            if arr[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Find the maximum sum including the kth element\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[k] > arr[j]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num_largest):\n    # Step 1: Input validation\n    if not list1 or not list2 or num_largest <= 0:\n        return []\n    \n    # Step 2: Generate all possible products\n    products = [x * y for x in list1 for y in list2]\n    \n    # Step 3: Sort products in descending order\n    products.sort(reverse=True)\n    \n    # Step 4: Select the specified number of largest products\n    largest_products = products[:num_largest]\n    \n    # Step 5: Return the result\n    return largest_products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All input lists must have the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        nested_dict = {list1[i]: {list2[i]: list3[i]}}\n        result.append(nested_dict)\n    \n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n <= 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    \n    # Calculate the sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # Take the maximum of the sum and n\n    result = max(sum_parts, n)\n    \n    # Store the result in the memo dictionary\n    memo[n] = result\n    \n    return result"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b <= c) or (c <= b <= a):\n        return float(b)\n    elif (b <= a <= c) or (c <= a <= b):\n        return float(a)\n    else:\n        return float(c)"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)) if digit.isdigit())\n    \n    total_sum = 0\n    for item in numbers:\n        if isinstance(item, (int, float)):\n            total_sum += digit_sum(item)\n    \n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for tup in tuples_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, elem):\n    return elem in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 == 1"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the first digit that is smaller than the digit immediately to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return None  # No such digit found, return None\n    \n    # Step 2: Find the smallest digit on the right side that is larger than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Step 3: Swap the identified digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Sort the digits to the right of i in ascending order\n    digits = digits[:i + 1] + sorted(digits[i + 1:])\n    \n    # Step 5: Return the new number\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out the integers from the list\n    integers = [x for x in lst if isinstance(x, int)]\n    # Return the minimum value from the filtered list of integers\n    return min(integers)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    set_seq2 = set(seq2)\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    # Split the input date into year, month, and day\n    year, month, day = date.split('-')\n    \n    # Reformat the date to dd-mm-yyyy\n    new_date = f\"{day}-{month}-{year}\"\n    \n    return new_date"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    # Check if the input tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length\")\n    \n    # Perform elementwise AND operation\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the x-coordinate of the vertex\n    x_vertex = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    \n    # Calculate the directrix using the formula\n    directrix = y_vertex - (1 + b**2 - 4 * a * c) / (4 * a)\n    \n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, h):\n    # Calculate the median length of the trapezium\n    median_length = (a + b) / 2\n    return median_length"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result.append(s[i])\n    return ''.join(result)"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    pair_count = {}\n    total_count = 0\n    \n    for t in tuples:\n        sorted_t = tuple(sorted(t))\n        if sorted_t in pair_count:\n            pair_count[sorted_t] += 1\n        else:\n            pair_count[sorted_t] = 1\n    \n    for count in pair_count.values():\n        if count > 1:\n            total_count += count // 2\n    \n    return total_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    # Convert each integer to a string and concatenate them\n    concatenated_str = ''.join(map(str, lst))\n    # Convert the concatenated string back to an integer\n    return int(concatenated_str)"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Use regex to find the first word ending with \"ly\"\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        adverb = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return start_index, end_index, adverb\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area\n\n# Test the function with an assertion\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in tup:\n        if element in lst:\n            count += 1\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(num_list):\n    return [num ** 3 for num in num_list]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Base cases for Perrin sequence\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    \n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]\n    \n    # Calculate Perrin numbers up to index n\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n    \n    # Sum the Perrin numbers up to index n\n    return sum(perrin_numbers[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    # Step 1: Identify all factors of n\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    \n    # Step 2: Filter out the even factors\n    even_factors = [factor for factor in factors if factor % 2 == 0]\n    \n    # Step 3: Sum the even factors\n    return sum(even_factors)"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Check each word for the presence of 'z'\n    for word in words:\n        if 'z' in word.lower():\n            return True\n    \n    # If no word contains 'z', return False\n    return False"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month is in the list\n    if month in months_with_31_days:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    temp = []\n    in_uppercase = False\n    \n    for char in s:\n        if char.isupper():\n            if not in_uppercase:\n                in_uppercase = True\n            temp.append(char)\n        else:\n            if in_uppercase:\n                in_uppercase = False\n                temp.clear()\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if not lst:\n        return [[]]\n    \n    first = lst[0]\n    rest = lst[1:]\n    \n    combinations_without_first = combinations_list(rest)\n    combinations_with_first = []\n    \n    for combination in combinations_without_first:\n        combinations_with_first.append(combination + [first])\n    \n    return combinations_without_first + combinations_with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_prod = 0\n    \n    for i in range(n):\n        current_prod = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] > arr[j - 1]:\n                current_prod *= arr[j]\n            else:\n                break\n        max_prod = max(max_prod, current_prod)\n    \n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    # Initialize an empty list to store the pairwise sums\n    result = []\n    \n    # Iterate through the tuple, summing each element with the next one\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    if n == 1:\n        return 0\n    \n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    # Normalize each tuple to a set of its elements\n    normalized_list1 = [frozenset(t) for t in list1]\n    normalized_list2 = [frozenset(t) for t in list2]\n    \n    # Find the intersection of the normalized sets\n    intersection_sets = set(normalized_list1) & set(normalized_list2)\n    \n    # Convert the resulting sets back to tuples\n    intersection_tuples = {tuple(sorted(s)) for s in intersection_sets}\n    \n    return intersection_tuples"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(number):\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Iterate through the string to find the first non-zero digit\n    for char in num_str:\n        if char.isdigit() and char != '0':\n            return int(char)\n    \n    # If no non-zero digit is found, return 0 (which should not happen for valid inputs)\n    return 0"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    total_distance = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n    \n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums, n):\n    if n == 0:\n        return 0\n    \n    max_current = max_global = nums[0]\n    \n    for i in range(1, n):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n    \n    return max_global"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Convert tuples to sets to remove duplicates\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the union set to a sorted tuple\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst):\n    from collections import defaultdict\n    \n    # Step 1: Count the frequency of each element\n    frequency = defaultdict(int)\n    for num in lst:\n        frequency[num] += 1\n    \n    # Step 2: Calculate the number of pairs\n    total_pairs = 0\n    for count in frequency.values():\n        if count > 1:\n            total_pairs += count * (count - 1) // 2\n    \n    return total_pairs"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    # Convert the integer to a string to iterate over each digit\n    digits = str(n)\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for digit in digits:\n        # Convert the character back to an integer and add to the sum\n        total_sum += int(digit)\n    \n    # Return the total sum\n    return total_sum"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    for sublist in list_of_lists:\n        sublist.sort()\n    return list_of_lists"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    # Step 1: Count the occurrences of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Step 2: Collect numbers that appear exactly once\n    unique_nums = [num for num in nums if count_dict[num] == 1]\n    \n    # Step 3: Return the list of unique numbers\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    if sub_len > main_len:\n        return False\n    \n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    # Check if all lists are of the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    \n    for element in nested_tuple:\n        if isinstance(element, int):\n            if element % 2 == 0:\n                result.append(element)\n        elif isinstance(element, tuple):\n            sub_result = extract_even(element)\n            if sub_result:\n                result.append(sub_result)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate the slant height\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the area of one triangular face\n    triangular_face_area = base_edge * slant_height / 2\n    \n    # Calculate the total surface area\n    total_surface_area = base_area + 4 * triangular_face_area\n    \n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the list at the nth element\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Concatenate the second part with the first part\n    new_arr = second_part + first_part\n    \n    # Return the new list\n    return new_arr"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    for num in range(start, end + 1):\n        root = math.isqrt(num)\n        if root * root == num:\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) >= 2:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    \n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(bin1, bin2):\n    # Input validation\n    if len(bin1) != len(bin2) or not all(bit in '01' for bit in bin1) or not all(bit in '01' for bit in bin2):\n        return None\n    \n    # Identify differing positions\n    differing_positions = [i for i in range(len(bin1)) if bin1[i] != bin2[i]]\n    \n    # Count swaps\n    num_differences = len(differing_positions)\n    if num_differences % 2 != 0:\n        return None\n    else:\n        return num_differences // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    \n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    \n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n\n    return None  # This line should never be reached if k is valid"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to a string to access each digit\n    num_str = str(num)\n    \n    # Determine the number of digits\n    num_digits = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    \n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n\n\n# Assertion to verify the function works correctly\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    # Initialize the list with numbers from 1 to n\n    ludic_numbers = list(range(1, n + 1))\n    \n    # Index to track the position in the list\n    index = 1\n    \n    while index < len(ludic_numbers):\n        # Get the current number to remove multiples of\n        current_number = ludic_numbers[index]\n        \n        # Remove every current_number-th element from the list\n        remove_index = index + current_number\n        while remove_index < len(ludic_numbers):\n            ludic_numbers.pop(remove_index)\n            remove_index += current_number - 1\n        \n        # Move to the next number in the list\n        index += 1\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    \n    # Search for the pattern in the text\n    match = regex.search(text)\n    \n    # If a match is found, extract the substring, start index, and end index\n    if match:\n        substring = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return (substring, start_index, end_index)\n    \n    # If no match is found, return None or handle as needed\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Initialize a 2D list (table) to store Bell numbers\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the table using the dynamic programming approach\n    for i in range(1, n + 1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is at bell[n][0]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    k -= 1  # Convert 1-based index to 0-based index\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    # Initialize the maximum value to a very small number\n    max_value = float('-inf')\n    \n    # Iterate through each row in the matrix\n    for row in matrix:\n        # Update the maximum value if the current element in the n-th column is greater\n        if row[n] > max_value:\n            max_value = row[n]\n    \n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst_of_lsts):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst_of_lsts:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for inner_tuple in tuples:\n        average = sum(inner_tuple) / len(inner_tuple)\n        averages.append(average)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    non_numbers = ''.join([char for char in s if not char.isdigit()])\n    numbers = ''.join([char for char in s if char.isdigit()])\n    return non_numbers + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    max_size = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_size = max(max_size, dp[i])\n    \n    return max_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    # Initialize pointers for both lists\n    i, j = 0, 0\n    combined = []\n    \n    # Merge the two sorted lists\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            combined.append(list1[i])\n            i += 1\n        else:\n            combined.append(list2[j])\n            j += 1\n    \n    # If there are remaining elements in list1, add them\n    while i < size:\n        combined.append(list1[i])\n        i += 1\n    \n    # If there are remaining elements in list2, add them\n    while j < size:\n        combined.append(list2[j])\n        j += 1\n    \n    # Calculate the median\n    mid = size\n    if (2 * size) % 2 == 0:\n        return (combined[mid - 1] + combined[mid]) / 2.0\n    else:\n        return combined[mid]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return radius * radius"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    offsets = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)]\n    return [[x + dx, y + dy] for dx, dy in offsets]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    # Replace all whitespaces with underscores\n    input_string = input_string.replace(' ', '_')\n    # Replace all underscores with whitespaces\n    input_string = input_string.replace('_', ' ')\n    return input_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero_elements = [x for x in lst if x != 0]\n    zero_count = lst.count(0)\n    return non_zero_elements + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    # Initialize the sum\n    xor_sum = 0\n    \n    # Iterate through each bit position\n    for i in range(32):\n        # Count of numbers with the i-th bit set\n        count = 0\n        \n        # Check the i-th bit of each number\n        for num in arr:\n            if num & (1 << i):\n                count += 1\n        \n        # The number of pairs with the i-th bit different\n        pairs = count * (n - count)\n        \n        # Add the contribution of the i-th bit to the sum\n        xor_sum += pairs * (1 << i)\n    \n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef build_max_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\ndef heap_sort(arr):\n    n = len(arr)\n    build_max_heap(arr)\n    \n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    \n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(wind_velocity, temperature):\n    # Calculate the wind chill index using the given formula\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    \n    # Round the result to the next integer\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(s):\n    # Regular expression to match text within parentheses, including nested parentheses\n    pattern = r'\\([^)]*\\)'\n    # Replace all matches with an empty string\n    result = re.sub(pattern, '', s)\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    # Split the text into words using regex to handle spaces and punctuation\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check each word\n    for word in words:\n        # Check if 'z' is in the word and not at the start or end\n        if 'z' in word and not word.startswith('z') and not word.endswith('z'):\n            return True\n    \n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(original_tuple, dictionary):\n    return original_tuple + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "It seems like there was a partial message sent in your request. Could you please clarify or provide more details on what you need help with? If you're referring to adding test cases to generated code, I can certainly assist with that. Please provide the code or specify the programming language and the type of tests you'd like to add."}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    # Ensure both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    # Initialize a counter for matching indices\n    count = 0\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        # Compare elements at the same index\n        if list1[i] == list2[i]:\n            # Increment the counter if elements are the same\n            count += 1\n    \n    # Return the count of matching indices\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    # Ensure the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    # Sum the corresponding elements and store in a new list\n    result = [a + b for a, b in zip(list1, list2)]\n    \n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    A = math.pi * r * l\n    \n    return A"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    # Define the characters to be replaced\n    characters_to_replace = [' ', ',', '.']\n    \n    # Iterate through each character and replace it with a colon\n    for char in characters_to_replace:\n        input_string = input_string.replace(char, ':')\n    \n    return input_string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in the number\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set to 1 in the middle range\n    mask = (1 << (num_bits - 1)) - 1\n    mask ^= 1  # Toggle the bits in the middle range\n    \n    # Apply the mask to toggle the middle bits\n    result = n ^ mask\n    \n    return result"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    # Define the regex pattern to match the start of the string (^) followed by a vowel (a, e, i, o, u)\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    \n    # Check if the string matches the pattern\n    return bool(pattern.match(s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n_digits):\n    n = 1\n    while True:\n        triangular_number = n * (n + 1) // 2\n        if int(math.log10(triangular_number)) + 1 == n_digits:\n            return n\n        n += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Iterate through the tuple in steps of 2\n    for i in range(0, len(tup) - 1, 2):\n        # Assign the first element of the pair as the key and the second as the value\n        result_dict[tup[i]] = tup[i + 1]\n    \n    return result_dict"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    length = len(lst)\n    n = n % length  # Effective rotation\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(d != 0 and num % d == 0 for d in digits):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for i, char in enumerate(s):\n        if i > 0 and char.isupper():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_strings):\n    # Convert each string to an integer\n    num_integers = [int(num) for num in num_strings]\n    # Sort the list of integers\n    sorted_integers = sorted(num_integers)\n    # Return the sorted list\n    return sorted_integers"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[(i - 1) // 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    j0, j1 = 0, 1\n    \n    # Compute the nth Jacobsthal number iteratively\n    for _ in range(2, n + 1):\n        jn = j1 + 2 * j0\n        j0, j1 = j1, jn\n    \n    return j1"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the list of tuples based on the second element (integer value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements of the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    # Step 1: Check if the list has fewer than 2 unique elements\n    unique_elements = list(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    \n    # Step 2: Sort the list\n    unique_elements.sort()\n    \n    # Step 3: Return the second smallest element\n    return unique_elements[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    # Set to keep track of processed strings\n    processed = set()\n    # Counter for pairs\n    pair_count = 0\n    \n    for string in string_list:\n        # Generate the reverse of the current string\n        reverse_string = string[::-1]\n        \n        # Check if the reverse string exists in the list and hasn't been processed yet\n        if reverse_string in string_list and reverse_string not in processed and reverse_string != string:\n            pair_count += 1\n        \n        # Add the current string to the processed set\n        processed.add(string)\n    \n    return pair_count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s: str) -> bool:\n    # Check if the string contains exactly one decimal point\n    if s.count('.') != 1:\n        return False\n    \n    # Split the string into integer and decimal parts\n    integer_part, decimal_part = s.split('.')\n    \n    # Check if both parts are numeric\n    if not integer_part.isdigit() or not decimal_part.isdigit():\n        return False\n    \n    # Check if the decimal part has exactly two digits\n    if len(decimal_part) != 2:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference\n    min_diff = float('inf')\n    \n    # Find the minimum difference by comparing consecutive elements\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    digit_count = 0\n    for char in input_string:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    # Start with the first polite number\n    current_number = 3\n    polite_count = 1\n    \n    # Loop until we find the nth polite number\n    while polite_count < n:\n        current_number += 1\n        # Check if the current number is a power of 2\n        if (current_number & (current_number - 1)) != 0:\n            polite_count += 1\n    \n    return current_number"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    count = 0  # Initialize result\n    num_freq = {}  # Dictionary to store frequency of each number\n\n    # Traverse through all elements\n    for num in arr:\n        # Calculate the required number to form the sum with the current number\n        required_num = sum - num\n        \n        # If the required number is present in the dictionary, add its frequency to the count\n        if required_num in num_freq:\n            count += num_freq[required_num]\n        \n        # Update the frequency of the current number in the dictionary\n        if num in num_freq:\n            num_freq[num] += 1\n        else:\n            num_freq[num] = 1\n    \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the ith odd natural number\n        odd_number = 2 * i + 1\n        \n        # Calculate the fourth power of the odd number\n        fourth_power = odd_number ** 4\n        \n        # Add the fourth power to the total sum\n        total_sum += fourth_power\n    \n    # Return the final sum\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    \n    return stack == []"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    start_index = main_string.find(substring)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(substring)\n    return (substring, start_index, end_index)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_group = [lst[0]]\n    \n    for element in lst[1:]:\n        if element == current_group[-1]:\n            current_group.append(element)\n        else:\n            result.append(current_group)\n            current_group = [element]\n    \n    result.append(current_group)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            combined_tuple = tuple(a + b for a, b in zip(tuple_list[i], tuple_list[j]))\n            if combined_tuple not in result:\n                result.append(combined_tuple)\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Calculate the number of subarrays starting at index i\n        # that include the element at index i\n        total_subarrays = (n - i) * (i + 1)\n        odd_subarrays = (total_subarrays + 1) // 2\n        \n        # Add the contribution of the current element to the total sum\n        total_sum += arr[i] * odd_subarrays\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Find the maximum and minimum values among the normalized RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    # Calculate Saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val * 100\n    \n    # Calculate Hue (H)\n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif max_val == g:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        elif max_val == b:\n            h = (60 * ((r - g) / delta) + 240) % 360\n    \n    return (h, s, v)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        raise ValueError(\"List does not contain both even and odd numbers\")"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split by commas\n    num_strs = tuple_str.strip('()').split(',')\n    \n    # Convert each string to an integer\n    int_tuple = tuple(int(num.strip()) for num in num_strs)\n    \n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    return bool(pattern.search(text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^a.*b$')\n    return bool(pattern.match(text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Compare each element in the tuples\n    for elem1, elem2 in zip(tuple1, tuple2):\n        if elem2 >= elem1:\n            return False\n    \n    return True"}
