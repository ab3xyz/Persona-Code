{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return tuple(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    for i in range(1, len(s)):\n        if s[i:] + s[:i] == s:\n            return i\n    return len(s)"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    first_occurrence = s.find(c)\n    last_occurrence = s.rfind(c)\n    if first_occurrence!= -1 and last_occurrence!= -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    return all(c.islower() or c == '_' for c in s)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([c for c in s1 if c not in s2])"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr)!= len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    i = 1\n    while True:\n        woodall = i * (2 ** i) - 1\n        if woodall == n:\n            return True\n        elif woodall > n:\n            return False\n        i += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    return min(nums)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        max_diff = max(max_diff, diff)\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    bell = [0 for i in range(n + 1)]\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            increasing = False\n        if arr[i] < arr[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    for i in range(len(lst)):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if not tuples:\n        return True\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t)!= length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap!= 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                swapped = True\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(int(n**0.5) + 1):\n        if (n + i**2) ** 0.5 == int((n + i**2) ** 0.5):\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, colors):\n    if len(patterns)!= len(colors):\n        return False\n    color_map = {}\n    for pattern, color in zip(patterns, colors):\n        if pattern in color_map:\n            if color_map[pattern]!= color:\n                return False\n        else:\n            if color in color_map.values():\n                return False\n            color_map[pattern] = color\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    return [t for t in tuples if all(i % k == 0 for i in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    n = str(n)\n    diff = 0\n    sign = 1\n    for i in n:\n        diff += sign * int(i)\n        sign *= -1\n    return diff % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2!= 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total = sum(ord(c) for c in s)\n    return chr((total - ord('a') * len(s)) % 26 + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    a = [0] * (n + 1)\n    a[1] = 1\n    for i in range(2, n + 1):\n        a[i] = a[a[i - 1]] + a[i - a[i - 1]]\n    return a[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(lst):\n    return max(len(word) for word in lst)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    for string in lst:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    diff = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        new_diff = int(n[i]) - int(n[i-1])\n        if new_diff == 0 or (diff * new_diff) > 0:\n            return False\n        diff = new_diff\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    return min(len(sublist) for sublist in lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    words = s.split('_')\n    return words[0].capitalize() + ''.join(word.capitalize() for word in words[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m > n:\n        return 0\n    if m == 0 or m == n:\n        return 1\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + m * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return sum(1 for elem in lst if elem)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s[i % len(s)] == '1':\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common = common.intersection(set(lst))\n    return list(common)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(i) for i in tup) for tup in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    for i in range(0, len(nums), 2):\n        if i == len(nums) - 1 or nums[i]!= nums[i + 1]:\n            return nums[i]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    return max(abs(a * b) for a, b in tuples)"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                sum += i\n            else:\n                sum += i + n // i\n    return sum\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if i!= sum_of_divisors(i) and sum_of_divisors(i) <= n and sum_of_divisors(sum_of_divisors(i)) == i:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    count = 0\n    for char in s:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        max_diff = max(max_diff, count)\n        if count < 0:\n            count = 0\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n\n    common_divisors = get_divisors(gcd(a, b))\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row)!= expected_sum:\n            return False\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n))!= expected_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n))!= expected_sum:\n        return False\n    if sum(matrix[i][n - i - 1] for i in range(n))!= expected_sum:\n        return False\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n    return \"\".join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(lst):\n    return sum(num for num in lst if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = sum(1 for x in arr if x == 0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return 0\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    i = 1\n    while i <= n:\n        if i == n:\n            return True\n        n -= i\n        i *= 2\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set(num for tup in lst for num in tup)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    n = len(arr)\n    for size in range(n, 0, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index!= size - 1:\n            if max_index!= 0:\n                arr[:max_index + 1] = arr[:max_index + 1][::-1]\n            arr[:size] = arr[:size][::-1]\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    return sum(isinstance(i, list) for i in tup)"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd!= 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(main_list, elements_to_remove):\n    return [element for element in main_list if element not in elements_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    def sum_of_divisors(n):\n        sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                sum += i\n        return sum\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if ord(s[i]) - 96 == i + 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count + (even_count * (even_count - 1)) // 2 + (odd_count * (odd_count - 1)) // 2"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(i for i in lst if start <= i <= end)"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    return len(set(type(x) for x in tup)) == 1"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    first_occurrence = find_first_occurrence(arr, n, x)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = find_last_occurrence(arr, n, x)\n    return (last_occurrence - first_occurrence + 1) > n / 2\n\n\ndef find_first_occurrence(arr, n, x):\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n\ndef find_last_occurrence(arr, n, x):\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return s[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, c):\n    return s.replace(' ', c)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(set(lst), reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    mask = 0b10101010\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples):\n    result = {}\n    for tup in tuples:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in result:\n            result[sorted_tup] += 1\n        else:\n            result[sorted_tup] = 1\n    return result"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, 0, -1):\n                dp[i][j] += dp[i - 1][k]\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if len(list1) > 0:\n        list1.pop()\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s.replace(\" \", \"\"))"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    root = math.sqrt(n)\n    if root == int(root):\n        return (root + 1) ** 2\n    else:\n        return math.ceil(root) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    msis = [x for x in arr]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:\n                msis[i] = msis[j] + arr[i]\n    mds = [x for x in arr]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and mds[i] < mds[j] + arr[i]:\n                mds[i] = mds[j] + arr[i]\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, msis[i] + mds[i] - arr[i])\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, x):\n    return tup.count(x)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(c):\n    r = abs(c)\n    phi = math.atan2(c.imag, c.real)\n    return (r, phi)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)"}
{"task_id": "Mbpp/255", "solution": "import itertools\n\ndef combinations_colors(lst, n):\n    return list(itertools.product(lst, repeat=n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for current_prime in range(2, int(n**0.5) + 1):\n        if sieve[current_prime]:\n            for multiple in range(current_prime*2, n, current_prime):\n                sieve[multiple] = False\n    return sum(sieve)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max((x, y)) for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num) and is_prime((num - 1) // 2):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length\")\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(tuple1[i] // tuple2[i])\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [[lst[i + j * n] for j in range(len(lst) // n + (1 if (i + 1) > len(lst) % n else 0))] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum([(2*i - 1)**2 for i in range(1, n + 1)])"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return 6 * (n - 1) + find_star_num(n - 1)"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples):\n    return [t[-1] for t in tuples]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            total += math.comb(n, i)\n    return total"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    for i, element in enumerate(tup):\n        if isinstance(element, tuple):\n            return i\n    return len(tup)"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return 5 * n * (n - 1) + 1"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(s):\n    return bool(re.search('ab{2,3}', s))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    max_sum = float('-inf')\n    total_sum = sum(arr)\n    max_ending_here = 0\n    \n    for i in range(n):\n        max_ending_here += arr[i]\n        max_sum = max(max_sum, max_ending_here)\n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    if total_sum > 0:\n        max_sum = max(max_sum, total_sum * (k - 1) + max_sum)\n    \n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = 0\n    max_list = None\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    return max(numeric_values)"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    return sum(i for i in range(1, n) if n % i == 0)"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(students):\n    student_scores = {}\n    for student, score in students:\n        if student in student_scores:\n            student_scores[student] += score\n        else:\n            student_scores[student] = score\n    max_score = max(student_scores.values())\n    for student, score in student_scores.items():\n        if score == max_score:\n            return (student, score)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total = 2 ** (2 * n)\n    return math.comb(2 * n, n) ** 2 / total"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d, depth=1):\n    if not any(isinstance(v, dict) for v in d.values()):\n        return depth\n    return max(dict_depth(v, depth + 1) for v in d.values() if isinstance(v, dict))"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = []\n    for word in words:\n        p_words.extend([w for w in word.split() if w.startswith('p')])\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = [0] * n\n    max_sum[0] = arr[0]\n    for j in range(1, i + 1):\n        max_sum[j] = arr[j]\n        for l in range(j):\n            if arr[j] > arr[l] and max_sum[j] < max_sum[l] + arr[j]:\n                max_sum[j] = max_sum[l] + arr[j]\n    max_sum_with_k = max_sum[i] + arr[k]\n    for j in range(i + 1, k):\n        if arr[j] > arr[k] and max_sum_with_k < max_sum[j] + arr[k]:\n            max_sum_with_k = max_sum[j] + arr[k]\n    return max_sum_with_k"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i * j)\n    products.sort(reverse=True)\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s.replace(\" \", \"\"))"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    left_most_unset_bit = n & -n\n    while left_most_unset_bit & n:\n        left_most_unset_bit <<= 1\n    return n | left_most_unset_bit"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1.0/3) * math.pi * radius * radius * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        last_power = power\n        power *= 2\n    return last_power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, fmt):\n    return [fmt.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys1, keys2, values):\n    return [{key1: {key2: value}} for key1, key2, value in zip(keys1, keys2, values)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 1:\n        return 0\n    memo[n] = max(n, get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo))\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) > 0 and s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Not Valid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    return sum(sum(int(digit) for digit in str(num)) for num in lst)"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples):\n    unique_tuples = set()\n    for tup in tuples:\n        unique_tuples.add(tuple(sorted(tup)))\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return min(a, b)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2!= 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[i - 1]:\n            digits[j], digits[i - 1] = digits[i - 1], digits[j]\n            break\n    return int(''.join(map(str, digits[:i] + sorted(digits[i:]))))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    return min(a * b for a, b in tuples)"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min([i for i in lst if isinstance(i, (int, float))])"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [tup[n] for tup in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return (max1, max2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum([i**3 for i in range(2, n*2 + 1, 2)])"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = sum(i**3 for i in range(1, n + 1))\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2!= 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return (-(4*a*c - b**2) / (4*a))"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) / 3"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(num > i for i in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return s[1::2]"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    pair_set = set()\n    bidirectional_count = 0\n    for pair in pairs:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in pair_set:\n            bidirectional_count += 1\n        pair_set.add(pair)\n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            return (i, len(' '.join(words[:i])) + 1, word)\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    total_count = len(arr)\n    positive_count = sum(1 for num in arr if num > 0)\n    return positive_count / total_count"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b, c * d) for (a, c), (b, d) in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    a, b, c = 0, 2, 3\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b, c = b, c, a + b\n    return total"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(sublists):\n    return min(sublists, key=len)"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    temp = ''\n    for char in s:\n        if char.isupper():\n            temp += char\n        else:\n            if temp:\n                temp = ''\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for elem in lst:\n        result.extend([curr + [elem] for curr in result])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    max_product = min_product = result = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        result = max(result, max_product)\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    max_product = [0 for _ in range(n)]\n    max_product[0] = arr[0]\n    for i in range(1, n):\n        max_product[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    return max(max_product)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return lst == list(range(min(lst), max(lst) + 1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = set(tuple(sorted(t)) for t in list1)\n    set2 = set(tuple(sorted(t)) for t in list2)\n    return set1.intersection(set2)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old, new):\n    return s.replace(old, new)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            while i < len(s) and s[i].islower():\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [i for i in lst if i % 2!= 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count + (odd_count * (odd_count - 1)) // 2"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(a, b):\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(a), str(b)))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1 + tuple2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    return max(len(sublist) for sublist in sublists)"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    values = []\n    start = 0\n    while True:\n        start = s.find('\"', start)\n        if start == -1:\n            break\n        end = s.find('\"', start + 1)\n        if end == -1:\n            break\n        values.append(s[start + 1:end])\n        start = end + 1\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    total_pairs = 0\n    for num in freq:\n        total_pairs += freq[num] * (n - freq[num])\n    return total_pairs // 2"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return lst == sorted(lst)"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return [num for num, freq in count.items() if freq == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_nums = set(numbers)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    if len(sub_list) > len(main_list):\n        return False\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result = (result * i) % 10\n        return result"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [item for triplet in zip(list1, list2, list3) for item in triplet]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    set1 = set(t1)\n    set2 = set(t2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(sorted(dissimilar))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    base_area = base_edge ** 2\n    triangle_area = (base_edge * slant_height) / 2\n    return base_area + 4 * triangle_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    catalan = [0 for i in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    return [i**2 for i in range(math.ceil(math.sqrt(start)), math.floor(math.sqrt(end)) + 1)]"}
{"task_id": "Mbpp/590", "solution": "import math\nimport cmath\n\ndef polar_rect(r, theta):\n    rect = (r * math.cos(theta), r * math.sin(theta))\n    complex_rect = complex(r * math.cos(theta), r * math.sin(theta))\n    return rect, complex_rect"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "import math\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        product = 1\n        for j in range(i):\n            product *= math.comb(n, j)\n        total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = next((num for num in lst if num % 2 == 0), None)\n    odd = next((num for num in lst if num % 2!= 0), None)\n    if even is None or odd is None:\n        return None\n    return abs(even - odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        raise ValueError(\"Both strings must be of the same length\")\n    if not set(s1).issubset('01') or not set(s2).issubset('01'):\n        raise ValueError(\"Both strings must be binary\")\n    diff = [(a, b) for a, b in zip(s1, s2) if a!= b]\n    swaps = 0\n    i = 0\n    while i < len(diff):\n        if diff[i][0] == diff[i][1]:\n            i += 1\n            continue\n        for j in range(i + 1, len(diff)):\n            if diff[j][0] == diff[i][0] and diff[j][1] == diff[i][1]:\n                swaps += 1\n                diff[i] = (diff[i][0], diff[i][0])\n                diff[j] = (diff[j][1], diff[j][1])\n                break\n        else:\n            swaps += 1\n        i += 1\n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while k > 1:\n        if i == len(arr1):\n            j += k - 1\n            break\n        if j == len(arr2):\n            i += k - 1\n            break\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n    if i == len(arr1):\n        return arr2[j]\n    if j == len(arr2):\n        return arr1[i]\n    if arr1[i] < arr2[j]:\n        return arr1[i]\n    else:\n        return arr2[j]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] > 1:\n            return char"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    lucids = [True] * (n + 1)\n    lucids[0] = lucids[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if lucids[i]:\n            for j in range(i * i, n + 1, i):\n                lucids[j] = False\n    return [i for i in range(1, n + 1) if lucids[i]]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(i) for i in zip(*lst)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    return sum(sum(tup) for tup in tuple_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    non_num = [char for char in s if not char.isdigit()]\n    num = [char for char in s if char.isdigit()]\n    return ''.join(non_num + num)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    n = len(a)\n    a.sort()\n    dp = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    merged = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < n:\n        merged.append(arr1[i])\n        i += 1\n    while j < n:\n        merged.append(arr2[j])\n        j += 1\n    if n % 2 == 0:\n        return (merged[n // 2 - 1] + merged[n // 2]) / 2\n    else:\n        return merged[n // 2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    return (radius ** 2) * math.pi / 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            coordinates.append([i, j])\n    return coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [i for i in lst if i!= 0] + [i for i in lst if i == 0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[i] < arr[left]:\n        largest = left\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    wind_velocity = wind_velocity * 1000 / 3600  # convert km/h to m/s\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = \"\"\n    open_parenthesis = False\n    for char in s[0]:\n        if char == \"(\":\n            open_parenthesis = True\n        elif char == \")\":\n            open_parenthesis = False\n        elif not open_parenthesis:\n            result += char\n    return result"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return (9 * n**2 - 9 * n + 2) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        if len(word) > 1 and 'z' in word[1:-1]:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][n-1] / (n * n)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: data for name, data in students.items() if data[0] > min_height and data[1] > min_weight}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for a, b in zip(list1, list2) if a == b)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    result = []\n    in_quote = False\n    current = ''\n    for char in s:\n        if char == '\"':\n            in_quote = not in_quote\n            if not in_quote:\n                result.append(current)\n                current = ''\n        elif in_quote:\n            current += char\n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    return tuple(numbers[i] * numbers[i + 1] for i in range(len(numbers) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i!= result[-1]:\n            result.append(i)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            right = mid - 1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    n = n ^ ((n >> 1) ^ (n << 1))\n    return n & ~(1 << 0) & ~(1 << (n.bit_length() - 1))"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match('^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    triangular_num = 1\n    index = 1\n    while len(str(triangular_num)) < n:\n        index += 1\n        triangular_num += index\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(val is None for val in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(n):\n        for digit in str(n):\n            if digit == '0' or n % int(digit)!= 0:\n                return False\n        return True\n\n    return [i for i in range(startnum, endnum + 1) if is_divisible(i)]"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i in range(len(s)):\n        if s[i].isupper() and i!= 0 and s[i-1]!='':\n            result +='' + s[i]\n        else:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * a + b\n        return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [x for x, y, z in zip(l1, l2, l3) if x == y == z]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(nums):\n    nums = list(set(nums))\n    nums.sort()\n    if len(nums) < 2:\n        return None\n    return nums[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublists_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists_count:\n            sublists_count[sublist_tuple] += 1\n        else:\n            sublists_count[sublist_tuple] = 1\n    return sublists_count"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+(\\.\\d{2})?$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def sum_of_proper_divisors(num):\n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    sum += i\n                else:\n                    sum += i + num // i\n        return sum\n\n    i = 1\n    while n > 0:\n        if sum_of_proper_divisors(i) == i:\n            n -= 1\n        i += 1\n    return i - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return list(zip(lst, lst[1:]))"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count_dict = {}\n    pairs_count = 0\n    for num in numbers:\n        complement = sum - num\n        if complement in count_dict:\n            pairs_count += count_dict[complement]\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return pairs_count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    diff = [i for i in list1 if i not in list2]\n    diff.sort()\n    return diff"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum([(2*i - 1)**4 for i in range(1, n + 1)])"}
{"task_id": "Mbpp/771", "solution": "def check_expression(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char]!= stack.pop():\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    return''.join([word for word in words if len(word)!= k])"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        return None\n    count = string.count(substring)\n    return (substring, index, count)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    return all(lst[i] % 2!= 0 for i in range(1, len(lst), 2))"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(i for i in lst if lst.count(i) == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_group = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n    result.append(current_group)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for r in range(1, len(tuples) + 1):\n        for combo in combinations(tuples, r):\n            sum_tuple = tuple(sum(x) for x in zip(*combo))\n            result.append(sum_tuple)\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1):\n        if length % 2!= 0:\n            for i in range(n - length + 1):\n                total_sum += sum(arr[i:i + length])\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return round(h, 2), round(s, 2), round(v, 2)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(map(int, s.strip('()').split(', ')))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(nums, target):\n    for i in range(len(nums)):\n        if nums[i] >= target:\n            return i\n    return len(nums)"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    return all(i % 2 == 0 and lst[i] % 2 == 0 for i in range(len(lst)))"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(i for i in tup if not isinstance(i, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    return sum(d.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2!= 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    d = d % 32\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    return len(set([a, b, c])) if len(set([a, b, c])) == 1 else len([x for x in [a, b, c] if x in [a, b, c][1:]]) + 1"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root == int(root)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    return max(lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2!= 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(x < y for x, y in zip(tuple1, tuple2))"}
