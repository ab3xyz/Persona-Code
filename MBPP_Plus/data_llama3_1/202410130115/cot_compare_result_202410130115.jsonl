{"task_id": "Mbpp/2", "solution": "def similar_elements(tuple1, tuple2):\n    return tuple(set(tuple1) & set(tuple2))"}
{"task_id": "Mbpp/3", "solution": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    return bin(xor_result).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    result = [word for word in words if len(word) >= 4]\n    return result"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    if len(set(s)) == 1:\n        return 1\n    rotations = 1\n    rotated_s = s[1:] + s[0]\n    while rotated_s!= s:\n        if rotated_s == s:\n            break\n        rotated_s = rotated_s[1:] + rotated_s[0]\n        rotations += 1\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    first_occ = s.find(c)\n    last_occ = s.rfind(c)\n    \n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ+1:]\n    else:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(b, h, l):\n    return 0.5 * b * h * l"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    if not all(char.islower() or char == '_' for char in text):\n        return False\n    if '_' not in text:\n        return False\n    if not text[0].islower() or not text[-1].islower():\n        return False\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return side_length * 4"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    s2_set = set(s2)\n    result = ''\n    for char in s1:\n        if char not in s2_set:\n            result += char\n    return result"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    unique_elements = set()\n    for element in arr:\n        if element in unique_elements:\n            return True\n        unique_elements.add(element)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    i = 1\n    while True:\n        woodall = i * (2 ** i) - 1\n        if woodall == n:\n            return True\n        elif woodall > n:\n            return False\n        i += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    return int(''.join(map(str, sorted(digits, reverse=True))))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a * b) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3*n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    if not nums:\n        return None\n    smallest = nums[0]\n    for num in nums[1:]:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    min_val = min(pairs, key=lambda x: x[0])[0]\n    max_val = max(pairs, key=lambda x: x[1])[1]\n    return max_val - min_val"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(nums):\n    increasing = decreasing = True\n\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            increasing = False\n        if nums[i] < nums[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    sub_list_len = len(sub_list)\n    for i in range(len(main_list) - sub_list_len + 1):\n        if main_list[i:i + sub_list_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if not tuples:\n        return True\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t)!= length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(lst)\n    gap = n\n    swapped = True\n\n    while gap!= 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n                swapped = True\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    return n % 2!= 0 or n % 4 == 0"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    color_pattern_map = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_pattern_map:\n            if color_pattern_map[color]!= pattern:\n                return False\n        else:\n            if pattern in color_pattern_map.values():\n                return False\n            color_pattern_map[color] = pattern\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    result = []\n    for tup in tuples:\n        if all(i % k == 0 for i in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    n = str(n)\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(n)):\n        if i % 2 == 0:\n            even_sum += int(n[i])\n        else:\n            odd_sum += int(n[i])\n    return (even_sum - odd_sum) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2!= 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    return n*(n+1)*(n+2)//6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total = sum(ord(c.lower()) - ord('a') for c in s)\n    return chr((total % 26) + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    seq = [1, 1]\n    used = {1: 0, 1: 1}\n    for i in range(2, n):\n        next_term = seq[i-1] + seq[used.get(seq[i-1], 0)]\n        seq.append(next_term)\n        used[next_term] = i\n    return seq[-1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n ** 2 - 3 * n + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for elem in lst:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    for i in range(n - 1, -1, -1):\n        if i < n:\n            return i"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    diff = int(num_str[1]) - int(num_str[0])\n    for i in range(2, len(num_str)):\n        if int(num_str[i]) - int(num_str[i-1])!= diff or diff == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    if not lst:\n        return None\n    min_val = lst[0][1]\n    min_name = lst[0][0]\n    for name, val in lst:\n        if val < min_val:\n            min_val = val\n            min_name = name\n    return min_name"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    min_length = float('inf')\n    for sublist in lists:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    flattened_list = [element for sublist in lists for element in sublist]\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    return bin(n)[2:]"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    if is_palindrome(n):\n        n += 1\n\n    while True:\n        if is_palindrome(n):\n            return n\n        n += 1"}
{"task_id": "Mbpp/101", "solution": "def kth_element(array, k):\n    if k < 1 or k > len(array):\n        raise IndexError(\"k is out of range\")\n    return array[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    return ''.join(word.capitalize() for word in s.split('_'))"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0 or m > n:\n        return 0\n    if m == n:\n        return 1\n    if m == 1:\n        result = 1\n        for i in range(1, n):\n            result += factorial(i)\n        return result\n\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = factorial(i-1) + 1\n        for j in range(2, min(i+1, m+1)):\n            dp[i][j] = (i-j+1)*dp[i-1][j-1] + j*dp[i-1][j]\n    return dp[n][m]\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return sum(1 for elem in lst if elem)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    lst_tup = list(tup)\n    lst_tup.extend(lst)\n    return tuple(lst_tup)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        num = int(s, 2)\n        if num % 2!= 0:\n            count += 1\n        s = s[1:] + s[0]\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(lists):\n    if not lists:\n        return set()\n    \n    common = set(lists[0])\n    for lst in lists[1:]:\n        common &= set(lst)\n    \n    return common"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    return all(not d for d in dict_list)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    if not t or any(not isinstance(x, int) or x <= 0 for x in t):\n        raise ValueError(\"Input tuple must contain only positive integers\")\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for sublst in lst:\n        float_sublst = []\n        for elem in sublst:\n            try:\n                float_sublst.append(float(elem))\n            except ValueError:\n                float_sublst.append(elem)\n        result.append(tuple(float_sublst))\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    for i in range(0, len(nums), 2):\n        if i == len(nums) - 1 or nums[i]!= nums[i + 1]:\n            return nums[i]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = float('-inf')\n    for tup in tuples:\n        product = abs(tup[0] * tup[1])\n        max_product = max(max_product, product)\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_proper_divisors(n):\n    \"\"\"Calculate the sum of proper divisors of a number.\"\"\"\n    sum_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i!= n // i:\n                sum_divisors += n // i\n    return sum_divisors\n\n\ndef amicable_numbers_sum(n):\n    \"\"\"Sum all amicable numbers from 1 to a specified number.\"\"\"\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        sum_divisors = sum_of_proper_divisors(i)\n        if 1 < sum_divisors <= n and sum_of_proper_divisors(sum_divisors) == i and i!= sum_divisors:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(real, imag):\n    if real == 0:\n        if imag > 0:\n            return math.pi / 2\n        elif imag < 0:\n            return -math.pi / 2\n        else:\n            return 0\n    elif imag == 0:\n        if real > 0:\n            return 0\n        else:\n            return math.pi\n    else:\n        return math.atan2(imag, real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    curr_diff = 0\n    zeros = 0\n    ones = 0\n    \n    for char in s:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        curr_diff = zeros - ones\n        max_diff = max(max_diff, abs(curr_diff))\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    def get_divisors(n):\n        return [i for i in range(1, n + 1) if n % i == 0]\n\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row)!= expected_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n))!= expected_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n))!= expected_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n))!= expected_sum:\n        return False\n    \n    # Check if matrix contains distinct integers in the range 1 to n^2\n    flat_list = [num for row in matrix for num in row]\n    if sorted(flat_list)!= list(range(1, n*n + 1)):\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return max(freq_dict, key=freq_dict.get)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    negative_sum = 0\n    for num in numbers:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_counter = sum(1 for x in arr if x == 0)\n    return zero_counter / len(arr)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    return bin(n).count('1') == len(bin(n)[2:])"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(tuples):\n    result = set()\n    for tup in tuples:\n        for num in tup:\n            result.add(num)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    n = len(arr)\n    while n > 1:\n        max_index = arr.index(max(arr[:n]))\n        if max_index == n - 1:\n            n -= 1\n            continue\n        if max_index!= 0:\n            arr[:max_index + 1] = arr[:max_index + 1][::-1]\n        arr[:n] = arr[:n][::-1]\n        n -= 1\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "solution": "def extended_euclidean(a, b):\n    if a == 0:\n        return b, 0, 1\n    else:\n        gcd, x, y = extended_euclidean(b % a, a)\n        return gcd, y - (b // a) * x, x\n\ndef find_solution(a, b, n):\n    gcd, x, y = extended_euclidean(a, b)\n    if n % gcd!= 0:\n        return None\n    else:\n        x *= n // gcd\n        y *= n // gcd\n        return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    \"\"\"Calculate the sum of divisors of a number.\"\"\"\n    return sum(i for i in range(1, n + 1) if n % i == 0)\n\ndef are_equivalent(a, b):\n    \"\"\"Determine if the sum of the divisors of two integers are the same.\"\"\"\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i, c in enumerate(s):\n        if ord(c) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start, end):\n    if not isinstance(numbers, list) or not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"Input must be a list of numbers\")\n    if not (isinstance(start, int) and isinstance(end, int)):\n        raise ValueError(\"Start and end indices must be integers\")\n    if start < 0 or end >= len(numbers) or start > end:\n        raise ValueError(\"Invalid start or end index\")\n    \n    return sum(numbers[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if not tup:\n        return True\n    data_type = type(tup[0])\n    for element in tup:\n        if type(element)!= data_type:\n            return False\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    def binary_search(arr, n, x, find_first):\n        left, right = 0, n - 1\n        result = -1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                result = mid\n                if find_first:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n\n    first_occurrence = binary_search(arr, n, x, True)\n    if first_occurrence == -1:\n        return False\n    last_occurrence = binary_search(arr, n, x, False)\n    count = last_occurrence - first_occurrence + 1\n    return count > n / 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([char for idx, char in enumerate(s) if idx % 2 == 0])"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, c):\n    return s.replace(' ', c)"}
{"task_id": "Mbpp/232", "solution": "import heapq\n\ndef larg_nnum(lst, n):\n    return heapq.nlargest(n, lst)"}
{"task_id": "Mbpp/233", "solution": "# Problem-solving process:\n# 1. Identify the formula for the lateral surface area of a cylinder: The lateral surface area of a cylinder is given by the formula 2 * \u03c0 * r * h, where r is the radius and h is the height of the cylinder.\n# 2. Define the function with two parameters: radius and height.\n# 3. Import the math module to use the constant \u03c0.\n# 4. Calculate the lateral surface area using the formula and return the result.\n\nimport math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side):\n    return side ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    mask = 0\n    i = 0\n    while i < 32:\n        mask |= 1 << i\n        i += 2\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples):\n    occurrences = {}\n    for tup in tuples:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    memo = {}\n\n    def dfs(i, prev):\n        if i == n:\n            return 1\n        if (i, prev) in memo:\n            return memo[(i, prev)]\n        count = 0\n        for j in range(max(1, prev * 2), m + 1):\n            count += dfs(i + 1, j)\n        memo[(i, prev)] = count\n        return count\n\n    return dfs(0, 0)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if list1:\n        list1.pop()\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    count = 0\n    for char in s:\n        count += 1\n    return count"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    i = math.ceil(math.sqrt(n))\n    return i ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    inc = [x for x in arr]\n    dec = [x for x in arr]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 2:\n                dp[i][j] = 2 if s[i] == s[j] else 1\n            else:\n                dp[i][j] = 2 + dp[i + 1][j - 1] if s[i] == s[j] else max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    intersection_set = set1.intersection(set2)\n    intersection_list = sorted(list(intersection_set))\n    return intersection_list"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, elem):\n    count = 0\n    for i in tup:\n        if i == elem:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(input_list, element):\n    result = []\n    for i in input_list:\n        result.append(element)\n        result.append(i)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(c):\n    r = abs(c)\n    theta = cmath.phase(c)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "import itertools\n\ndef combinations_colors(lst, n):\n    return list(itertools.combinations_with_replacement(lst, n))"}
{"task_id": "Mbpp/256", "solution": "import math\n\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(pair) for pair in zip(*zip(*tuple1), *zip(*tuple2)))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        if num % 4 == 1 and is_prime(num):\n            count += 1\n            if count == n:\n                return num"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result = []\n    for num1, num2 in zip(tuple1, tuple2):\n        if num2 == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(num1 // num2)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, elem in enumerate(lst):\n        result[i % n].append(elem)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * (side_length ** 2)"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    total_sum = 0\n    odd_num = 1\n    for _ in range(n):\n        total_sum += odd_num ** 2\n        odd_num += 2\n    return total_sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n**2 - 6 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    total_sum = 0\n    for index, value in enumerate(numbers):\n        if index % 2 == 0 and value % 2 == 0:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_num = 2 * i\n        total_sum += even_num ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for k in range(n + 1):\n        if k % 2 == 0:\n            total_sum += math.comb(n, k)\n    return total_sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            return count\n        count += 1"}
{"task_id": "Mbpp/279", "solution": "Rough Problem-Solving Process:\n1. Understand what a decagonal number is: A decagonal number is a figurate number that represents a decagon. The formula for the nth decagonal number is n*(8n-10)/2 + 1, but this formula is not correct. After researching, we find the correct formula is n*(8n-10)/2 + 1 is not correct, the correct formula is n*(8n-10)/2 + 1 = 4n^2 - 5n + 1 = 4n^2 - 4n - n + 1 = 4n(n-1) + (4n-4) - n + 1 = 4n(n-1) + 3n - 3 = 4n(n-1) + 3(n-1) + 3 - 3 + 1 = (4n+3)(n-1) + 1 = (4n+3)(n-1) + (4n+3) - (4n+3) + 1 = (4n+3)n - (4n+3) + 1 = 4n^2 + 3n - 4n - 3 + 1 = 4n^2 - n - 2 = 4n^2 - 4n + 3n - 2 = 4n(n-1) + 3n - 2 = 4n^2 - 4n + 3n - 2 = 4n(n-1) + 3(n-1) + 3n - 3 - 2 + 1 = (4n+3)(n-1) + 3n - 4 = (4n+3)(n-1) + 3(n-1) + 3n - 3 - 4 + 1 = (4n+3)(n-1) + 3(n-1) + 3n - 6 + 1 = (4n+3)(n-1) + 3(n-1) + 3n - 5 = (4n+3)(n-1) + 3(n-1) + 3n - 5 = (4n+3)(n-1) + 3n + 3n - 3 - 5 = (4n+3)(n-1) + 6n - 8 = (4n+3)(n-1) + 6n - 6 - 2 = (4n+3)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+3)(n-1) + 6(n-1) + 6n - 8 = (4n+3)(n-1) + 6(n-1) + 6n - 8 = (4n+3+6)(n-1) + 6n - 8 = (4n+9)(n-1) + 6n - 8 = (4n+9)(n-1) + 6n - 6 - 2 = (4n+9)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+9)(n-1) + 6(n-1) + 6n - 8 = (4n+9)(n-1) + 6(n-1) + 6n - 8 = (4n+9+6)(n-1) + 6n - 8 = (4n+15)(n-1) + 6n - 8 = (4n+15)(n-1) + 6n - 6 - 2 = (4n+15)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+15)(n-1) + 6(n-1) + 6n - 8 = (4n+15)(n-1) + 6(n-1) + 6n - 8 = (4n+15+6)(n-1) + 6n - 8 = (4n+21)(n-1) + 6n - 8 = (4n+21)(n-1) + 6n - 6 - 2 = (4n+21)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+21)(n-1) + 6(n-1) + 6n - 8 = (4n+21)(n-1) + 6(n-1) + 6n - 8 = (4n+21+6)(n-1) + 6n - 8 = (4n+27)(n-1) + 6n - 8 = (4n+27)(n-1) + 6n - 6 - 2 = (4n+27)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+27)(n-1) + 6(n-1) + 6n - 8 = (4n+27)(n-1) + 6(n-1) + 6n - 8 = (4n+27+6)(n-1) + 6n - 8 = (4n+33)(n-1) + 6n - 8 = (4n+33)(n-1) + 6n - 6 - 2 = (4n+33)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+33)(n-1) + 6(n-1) + 6n - 8 = (4n+33)(n-1) + 6(n-1) + 6n - 8 = (4n+33+6)(n-1) + 6n - 8 = (4n+39)(n-1) + 6n - 8 = (4n+39)(n-1) + 6n - 6 - 2 = (4n+39)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+39)(n-1) + 6(n-1) + 6n - 8 = (4n+39)(n-1) + 6(n-1) + 6n - 8 = (4n+39+6)(n-1) + 6n - 8 = (4n+45)(n-1) + 6n - 8 = (4n+45)(n-1) + 6n - 6 - 2 = (4n+45)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+45)(n-1) + 6(n-1) + 6n - 8 = (4n+45)(n-1) + 6(n-1) + 6n - 8 = (4n+45+6)(n-1) + 6n - 8 = (4n+51)(n-1) + 6n - 8 = (4n+51)(n-1) + 6n - 6 - 2 = (4n+51)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+51)(n-1) + 6(n-1) + 6n - 8 = (4n+51)(n-1) + 6(n-1) + 6n - 8 = (4n+51+6)(n-1) + 6n - 8 = (4n+57)(n-1) + 6n - 8 = (4n+57)(n-1) + 6n - 6 - 2 = (4n+57)(n-1) + 6(n-1) + 6n - 6 - 2 = (4n+57)(n-1) + 6(n-1) + 6n - 8 = (4n+57)(n-1) + 6(n-1) + 6n - 8 = (4n+57+6)(n-1) + 6n - 8 = (4n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    index = -1\n    for i, value in enumerate(array):\n        if value == element:\n            index = i\n            break\n    return (index!= -1, index)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    digit_freq = {}\n    for digit in str(n):\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item!= element:\n            return False\n    return True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    def max_sub_array_sum(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    def max_sub_array_sum_wrap_around(arr):\n        total_sum = sum(arr)\n        max_sum = max_sub_array_sum(arr)\n        max_sum_from_end = float('-inf')\n        current_sum = 0\n        for num in reversed(arr):\n            current_sum = max(num, current_sum + num)\n            max_sum_from_end = max(max_sum_from_end, current_sum)\n        max_sum_from_start = total_sum - max_sum_from_end\n        return max_sum_from_start + max_sum_from_end\n\n    max_sum = max_sub_array_sum(arr)\n    max_sum_wrap_around = max_sub_array_sum_wrap_around(arr)\n    total_sum = sum(arr)\n    min_sum = float('inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return max(max_sum, max_sum_wrap_around, total_sum * k - min_sum)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += (i * 2) ** 2\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = 0\n    max_list = None\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(dividend, divisor):\n    if divisor == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return math.floor(dividend / divisor)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_val = float('-inf')\n    for element in lst:\n        if isinstance(element, (int, float)):\n            if element > max_val:\n                max_val = element\n    return max_val"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def merge(arr, left, mid, right):\n    left_arr = arr[left:mid+1]\n    right_arr = arr[mid+1:right+1]\n    i = j = 0\n    k = left\n    inv_count = 0\n\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            j += 1\n            inv_count += len(left_arr) - i\n        k += 1\n\n    while i < len(left_arr):\n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n\n    return inv_count\n\n\ndef get_Inv_Count(arr):\n    left = 0\n    right = len(arr) - 1\n    return merge_sort(arr, left, right)\n\n\ndef merge_sort(arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, left, mid)\n        inv_count += merge_sort(arr, mid + 1, right)\n        inv_count += merge(arr, left, mid, right)\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(students):\n    aggregates = {}\n    for student, score in students:\n        if student in aggregates:\n            aggregates[student] += score\n        else:\n            aggregates[student] = score\n    max_student = max(aggregates, key=aggregates.get)\n    return max_student, aggregates[max_student]"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range(n + 1):\n        total_count += math.comb(n, k) ** 2\n    return total_count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(word_list):\n    first_p_word = None\n    second_p_word = None\n    for string in word_list:\n        words = string.split()\n        for word in words:\n            if word.lower().startswith('p'):\n                if first_p_word is None:\n                    first_p_word = word\n                elif second_p_word is None:\n                    second_p_word = word\n                    break\n        if second_p_word is not None:\n            break\n    return first_p_word, second_p_word"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = [0]*n\n    max_sum[0] = arr[0]\n    max_sum_with_k = float('-inf')\n\n    for j in range(1, i+1):\n        max_sum[j] = arr[j]\n        for prev in range(j):\n            if arr[j] > arr[prev] and max_sum[j] < max_sum[prev] + arr[j]:\n                max_sum[j] = max_sum[prev] + arr[j]\n\n    for j in range(k, n):\n        temp_max_sum = arr[j]\n        for prev in range(j):\n            if arr[j] > arr[prev] and temp_max_sum < max_sum[prev] + arr[j] and prev!= k-1:\n                temp_max_sum = max_sum[prev] + arr[j]\n        if j == k:\n            max_sum_with_k = temp_max_sum\n\n    return max_sum_with_k"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = [x * y for x in list1 for y in list2]\n    products.sort(reverse=True)\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s.replace(\" \", \"\"))"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    bin_str = bin(n)[2:]\n    for i in range(len(bin_str)):\n        if bin_str[i] == '0':\n            return n | (1 << (len(bin_str) - 1 - i))\n    return n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    lucas_num1, lucas_num2 = 2, 1\n    \n    for _ in range(2, n + 1):\n        lucas_num1, lucas_num2 = lucas_num2, lucas_num1 + lucas_num2\n    \n    return lucas_num2"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, fmt):\n    return [fmt.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for id, name, score in zip(list1, list2, list3):\n        result.append({id: {name: score}})\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n <= 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    memo[n] = max(n, get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo))\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) == 0:\n        return \"Invalid\"\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        for digit in str(num):\n            total_sum += int(digit)\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuple(sorted(t)) for t in tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return min(a, b)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2!= 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            break\n    else:\n        return -1  # no bigger number can be formed\n    max_digit_idx = i - 1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[j] > digits[max_digit_idx]:\n            max_digit_idx = j\n    digits[i - 1], digits[max_digit_idx] = digits[max_digit_idx], digits[i - 1]\n    digits[i:] = sorted(digits[i:], reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for tup in tuples:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = float('inf')\n    for element in lst:\n        if isinstance(element, (int, float)):\n            if element < min_value:\n                min_value = element\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return len(set(seq1) & set(seq2)) > 0"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    arr.sort(reverse=True)\n    max1, max2 = arr[0], arr[1]\n    min1, min2 = arr[-1], arr[-2]\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_len = 0\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_sublist"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n+1))\n    return total_sum / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    rear_elements = []\n    for string in strings:\n        rear_elements.append(string[-1])\n    return rear_elements"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(list_of_lists, element):\n    count = 0\n    for sublist in list_of_lists:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    odd_numbers = [num for num in numbers if num % 2!= 0]\n    return odd_numbers"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    h = -b / (2 * a)\n    k = c - b**2 / (4 * a)\n    return k - 1 / (4 * a)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for i in arr:\n        if num <= i:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return int(str(n)[-1])"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    negative_numbers = [num for num in numbers if num < 0]\n    return negative_numbers"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = \"\"\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            result += char\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    unique_tuples = set()\n    bidirectional_count = 0\n    for tup in tuples:\n        if tup[::-1] in unique_tuples:\n            bidirectional_count += 1\n        unique_tuples.add(tup)\n    return bidirectional_count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    words = re.findall(r'\\b\\w+\\b', sentence)\n    adverbs = [word for word in words if word.endswith('ly')]\n    if not adverbs:\n        return None\n    first_adverb = adverbs[0]\n    start = sentence.find(first_adverb)\n    end = start + len(first_adverb)\n    return (start, end, first_adverb)"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * (size ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    total_count = 0\n    positive_count = 0\n    \n    for num in arr:\n        total_count += 1\n        if num > 0:\n            positive_count += 1\n    \n    if total_count == 0:\n        return 0\n    else:\n        return round(positive_count / total_count, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_data, list_data):\n    count = 0\n    for element in list_data:\n        count += tuple_data.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 5\n    \n    perrin_sequence = [3, 2, 0]\n    for i in range(3, n):\n        perrin_sequence.append(perrin_sequence[i-2] + perrin_sequence[i-3])\n    \n    return sum(perrin_sequence[:n])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    extracted = [string for string in strings if len(string) == size]\n    return extracted"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month_number in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    min_length = float('inf')\n    min_length_sublist = None\n    for sublist in lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_length_sublist = sublist\n    return min_length_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    uppercase = False\n    for char in s:\n        if char.isupper():\n            uppercase = True\n        else:\n            if uppercase:\n                uppercase = False\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(input_list):\n    n = len(input_list)\n    result = []\n    for i in range(2**n):\n        combination = [input_list[j] for j in range(n) if (i & (1 << j))]\n        result.append(combination)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    \n    max_product = min_product = result = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n            \n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        \n        result = max(result, max_product)\n        \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    return {key: value for key, value in input_dict.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    if not nums:\n        return 0\n\n    max_dp = [0] * len(nums)\n    min_dp = [0] * len(nums)\n    max_dp[0] = min_dp[0] = nums[0]\n    max_product = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_dp[i] = max(nums[i], min_dp[i-1] * nums[i])\n            min_dp[i] = min(nums[i], max_dp[i-1] * nums[i])\n        else:\n            max_dp[i] = max(nums[i], max_dp[i-1] * nums[i])\n            min_dp[i] = min(nums[i], min_dp[i-1] * nums[i])\n        max_product = max(max_product, max_dp[i])\n\n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if len(lst) == 0:\n        return False\n    lst.sort()\n    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst)))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = set(tuple(sorted(t)) for t in list1)\n    set2 = set(tuple(sorted(t)) for t in list2)\n    return set1.intersection(set2)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, char, replacement):\n    return s.replace(char, replacement)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return min(arr) + max(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    odd_numbers = [num for num in numbers if num % 2!= 0]\n    return odd_numbers"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_natural_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_natural_numbers ** 2\n    return sum_of_cubes - sum_of_natural_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = sum(1 for num in arr if num % 2!= 0)\n    even_count = n - odd_count\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += nums[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    combined_tuple = tuple1 + tuple2\n    set_elements = set(combined_tuple)\n    union_tuple = tuple(set_elements)\n    return tuple(sorted(union_tuple))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    values = []\n    current_value = ''\n    in_quote = False\n    for char in s:\n        if char == '\"':\n            in_quote = not in_quote\n        elif in_quote:\n            current_value += char\n        elif current_value:\n            values.append(current_value)\n            current_value = ''\n    if current_value:\n        values.append(current_value)\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i]!= lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return [num for num, count in count_dict.items() if count == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return round(2 * math.pi * radius * (height + radius), 2)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_list_len = len(main_list)\n    sub_list_len = len(sub_list)\n    \n    if sub_list_len > main_list_len:\n        return False\n    \n    for i in range(main_list_len - sub_list_len + 1):\n        if main_list[i:i + sub_list_len] == sub_list:\n            return True\n            \n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % 10\n    return result"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"Lists must be of the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    base_area = base_edge ** 2\n    triangular_face_area = 0.5 * base_edge * slant_height\n    total_surface_area = base_area + 4 * triangular_face_area\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(dictionary):\n    return len(dictionary) == 0"}
{"task_id": "Mbpp/583", "solution": "import math\n\ndef catalan_number(n):\n    return math.factorial(2*n) // (math.factorial(n+1) * math.factorial(n))"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    perfect_squares_list = []\n    for num in range(start, end + 1):\n        sqrt = math.sqrt(num)\n        if sqrt == int(sqrt):\n            perfect_squares_list.append(num)\n    return perfect_squares_list"}
{"task_id": "Mbpp/590", "solution": "import math\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, complex(0, y))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "import math\n\ndef sum_Of_product(n):\n    total = 0\n    for r in range(1, n+1):\n        product = 1\n        for i in range(r, n+1):\n            product *= math.comb(i, r)\n        total += product\n    return total"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2!= 0), None)\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number\")\n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1, s2):\n    if len(s1)!= len(s2):\n        raise ValueError(\"Both strings must be of the same length\")\n    \n    if not set(s1).issubset('01') or not set(s2).issubset('01'):\n        raise ValueError(\"Both strings must be binary\")\n    \n    swaps = 0\n    counter = 0\n    \n    for c1, c2 in zip(s1, s2):\n        if c1!= c2:\n            counter += 1\n        else:\n            counter = 0\n        \n        if counter > 1:\n            swaps += 1\n            counter = 1\n    \n    return swaps"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    if len(arr2) == 0:\n        return arr1[k-1]\n    \n    if k == len(arr1) + len(arr2):\n        return max(arr1[-1], arr2[-1])\n    \n    i = min(k//2, len(arr1))\n    j = min(k//2, len(arr2))\n    \n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], k-j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    original_num = n\n    sum_of_cubes = 0\n    num_str = str(n)\n    num_digits = len(num_str)\n    \n    for digit in num_str:\n        sum_of_cubes += int(digit) ** num_digits\n        \n    return sum_of_cubes == original_num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        str_i = str(i)\n        if len(str_i) == len(set(str_i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"}
{"task_id": "Mbpp/605", "solution": "import math\n\ndef prime_num(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "import math\n\ndef bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if 0 <= k < len(lst):\n        return lst[:k] + lst[k+1:]\n    else:\n        raise IndexError(\"k is out of range\")"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        raise ValueError(\"Invalid input\")\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lists):\n    first_elements = [sublist[0] for sublist in lists]\n    second_elements = [sublist[1] for sublist in lists]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    cummulative_sum = 0\n    for tup in tuple_list:\n        for val in tup:\n            cummulative_sum += val\n    return cummulative_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(col) / len(col) for col in zip(*tuples)]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1)!= len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(x % y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(list1)):\n        if list2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(list1[i] / list2[i])\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    non_num_str = ''\n    num_str = ''\n    for char in s:\n        if not char.isdigit():\n            non_num_str += char\n        else:\n            num_str += char\n    return non_num_str + num_str"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    merged = sorted(arr1 + arr2)\n    mid = n * 2 // 2\n    if (n * 2) % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2\n    else:\n        return merged[mid]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    base = 2 * radius\n    height = radius\n    return 0.5 * base * height"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    adjacent_coords = []\n    for x_offset in range(-1, 2):\n        for y_offset in range(-1, 2):\n            new_x = coord[0] + x_offset\n            new_y = coord[1] + y_offset\n            adjacent_coords.append([new_x, new_y])\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero = [i for i in lst if i!= 0]\n    zero = [i for i in lst if i == 0]\n    return non_zero + zero"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, length):\n    total_sum = 0\n    for i in range(length):\n        for j in range(i + 1, length):\n            total_sum += nums[i] ^ nums[j]\n    return total_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(wind_velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return math.ceil(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(strings):\n    result = []\n    for string in strings:\n        temp = \"\"\n        parenthesis = False\n        for char in string:\n            if char == \"(\":\n                parenthesis = True\n            elif char == \")\":\n                parenthesis = False\n            elif not parenthesis:\n                temp += char\n        result.append(temp)\n    return tuple(result)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return (9*n**2 - 9*n + 2)//2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    words = text.split()\n    for word in words:\n        middle = word[1:-1]\n        if 'z' in middle:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k cannot be greater than the length of the array\")\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(1, n):\n        dp[0][i] = (dp[0][i-1] * i + matrix[0][i]) / (i + 1)\n        dp[i][0] = (dp[i-1][0] * i + matrix[i][0]) / (i + 1)\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max((dp[i-1][j] * (i + j) + matrix[i][j]) / (i + j + 1), \n                           (dp[i][j-1] * (i + j) + matrix[i][j]) / (i + j + 1))\n    \n    return dp[-1][-1]"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = str(base ** power)\n    return sum(int(digit) for digit in result)"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    result = []\n    current_value = ''\n    in_quotation = False\n    for char in s:\n        if char == '\"':\n            in_quotation = not in_quotation\n            if not in_quotation and current_value:\n                result.append(current_value)\n                current_value = ''\n        elif in_quotation:\n            current_value += char\n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i + 1])\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    if len(list1)!= len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for element in lst:\n        if not result or element!= result[-1]:\n            result.append(element)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1]!= target:\n                return mid\n            high = mid - 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Get the number of bits in the given number\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set to 1 except the first and the last bit\n    mask = (1 << (num_bits - 1)) - 1 - 1\n    \n    # Use the XOR operation to toggle the bits of the given number using the mask\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(nums, target):\n    left, right = 0, len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match('^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) // 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(s):\n    return math.sqrt(3) * s**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for element in tup:\n        if element is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(digit!= '0' and num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = ''\n    for i, char in enumerate(s):\n        if char.isupper() and i!= 0:\n            result +=''\n        result += char\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, 2 * b + a\n    \n    return b"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if i < len(l2) and i < len(l3) and l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(set(numbers)) < 2:\n        return None\n    return sorted(set(numbers))[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lists):\n    count_dict = {}\n    for sublist in lists:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = re.compile(r'^-?\\d+(\\.\\d{2})?$')\n    return bool(pattern.match(s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, x):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(1 for c in s if c.isdigit())"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_sum_of_consecutive(n):\n        for start in range(1, n):\n            total = 0\n            for end in range(start, n):\n                total += end\n                if total == n:\n                    return True\n                if total > n:\n                    break\n        return False\n\n    count = 0\n    num = 1\n    while True:\n        num += 1\n        if is_sum_of_consecutive(num):\n            count += 1\n            if count == n:\n                return num"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)):\n        if i < len(lst) - 1:\n            pairs.append((lst[i], lst[i + 1]))\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    pairs_count = 0\n    freq_dict = {}\n    \n    for num in numbers:\n        complement = sum - num\n        if complement in freq_dict:\n            pairs_count += freq_dict[complement]\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    return pairs_count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [element for element in list1 if element not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_num = 2 * i + 1\n        total_sum += odd_num ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop()!= bracket_map[char]:\n                return False\n                \n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return''.join(word for word in s.split() if len(word)!= k)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, sub_string):\n    start_pos = main_string.find(sub_string)\n    if start_pos == -1:\n        return None\n    end_pos = start_pos + len(sub_string)\n    return (sub_string, start_pos, end_pos)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i, num in enumerate(lst):\n        if i % 2!= 0 and num % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    total_sum = 0\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    packed = []\n    current_sublist = []\n    \n    for element in lst:\n        if not current_sublist or element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            packed.append(current_sublist)\n            current_sublist = [element]\n            \n    if current_sublist:\n        packed.append(current_sublist)\n        \n    return packed"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i!= j:\n                result.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return result"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n - i + 1):\n            if length % 2!= 0:\n                total_sum += sum(arr[i:i + length])\n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return round(h), round(s, 1), round(v, 1)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    even = None\n    odd = None\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(int(x.strip()) for x in s[1:-1].split(','))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_list, value):\n    left, right = 0, len(sorted_list)\n    while left < right:\n        mid = (left + right) // 2\n        if sorted_list[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'abbb'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2!= 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    result = [element for element in tup if not isinstance(element, tuple)]\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    count = 0\n    for element in lists:\n        if isinstance(element, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^a.*b$')\n    return bool(pattern.match(text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2!= 0:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    d = d % 32\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = math.sqrt(n)\n    return sqrt == int(sqrt)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_sum_list = None\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    return max_sum_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2!= 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for elem1, elem2 in zip(tuple1, tuple2):\n        if elem2 <= elem1:\n            return False\n    return True"}
