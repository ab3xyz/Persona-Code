{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return [element for element in list1 if element in list2]"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    return bin(x ^ y).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    rotations = 1\n    original_s = s\n    while rotations <= len(s):\n        s = s[1:] + s[0]\n        if s == original_s:\n            return rotations\n        rotations += 1\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    s = s[::-1]\n    s = s.lstrip(s[0])\n    s = s[::-1]\n    s = s.rstrip(s[-1])\n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [row for _, row in sorted((sum(row), row) for row in matrix)]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(length, width, height):\n    return 0.5 * length * width * height"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    components = input_string.split('_')\n    if len(components) != 2:\n        return False\n    return all(c.islower() for c in components[0]) and all(c.islower() for c in components[1])"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(nums):\n    return len(nums) != len(set(nums))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    from math import sqrt\n    if n < 1:\n        return False\n    for k in range(1, int(sqrt(n)) + 1):\n        if (k * (2 ** k) - 1) == n:\n            return True\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    reverse_num = int(str(num)[::-1])\n    return num != 2 * reverse_num - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(arr):\n    from functools import cmp_to_key\n    def compare(x, y):\n        return int(y+x) - int(x+y)\n    arr = [str(num) for num in arr]\n    sorted_arr = sorted(arr, key=cmp_to_key(compare))\n    return int(''.join(sorted_arr))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    return (x ^ y) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    def helper(start, end, sum, len):\n        if start > end:\n            return 0\n        count = 0\n        for i in range(start, end + 1):\n            current_sum = sum + int(s[i])\n            if current_sum == len:\n                count += 1\n            count += helper(i + 1, end, current_sum, len)\n        return count\n    return helper(0, len(s) - 1, 0, 0)\n\n# Please note that this is a naive solution with a high time complexity,\n# it's suitable for small inputs. For larger inputs, a more optimized approach\n# would be required."}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    return min(nums)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    max_diff = 0\n    for pair in pairs:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) is list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    str_main_list = ''.join(map(str, main_list))\n    str_sub_list = ''.join(map(str, sub_list))\n    return str_sub_list in str_main_list"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_tuple_length = len(tuples_list[0])\n    for t in tuples_list:\n        if len(t) != first_tuple_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    import math\n    for i in range(int(math.sqrt(n)) + 1):\n        if i*i - n >= 0 and int(math.sqrt(i*i - n))**2 == i*i - n:\n            return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "from itertools import zip_longest\n\ndef is_same_patterns(patterns, sequences):\n    if len(patterns) != len(sequences):\n        return False\n    return all(p == q for p, q in zip_longest(map(tuple, patterns), map(tuple, sequences)))"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    result = []\n    for tuple_ in lst:\n        if all(element % k == 0 for element in tuple_):\n            result.append(tuple_)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n): \n    # Convert the number to string to access each digit  \n    strNum = str(n)  \n    # Initialize odd and even sum variables  \n    oddSum, evenSum = 0, 0\n  \n    # Loop through the digits, alternating between adding to oddSum and evenSum\n    for i in range(len(strNum)): \n        if i%2: \n            oddSum += int(strNum[i]) \n        else: \n            evenSum += int(strNum[i]) \n      \n    # Check if the difference between the two sums is divisible by 11\n    return (abs(oddSum - evenSum) % 11 == 0)"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return int(n * (n + 1) * (n + 2) / 6)"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    result = 0\n    for char in s:\n        result += ord(char)\n    result = result % 26\n    return chr(result + 97)  # 97 is the ASCII number of 'a'"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n\nassert sequence(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 1) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    return any(substring in string for string in string_list)"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first_digit = str_n[0]\n    second_digit = str_n[1]\n    for i in range(2, len(str_n)):\n        if i % 2 == 0 and str_n[i] != first_digit:\n            return False\n        elif i % 2 != 0 and str_n[i] != second_digit:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    return min(len(lst) for lst in lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    frequency_dict = {i: flat_list.count(i) for i in flat_list}\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary.lstrip('0')"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return sum(1 for item in lst if item == True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    combined_list = list1 + list2 + list3\n    combined_list.sort()\n    return combined_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        ones = s.count('1')\n        if ones % 2 != 0:\n            count += 1\n        s = s[-1:] + s[:-1]  # Rotate string\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [(float(i) if i.replace('.', '', 1).isdigit() else i) for sublist in lst for i in sublist]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(pairs):\n    max_product = float('-inf')\n    for pair in pairs:\n        product = abs(pair[0] * pair[1])\n        max_product = max(max_product, product)\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        result = 1  # Start with 1 because it's a divisor for all x > 1\n        sqrt_x = int(x ** 0.5)\n        for i in range(2, sqrt_x + 1):\n            if x % i == 0:\n                result += i\n                if i != x // i:\n                    result += x // i\n        return result\n\n    amicable_sum = 0\n    for i in range(2, n + 1):\n        partner = sum_of_divisors(i)\n        if partner > i and sum_of_divisors(partner) == i:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(num):\n    return math.atan2(num.imag, num.real)\n\n# Testing the function\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    diff = 0\n    count_0 = count_1 = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n        elif count_1 > count_0:\n            count_0 = count_1 = 0\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum(x, y):\n    gcd = 1\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            gcd = i\n    return gcd if gcd > 1 else 0\n\nassert sum(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(square):\n    n = len(square)\n    if n == 0:\n        return False\n    sum_diagonal1, sum_diagonal2, row_sum, col_sum = 0, 0, [0 for _ in range(n)], [0 for _ in range(n)]\n    expected_sum = n * (n ** 2 + 1) // 2  # Formula for the magic constant of an n x n magic square\n    \n    # Check sums of diagonals, rows, and columns\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                sum_diagonal1 += square[i][j]\n            if i + j == n - 1:\n                sum_diagonal2 += square[i][j]\n            row_sum[i] += square[i][j]\n            col_sum[j] += square[i][j]\n\n    # Verify all sums are equal to the magic constant\n    return all(x == expected_sum for x in row_sum) and all(x == expected_sum for x in col_sum) and sum_diagonal1 == expected_sum and sum_diagonal2 == expected_sum"}
{"task_id": "Mbpp/130", "solution": "from collections import Counter\n\ndef max_occurrences(lst):\n    freq = Counter(lst)\n    max_freq = max(freq.values())\n    return [item for item, count in freq.items() if count == max_freq][0]\n\n# \u6d4b\u8bd5\u7528\u4f8b\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = arr.count(0)\n    non_zero_count = len(arr) - zero_count\n    return zero_count / non_zero_count if non_zero_count else float('inf')"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if n % 4 == 1:\n                n = (n - 1) // 2\n            else:\n                return False\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    return [number for sublist in list_of_lists for number in sublist]"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    def flip(sublist, k):\n        return sublist[:k][::-1] + sublist[k:]\n\n    for n in range(len(lst), 1, -1):\n        max_index = lst[:n].index(max(lst[:n]))\n        lst = flip(lst, max_index + 1)\n        lst = flip(lst, n)\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    min_element = arr[0]\n    for num in arr:\n        if num - min_element > max_diff:\n            max_diff = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def extended_gcd(x, y):\n        if x == 0:\n            return (y, 0, 1)\n        else:\n            g, x1, y1 = extended_gcd(y % x, x)\n            return (g, y1 - (y // x) * x1, x1)\n\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    else:\n        x = x * (n // g)\n        y = y * (n // g)\n        return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list_full, list_remove):\n    return [item for item in list_full if item not in list_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return sum(n - 2 * i for i in range(n // 2 + 1))"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(x, y):\n    def get_divisors(n):\n        divisors = [1]\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if n // i != i:  # Include the complement divisor if it's not the square root\n                    divisors.append(n // i)\n        return divisors\n    return sum(get_divisors(x)) + x == sum(get_divisors(y)) + y"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if ord(s[i]) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32  # This line is for handling 64-bit integers\n    return n + 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(arr, num):\n    return arr.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    return all(isinstance(i, type(tup[0])) for i in tup)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    return string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(x, y, z):\n    return min(x, y, z)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n    arr[:n] = negative + positive\n    return arr"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", str(char))"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Find the position of the highest set bit\n    highest_power = int(math.log2(n))\n    # Initialize the result with 0\n    result = 0\n    # Set even bits using bitwise OR operation\n    for i in range(1, highest_power + 1):\n        if i % 2 != 0:\n            continue\n        result |= (1 << i)\n    return result"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    from collections import Counter\n    return dict(Counter(lst))"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return sum(len(s) - i for i in range(len(s)))"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = i\n    for i in range(1, m + 1):\n        for j in range(2, n + 1):\n            for k in range(1, i + 1):\n                dp[i][j] += dp[k][j - 1]\n    return dp[m][n]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    import math\n    root = math.sqrt(n)\n    if root.is_integer():\n        return int(root + 1)**2\n    else:\n        return int(root + 1)**2 if int(root + 1)**2 > n else int(root + 2)**2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    inc = [0]*n \n    dec = [0]*n \n    \n    inc[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if (arr[i] > arr[j] and inc[i] < inc[j] + arr[i]):\n                inc[i] = inc[j] + arr[i]\n        inc[i] = inc[i] if inc[i] > 0 else 0\n    \n    dec[n-1] = arr[n-1]\n    for i in reversed(range(n-1)):\n        for j in range(n-1, i, -1):\n            if (arr[i] > arr[j] and dec[i] < dec[j] + arr[i]):\n                dec[i] = dec[j] + arr[i]\n        dec[i] = dec[i] if dec[i] > 0 else 0\n\n    maxSum = 0\n    for i in range(n):\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    \n    return maxSum\n\n# Test case\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = s.replace(\" \", \"\")  # Remove spaces from the string\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    polar_coordinates = cmath.polar(complex_number)\n    return polar_coordinates"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(1 for item in lst if isinstance(item, int))"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(list_input, n):\n    from itertools import combinations_with_replacement\n    return list(combinations_with_replacement(list_input, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    primes = [2]\n    for num in range(3, n, 2):\n        if all(num % i != 0 for i in range(3, int(num**0.5) + 1, 2)):\n            primes.append(num)\n    return len(primes)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(e1, e2) for e1, e2 in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    nw = [1, 2, 7]\n    if n <= 3:\n        return nw[n]\n\n    for i in range(3, n):\n        next_val = 2 * nw[-1] + nw[-2]\n        if is_prime(next_val):\n            nw.append(next_val)\n    return nw[-1]"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(x / y for x, y in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    dog_years = human_age * 5.14 + 16\n    return dog_years"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    split_lists = [[] for _ in range(n)]\n    for i, elem in enumerate(lst):\n        split_lists[i % n].append(elem)\n    return split_lists"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n): \n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n**2 - 6 * n + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char): \n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(v for i, v in enumerate(lst) if i % 2 == 0 and v % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    from math import comb\n    \n    sum_even_index = 0\n    for i in range(0, n+1, 2):\n        sum_even_index += comb(n, i)\n    \n    return sum_even_index"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {k: v for k, v in dictionary.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if not isinstance(element, tuple):\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (4 * n - 3)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    from collections import Counter\n    freq = Counter(str(num))\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(x == element for x in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    match_len = 2  # The length of the match to look for ('ab' or 'abb')\n    if len(text) < match_len:\n        return False\n    if text[-match_len:] in ['ab', 'abb']:\n        return True\n    return False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_so_far = max_ending_here = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Case 1: get the maximum subarray sum from original array\n    max_kadane = kadane(arr)\n\n    # Case 2: get the sum of the subarray with components on both ends\n    max_prefix_sum = max_suffix_sum = 0\n    prefix_sum = suffix_sum = 0\n    for i in range(n):\n        prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n        suffix_sum += arr[n - 1 - i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n\n    # Case 3: maximum sum becomes prefix_sum + suffix_sum + total_sum * (k-2)\n    total_sum = sum(arr)\n    max_wrap = max_prefix_sum + max_suffix_sum + total_sum * (k - 2)\n\n    # The maximum of the three cases\n    result = max(max_kadane, max_wrap)\n\n    return result"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n): \n    return (2 * n * (n + 1) * (2 * n + 1)) // 3"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = -1\n    max_list = []\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(num1, num2):\n    return num1 // num2"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Given two sides of a right angled triangle, calculate the third side.\n    \"\"\"\n    return math.sqrt(side1**2 + side2**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    d = {}\n    for name, agg in lst:\n        if name in d:\n            d[name] += agg\n        else:\n            d[name] = agg\n    max_name = max(d, key=d.get)\n    return (max_name, d[max_name])"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    central_binomial = factorial(2 * n) // (factorial(n) ** 2)\n    return central_binomial"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for sentence in words:\n        words_list = sentence.split()\n        for word in words_list:\n            if word.startswith('P') or word.startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    if n <= 0 or i >= n or k <= i:\n        return 0\n    arr[k] = max(arr[k], arr[i] + max_sum_increasing_subseq(arr, n, k, k + 1))\n    return max(max_sum_increasing_subseq(arr, n, i + 1, k), arr[i] + max_sum_increasing_subseq(arr, n, i + 1, i + 2))\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    import itertools\n    cartesian_product = list(itertools.product(list1, list2))\n    sorted_products = sorted(cartesian_product, key=lambda x: x[0]*x[1], reverse=True)\n    top_n Products = sorted_products[:n]\n    result = [a*b for (a, b) in top_n_Products]\n    return result"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    while n & (n + 1) != 0:\n        n = n & (n + 1)\n    return n | (n + 1)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev, curr = 2, 1\n        for _ in range(2, n + 1):\n            prev, curr = curr, prev + curr\n        return curr"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_string):\n    return [format_string.format(i) for i in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*lists):\n    return [{lists[0][i]: {lists[1][i]: lists[2][i]}} for i in range(len(lists[0]))]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = [0] * (n + 1)\n    def f(n):\n        if n < 2:\n            return n\n        if memo[n]:\n            return memo[n]\n        memo[n] = max(f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5), n)\n        return memo[n]\n    return f(n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup): return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(x, y, z):\n    if (x - y) * (x - z) <= 0:\n        return x\n    elif (y - x) * (y - z) <= 0:\n        return y\n    else:\n        return z"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    sum_digits = 0\n    for num in lst:\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n    return sum_digits"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    return len(set(tuple(sorted(t)) for t in lst))"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, elem):\n    return elem in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n.bit_count() % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Start from the end of the number and find the first digit that is smaller than the digit next to it.\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number cannot be rearranged to form a bigger number.\n        return -1\n    \n    # Find the smallest digit on the right side of (i-th digit) that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the (i+1)-th position\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    # Convert list back to integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0]*tuples[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    return min(numeric_values)"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [item[n] for item in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return bool(set(seq1) & set(seq2))"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max_product = None\n    num1, num2 = None, None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if max_product is None or arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                num1, num2 = arr[i], arr[j]\n    return (num1, num2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(list):\n    max_len = -1\n    max_elem = None\n    for elem in list:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    print(result)\n\nround_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 3\n    return total_sum"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    return sum(1 for sublist in lst if element in sublist)"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    parts = date.split('-')\n    return f'{parts[2]}-{parts[1]}-{parts[0]}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    result = (t1[0] & t2[0], t1[1] & t2[1], t1[2] & t2[2], t1[3] & t2[3])\n    return result"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    return k - (1 / (4 * a))"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(element in list2 for element in list1)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) // 3"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(x < num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n): return n % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(nums):\n    return [num for num in nums if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return \"\".join([s[i] for i in range(len(s)) if i % 2 != 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count = 0\n    seen = {}\n    for t in tuples:\n        if t[::-1] in seen:\n            count += 1\n        seen[t] = True\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(\"\".join(str(num) for num in lst))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, sentence)\n    if match:\n        start, end = match.start(), match.end()\n        adverb = sentence[start:end]\n        return (0 if start == 0 or sentence[start-1].isspace() else start, end, adverb)\n    else:\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_nums = [num for num in arr if num > 0]\n    return round(len(positive_nums) / len(arr), 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    result = tuple((a*b, b*a) for (a, b) in zip(tup1, tup2))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for elem in lst:\n        count += tup.count(elem)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    sum = 5\n    for i in range(3, n+1):\n        next_num = perrin[i-2] + perrin[i-3]\n        perrin.append(next_num)\n        sum += next_num\n    return sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(num):\n    sum_even = 0\n    for i in range(2, num + 1, 2):\n        if num % i == 0:\n            sum_even += i\n    return sum_even"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Check if the given text contains a word with the letter 'z'.\n    \n        Parameters:\n            text (str): The text to be checked.\n        \n        Returns:\n            bool: True if the text contains a word with 'z', otherwise False.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    return month in thirty_one_days_months"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    min_length = min(len(sublist) for sublist in lst)\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = \"\"\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(arr):\n    def find_combinations(prefix, arr):\n        result.append(prefix)\n        for i in range(len(arr)):\n            find_combinations(prefix + [arr[i]], arr[i+1:])\n    result = []\n    find_combinations([], arr)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_prod = float('-inf')\n    curr_max, curr_min = 1, 1\n    for num in arr:\n        temp = curr_max * num\n        curr_max = max(num * curr_max, num * curr_min, num)\n        curr_min = min(temp, num * curr_min, num)\n        max_prod = max(max_prod, curr_max)\n    return max_prod"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dct):\n    return {k: v for k, v in dct.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                product = arr[i] * arr[j]\n                max_product = max(max_product, product)\n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for i in arr:\n        result = (result * (i % n)) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = set(tuple(sorted(t)) for t in list1)\n    set2 = set(tuple(sorted(t)) for t in list2)\n    return set1 & set2"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dict_to_sort):\n    return sorted(dict_to_sort.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val + min_val"}
{"task_id": "Mbpp/477", "solution": "def is_lower(text): \n    return text.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):  \n    while n >= 10:  \n        n //= 10  \n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j]) & 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    sum_diff = 0\n    max_len = max(len(str_num1), len(str_num2))\n\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n\n    for i in range(max_len):\n        sum_diff += abs(int(str_num1[i]) - int(str_num2[i]))\n\n    return sum_diff"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1 + tuple2)\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [value[1:-1] for value in s.split('\"')[1::2]]"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return [c for c in s]"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(list_nums):\n    unique_nums = set(list_nums)\n    result = [num for num in unique_nums if list_nums.count(num) == 1]\n    return result"}
{"task_id": "Mbpp/573", "solution": "from functools import reduce\ndef unique_product(lst):\n    unique_lst = list(set(lst))\n    return reduce(lambda x, y: x * y, unique_lst)"}
{"task_id": "Mbpp/574", "solution": "import math\ndef surfacearea_cylinder(radius, height):\n    return round(2 * math.pi * radius * (radius + height), 2)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    sub_len = len(sub_list)\n    for start in range(len(main_list)):\n        if main_list[start:start + sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit *= i\n        last_digit = last_digit % 10\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1 ^ set2)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(mixed_tuple):\n    result = []\n    for element in mixed_tuple:\n        if isinstance(element, tuple):\n            cleaned_element = extract_even(element)\n            if cleaned_element:  # Only add non-empty tuples\n                result.append(cleaned_element)\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    lateral_area = 0.5 * base_edge * (height ** 2 + (base_edge / 2) ** 2) ** 0.5 * 4\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for num in range(start, end+1):\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(x, y):\n    rect = cmath.rect(x, y)\n    polar = cmath.polar(rect)\n    return polar, rect"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    from math import comb\n    \n    total_sum = 0\n    for i in range(n):\n        total_sum += comb(n, i) * comb(n, i + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(str(int(x)) for x in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even, first_odd = None, None\n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return abs(first_even - first_odd)"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(binary1, binary2):\n    swap_count = 0\n    for b1, b2 in zip(binary1, binary2):\n        if b1 != b2:\n            swap_count += 1\n    return swap_count // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(input_tuple):\n    return sys.getsizeof(input_tuple)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while True:\n        if i + 1 >= len(arr1):\n            return arr2[j + k - 1]\n        elif j + 1 >= len(arr2):\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        new_i, new_j = min(i + k // 2 - 1, len(arr1) - 1), min(j + k // 2 - 1, len(arr2) - 1)\n        if arr1[new_i] <= arr2[new_j]:\n            k -= (new_i - i + 1)\n            i = new_i + 1\n        else:\n            k -= (new_j - j + 1)\n            j = new_j + 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    order = len(str(n))\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return sum == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum_n = n * (n + 1) // 2\n    average_n = sum_n / n\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num): return num % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degree):\n    return degree * (3.141592653589793/180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n): bell = [[0 for i in range(n+1)] for j in range(n+1)] bell[0][0] = 1 for i in range(1, n+1): bell[i][0] = bell[i-1][i-1] for j in range(1, i+1): bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return [x for i, x in enumerate(lst) if i != k - 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuples):\n    cum_sum = 0\n    for t in tuples:\n        cum_sum += sum(t)\n    return cum_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    return tuple(x % y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    result = [float(a)/b for a, b in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    chars = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars + nums)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    n = len(a)\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1\n    for i in range(n - 2, -1, -1):\n        mxm = 0\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(a, b, n):\n    if len(a) != len(b) or not a or not b:\n        return None\n    a, b = (a, b) if len(a) <= len(b) else (b, a)\n    low, high = 0, len(a)\n    while low <= high:\n        cut_a = (low + high) // 2\n        cut_b = n // 2 - cut_a\n        lmax_a, lmax_b = (-float('inf') if cut_a == 0 else a[cut_a - 1],\n                          -float('inf') if cut_b == 0 else b[cut_b - 1])\n        rmin_a, rmin_b = (float('inf') if cut_a == n else a[cut_a],\n                          float('inf') if cut_b == n else b[cut_b])\n        if lmax_a <= rmin_b and lmax_b <= rmin_a:\n            if n % 2 == 0:\n                return (max(lmax_a, lmax_b) + min(rmin_a, rmin_b)) / 2\n            else:\n                return min(rmin_a, rmin_b)\n        elif lmax_a > rmin_b:\n            high = cut_a - 1\n        else:\n            low = cut_a + 1"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(input_str):\n    return input_str.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    # The area of the largest triangle that can be inscribed in a semicircle is given by (1/2)*base*height.\n    # For a semicircle, the largest inscribed triangle will have its base as the diameter and height as the radius.\n    # Therefore, the area can be calculated using the formula (1/2)*(2*radius)*radius.\n    return (1/2) * (2 * radius) * radius\n\nprint(triangle_area(-1))"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(nums):\n    return [num for num in nums if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(text): \n    return text.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    non_zero_ptr = 0  # To track the position of the last non-zero element\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zero_ptr] = arr[i]\n            non_zero_ptr += 1\n    for i in range(non_zero_ptr, len(arr)):\n        arr[i] = 0\n    return arr"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    xorSum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xorSum += arr[i] ^ arr[j]\n    return xorSum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[largest] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(v, t):\n    # Given the wind velocity in km/h (v) and temperature in Celsius (t)\n    # Calculate the wind chill index using the formula adapted from the National Weather Service's formula\n    # Note: The original formula uses speeds in mph and temperatures in Fahrenheit, this is a conversion and approximation\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return math.ceil(wci)\n\n# The provided data point suggests a custom test case for validation,\n# however, the result does not match common wind chill calculations,\n# hence, the test case might be illustrative but not accurate.\n# Including it here for reference or if a specific implementation is desired.\ndef check_wind_chill():\n    assert wind_chill(120, 35) == 40, \"Test case failed!\"\n    print(\"Test case passed!\")\n\ncheck_wind_chill()"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    start = s.find('(')\n    end = s.find(')')\n    if start != -1 and end != -1:\n        return s[:start] + s[end+1:]\n    return s"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7*n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Check if 'z' appears in the string, excluding the first and last character\n    return 'z' in text[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[-1][-1] / (N * 2 - 2)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= min_height and data[1] >= min_weight:\n            filtered_students[student] = data\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    result = []\n    start = None\n    for i, c in enumerate(s):\n        if c == '\"' and (i == 0 or s[i - 1] != \"\\\\\"):\n            if start is not None:\n                result.append(s[start + 1:i])\n                start = None\n            else:\n                start = i\n    return result"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if not result or result[-1] != item:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    return math.pi * r * slant_height"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            first_occurrence = mid\n            right = mid - 1  # Continue searching to the left.\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return first_occurrence"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += (arr[i] * (i+1) * (n-i))\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set to 1 except the first and last\n    # For example, if num_bits is 4, mask will be 01110 in binary\n    mask = (1 << (num_bits - 2)) - 1\n    \n    # Toggle the middle bits using XOR operation\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    low = 0\n    high = len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    match = re.match(r\"^[aeiouAEIOU]\", string)\n    return bool(match)"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    start = 10**(n-1)\n    end = 10**n - 1\n  \n    # Using binary search to find the index\n    while(start <= end):\n        mid = (start + end)//2\n        temp = (-1 + math.sqrt(1 + 8*mid))//2\n        if(temp == int(temp)):\n            end = mid - 1\n        else:\n            start = mid + 1\n    return int(start)\n\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge):\n    return math.sqrt(3) * edge ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    n = n % len(lst)  # handle n > len(lst)\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(item is None for item in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        original_num = num\n        divisible = True\n        while num > 0:\n            digit = num % 10\n            if digit == 0 or original_num % digit != 0:\n                divisible = False\n                break\n            num //= 10\n        if divisible:\n            result.append(original_num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    import re\n    return re.sub(r\"([A-Z][^A-Z]*)\", r\" \\1\", text).strip()"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    return sorted(strings, key=int)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(int((n-2)/2), -1, -1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n): \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2))"}
{"task_id": "Mbpp/753", "solution": "def min_k\u8bb0\u5f55(tuple_list, k):\n    return sorted(tuple_list, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_nums = set(numbers)\n    if len(unique_nums) < 2:\n        return None\n    return sorted(unique_nums)[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in lst:\n        if i[::-1] in lst:\n            count += 1\n    return count // 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    from collections import Counter\n    return dict(Counter(tuple(sub) for sub in lst))"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        val = float(s)\n        if '.' in s and s.index('.') == len(s) - 3:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    thirty_days_months = [4, 6, 9, 11]\n    return month_number in thirty_days_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n\nassert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n        if result >= n:\n            return result - (result - n) * 2"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, sum):\n    count = 0\n    num_dict = dict()\n    for num in arr:\n        if (sum - num) in num_dict:\n            count += num_dict[sum - num]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return list(set(list1) - set(list2))\n\n# Testing the function\nassert(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 15, 20, 30]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    parentheses_map = {')': '(', '}': '{', ']': '['}\n    open_parentheses = set(parentheses_map.values())\n    stack = []\n    \n    for char in expression:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in parentheses_map:\n            if not stack or parentheses_map[char] != stack.pop():\n                return False\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    positions = []\n    index = 0\n    while index < len(main_string):\n        index = main_string.find(substring, index)\n        if index == -1:\n            break\n        positions.append((substring, index, index + len(substring)))\n        index += 1\n    if not positions:\n        return None\n    return positions[0] if len(positions) == 1 else positions"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(arr):\n    num_count = {}\n    for num in arr:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    return sum(num for num, count in num_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    temp = []\n    for i in range(len(lst)):\n        if i > 0 and lst[i] != lst[i-1]:\n            result.append(temp)\n            temp = []\n        temp.append(lst[i])\n    result.append(temp)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tpl_lst):\n    combo_sums = []\n    for tup1 in tpl_lst:\n        for tup2 in tpl_lst:\n            if tup1 != tup2:  # Ensure we're not using the same tuple twice\n                combo_sums.append((tup1[0] + tup2[0], tup1[1] + tup2[1]))\n    return combo_sums"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        total_sum += ((i % 2 != 0) * (n - i) * (i + 1) * arr[i]) \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx * 100\n    return h, s*100, v"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(input_str):\n    return tuple(int(num) for num in input_str.strip(\"()\").split(\", \"))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    index = len(arr)\n    for i, item in enumerate(arr):\n        if val <= item:\n            index = i\n            break\n    return index"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Check if the text matches a string that has an 'a' followed by three 'b's.\n    \n    :param text: The string to be checked.\n    :return: True if the text matches, otherwise False.\n    \"\"\"\n    pattern = r\"ab{3}\\Z\"\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, text):\n    return lst + (text,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2): # iterate over the list with step of 2 (even indices)\n        if lst[i] % 2 != 0:         # check if the number at even index is not even\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    result = []\n    for i in tup:\n        if not isinstance(i, tuple):\n            result.append(i)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(nested_list):\n    return len(nested_list)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = '^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dict):\n    return sum(dict.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total = 0\n    for i in range(l, r + 1):\n        if i % 2 != 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    return ((num << d) | (num >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s): \n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    else:\n        root = int(n**0.5)\n        return root ** 2 == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(text):\n    max_count, count = 0, 0\n    for char in text:\n        if char.isupper():\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    return all(x < y for x, y in zip(tup1, tup2))"}
