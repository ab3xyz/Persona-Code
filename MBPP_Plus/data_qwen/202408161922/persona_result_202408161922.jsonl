{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements between two lists.\n    \n    Args:\n    list1: The first list of elements.\n    list2: The second list of elements.\n    \n    Returns:\n    A set containing the shared elements between the two lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and then find the intersection\n    shared = set(list1) & set(list2)\n    return shared"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Finds the n largest integers from the given list of numbers and returns them in descending order.\n    \n    :param numbers: List of integers.\n    :param n: Number of largest integers to return.\n    :return: A list containing the n largest integers from the input list in descending order.\n    \"\"\"\n    # Use heapq.nlargest to efficiently find the n largest elements\n    largest_n = heapq.nlargest(n, numbers)\n    \n    # Return the result in descending order\n    return sorted(largest_n, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers to find the bits that are different\n    xor_result = x ^ y\n    \n    # Check if the XOR result is a power of 2 (only one bit set)\n    return xor_result and not (xor_result & (xor_result - 1))"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(sentence):\n    \"\"\"\n    Finds all words which are at least 4 characters long in a given string.\n\n    Parameters:\n    sentence (str): The input string from which to extract words.\n\n    Returns:\n    list: A list of words that are at least 4 characters long.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words\n\n# Example usage (not part of the function)\n# print(set(find_char_long('Please move back to stream')))"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(s):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n    \n    Parameters:\n    s (str): The input string\n    \n    Returns:\n    int: The minimum number of rotations\n    \"\"\"\n    if len(s) <= 1:\n        return 0\n    rotations = 1\n    while True:\n        rotated_s = s[rotations:] + s[:rotations]\n        if rotated_s == s:\n            return rotations\n        rotations += 1\n        if rotations >= len(s):\n            return len(s)\n\n# Test case\ndef check():\n    assert find_rotations(\"aaaa\") == 1\n    assert find_rotations(\"abcde\") == 5\n    assert find_rotations(\"abab\") == 2\n    assert find_rotations(\"xyz\") == 3\n    print(\"All test cases passed.\")\n\ncheck()"}
{"task_id": "Mbpp/11", "solution": "def remove_occurrences(s, char):\n    # Find the index of the first occurrence of the character\n    first_index = s.find(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return s\n    \n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # Remove the first and last occurrences of the character\n    return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and pair it with the row index\n    row_sums = [(sum(row), idx) for idx, row in enumerate(matrix)]\n    # Sort the pairs based on the sum of each row\n    sorted_rows = sorted(row_sums, key=lambda x: x[0])\n    # Reconstruct the matrix in sorted order\n    sorted_matrix = [matrix[idx] for _, idx in sorted_rows]\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_volume(base, height, length):\n    # Calculate the area of the base triangle\n    base_area = 0.5 * base * height\n    # Calculate the volume of the triangular prism\n    volume = base_area * length\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, and False otherwise.\n    \"\"\"\n    return bool(re.search(r'^[a-z]+(_[a-z]+)*$', s))\n\n# Test the function\nprint(text_lowercase_underscore(\"aab_cbbbc\"))  # Expected output: True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    \"\"\"\n    Removes characters from s1 which are present in s2.\n    \n    :param s1: The original string from which characters are to be removed.\n    :param s2: The string containing characters to be removed from s1.\n    :return: A new string with characters removed.\n    \"\"\"\n    # Convert s2 into a set for O(1) lookups\n    chars_to_remove = set(s2)\n    # Use a list comprehension to filter out unwanted characters\n    result = [char for char in s1 if char not in chars_to_remove]\n    # Join the list back into a string\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    def is_power_of_two(x):\n        return (x & (x - 1) == 0) and x != 0\n\n    # Check if n + 1 is a power of two\n    if is_power_of_two(n + 1):\n        # Find k such that 2^k - 1 is the largest factor of n + 1\n        k = n.bit_length()\n        # Verify if n is a Woodall number\n        return n == (1 << k) - 1 - k\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(number):\n    reversed_number = int(str(number)[::-1])\n    return number == 2 * reversed_number - 1"}
{"task_id": "Mbpp/57", "solution": "def find_max_num(digits):\n    # Convert each digit to a string and sort the list with a custom comparator\n    # The custom comparator compares concatenated strings in reverse order\n    # to ensure the highest possible number is formed when digits are concatenated\n    sorted_digits = sorted(map(str, digits), key=lambda x: x*10, reverse=True)\n    \n    # Concatenate the sorted digits into a single string\n    max_num_str = ''.join(sorted_digits)\n    \n    # Convert the result back to an integer\n    max_num = int(max_num_str)\n    \n    return max_num\n\n# Test the function\nassert find_max_num([1, 2, 3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(x, y):\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    :param x: First integer\n    :param y: Second integer\n    :return: True if x and y have opposite signs, False otherwise\n    \"\"\"\n    return (x < 0) != (y < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    if n < 1:\n        return None\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    def is_valid_substring(sub):\n        sum_of_digits = sum(int(digit) for digit in sub)\n        return sum_of_digits == len(sub)\n\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if is_valid_substring(s[i:j]):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to the smallest possible integer\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for pair in pairs:\n        # Calculate the difference for the current pair\n        diff = abs(pair[0] - pair[1])\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    # Sorting the list of tuples based on the second element of each tuple\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Counts the number of positive numbers in a given list.\n\n    Parameters:\n    - numbers (list): A list of integers.\n\n    Returns:\n    - int: The count of positive numbers in the list.\n    \"\"\"\n    return sum(1 for num in numbers if num > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    \"\"\"\n    Checks if the main_list contains the sub_list as a contiguous sequence.\n    \n    :param main_list: List of elements to search within.\n    :param sub_list: List of elements to search for.\n    :return: True if sub_list is found as a contiguous sequence in main_list, False otherwise.\n    \"\"\"\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False\n\n# Test the function\nassert is_sublist([2,4,3,5,7], [3,7]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False  # We are not done yet\n        else:\n            gap = 1\n            sorted = True  # If there are no swaps this pass, we are done\n\n        # A single \"comb\" over the input array\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Checks if the given number n can be represented as the difference of two squares.\n    \n    :param n: Integer to check\n    :return: Boolean indicating if n can be represented as the difference of two squares\n    \"\"\"\n    # Start from 0 and increment i until the square of i exceeds n\n    for i in range(int(n ** 0.5) + 1):\n        # Calculate the other square\n        diff = n + i * i\n        # Check if the square root of diff is an integer\n        if int(diff ** 0.5) ** 2 == diff:\n            return True\n    return False\n\n# Test the function\nassert dif_Square(5) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if the sequence of colors matches the given pattern sequence.\n    \n    :param colors: List of strings representing colors.\n    :param patterns: List of strings representing patterns.\n    :return: Boolean indicating if the color sequence matches the pattern sequence.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        \n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if the given number is divisible by 11.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return number % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4 / 3) * math.pi * (radius ** 3)\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/83", "solution": "def get_char(input_string):\n    \"\"\"\n    Returns the character made by adding the ASCII values of all characters in the input string,\n    taking the sum modulo 26, and converting back to a character.\n    \"\"\"\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in input_string)\n    \n    # Take the sum modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result back to a character, assuming 'a' as the base character\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char\n\n# Example check\nassert get_char(\"abc\") == \"f\""}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1 or n == 2:\n        return 1\n    sequence = [0, 1, 1] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n    return sequence[n]\n\n# Example check\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    - radius (float): The radius of the sphere.\n\n    Returns:\n    - float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (3 * n - 3 + 3) // 2"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Initialize an empty dictionary to store the merged result\n    merged_dict = {}\n\n    # Merge the first dictionary\n    merged_dict.update(dict1)\n\n    # Merge the second dictionary\n    merged_dict.update(dict2)\n\n    # Merge the third dictionary\n    merged_dict.update(dict3)\n\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(elements):\n    \"\"\"\n    Counts the frequency of each element in the given list and returns a dictionary\n    with elements as keys and their frequencies as values.\n    \"\"\"\n    frequency = {}\n    for element in elements:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n <= 1:\n        return 0\n    for i in range(n-1, 0, -1):\n        if i < n:\n            return i\n    return 0"}
{"task_id": "Mbpp/90", "solution": "def len_longest_word(words):\n    \"\"\"\n    Finds the length of the longest word in a list of words.\n\n    :param words: List of words (strings)\n    :return: Length of the longest word\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Test the function\nassert len_longest_word([\"python\", \"PHP\", \"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    \"\"\"\n    Checks if the given substring is present in any of the strings within the provided list.\n\n    :param strings: List of strings to search within.\n    :param substring: The substring to search for.\n    :return: True if the substring is found in any of the strings, False otherwise.\n    \"\"\"\n    return any(substring in s for s in strings)"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first_digit = str_n[0]\n    second_digit = str_n[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(2, len(str_n)):\n        if i % 2 == 0:\n            if str_n[i] != first_digit:\n                return False\n        else:\n            if str_n[i] != second_digit:\n                return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, this function returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Initialize variables to store the minimum second value and corresponding first value\n    min_second_value = None\n    first_value_of_min = None\n    \n    # Iterate through each tuple in the list\n    for first_value, second_value in lst:\n        # If min_second_value is None or the current second value is smaller, update the minimum values\n        if min_second_value is None or second_value < min_second_value:\n            min_second_value = second_value\n            first_value_of_min = first_value\n            \n    return first_value_of_min"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    min_length = len(lists[0])\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor_count(n):\n    \"\"\"\n    Returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "from collections import defaultdict\nfrom itertools import chain\n\ndef frequency_lists(lists):\n    # Flatten the list of lists\n    flat_list = list(chain.from_iterable(lists))\n    \n    # Initialize a dictionary to count occurrences\n    freq_dict = defaultdict(int)\n    \n    # Count the frequency of each element\n    for item in flat_list:\n        freq_dict[item] += 1\n    \n    return dict(freq_dict)"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    # Multiply all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    \n    return result"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    binary_string = ''\n    while decimal_number > 0:\n        binary_string = str(decimal_number % 2) + binary_string\n        decimal_number //= 2\n    return binary_string"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def next_palindrome(x):\n        x += 1\n        while not is_palindrome(x):\n            x += 1\n        return x\n\n    return next_palindrome(n)"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component except the first one\n    # and join them together.\n    return components[0] + ''.join(x.title() for x in components[1:])"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 1:\n        return 1 if m == 0 else 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    return lst.count(True)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_lists(list1, list2, list3):\n    combined = list1 + list2 + list3\n    combined.sort()\n    return combined"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_str, rotations):\n    \"\"\"\n    Counts the number of unique binary numbers with an odd decimal equivalent after rotating the binary string\n    a specified number of times.\n\n    :param binary_str: A string representing a binary number (composed of '0's and '1's).\n    :param rotations: An integer representing the number of rotations to perform.\n    :return: The count of unique binary numbers with an odd decimal equivalent.\n    \"\"\"\n    def rotate_string(s, n):\n        return s[n:] + s[:n]\n\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 != 0\n\n    seen = set()\n    for i in range(rotations):\n        rotated_str = rotate_string(binary_str, i)\n        if is_odd(rotated_str) and rotated_str not in seen:\n            seen.add(rotated_str)\n\n    return len(seen)\n\n# Test the function\nprint(odd_Equivalent(\"011001\", 6))  # Expected output: 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Convert each list to a set and then use set intersection to find common elements\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Checks if a given string represents an integer.\n    \n    :param s: String to check\n    :type s: str\n    :return: True if the string represents an integer, False otherwise\n    :rtype: bool\n    \"\"\"\n    if s.lstrip().isdigit() or (s[0] in ('-', '+') and s[1:].lstrip().isdigit()):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dicts(dicts_list):\n    \"\"\"\n    Checks if all dictionaries in a given list are empty.\n\n    Parameters:\n    dicts_list (list): A list of dictionaries to be checked.\n\n    Returns:\n    bool: True if all dictionaries are empty, False otherwise.\n    \"\"\"\n    for dictionary in dicts_list:\n        if dictionary:\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    # Convert each element in the tuple to a string and join them together\n    joined_str = ''.join(str(i) for i in tup)\n    # Convert the resulting string back to an integer\n    return int(joined_str)\n\n# Test the function\nassert tuple_to_int((1, 2, 3)) == 123"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    \"\"\"\n    Converts all possible elements in a list of lists to floats.\n    \n    :param lst: List of lists containing elements to be converted.\n    :return: A new list of lists with elements converted to floats where possible.\n    \"\"\"\n    def convert_to_float(element):\n        try:\n            return float(element)\n        except ValueError:\n            return element\n\n    return [[convert_to_float(item) for item in sublist] for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array.\n    \n    :param arr: List[int] - A sorted list of integers where every element appears twice except for one.\n    :return: int - The single occurrence element.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if the mid is on the correct half or not\n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 == 1 and arr[mid] == arr[mid - 1]):\n            left = mid + 1\n        else:\n            right = mid\n            \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            product1 = abs(tuples_list[i][0] * tuples_list[j][0])\n            product2 = abs(tuples_list[i][0] * tuples_list[j][1])\n            product3 = abs(tuples_list[i][1] * tuples_list[j][0])\n            product4 = abs(tuples_list[i][1] * tuples_list[j][1])\n            max_product = max(max_product, product1, product2, product3, product4)\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def divisors_sum(n):\n    total = 1  # Start with 1 because it's always a divisor\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                total += i\n            else:\n                total += i + n // i\n            n //= i\n    if n > 1:\n        total += n\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = divisors_sum(num)\n        if partner != num and divisors_sum(partner) == num:\n            amicable_sum += num\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import cmath\n\ndef angle_complex(num):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number.\n    \n    Parameters:\n    - num: A complex number.\n    \n    Returns:\n    - The angle (in radians) of the complex number.\n    \"\"\"\n    angle = cmath.phase(num)\n    return angle"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    current_diff = 0\n    # Dictionary to keep track of the first occurrence of a difference value\n    diff_map = {0: -1}\n    \n    for i, char in enumerate(binary_string):\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff not in diff_map:\n            diff_map[current_diff] = i\n        \n        # If the current difference has been seen before, update max_diff\n        if current_diff - 0 in diff_map:\n            max_diff = max(max_diff, i - diff_map[current_diff])\n    \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def gcd(x, y):\n    \"\"\"Compute the greatest common divisor of x and y.\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \n    :param a: First number\n    :param b: Second number\n    :return: Sum of common divisors\n    \"\"\"\n    common_divisors_sum = 0\n    g = gcd(a, b)\n    for i in range(1, g + 1):\n        if g % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Finds words that are longer than n characters from a given list of words.\n    \n    :param n: Minimum length of words to filter.\n    :param words: A string containing words separated by spaces.\n    :return: A list of words longer than n characters.\n    \"\"\"\n    word_list = words.split()\n    result = [word for word in word_list if len(word) > n]\n    return result"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    # Check if it's a square matrix\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n    \n    # Check rows and columns\n    for i in range(n):\n        if sum(matrix[i]) != target_sum or sum(matrix[j][i] for j in range(n)) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum or sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    from collections import Counter\n    # Using Counter to count occurrences of each element\n    counts = Counter(lst)\n    # Finding the item with the maximum frequency\n    max_freq_item = max(counts, key=counts.get)\n    return max_freq_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    \"\"\"\n    Reverses only the vowels in the given string s.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left, right = left + 1, right - 1\n            \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number n can be represented as the sum of non-zero powers of 2.\n    \n    :param n: Integer to check\n    :return: Boolean indicating if n can be represented as the sum of non-zero powers of 2\n    \"\"\"\n    # Convert the number to binary and remove the '0b' prefix\n    binary_str = bin(n)[2:]\n    \n    # Count the number of '1's in the binary representation\n    ones_count = binary_str.count('1')\n    \n    # If there are more than one '1', it means the number can be represented as the sum of non-zero powers of 2\n    return ones_count > 1\n\n# Example check\nprint(is_Sum_Of_Powers_Of_Two(10))  # Expected output: True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    :param radius: The radius of the circle.\n    :return: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    return set(number for sublist in list_of_lists for number in sublist)"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, i):\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n\ndef find_max_index(arr, n):\n    max_idx = 0\n    for i in range(n):\n        if arr[i] > arr[max_idx]:\n            max_idx = i\n    return max_idx\n\ndef pancake_sort(arr):\n    n = len(arr)\n    while n > 1:\n        max_idx = find_max_index(arr, n)\n        if max_idx != n - 1:\n            # Flip the maximum element to the beginning\n            flip(arr, max_idx)\n            # Flip the maximum element to its correct position\n            flip(arr, n - 1)\n        n -= 1\n    return arr\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of positions where all three lists have the same element.\n    \n    :param list1: First list of elements.\n    :param list2: Second list of elements.\n    :param list3: Third list of elements.\n    :return: Count of positions where all three lists have identical elements.\n    \"\"\"\n    return sum(1 for x, y, z in zip(list1, list2, list3) if x == y == z)"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    return sum(isinstance(item, list) for item in tup)"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    min_val = arr[0]\n    max_diff = 0\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, abs(arr[i] - min_val))\n        min_val = min(min_val, arr[i])\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    def gcd_extended(e, f):\n        if e == 0:\n            return f, 0, 1\n        g, x, y = gcd_extended(f % e, e)\n        return g, y - (f // e) * x, x\n\n    g, x, y = gcd_extended(a, b)\n    if g != 1:\n        # If the GCD is not 1, then there's no solution unless n is divisible by g\n        if n % g == 0:\n            # Scale the solution by n/g\n            x *= n // g\n            y *= n // g\n            return (x, y)\n        else:\n            return None\n    else:\n        # Scale the solution by n\n        x *= n\n        y *= n\n        return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    def sum_divisors(n):\n        return sum([i for i in range(1, n // 2 + 1) if n % i == 0])\n\n    return sum_divisors(a) == sum_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    \"\"\"\n    Counts the number of characters in the string s that occur at the same position as in the English alphabet (case insensitive).\n    \n    :param s: Input string\n    :return: Count of characters in their correct alphabetical position\n    \"\"\"\n    count = 0\n    # Convert the string to lowercase to make the function case-insensitive\n    s = s.lower()\n    for i, char in enumerate(s):\n        # Check if the character's position matches its index (0-based indexing needs adjustment)\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n    \n    :param lst: List of integers.\n    :param num: Integer to count occurrences of.\n    :return: Number of occurrences of num in lst.\n    \"\"\"\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Calculate the sum of numbers in a list within the specified range [start_index, end_index].\n    \n    :param numbers: List of integers.\n    :param start_index: Starting index of the range.\n    :param end_index: Ending index of the range.\n    :return: Sum of numbers within the specified range.\n    \"\"\"\n    # Validate input parameters\n    if not isinstance(numbers, list) or not all(isinstance(x, int) for x in numbers):\n        raise ValueError(\"Input 'numbers' must be a list of integers.\")\n    if not (0 <= start_index < len(numbers)) or not (0 <= end_index < len(numbers)):\n        raise IndexError(\"Indices are out of bounds.\")\n    \n    # Calculate the sum within the specified range\n    return sum(numbers[start_index:end_index + 1])\n\n# Test the function\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    :param side_length: Length of one side of the pentagon.\n    :return: Perimeter of the pentagon.\n    \"\"\"\n    return side_length * 5"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(text):\n    # Initialize the count to 0\n    count = 0\n    # Define the target substring\n    target = \"std\"\n    # Get the length of the target substring\n    target_length = len(target)\n    \n    # Iterate through the text\n    for i in range(len(text) - target_length + 1):\n        # Check if the current slice matches the target\n        if text[i:i+target_length] == target:\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(data_tuple):\n    \"\"\"\n    Checks if all elements in the tuple have the same data type.\n\n    :param data_tuple: Tuple containing elements to be checked.\n    :return: True if all elements are of the same type, False otherwise.\n    \"\"\"\n    if not data_tuple:  # Check if the tuple is empty\n        return True\n\n    first_element_type = type(data_tuple[0])\n    return all(isinstance(element, first_element_type) for element in data_tuple)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    def binary_search_leftmost(arr, elem):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] < elem:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def binary_search_rightmost(arr, elem):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] <= elem:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n\n    left_index = binary_search_leftmost(arr, elem)\n    right_index = binary_search_rightmost(arr, elem)\n\n    # Check if the element is not found or the count is less than n/2\n    if left_index >= n or arr[left_index] != elem or (right_index - left_index + 1) < n / 2:\n        return False\n    return True"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate over the string, considering only characters at even indices\n    for i in range(0, len(s), 2):\n        result += s[i]\n    \n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test the function with the provided assertion\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate negative and positive numbers while preserving their order\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n\n    # Merge the lists, keeping the relative order among negative and positive elements\n    result = []\n    neg_idx, pos_idx = 0, 0\n    while neg_idx < len(negatives) or pos_idx < len(positives):\n        if neg_idx < len(negatives):\n            result.append(negatives[neg_idx])\n            neg_idx += 1\n        if pos_idx < len(positives):\n            result.append(positives[pos_idx])\n            pos_idx += 1\n\n    # Append the remaining elements from the original array after the first n elements\n    result.extend(arr[n:])\n    \n    return result"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n    \n    :param lst: List of numbers.\n    :param n: Integer representing the number of largest items to return.\n    :return: A list of the n largest items from lst.\n    \"\"\"\n    # First, sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    # Then, slice the list to get the top n elements\n    largest_elements = sorted_lst[:n]\n    return largest_elements"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    # Initialize result as 0\n    result = 0\n    \n    # Iterate over each bit position\n    for i in range(0, 32, 2):  # Step by 2 to only consider even positions\n        if n & (1 << i):  # Check if the current even bit is set in n\n            result |= (1 << i)  # Set the corresponding bit in result\n    \n    return result\n\n# Test the function\ndef check_function():\n    assert even_bit_set_number(10) == 10, \"Test case 1 failed\"\n    assert even_bit_set_number(21) == 5, \"Test case 2 failed\"\n    assert even_bit_set_number(0) == 0, \"Test case 3 failed\"\n    assert even_bit_set_number(255) == 85, \"Test case 4 failed\"\n\ncheck_function()"}
{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    occurrences = {}\n    for tuple_item in tuples_list:\n        # Sort the tuple to ensure (a, b) and (b, a) are treated as the same\n        sorted_tuple = tuple(sorted(tuple_item))\n        if sorted_tuple in occurrences:\n            occurrences[sorted_tuple] += 1\n        else:\n            occurrences[sorted_tuple] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculate the total number of sequences of length n, where each element is a positive integer,\n    greater than or equal to twice the previous element but less than or equal to m.\n    \n    :param m: Maximum value an element in the sequence can take.\n    :param n: Length of the sequence.\n    :return: Total number of possible sequences.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    if m < 2:\n        return 0\n\n    dp = [0] * (m + 1)\n    dp[1] = 1\n\n    for i in range(2, m + 1):\n        dp[i] = sum(dp[max(1, i // 2):i])\n\n    result = 0\n    for _ in range(n - 1):\n        new_dp = [0] * (m + 1)\n        for i in range(2, m + 1):\n            new_dp[i] = sum(dp[max(1, i // 2):i])\n        dp, new_dp = new_dp, dp\n        result = dp[m]\n\n    return result\n\n# Test case\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(first_list, second_list):\n    if first_list and second_list:  # Ensure both lists are non-empty\n        first_list[-1:] = second_list  # Replace the last element with the second list\n    return first_list"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)\n\n# Verification\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Finds the next perfect square greater than the given number n.\n    \n    Parameters:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The next perfect square greater than n.\n    \"\"\"\n    # Find the square root of n and round up to the nearest whole number\n    root = math.ceil(math.sqrt(n))\n    \n    # Return the next perfect square\n    return root ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Initialize two lists to store the maximum sum till each index i\n    # for increasing and decreasing subsequences respectively\n    inc = [0] * n\n    dec = [0] * n\n    \n    # For the increasing subsequence, start from the beginning\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(arr[i], inc[i-1] + arr[i])\n    \n    # For the decreasing subsequence, start from the end\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = max(arr[i], dec[i+1] + arr[i])\n    \n    # Find the maximum sum of the bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string.\n    \n    :param s: A string to find the longest palindromic subsequence in.\n    :return: The length of the longest palindromic subsequence.\n    \"\"\"\n    s = ''.join(ch for ch in s if ch.isalpha()).upper()  # Remove non-alphabetic characters and convert to uppercase\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    # Convert both lists to sets to remove duplicates and perform intersection\n    set1 = set(arr1)\n    set2 = set(arr2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list and return it\n    return list(intersection_set)"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(complex_number):\n    \"\"\"\n    Converts a given complex number to its polar coordinate representation (r, theta).\n    \n    Parameters:\n    - complex_number: A complex number.\n    \n    Returns:\n    - A tuple (r, theta) representing the polar coordinates of the input complex number,\n      where r is the magnitude (radius) and theta is the phase angle in radians.\n    \"\"\"\n    r, theta = cmath.polar(complex_number)\n    return (float(r), float(theta))"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    return sum(isinstance(item, int) for item in lst)"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return [tuple(comb) for comb in combinations_with_replacement(colors, n)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for number in range(2, n):\n        if is_prime(number):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuples1, tuples2):\n    \"\"\"\n    Given two lists of tuples, returns a new list of tuples where each tuple is the element-wise maximum of the corresponding tuples from the input lists.\n    \"\"\"\n    return [(max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(tuples1, tuples2)]"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    count = 0\n    p = 1\n    q = 1\n    \n    while True:\n        # Generate the next Newman-Shanks-Williams number\n        ns_number = p + 2 * q\n        p, q = q, ns_number\n        \n        # Check if the number is prime\n        if is_prime(ns_number):\n            count += 1\n            if count == n:\n                return ns_number"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(x / y for x, y in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2.0, 2.0, 2.0, 3.0)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L,\n    and returns the resulting lists in a tuple.\n    \n    :param lst: List to be split\n    :param L: Length of the first part\n    :return: Tuple containing the two parts of the list\n    \"\"\"\n    # Validate input\n    if not isinstance(lst, list) or not isinstance(L, int) or L < 0:\n        raise ValueError(\"Invalid input\")\n    \n    # Ensure the length does not exceed the list size\n    L = min(L, len(lst))\n    \n    # Split the list\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 0:\n        return 0\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return (human_years - 2) * 4 + 21\n\n# Test the function with the provided data point\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    # Split the list for every nth element and return a list of the resulting lists\n    result = [[] for _ in range(n)]\n    for index, value in enumerate(lst):\n        result[index % n].append(value)\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)])"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6*n*(n-1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function calculates the sum of even numbers located at even indices in a given list.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The sum of even numbers at even indices.\n    \"\"\"\n    # Initialize the sum\n    sum_even = 0\n    \n    # Iterate over the list, considering only even indices\n    for i in range(0, len(lst), 2):\n        # Check if the number at the current index is even\n        if lst[i] % 2 == 0:\n            sum_even += lst[i]\n    \n    return sum_even"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts elements of the first tuple by the elements of the second tuple with the same index.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n    \n    Returns:\n    tuple: A new tuple containing the result of the subtraction.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    from math import comb\n    \n    sum_even_coeffs = 0\n    for i in range(0, n + 1, 2):\n        sum_even_coeffs += comb(n, i)\n    \n    return sum_even_coeffs"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    :param radius: The radius of the cylinder.\n    :param height: The height of the cylinder.\n    :return: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius ** 2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {key: value for key, value in input_dict.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    for index, element in enumerate(t):\n        if isinstance(element, tuple):\n            return index\n    return 0"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Args:\n    n (int): The position of the decagonal number.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return 4 * n ** 2 - 3 * n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, elem):\n    for index, value in enumerate(arr):\n        if value == elem:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in the given list are unique.\n\n    Parameters:\n    lst (list): The list to check for uniqueness.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    seen = set()\n    for element in lst:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Checks if the frequency of each digit in the given integer is less than or equal to the digit itself.\n    \n    Args:\n    num (int): The integer to validate.\n    \n    Returns:\n    bool: True if the condition is met, False otherwise.\n    \"\"\"\n    # Convert the number to a string to iterate over its digits\n    str_num = str(num)\n    \n    # Create a frequency dictionary for each digit\n    freq_dict = {}\n    for digit in str_num:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in freq_dict.items():\n        if int(digit) < freq:\n            return False\n    \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list to check.\n    element: The element to compare against.\n\n    Returns:\n    bool: True if all elements are equal to the given element, False otherwise.\n    \"\"\"\n    return all(e == element for e in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"ab{2,3}\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_so_far = max_ending_here = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate maximum subarray sum for single instance\n    max_kadane = kadane(arr)\n\n    # Calculate prefix and suffix sums\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    current_sum = 0\n    for i in range(n):\n        current_sum += arr[i]\n        prefix_sum[i] = current_sum\n\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += arr[i]\n        suffix_sum[i] = current_sum\n\n    # Calculate total sum of the array\n    total_sum = prefix_sum[n - 1]\n\n    if k == 1:\n        return max_kadane\n\n    # Calculate max subarray sum for k > 1\n    max_wrap = max(suffix_sum[0] + prefix_sum[n - 1], max(prefix_sum[i] + suffix_sum[0] + (k - 2) * total_sum for i in range(n)))\n\n    return max(max_kadane, max_wrap)\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    # Initialize variables to store the maximum length and the corresponding list\n    max_len = 0\n    max_list = []\n    \n    # Iterate through each list in the input list of lists\n    for lst in lists:\n        # If the current list's length is greater than the current maximum length,\n        # update the maximum length and the corresponding list\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    # Return the length of the longest list and the list itself\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "import math\n\ndef find(numerator, denominator):\n    \"\"\"\n    Finds the quotient of two numbers rounded down to the nearest integer.\n    \n    Parameters:\n    numerator (int): The number to be divided.\n    denominator (int): The number by which to divide.\n    \n    Returns:\n    int: The quotient rounded down to the nearest integer.\n    \"\"\"\n    return math.floor(numerator / denominator)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle given the lengths of the other two sides.\n    \n    :param a: Length of one side of the triangle.\n    :param b: Length of the other side of the triangle.\n    :return: The length of the hypotenuse.\n    \"\"\"\n    # Using the Pythagorean theorem: c^2 = a^2 + b^2\n    hypotenuse = math.sqrt(a**2 + b**2)\n    return hypotenuse"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_int = float('-inf')  # Initialize with the smallest possible integer\n    for item in lst:\n        if isinstance(item, int):  # Check if the item is an integer\n            if item > max_int:\n                max_int = item\n    return max_int"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    if n <= 0:\n        return 0\n    divisors_sum = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_sort_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, left_count = merge_sort_count(arr[:mid])\n        right, right_count = merge_sort_count(arr[mid:])\n        merged, split_count = merge_count_split_inv(left, right)\n        return merged, left_count + right_count + split_count\n\n    def merge_count_split_inv(left, right):\n        merged = []\n        i = j = inv_count = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged += left[i:]\n        merged += right[j:]\n        return merged, inv_count\n\n    _, count = merge_sort_count(arr)\n    return count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    # Create a dictionary to aggregate scores by name\n    aggregate_scores = {}\n    for name, score in lst:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n\n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n\n    return max_name, max_score"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Calculate the count of all binary sequences of length 2n such that the sum of the first n bits is the same as the sum of the last n bits.\n    \n    :param n: The length of each half of the binary sequence.\n    :return: The count of valid binary sequences.\n    \"\"\"\n    if n == 1:\n        return 2.0\n    \n    from scipy.special import comb\n    \n    total_count = 0\n    for k in range(n + 1):\n        # Calculate combinations for the first n bits having k ones\n        first_half = comb(n, k, exact=True)\n        # Calculate combinations for the second n bits having k ones\n        second_half = comb(n, k, exact=True)\n        # Multiply the combinations and add to the total count\n        total_count += first_half * second_half\n    \n    return float(total_count)\n\n# Check function to verify the correctness of the solution\ndef check_function():\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001), \"Test case n=1 failed\"\n    assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001), \"Test case n=2 failed\"\n    assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001), \"Test case n=3 failed\"\n\ncheck_function()"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict) and d:  # Check if it's a non-empty dictionary\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word[0].lower() == 'p':\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)\n\n# Test the function\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(nums, n, i, k):\n    dp = [0] * n\n    result = 0\n\n    for j in range(n):\n        dp[j] = nums[j]\n        for m in range(j):\n            if nums[m] < nums[j]:\n                dp[j] = max(dp[j], dp[m] + nums[j])\n        if j <= i and j < k:\n            result = max(result, dp[j])\n\n    return result + nums[k]"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    from heapq import nlargest\n    # Sort the first list in descending order and the second list in ascending order\n    sorted_list1 = sorted(list1, reverse=True)\n    sorted_list2 = sorted(list2)\n    \n    # Generate all possible products\n    products = [x * y for x in sorted_list1 for y in sorted_list2]\n    \n    # Find the n largest products\n    return nlargest(n, products)\n\n# Test the function\nlarge_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6], 3)"}
{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n\n    # Find the position of the first unset bit from the left\n    position = 0\n    while n & (1 << position):\n        position += 1\n\n    # Set the found unset bit\n    return n | (1 << position)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    prev, curr = 2, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr"}
{"task_id": "Mbpp/390", "solution": "def add_string(numbers, format_string):\n    return [format_string.format(number) for number in numbers]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    return [{'{}'.format(id): {'{}'.format(name): score}} for id, name, score in zip(ids, names, scores)]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    memo[n] = max(get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo), n)\n    return memo[n]"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    char: The first non-repeated character or None if all characters are repeated.\n    \"\"\"\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a - b) * (c - a) >= 0:\n        return a\n    elif (b - a) * (c - b) >= 0:\n        return b\n    else:\n        return c"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        while number > 0:\n            total_sum += number % 10\n            number //= 10\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    \"\"\"\n    Checks if an element exists within a given tuple.\n\n    Parameters:\n    tup (tuple): The tuple to search within.\n    element (any): The element to search for.\n\n    Returns:\n    bool: True if the element is found, False otherwise.\n    \"\"\"\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Start from the right, find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number cannot be rearranged to form a bigger number\n        return -1\n    \n    # Find the smallest digit to the right of the found digit that is larger than it\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Sort the digits to the right of the swapped position\n    digits[i + 1:] = sorted(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    # Initialize the minimum product to a very large number\n    min_product = float('inf')\n    # Iterate through each tuple in the list\n    for tuple1 in tuples_list:\n        for tuple2 in tuples_list:\n            # Ensure we don't multiply a tuple by itself\n            if tuple1 != tuple2:\n                # Calculate the product of elements from two different tuples\n                product = tuple1[0] * tuple2[1]\n                # Update the minimum product if a smaller one is found\n                if product < min_product:\n                    min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    # Filter out non-numeric values\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    # Return the minimum value from the filtered list\n    return min(numeric_values) if numeric_values else None\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if there is any common element between two sequences.\n\n    Parameters:\n    seq1 (list): The first sequence.\n    seq2 (list): The second sequence.\n\n    Returns:\n    bool: True if there is at least one common element, otherwise False.\n    \"\"\"\n    return bool(set(seq1) & set(seq2))"}
{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Check the product of the first two elements (highest positive case)\n    # and the product of the last two elements (highest negative case)\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])\n\n# Example check function (not part of the solution)\ndef check_solution():\n    assert max_product([1, 2, 3, 4, 7, 0, 8, 4]) == (7 * 8)\n    assert max_product([-1, -2, -3, -4]) == (-1 * -2)\n    assert max_product([5, 1, 0, 3, 6, 2]) == (6 * 5)\n    print(\"All tests passed!\")\n\n# Uncomment the line below to test the solution\n# check_solution()"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(list_of_lists):\n    \"\"\"\n    Finds the list within a list of lists that has the maximum length.\n\n    Parameters:\n    - list_of_lists: A list containing other lists.\n\n    Returns:\n    - The list with the maximum length from the input list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    # Iterate through each list in the input list of lists\n    for sublist in list_of_lists:\n        # Check if the current sublist's length is greater than the current max length\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n            \n    return max_list"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    # Convert all elements to string and join them with '-'\n    return '-'.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(t):\n    \"\"\"\n    Extracts the last character from each string in the given tuple.\n\n    Args:\n    t (tuple): A tuple containing strings.\n\n    Returns:\n    list: A list of the last characters from each string in the input tuple.\n    \"\"\"\n    return [s[-1] for s in t]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(nested_list, element):\n    \"\"\"\n    Counts the number of sublists within a nested list that contain a specific element.\n\n    :param nested_list: A list of lists (nested list).\n    :param element: The element to search for within the sublists.\n    :return: The count of sublists containing the specified element.\n    \"\"\"\n    count = 0\n    for sublist in nested_list:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    # Split the date string into year, month, and day\n    year, month, day = date_str.split('-')\n    # Reformat the date to dd-mm-yyyy\n    return f'{day}-{month}-{year}'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(int(bool(a) and bool(b)) for a, b in zip(t1, t2))\n\n# Test the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(A, B, C):\n    # The formula to find the directrix of a parabola Ax^2 + Bx + Cy = 0 is D = C - 1/(4A)\n    # where A is the coefficient of x^2, B is the coefficient of x, and C is the constant term.\n    # Note: This assumes the parabola opens vertically and is expressed in the form Ax^2 + Bx + Cy = 0.\n    return C - 1/(4*A)"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    # Convert the second list to a set for O(1) lookups\n    set2 = set(list2)\n    # Iterate through the first list and check if any element is in the second list's set\n    for item in list1:\n        if item in set2:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium given the lengths of the parallel sides (a and b) and the height (c).\n    The formula used is: median = (a + b) / 2\n    :param a: Length of the first parallel side.\n    :param b: Length of the second parallel side.\n    :param c: Height of the trapezium (not used in median calculation).\n    :return: The median length of the trapezium.\n    \"\"\"\n    return (a + b) / 2\n\n# Test case\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(element < num for element in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    return abs(number) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the negative numbers.\n    \n    :param numbers: List of integers.\n    :return: A list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = ''.join([char for i, char in enumerate(s) if i % 2 == 1])\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    \"\"\"\n    Counts the number of bidirectional tuple pairs in a list of tuples.\n    \n    A bidirectional tuple pair consists of two tuples where one is the reverse of the other.\n    \n    :param tuples: List of tuples to be analyzed.\n    :return: The count of bidirectional tuple pairs.\n    \"\"\"\n    # Create a dictionary to keep track of the counts\n    tuple_counts = {}\n    \n    # Iterate through each tuple in the list\n    for t in tuples:\n        # If the tuple or its reverse exists, increment the count\n        if t in tuple_counts:\n            tuple_counts[t] += 1\n        else:\n            tuple_counts[t] = 1\n        \n        # Check if the reverse tuple exists and update its count accordingly\n        rev_t = t[::-1]\n        if rev_t in tuple_counts:\n            tuple_counts[rev_t] += 1\n        else:\n            tuple_counts[rev_t] = 1\n    \n    # Count bidirectional pairs\n    bidirectional_count = 0\n    for t, count in tuple_counts.items():\n        # For each tuple, check if its reverse also exists and has been counted\n        if t != t[::-1] and t[::-1] in tuple_counts:\n            bidirectional_count += min(count, tuple_counts[t[::-1]])\n    \n    # Since each pair is counted twice, divide by 2\n    return bidirectional_count // 2"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Joins a list of integers into a single integer.\n    \n    :param numbers: List of integers\n    :return: A single integer formed by joining the integers in the list\n    \"\"\"\n    # Convert each integer in the list to a string\n    str_numbers = [str(number) for number in numbers]\n    \n    # Join the strings together\n    joined_str = ''.join(str_numbers)\n    \n    # Convert the resulting string back to an integer\n    result = int(joined_str)\n    \n    return result\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match an adverb (typically ending in 'ly')\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Search for the first occurrence of an adverb in the sentence\n    match = re.search(pattern, sentence)\n    \n    if match:\n        # Extract the start index, end index, and the adverb itself\n        start_index = match.start()\n        end_index = match.end()\n        adverb = match.group()\n        \n        return (start_index, end_index, adverb)\n    else:\n        # Return None if no adverb is found\n        return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube given its side length.\n\n    :param side_length: The length of one side of the cube.\n    :return: The total surface area of the cube.\n    \"\"\"\n    # Surface area of a cube = 6 * side_length^2\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_numbers = 0\n    total_numbers = 0\n    for num in arr:\n        if num > 0:\n            positive_numbers += 1\n        if num != 0:\n            total_numbers += 1\n    return round(positive_numbers / total_numbers, 2) if total_numbers else 0\n\n# Example test case (not part of the function)\n# positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    # Initialize a counter variable\n    count = 0\n    # Create a set from the list to remove duplicates and iterate through it\n    for item in set(lst):\n        # Count occurrences of each item in the tuple and add to the counter\n        count += tup.count(item)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [num ** 3 for num in numbers]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n\n    # Initialize the first three Perrin numbers\n    perrin_numbers = [3, 0, 2]\n\n    # Calculate Perrin numbers up to n\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[1] + perrin_numbers[0]\n        perrin_numbers = [perrin_numbers[1], perrin_numbers[2], next_perrin]\n\n    # Sum of Perrin numbers up to n\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [word for word in lst if len(word) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sum_of_even_factors(n):\n    sum_even = 0\n    # Check each factor from 2 up to n\n    for i in range(2, n + 1):\n        # If i is a factor of n and i is even\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even\n\n# Example usage (not part of the function)\n# assert sum_of_even_factors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if the given text contains a word with 'z'.\n    \n    Args:\n    text (str): The input string to check.\n    \n    Returns:\n    bool: True if the text contains a word with 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    \"\"\"\n    Checks if the given month number has 31 days.\n    \n    Args:\n    month (int): The month number (1-12).\n    \n    Returns:\n    bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month is valid (between 1 and 12)\n    if month < 1 or month > 12:\n        raise ValueError(\"Month must be between 1 and 12.\")\n    \n    # Return True if the month is in the list, False otherwise\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_length = len(lists[0])\n    min_list = lists[0]\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n    return min_list"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''.join(char for char in s if not char.isupper())\n    return result"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(lst):\n    return [sublist[0] for sublist in lst if sublist]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(input_string):\n    \"\"\"\n    Counts the number of uppercase characters in the given string.\n\n    Parameters:\n    input_string (str): The string to analyze.\n\n    Returns:\n    int: The count of uppercase characters in the input string.\n    \"\"\"\n    return sum(1 for char in input_string if char.isupper())\n\n# Test the function\nassert upper_ctr('PYthon') == 1"}
{"task_id": "Mbpp/462", "solution": "from itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_prod = min_prod = result = nums[0]\n\n    for i in range(1, len(nums)):\n        choices = (nums[i], nums[i] * max_prod, nums[i] * min_prod)\n        max_prod = max(choices)\n        min_prod = min(choices)\n        result = max(result, max_prod)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    if not nums:\n        return 0\n\n    # Initialize the DP table\n    dp = [(num, num) for num in nums]  # (min_product, max_product) at each index\n    result = float('-inf')\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                min_prod = min(dp[j][0], nums[j])\n                max_prod = max(dp[j][1], nums[j])\n                new_min = min(min_prod * nums[i], nums[i])\n                new_max = max(max_prod * nums[i], nums[i])\n                dp[i] = (new_min, new_max)\n                result = max(result, new_max)\n\n    return result\n\n# Test case\nmax_product([3, 100, 4, 5, 150, 6])"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculate the product of the array elements modulo n.\n    \n    :param arr: List of integers.\n    :param n: Modulo value.\n    :return: Product of the array elements modulo n.\n    \"\"\"\n    result = 1\n    for element in arr:\n        result = (result * element) % n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_consecutive(numbers):\n    \"\"\"\n    Checks if the given list of numbers contains consecutive integers.\n    \n    :param numbers: List of integers.\n    :return: True if the numbers are consecutive, False otherwise.\n    \"\"\"\n    if not numbers:\n        return False\n\n    sorted_numbers = sorted(numbers)\n    start = sorted_numbers[0]\n    end = sorted_numbers[-1]\n\n    # Check if the sorted list has the same length as the range from start to end\n    if len(sorted_numbers) != (end - start + 1):\n        return False\n\n    for i in range(1, len(sorted_numbers)):\n        if sorted_numbers[i] != sorted_numbers[i-1] + 1:\n            return False\n\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(lst1, lst2):\n    # Convert each tuple in the lists to sets to ignore order and then back to tuples\n    set_lst1 = [tuple(sorted(set(t))) for t in lst1]\n    set_lst2 = [tuple(sorted(set(t))) for t in lst2]\n\n    # Find the intersection of the two lists\n    intersection = set(set_lst1) & set(set_lst2)\n\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter_dict):\n    return sorted(counter_dict.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    # Find the smallest and largest values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    # Return the sum of the smallest and largest values\n    return min_val + max_val"}
{"task_id": "Mbpp/477", "solution": "def to_lower_case(input_string):\n    return input_string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([char for char in s if not char.islower()])\n\n# Example check\nprint(remove_lowercase(\"PYTHon\"))  # Expected output: 'PYTH'"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    while number >= 10:\n        number //= 10\n    return number"}
{"task_id": "Mbpp/554", "solution": "def split_odd_numbers(numbers):\n    \"\"\"\n    Takes a list of integers and returns a new list containing only the odd numbers.\n    \n    :param numbers: List[int] - A list of integers.\n    :return: List[int] - A list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers**2)"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    for i in range(n):\n        if arr[i] % 2 != 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    \"\"\"\n    Toggles the case of all characters in the input string.\n    \n    Parameters:\n    s (str): The input string whose characters' cases are to be toggled.\n    \n    Returns:\n    str: The resulting string with toggled character cases.\n    \"\"\"\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n    \n    Args:\n    num1 (int): First integer.\n    num2 (int): Second integer.\n    \n    Returns:\n    int: The sum of the per-digit difference.\n    \"\"\"\n    # Convert integers to strings for easy digit manipulation\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Ensure both numbers have the same number of digits by padding with zeros if necessary\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of the absolute differences of corresponding digits\n    digit_distance_sum = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str_num1, str_num2))\n    \n    return digit_distance_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    curr_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1) | set(tuple2)\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Using regular expression to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_pairs(nums):\n    # Create a set to store unique elements\n    unique_elements = set(nums)\n    # Calculate the number of unique elements\n    num_unique = len(unique_elements)\n    # If there are less than 2 unique elements, no pairs can be formed\n    if num_unique < 2:\n        return 0\n    # Calculate the number of possible pairs\n    # Formula: n * (n - 1) / 2 for n unique elements\n    return num_unique * (num_unique - 1) // 2\n\n# Test the function\nassert count_pairs([1, 2, 1]) == 1"}
{"task_id": "Mbpp/565", "solution": "def split(input_string):\n    return [char for char in input_string]"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits are to be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(*lists):\n    unique_nums = set()\n    duplicates = set()\n    for lst in lists:\n        for num in lst:\n            if num in unique_nums:\n                duplicates.add(num)\n            else:\n                unique_nums.add(num)\n    return list(unique_nums - duplicates)\n\n# Example usage (not part of the function)\n# result = two_unique_nums([1,2,3,2,3,4,5])\n# print(result)  # Output should be [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \n    :param numbers: List of integers.\n    :return: Product of unique numbers.\n    \"\"\"\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    # Calculate the surface area of a cylinder\n    # Surface Area = 2 * \u03c0 * radius * (radius + height)\n    return 2 * math.pi * radius * (radius + height)\n\n# Test the function with the provided assertion\nassert surfacearea_cylinder(10, 5) == 942.45"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Checks if sub_list is a sublist of main_list.\n    \n    :param main_list: List in which to search for the sublist.\n    :param sub_list: List that is being searched for within the main list.\n    :return: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    # For numbers >= 5, the factorial will always end in 0 due to the multiplication by 10 (2*5).\n    # Thus, we only need to handle numbers from 0 to 4.\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.extend([list1[i], list2[i], list3[i]])\n    return interleaved\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = (set1 - set2) | (set2 - set1)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(mixed_tuple):\n    result = []\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            result.append(tuple(extract_even(item)))\n        elif isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    lateral_area = (base_edge * slant_height) * 4\n    total_surface_area = base_area + lateral_area\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return not bool(d)"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given list of items.\n    \n    :param items: List of dictionaries where each dictionary contains 'name' and 'price' keys.\n    :param n: Integer representing the number of most expensive items to return.\n    :return: List of dictionaries representing the n most expensive items.\n    \"\"\"\n    # Sort the items based on price in descending order and slice the top n items\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n    return sorted_items\n\n# Example check function to verify correctness\ndef check_expensive_items():\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]\n    print(\"Test passed!\")\n\ncheck_expensive_items()"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Splitting the list at the nth element and concatenating the parts\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    # Calculate the starting and ending square roots that are relevant\n    start_sqrt = math.ceil(math.sqrt(start))\n    end_sqrt = math.floor(math.sqrt(end))\n    \n    # Generate the list of perfect squares within the given range\n    squares = [x**2 for x in range(start_sqrt, end_sqrt + 1)]\n    \n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return both the tuple (x, y) and the complex number representation\n    return ((x.real, y.real), complex(x.real, y.imag))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for i in range(n):\n        total_sum += comb(n, i) * comb(n, i + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    # Split the IP address by periods\n    parts = ip_address.split('.')\n    # Process each part to remove leading zeros\n    cleaned_parts = [str(int(part)) for part in parts]\n    # Join the processed parts back together\n    return '.'.join(cleaned_parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/595", "solution": "def min_swaps(binary1, binary2):\n    # Convert strings to lists for easier manipulation\n    list1 = list(binary1)\n    list2 = list(binary2)\n    \n    # Track differences and swaps needed\n    diff_count = 0\n    swap_count = 0\n    \n    # Find positions where the two binaries differ\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            diff_count += 1\n    \n    # Calculate swaps needed\n    # For every pair of differences (1 -> 0 and 0 -> 1), one swap is needed\n    swap_count = diff_count // 2\n    \n    return swap_count"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of the given tuple.\n\n    :param t: The tuple for which the size needs to be calculated.\n    :return: The size in bytes of the tuple.\n    \"\"\"\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from two sorted arrays.\n    \n    :param arr1: First sorted array.\n    :param arr2: Second sorted array.\n    :param k: The kth position to find.\n    :return: The kth smallest element from the merged array.\n    \"\"\"\n    index_1, index_2 = 0, 0\n    while True:\n        # If we have reached the end of arr1, return kth element from arr2\n        if index_1 == len(arr1):\n            return arr2[index_2 + k - 1]\n        # If we have reached the end of arr2, return kth element from arr1\n        if index_2 == len(arr2):\n            return arr1[index_1 + k - 1]\n        # If k is 1, return the minimum of the current elements\n        if k == 1:\n            return min(arr1[index_1], arr2[index_2])\n        \n        # Move k to half of its current value\n        half_k = k // 2\n        new_index_1 = min(index_1 + half_k, len(arr1)) - 1\n        new_index_2 = min(index_2 + half_k, len(arr2)) - 1\n        \n        # Compare elements at new indexes\n        if arr1[new_index_1] <= arr2[new_index_2]:\n            # Move index_1 forward and adjust k\n            k -= (new_index_1 - index_1 + 1)\n            index_1 = new_index_1 + 1\n        else:\n            # Move index_2 forward and adjust k\n            k -= (new_index_2 - index_2 + 1)\n            index_2 = new_index_2 + 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    # Convert the number to a string to easily iterate through digits\n    num_str = str(n)\n    num_length = len(num_str)\n    \n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_length for digit in num_str)\n    \n    # Check if the sum of powers equals the original number\n    return sum_of_powers == n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n    \n    :param n: The number up to which the sum and average are calculated.\n    :return: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_n = sum(range(1, n + 1))\n    average_n = sum_n / n\n    return (sum_n, average_n)\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic = list(range(1, n + 1))\n    index = 1\n    while index < len(ludic):\n        remove_index = index + ludic[index]\n        while remove_index < len(ludic):\n            del ludic[remove_index]\n            remove_index += index\n        index += 1\n    return ludic"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    # Split the string into words\n    words = s.split(' ')\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string\n    result = ' '.join(reversed_words)\n    return result"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer n is a prime number.\n\n    Parameters:\n    n (int): The integer to check.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end() - 1\n    else:\n        return None"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Example usage:\n# print(bell_number(2))  # Uncomment this line to test the function"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list and returns the new list.\n    \n    :param lst: List from which the k'th element will be removed.\n    :param k: The index of the element to remove (0-based index).\n    :return: A new list with the k'th element removed.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    first_elements = []\n    second_elements = []\n    for sublist in list_of_lists:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuples):\n    total_sum = 0\n    for t in tuples:\n        for value in t:\n            total_sum += value\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    return [sum(t) / len(t) for t in tuples]\n\n# Test case to verify the correctness of the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 2.5]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    if len(t1) != len(t2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple(x % y for x, y in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y for x, y in zip(list1, list2) if y != 0]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = ''\n    non_nums = ''\n    for char in s:\n        if char.isdigit():\n            nums += char\n        else:\n            non_nums += char\n    return non_nums + nums"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    def can_divide(x, y):\n        return x % y == 0\n\n    nums.sort()\n    n = len(nums)\n    dp = [1] * n  # Initialize DP array with 1s\n    max_len = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if can_divide(nums[i], nums[j]):\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n\n    return max_len"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    if n <= 0:\n        raise ValueError(\"List size must be positive\")\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    \n    mid1 = arr1[n // 2 - 1]\n    mid2 = arr2[n // 2 - 1]\n    \n    if mid1 == mid2:\n        return mid1\n    \n    if mid1 < mid2:\n        if n % 2 == 0:\n            return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n // 2 + 1)\n        else:\n            return get_median(arr1[n // 2:], arr2[:n // 2], n // 2)\n    else:\n        if n % 2 == 0:\n            return get_median(arr2[n // 2:], arr1[:n // 2 + 1], n // 2 + 1)\n        else:\n            return get_median(arr2[n // 2:], arr1[:n // 2], n // 2)"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]\n\n# Test case\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def to_uppercase(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    # The largest triangle inscribed in a semicircle is a right-angled triangle\n    # with its hypotenuse as the diameter of the semicircle.\n    # The area of such a triangle can be calculated using the formula:\n    # Area = 1/2 * base * height\n    # For a right-angled triangle inscribed in a semicircle, the base and height are equal to the radius.\n    # Therefore, the area is 1/2 * radius * radius\n    return 0.5 * radius * radius\n\n# Test the function\nprint(triangle_area(-1))  # Expected output: None"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def split_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coords = [\n        [x-1, y-1], [x-1, y], [x-1, y+1],\n        [x, y-1], [x, y], [x, y+1],\n        [x+1, y-1], [x+1, y], [x+1, y+1]\n    ]\n    # Remove the original coordinate from the list if present\n    adjacent_coords.remove([x, y]) if [x, y] in adjacent_coords else None\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    \"\"\"\n    Moves all zeroes in the given list to the end while maintaining the order of non-zero elements.\n    \n    :param arr: List of integers.\n    :return: Modified list with all zeroes moved to the end.\n    \"\"\"\n    non_zero = [x for x in arr if x != 0]\n    zeros = [0] * (len(arr) - len(non_zero))\n    return non_zero + zeros"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += nums[i] ^ nums[j]\n    return total_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a max heap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one from the heap.\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap.\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount_spent, amount_received):\n    \"\"\"\n    Checks if there is no profit and no loss.\n    \n    Parameters:\n    - amount_spent: The amount spent (cost price).\n    - amount_received: The amount received (selling price).\n    \n    Returns:\n    - True if there is no profit and no loss (amount_spent == amount_received),\n      False otherwise.\n    \"\"\"\n    return amount_spent == amount_received"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    # Wind Chill Formula: WCI = 13.12 + 0.6215T - 11.37V^0.16 + 0.3965TV^0.16\n    # where T is temperature in Celsius and V is wind speed in km/h.\n    # This formula is applicable for temperatures between -10\u00b0C and +10\u00b0C and wind speeds above 4.8 km/h.\n    if temperature > 10 or temperature < -10 or velocity < 4.8:\n        return \"Invalid input range\"\n    \n    wci = 13.12 + 0.6215 * temperature - 11.37 * math.pow(velocity, 0.16) + 0.3965 * temperature * math.pow(velocity, 0.16)\n    return math.ceil(wci)\n\n# Test case\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Sums the lengths of names in the given list after removing names that start with a lowercase letter.\n    \n    :param names: List of names (strings)\n    :return: Integer representing the sum of lengths of names starting with an uppercase letter.\n    \"\"\"\n    return sum(len(name) for name in names if name[0].isupper())\n\n# Example usage (not part of the function)\n# sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = []\n    skip = 0\n    for char in s[0]:\n        if char == '(':\n            skip += 1\n        elif char == ')':\n            skip -= 1\n        elif skip == 0:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    if n <= 0:\n        return False\n    # Nonagonal number formula: N_n = n*(7*n - 5)/2\n    return n * (7 * n - 5) // 2\n\ndef nth_nonagonal_number(n):\n    return is_nonagonal(n)\n\n# Test the function\nassert nth_nonagonal_number(10) == 325"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(word):\n    # Check if 'z' is present in the middle of the word\n    return 'z' in word[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the elements of the array up to the given position k.\n    \n    :param arr: List of integers.\n    :param k: Position up to which the array should be reversed.\n    :return: The modified array with the first k elements reversed.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_to_add):\n    return tup + (dict_to_add,)"}
{"task_id": "Mbpp/721", "solution": "from typing import List\n\ndef maxAverageOfPath(matrix: List[List[int]]) -> float:\n    n = len(matrix)\n    \n    # Initialize DP table where dp[i][j] represents the max sum from (0,0) to (i,j)\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    # Fill the first row and column\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill the rest of the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    # Calculate the maximum average\n    max_sum = dp[n-1][n-1]\n    max_average = max_sum / (n + n - 1)\n    \n    return max_average\n\n# Check function to verify the solution\ndef check_solution():\n    assert abs(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) - 5.2) < 1e-6, \"Test case 1 failed\"\n    assert abs(maxAverageOfPath([[5, 4, 2], [3, 2, 1], [1, 3, 4]]) - 3.0) < 1e-6, \"Test case 2 failed\"\n    print(\"All test cases passed!\")\n\ncheck_solution()"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: info for name, info in students.items() if info[0] >= min_height and info[1] >= min_weight}\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n    \n    :param list1: List of elements.\n    :param list2: List of elements, same length as list1.\n    :return: Integer count of matching indices.\n    \"\"\"\n    # Initialize a counter for matching indices\n    match_count = 0\n    \n    # Iterate through both lists simultaneously\n    for value1, value2 in zip(list1, list2):\n        # If the values at the current index match, increment the counter\n        if value1 == value2:\n            match_count += 1\n            \n    return match_count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n    \n    :param s: The input string containing quoted text.\n    :return: A list of strings extracted from the quotes.\n    \"\"\"\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i, value in enumerate(lst):\n        if i == 0 or value != lst[i - 1]:\n            result.append(value)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius r and height h.\n    \n    :param r: Radius of the cone's base.\n    :param h: Height of the cone.\n    :return: Lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area using the formula\n    area = math.pi * r * l\n    \n    return area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum\n\n# Test the function\ndef check_function():\n    test_cases = [([1, 2, 3], 20)]\n    for inputs, expected in test_cases:\n        result = sum_of_subarray_prod(inputs)\n        assert result == expected, f\"Expected {expected}, but got {result} for input {inputs}\"\n    print(\"All test cases passed.\")\n\ncheck_function()"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask to keep the first and last bits unchanged\n    # For example, if num_bits is 4, the mask will be 0b1010 (10 in decimal)\n    mask = 1 + (1 << (num_bits - 2))\n    \n    # Toggle the middle bits by using XOR operation with a mask that has all middle bits set to 1\n    # and first and last bits set to 0\n    # For example, if num_bits is 4, the toggle mask will be 0b0101 (5 in decimal)\n    toggle_mask = ((1 << (num_bits - 1)) - 1) ^ mask\n    \n    # XOR the original number with the toggle mask to toggle the middle bits\n    return n ^ toggle_mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    low = 0\n    high = len(arr)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n            \n    return low\n\n# Test the function\nassert left_insertion([1, 2, 4, 5], 6) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r\"^[aeiouAEIOU]\", s))"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    # The formula derived from the properties of triangular numbers\n    # to find the index of the smallest triangular number with n digits\n    index = math.ceil((math.sqrt(8*10**(n-1) + 1) - 1) / 2)\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) <= 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    # The formula for the surface area of a regular tetrahedron is:\n    # A = sqrt(3) * a^2, where 'a' is the length of an edge.\n    return math.sqrt(3) * edge_length ** 2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    if not lst or k <= 0:\n        return lst\n    k = k % len(lst)  # Handle rotation greater than list length\n    return lst[-k:] + lst[:-k]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(item is None for item in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_its_digits(number):\n        for digit in str(number):\n            if digit == '0' or number % int(digit) != 0:\n                return False\n        return True\n\n    result = [num for num in range(startnum, endnum + 1) if is_divisible_by_its_digits(num)]\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    # Check if angle is valid\n    if angle > 360:\n        return None\n    \n    # Calculate area of the sector\n    area = (angle / 360) * math.pi * radius ** 2\n    return area"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    import re\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", text)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    # Convert the list of string numbers to integers, sort them, and then convert back to strings\n    sorted_numbers = sorted(map(int, numbers))\n    return list(map(str, sorted_numbers))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Start from the first non-leaf node and go upwards\n    for i in range(int(n/2) - 1, -1, -1):\n        # Check if the current node has a left child\n        if 2*i + 1 < n:\n            # If the left child is smaller than the parent, it's not a min heap\n            if arr[2*i + 1] < arr[i]:\n                return False\n        \n        # Check if the current node has a right child\n        if 2*i + 2 < n:\n            # If the right child is smaller than the parent, it's not a min heap\n            if arr[2*i + 2] < arr[i]:\n                return False\n                \n    # If all checks pass, it's a min heap\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    # Sort the list based on the second element of each tuple\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    # Return the first k elements of the sorted list\n    return sorted_lst[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Finds common elements at the same index in three lists.\n    \n    :param l1: First list of elements.\n    :param l2: Second list of elements.\n    :param l3: Third list of elements.\n    :return: A list containing elements that are common at the same index in all three lists.\n    \"\"\"\n    return [x for x, y, z in zip(l1, l2, l3) if x == y == z]\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = set(numbers)  # Remove duplicates\n    sorted_numbers = sorted(unique_numbers)\n    if len(sorted_numbers) < 2:\n        return None\n    return sorted_numbers[1]\n\n# Test the function\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    \"\"\"\n    Counts the pairs of reverse strings in the given list.\n    \n    :param lst: List of strings\n    :return: Count of reverse string pairs\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the occurrences of sublists within a list and returns a dictionary\n    where each key is a tuple representation of the sublist and its value is the count.\n    \"\"\"\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    \"\"\"\n    Checks if the given string s is a decimal number with a precision of exactly 2.\n    \n    Parameters:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if s is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    # Regular expression to match a decimal number with exactly two digits after the decimal point\n    pattern = r'^-?\\d+(\\.\\d{2})$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    thirty_day_months = {4, 6, 9, 11}\n    return month in thirty_day_months"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference as a large number\n    min_diff = float('inf')\n\n    # Traverse the sorted array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Example usage\nassert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    result = 0\n    binary_representation = bin(n)[2:]  # Convert n to binary and remove the '0b' prefix.\n    for i, bit in enumerate(reversed(binary_representation)):\n        if bit == '1':\n            result += 1 << i\n    return result + n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Counts the number of unique pairs in the list 'numbers' that add up to 'target_sum'.\n    \n    :param numbers: List[int] - A list of integers.\n    :param target_sum: int - The target sum for the pairs.\n    :return: int - The number of pairs that add up to 'target_sum'.\n    \"\"\"\n    num_counts = {}\n    pair_count = 0\n    \n    for num in numbers:\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    \n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_counts:\n            pair_count += num_counts[complement]\n            if complement == num:\n                pair_count -= 1\n    \n    return pair_count // 2"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 15, 20, 30]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth powers of the first n odd natural numbers.\n    \n    :param n: Number of initial odd natural numbers to consider.\n    :return: Sum of the fourth powers of these numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        # Calculate the ith odd number (1, 3, 5, ...)\n        odd_number = 2 * i + 1\n        # Add its fourth power to the total\n        total += odd_number ** 4\n    return total"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # Mapping of closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    open_brackets = set(['(', '{', '['])\n    stack = []\n\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurances_substring(text, substring):\n    import re\n    \n    # Find all start indices of the substring in the text\n    matches = [match.start() for match in re.finditer(re.escape(substring), text)]\n    \n    if not matches:\n        return None\n    else:\n        # Take the first occurrence for simplicity\n        first_match_index = matches[0]\n        return (substring, first_match_index, first_match_index + len(substring))\n\n# Test the function\nprint(occurances_substring('python programming, python language', 'python'))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Checks if every odd index in the list contains an odd number.\n    \n    :param lst: List of integers.\n    :return: Boolean indicating if every odd index contains an odd number.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n    \n    :param lst: List of integers.\n    :return: Sum of non-repeated elements.\n    \"\"\"\n    element_count = {}\n    for num in lst:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    return sum(num for num, count in element_count.items() if count == 1)\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    temp = [lst[0]]\n\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    \n    result.append(temp)\n    return result"}
{"task_id": "Mbpp/780", "solution": "from itertools import combinations\n\ndef find_combinations(tuples):\n    result = set()\n    # Generate all possible pairs of tuples\n    for pair in combinations(tuples, 2):\n        # Sum the elements of each tuple to create new combinations\n        sum_tuple = (pair[0][0] + pair[1][0], pair[0][1] + pair[1][1])\n        result.add(sum_tuple)\n    return list(result)\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == \\\n       [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function with the provided data point\nassert count_divisors(10) == False"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        end = i + 1\n        start = n - i\n        odd_subarrays = (start * end + 1) // 2\n        total_sum += arr[i] * odd_subarrays\n    return total_sum\n\n# Test the function\nassert odd_length_sum([1, 2, 4]) == 14"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize the RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v * 100\n\n    s = (maxc - minc) / maxc\n    rc = (maxc - r) / (maxc - minc)\n    gc = (maxc - g) / (maxc - minc)\n    bc = (maxc - b) / (maxc - minc)\n\n    if r == maxc:\n        h = bc - gc\n    elif g == maxc:\n        h = 2.0 + rc - bc\n    else:\n        h = 4.0 + gc - rc\n\n    h = (h / 6.0) % 1.0\n    return h * 360, s * 100, v * 100\n\n# Test the function\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None\n\n# Test case\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    # Remove the parentheses and split the string by comma\n    s = s.strip()[1:-1]\n    elements = s.split(\", \")\n    \n    # Convert each element to an integer and create a tuple\n    int_tuple = tuple(int(element) for element in elements)\n    \n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    left = 0\n    right = len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    This function checks if the input string starts with 'a' followed by exactly three 'b's.\n    \"\"\"\n    pattern = '^ab{3}$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return lst + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_list(nested_lists):\n    return len(nested_lists)\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, elem):\n    low, high = 0, len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == elem:\n            result = mid\n            low = mid + 1  # Move to the right to find the last occurrence\n        elif arr[mid] < elem:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n    \n    :param dictionary: A dictionary with values that can be summed.\n    :return: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(x for x in range(l, r + 1) if x % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of all elements in the given array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of all elements in the array.\n    \"\"\"\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range [0, 31]\n    d %= 32\n    # Perform the left rotation\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    # Count the number of equal numbers from three given integers\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": ""}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n            \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n    \n    :param numbers: List of integers.\n    :return: The first odd number in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n\n# Test the function\nassert first_odd([1,3,5]) == 1"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuples, k):\n    return k in tuples"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))"}
