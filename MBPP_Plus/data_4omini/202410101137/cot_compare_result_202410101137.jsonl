{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1) & set(list2)"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return sorted(heapq.nlargest(n, numbers), reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x ** 2 for x in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i % n:] + s[:i % n] == s:\n            return i\n    return n  # In case of all unique characters, it will return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index != -1 and last_index != -1 and first_index != last_index:\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    elif first_index == last_index:  # Only one occurrence\n        return s[:first_index] + s[first_index + 1:]\n    return s"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    base_area = 0.5 * base * height\n    volume = base_area * length\n    return volume"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    return bool(re.fullmatch(r'([a-z]+(_[a-z]+)*)?', s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    dirty_chars = set(s2)\n    return ''.join([char for char in s1 if char not in dirty_chars])"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1"}
{"task_id": "Mbpp/57", "solution": "from functools import cmp_to_key\n\ndef compare(x, y):\n    if x + y > y + x:\n        return -1\n    else:\n        return 1\n\ndef find_Max_Num(digits):\n    # Convert digits to strings for comparison\n    str_digits = list(map(str, digits))\n    # Sort the digits based on the custom comparator\n    str_digits.sort(key=cmp_to_key(compare))\n    # Join the sorted digits to form the largest number\n    largest_num = ''.join(str_digits)\n    # Handle the case where the largest number is '0'\n    return int(largest_num) if largest_num else 0"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = 0\n    for a, b in tuples:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    if len(array) <= 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            is_decreasing = False\n        elif array[i] < array[i - 1]:\n            is_increasing = False\n            \n    return is_increasing or is_decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i + len_sub] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    reference_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != reference_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    return n % 2 != 0 or n % 4 == 0"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, values):\n    mapping = {}\n    \n    for p, v in zip(patterns, values):\n        if p in mapping:\n            if mapping[p] != v:\n                return False\n        else:\n            mapping[p] = v\n            \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [tup for tup in tuples_list if all(elem % k == 0 for elem in tup)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(n):\n    num_str = str(n)\n    odd_sum = 0\n    even_sum = 0\n    \n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            odd_sum += int(num_str[i])\n        else:\n            even_sum += int(num_str[i])\n    \n    difference = abs(odd_sum - even_sum)\n    return difference == 0 or difference % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6\n\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total_ascii = sum(ord(char) for char in s)\n    result_index = total_ascii % 26\n    return chr(ord('a') + result_index)"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    memo = {1: 1, 2: 1}\n    \n    def helper(x):\n        if x in memo:\n            return memo[x]\n        memo[x] = helper(helper(x - 1)) + helper(x - helper(x - 1))\n        return memo[x]\n    \n    return helper(n)"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Test case\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n > 0:\n        return n - 1\n    return None"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 2:\n        return False\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_first_value = None\n    \n    for first, second in tuples_list:\n        if second < min_value:\n            min_value = second\n            min_first_value = first\n            \n    return min_first_value"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    min_length = float('inf')\n    for sublist in lists:\n        min_length = min(min_length, len(sublist))\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(binary))"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    n += 1  # Start checking from the next number\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds\")\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return ''.join(word.capitalize() for word in words)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    # Create a 2D list to store the Eulerian numbers\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    A[0][0] = 1  # A(0, 0) = 1\n    \n    for i in range(1, n + 1):\n        A[i][0] = 0  # A(n, 0) = 0 for n > 0\n        A[i][i] = 1  # A(n, n) = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            A[i][j] = (j + 1) * A[i - 1][j] + (i - j) * A[i - 1][j - 1]\n    \n    return A[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    true_count = 0\n    for value in bool_list:\n        if value is True:\n            true_count += 1\n    return true_count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    combined_list = list1 + list2 + list3\n    return sorted(combined_list)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    n = len(binary_string)\n    effective_rotations = rotations % n\n    count = 0\n    \n    for i in range(n):\n        rotated_string = binary_string[i:] + binary_string[:i]\n        if rotated_string[-1] == '1':\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    \n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    if s.startswith('-'):\n        return s[1:].isdigit() and len(s) > 1\n    return s.isdigit()"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(dicts):\n    return all(not d for d in dicts)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(str(i) for i in tup))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    result = []\n    for sublist in lst:\n        converted_sublist = []\n        for item in sublist:\n            try:\n                converted_sublist.append(float(item))\n            except ValueError:\n                converted_sublist.append(item)\n        result.append(tuple(converted_sublist))\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for a, b in tuples_list:\n        product = a * b\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def proper_divisors(n):\n    divisors = []\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    \n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum(proper_divisors(num))\n            if partner != num and partner <= limit:\n                if sum(proper_divisors(partner)) == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(partner)\n    \n    return sum(amicable_numbers)"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z_real, z_imag):\n    return math.atan2(z_imag, z_real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    current_sum = 0\n    \n    for char in binary_string:\n        if char == '0':\n            current_sum += 1\n        else:  # char == '1'\n            current_sum -= 1\n        \n        if current_sum > max_diff:\n            max_diff = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    def divisors(n):\n        return {i for i in range(1, n + 1) if n % i == 0}\n    \n    common_divs = divisors(a).intersection(divisors(b))\n    return sum(common_divs)"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    magic_constant = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_constant:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_constant:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    if not lst:\n        return None\n    \n    frequency = {}\n    \n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n            \n    max_item = None\n    max_count = 0\n    \n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n            \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_list = [char for char in s if char in vowels]\n    reversed_vowels = vowel_list[::-1]\n    \n    result = []\n    vowel_index = 0\n    \n    for char in s:\n        if char in vowels:\n            result.append(reversed_vowels[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    total = 0\n    for num in numbers:\n        if num < 0:\n            total += num\n    return total"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in arr:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n            \n    if non_zeroes == 0:\n        return float('inf')  # or handle as needed\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    powers_of_two = []\n    power = 1\n    while power <= n:\n        powers_of_two.append(power)\n        power *= 2\n    \n    def can_sum(target, index):\n        if target == 0:\n            return True\n        if target < 0 or index < 0:\n            return False\n        \n        # Include the current power of two\n        include = can_sum(target - powers_of_two[index], index - 1)\n        # Exclude the current power of two\n        exclude = can_sum(target, index - 1)\n        \n        return include or exclude\n    \n    return can_sum(n, len(powers_of_two) - 1)"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    result = set()\n    for tup in lst:\n        result.update(tup)\n    return result"}
{"task_id": "Mbpp/141", "solution": "def flip(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 1, -1):\n        max_index = arr.index(max(arr[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            arr = flip(arr, i)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n    \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_solution(a, b, n):\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x = x0 * (n // gcd)\n    y = y0 * (n // gcd)\n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(source, to_remove):\n    return [item for item in source if item not in to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total += term\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    def sum_of_divisors(n):\n        if n < 1:\n            return 0\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    for index, char in enumerate(s.lower()):\n        if char.isalpha() and (ord(char) - ord('a') + 1) == (index + 1):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] % 2 == lst[j] % 2):\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise IndexError(\"Indices are out of bounds or invalid.\")\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    if not tup:\n        return True\n    first_type = type(tup[0])\n    for element in tup:\n        if type(element) != first_type:\n            return False\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    def find_first(arr, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < element:\n                low = mid + 1\n            elif arr[mid] > element:\n                high = mid - 1\n            else:\n                if mid == 0 or arr[mid - 1] < element:\n                    return mid\n                high = mid - 1\n        return -1\n\n    def find_last(arr, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < element:\n                low = mid + 1\n            elif arr[mid] > element:\n                high = mid - 1\n            else:\n                if mid == n - 1 or arr[mid + 1] > element:\n                    return mid\n                low = mid + 1\n        return -1\n\n    first_index = find_first(arr, element)\n    if first_index == -1:\n        return False\n\n    last_index = find_last(arr, element)\n    count = last_index - first_index + 1\n\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    return bin(n).count('1')"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    return negatives + positives + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    unique_numbers = set(lst)\n    largest_numbers = sorted(unique_numbers, reverse=True)\n    return largest_numbers[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3\n\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    mask = 0\n    for i in range(32):  # Assuming a 32-bit integer\n        if i % 2 == 0:\n            mask |= (1 << i)\n    return n | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return {k: v for k, v in occurrences.items() if v > 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    memo = {}\n\n    def count_sequences(current_length, last_value):\n        if current_length == n:\n            return 1\n        if (current_length, last_value) in memo:\n            return memo[(current_length, last_value)]\n        \n        count = 0\n        next_value = 2 * last_value\n        while next_value <= m:\n            count += count_sequences(current_length + 1, next_value)\n            next_value += 1\n        \n        memo[(current_length, last_value)] = count\n        return count\n\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(1, start)\n\n    return total_count"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if list1:\n        list1.pop()\n    list1.extend(list2)\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    next_integer = math.isqrt(n) + 1\n    return next_integer * next_integer"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    increasing_sum = [0] * n\n    decreasing_sum = [0] * n\n\n    # Fill increasing_sum\n    for i in range(n):\n        increasing_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n\n    # Fill decreasing_sum\n    for i in range(n - 1, -1, -1):\n        decreasing_sum[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n\n    # Calculate maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    s = s.replace(\" \", \"\").lower()  # Normalize the string by removing spaces and converting to lowercase\n    n = len(s)\n    table = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        table[i][i] = 1  # Each character is a palindrome of length 1\n    \n    for length in range(2, n + 1):  # Length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n    \n    return table[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return sorted(list(set(arr1) & set(arr2)))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    return cmath.polar(z)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n    \n    result = []\n    \n    def generate_combinations(current_combination, start):\n        if len(current_combination) == n:\n            result.append(tuple(current_combination))\n            return\n        \n        for i in range(start, len(lst)):\n            current_combination.append(lst[i])\n            generate_combinations(current_combination, i)  # Allow repetition\n            current_combination.pop()\n    \n    generate_combinations([], 0)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple((max(a, b), max(c, d)) for (a, c), (b, d) in zip(t1, t2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if not (isinstance(tuple1, tuple) and isinstance(tuple2, tuple)) or len(tuple1) != len(tuple2):\n        raise ValueError(\"Both inputs must be tuples of the same length.\")\n    \n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(a // b)\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    if L > len(lst):\n        return (lst, [])\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years < 0:\n        return \"Age cannot be negative\"\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [[lst[i] for i in range(j, len(lst), n)] for j in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * (side_length ** 2)"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum((2 * i - 1) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Test case\nassert find_star_num(3) == 37"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, k) for k in range(0, n + 1, 2))"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {k: v for k, v in input_dict.items() if v >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count  # In case there is no tuple, return the total count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (4 * n - 3)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    for index, value in enumerate(array):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    frequency = {}\n    \n    for digit in num_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n            \n    for digit, count in frequency.items():\n        if count > int(digit):\n            return False\n            \n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(s):\n    return bool(re.search(r'ab{2,3}', s))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_kadane = kadane(arr)\n    total_sum = sum(arr)\n    \n    if k == 1:\n        return max_kadane\n    \n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for num in arr:\n        current_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for num in reversed(arr):\n        current_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    \n    if total_sum > 0:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_suffix_sum + max_prefix_sum)"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return (4 * n * (n + 1) * (2 * n + 1)) // 6"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    for sublist in lists:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    if a > b:\n        return math.sqrt(a**2 - b**2)\n    else:\n        return math.sqrt(b**2 - a**2) if b > a else math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    if n < 1:\n        return 0\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n        \n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        \n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        \n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            \n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        \n        return inv_count\n\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    return flattened"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    aggregate = {}\n    for name, score in scores:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    max_name = max(aggregate, key=aggregate.get)\n    return (max_name, aggregate[max_name])"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    total_count = 0\n    for k in range(n + 1):\n        total_count += math.comb(n, k) ** 2\n    return total_count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    def depth_helper(d, current_depth):\n        if isinstance(d, dict) and d:\n            return max(depth_helper(value, current_depth + 1) for value in d.values())\n        return current_depth\n\n    return depth_helper(d, 1)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    return tuple(p_words)"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    if k <= i:\n        return 0\n    \n    # Step 1: Calculate max sum of increasing subsequence up to index i\n    max_sum = [0] * (i + 1)\n    for j in range(i + 1):\n        max_sum[j] = arr[j]\n        for l in range(j):\n            if arr[l] < arr[j]:\n                max_sum[j] = max(max_sum[j], max_sum[l] + arr[j])\n    \n    # Step 2: Find the maximum sum up to index i\n    max_increasing_sum = max(max_sum)\n    \n    # Step 3: Check if we can include arr[k]\n    if arr[k] > max_increasing_sum:\n        return max_increasing_sum + arr[k]\n    \n    return max_increasing_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = [a * b for a in list1 for b in list2]\n    products.sort(reverse=True)\n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    position = 0\n    while (1 << position) <= n:\n        position += 1\n    \n    # Set the leftmost unset bit\n    result = n | (1 << position)\n    return result"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * (r ** 2) * h"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    result = []\n    for i in range(len(ids)):\n        student_dict = {ids[i]: {names[i]: scores[i]}}\n        result.append(student_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n == 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    \n    max_sum = max(get_max_sum(n // 2, memo) + \n                   get_max_sum(n // 3, memo) + \n                   get_max_sum(n // 4, memo) + \n                   get_max_sum(n // 5, memo), n)\n    \n    memo[n] = max_sum\n    return max_sum"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if not s:\n        return \"Invalid\"\n    return \"Valid\" if s[0] == s[-1] else \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        total_sum += sum(int(digit) for digit in str(number))\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set(tuples_list)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 3: Find the pivot\n    pivot = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n    \n    if pivot == -1:\n        return n  # No larger number can be formed\n    \n    # Step 4: Find the successor\n    successor = -1\n    for i in range(length - 1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            successor = i\n            break\n    \n    # Step 5: Swap the pivot and successor\n    digits[pivot], digits[successor] = digits[successor], digits[pivot]\n    \n    # Step 6: Reverse the digits after the pivot\n    digits = digits[:pivot + 1] + digits[pivot + 1:][::-1]\n    \n    # Step 7: Convert back to integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    if not tuples_list:\n        return None  # or raise an exception if preferred\n    \n    min_product = float('inf')\n    \n    for a, b in tuples_list:\n        product = a * b\n        if product < min_product:\n            min_product = product\n            \n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    arr.sort()\n    max1 = arr[-1] * arr[-2]\n    min1 = arr[0] * arr[1]\n    \n    if max1 >= min1:\n        return (arr[-2], arr[-1])\n    else:\n        return (arr[0], arr[1])"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = -1\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(str(element) for element in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n + 1))\n    average = total_sum / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  # Start with a big gap, then reduce the gap\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2  # Reduce the gap for the next element\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the vertex\n    x_v = -b / (2 * a)\n    y_v = a * x_v**2 + b * x_v + c\n    \n    # Calculate p\n    p = 1 / (4 * a)\n    \n    # Calculate the directrix\n    directrix = y_v - p\n    \n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num > element:\n            return True\n    return False"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10\n\nassert last_Digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i]\n    return result"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    unique_pairs = set()\n    for a, b in pairs:\n        unique_pairs.add((min(a, b), max(a, b)))\n    return len(unique_pairs)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    return int(''.join(map(str, int_list)))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    words = sentence.split()\n    for word in words:\n        if word.endswith('ly'):\n            start_index = sentence.index(word)\n            end_index = start_index + len(word)\n            return (start_index, end_index, word)\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(s):\n    return 6 * (s ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    total_count = len(arr)\n    positive_count = sum(1 for x in arr if x > 0)\n    return positive_count / total_count if total_count > 0 else 0"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple(tuple(a * b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    return [x ** 3 for x in lst]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 3\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    \n    perrin = [3, 0, 2]\n    total_sum = sum(perrin)\n    \n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        total_sum += next_perrin\n    \n    return total_sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s: str) -> str:\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    \n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(width, height):\n    return width * height"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    for char in s:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    def backtrack(start, path):\n        result.append(path)\n        for i in range(start, len(elements)):\n            backtrack(i + 1, path + [elements[i]])\n\n    result = []\n    backtrack(0, [])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    return {k: v for k, v in input_dict.items() if v not in (None, '')}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    dp = arr[:]  # Initialize dp with the values of arr\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:  # Check for increasing subsequence\n                dp[i] = max(dp[i], dp[j] * arr[i])  # Update dp[i]\n    \n    return max(dp)  # Return the maximum product found"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    if len(nums) < 2:\n        return False\n    nums = sorted(set(nums))  # Sort and remove duplicates\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1] + 1:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n    intersection = set1.intersection(set2)\n    return {tuple(fs) for fs in intersection}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(input_string, char_to_replace, replacement_char):\n    return ''.join(replacement_char if char == char_to_replace else char for char in input_string)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if not arr:\n        return 0\n    return min(arr) + max(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = ''\n    for char in s:\n        if not char.islower():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    return int(str(abs(num))[0])"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    even_count = sum(1 for x in arr if x % 2 == 0)\n    odd_count = n - even_count\n    return even_count * odd_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str1, str2 = str(num1), str(num2)\n    max_length = max(len(str1), len(str2))\n    str1 = str1.zfill(max_length)\n    str2 = str2.zfill(max_length)\n    \n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str1, str2))"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    combined = set(tuple1) | set(tuple2)\n    sorted_union = sorted(combined)\n    return tuple(sorted_union)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    unique_elements = set(lst)\n    count = len(unique_elements)\n    return count * (count - 1) // 2"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return [char for char in s]"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "from collections import Counter\n\ndef two_unique_nums(nums):\n    count = Counter(nums)\n    return [num for num, cnt in count.items() if cnt == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (height + radius)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    if not sub_list:\n        return True\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, int):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, tuple):\n            even_tuple = extract_even(item)\n            if even_tuple:  # Only add non-empty tuples\n                result.append(even_tuple)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt(height ** 2 + (base_edge / 2) ** 2)\n    lateral_area = 4 * (0.5 * base_edge * slant_height)\n    total_surface_area = base_area + lateral_area\n    return total_surface_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\ndef catalan_number(n):\n    return factorial(2 * n) // (factorial(n + 1) * factorial(n))"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    if n < 0 or n > len(arr):\n        return arr  # Return the original list if n is out of bounds\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    start_sqrt = math.ceil(math.sqrt(start))\n    end_sqrt = math.floor(math.sqrt(end))\n    return [i * i for i in range(start_sqrt, end_sqrt + 1)]"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), complex(x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(str(int(octet)) for octet in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even - first_odd if first_even is not None and first_odd is not None else None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1  # Return -1 if lengths are not equal, as conversion is impossible\n    \n    count_1_to_0 = 0\n    count_0_to_1 = 0\n    \n    for a, b in zip(s1, s2):\n        if a == '1' and b == '0':\n            count_1_to_0 += 1\n        elif a == '0' and b == '1':\n            count_0_to_1 += 1\n            \n    return max(count_1_to_0, count_0_to_1)"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    \n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    \n    if len1 == 0:\n        return arr2[k - 1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = min(len1, k // 2)\n    j = k - i\n    \n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    digits = str(num)\n    num_digits = len(digits)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    if n < 1:\n        return []\n    \n    primes = []\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i * 2, n + 1, i):\n                is_prime[j] = False\n\n    ludic_numbers = [1] + [p for p in primes if p <= n]\n    return ludic_numbers"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max_value = float('-inf')\n    for row in matrix:\n        if len(row) > n:\n            max_value = max(max_value, row[n])\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    if len(t1) != len(t2):\n        raise ValueError(\"Tuples must be of the same length\")\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(a / b)\n    \n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = ''\n    numbers = ''\n    for char in s:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n    return letters + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    \n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged = []\n    i, j = 0, 0\n    \n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n            \n    while i < size:\n        merged.append(list1[i])\n        i += 1\n        \n    while j < size:\n        merged.append(list2[j])\n        j += 1\n        \n    mid = size\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [x ** n for x in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    result = ''\n    for char in input_string:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    return result"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero = []\n    zero_count = 0\n    \n    for num in lst:\n        if num != 0:\n            non_zero.append(num)\n        else:\n            zero_count += 1\n            \n    return non_zero + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, reference):\n    return amount == reference"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    total_length = 0\n    for name in names:\n        if name and name[0].isupper():\n            total_length += len(name)\n    return total_length"}
{"task_id": "Mbpp/640", "solution": "import re\n\ndef remove_parenthesis(strings):\n    return [re.sub(r'\\s*\\(.*?\\)\\s*', '', s).strip() for s in strings]"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    if len(s) < 3:\n        return False\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    k = min(k, len(arr))\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dct):\n    return tup + (dct,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n\n    n = len(matrix)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    dp[0][0] = (matrix[0][0], 1)  # (max_sum, count)\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            \n            max_sum = 0\n            count = 0\n            \n            if i > 0:\n                max_sum = dp[i-1][j][0]\n                count = dp[i-1][j][1]\n                \n            if j > 0:\n                if dp[i][j-1][0] > max_sum:\n                    max_sum = dp[i][j-1][0]\n                    count = dp[i][j-1][1]\n                elif dp[i][j-1][0] == max_sum:\n                    count += dp[i][j-1][1]\n            \n            dp[i][j] = (max_sum + matrix[i][j], count + 1)\n\n    final_sum, final_count = dp[n-1][n-1]\n    return final_sum / final_count if final_count > 0 else 0"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    if len(a) != len(b):\n        raise ValueError(\"Both lists must be of the same length.\")\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * l"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n            \n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    if n < 3:\n        return n  # No middle bits to toggle if n is less than 3\n    \n    # Convert to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Toggle the middle bits\n    toggled_binary = binary[0]  # Keep the first bit\n    for bit in binary[1:-1]:  # Toggle middle bits\n        toggled_binary += '1' if bit == '0' else '0'\n    toggled_binary += binary[-1]  # Keep the last bit\n    \n    # Convert back to decimal\n    return int(toggled_binary, 2)"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, target):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple must have an even number of elements.\")\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return False\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * a**2\n\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    if not lst:\n        return lst\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(x is None for x in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * (radius ** 2)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    if not s:\n        return s\n    result = [s[0]]  # Start with the first character\n    for char in s[1:]:\n        if char.isupper():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_strings):\n    return sorted(int(num) for num in num_strings)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    lst.extend(tpl)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n, memo={0: 0, 1: 1}):\n    if n in memo:\n        return memo[n]\n    memo[n] = jacobsthal_num(n - 2, memo) + 2 * jacobsthal_num(n - 1, memo)\n    return memo[n]"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    min_length = min(len(l1), len(l2), len(l3))\n    common_elements = []\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    seen = set()\n    count = 0\n    \n    for s in string_list:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            count += 1\n        seen.add(s)\n    \n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    if not s:\n        return False\n    pattern = r'^\\d+(\\.\\d{2})?$'\n    return re.fullmatch(pattern, s) is not None"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    if not numbers:\n        return False\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    return month in {4, 6, 9, 11}"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_power_of_two(n):\n    return (n & (n - 1)) == 0\n\ndef nth_polite_number(n):\n    count = 0\n    current_number = 1\n    \n    while count < n:\n        if not is_power_of_two(current_number):\n            count += 1\n        current_number += 1\n    \n    return current_number - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i + 1]))\n    return result"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_count = {}\n    \n    for num in numbers:\n        num_count[num] = num_count.get(num, 0) + 1\n    \n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_count:\n            count += num_count[complement]\n            if complement == num:\n                count -= 1\n    \n    return count // 2"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum((2*k - 1) ** 4 for k in range(1, n + 1))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack and stack[-1] == mapping[char]:\n                stack.pop()\n            else:\n                return False\n    \n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join(word for word in s.split() if len(word) != k)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    start_index = main_string.find(substring)\n    if start_index != -1:\n        return (substring, start_index, start_index + len(substring))\n    return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    return sum(num for num, count in counts.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    temp = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    \n    result.append(temp)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    result = set()\n    n = len(tuple_list)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                first_sum = tuple_list[i][0] + tuple_list[j][0]\n                second_sum = tuple_list[i][1] + tuple_list[j][1]\n                result.add((first_sum, second_sum))\n    \n    return list(result)"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n):\n            if (end - start + 1) % 2 == 1:  # Check if the length is odd\n                total_sum += sum(arr[start:end + 1])\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    h = s = v = mx\n\n    c = mx - mn\n    if c == 0:\n        h = 0\n        s = 0\n    else:\n        if mx == r:\n            h = (60 * ((g - b) / c) + 360) % 360\n        elif mx == g:\n            h = (60 * ((b - r) / c) + 120) % 360\n        elif mx == b:\n            h = (60 * ((r - g) / c) + 240) % 360\n\n        s = 0 if mx == 0 else (c / mx)\n\n    v = mx\n    return (h, s * 100, v * 100)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    return None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and whitespace\n    cleaned_str = tuple_str.strip()[1:-1].strip()\n    # Split the string by commas and convert to integers\n    int_tuple = tuple(int(num) for num in cleaned_str.split(',') if num)\n    return int_tuple"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_list, target):\n    for index, value in enumerate(sorted_list):\n        if target < value:\n            return index\n    return len(sorted_list)"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    return bool(re.match(r'^abbb$', s))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, s):\n    return tuple(lst) + (s,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    last_index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            last_index = mid\n            left = mid + 1  # continue searching in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return last_index"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    total = 0\n    for value in d.values():\n        total += value\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total += num\n    return total"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    d = d % 32  # Ensure d is within the range of 0-31\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF  # Mask to ensure 32-bit result"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count + (3 if count == 3 else 0)"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root * root == n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n            \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n    max_run = max(max_run, current_run)\n    \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    return all(b < a for a, b in zip(tuple1, tuple2))"}
