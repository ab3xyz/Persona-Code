{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return sorted(heapq.nlargest(n, nums), reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    return (x ^ y) and not (x ^ y & (x ^ y - 1))"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    words = s.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [x ** 2 for x in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    if first_index != -1 and last_index != -1 and first_index != last_index:\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    return s.replace(char, '', 1)"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return (0.5 * base * height) * length"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join(char for char in s1 if char not in s2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    k = 1\n    while True:\n        woodall_number = (1 << k) - 1\n        if woodall_number > n:\n            return False\n        if (n - woodall_number) % k == 0:\n            return True\n        k += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits_str = ''.join(sorted(map(str, digits), reverse=True))\n    return int(digits_str)"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    if not lst:\n        return None\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = 0\n    for a, b in tuples:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    increasing = decreasing = True\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False\n        elif array[i] < array[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    sub_len = len(sub_list)\n    main_len = len(main_list)\n    \n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    if not tuples:\n        return True\n    length = len(tuples[0])\n    return all(len(t) == length for t in tuples)"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n\n        sorted = True\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    return n % 4 == 0 or n % 4 == 1"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n    \n    string_to_pattern = {}\n    pattern_to_string = {}\n    \n    for s, p in zip(strings, patterns):\n        if s in string_to_pattern:\n            if string_to_pattern[s] != p:\n                return False\n        else:\n            string_to_pattern[s] = p\n        \n        if p in pattern_to_string:\n            if pattern_to_string[p] != s:\n                return False\n        else:\n            pattern_to_string[p] = s\n            \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    num_str = str(n)\n    odd_sum = sum(int(num_str[i]) for i in range(len(num_str)) if i % 2 == 0)\n    even_sum = sum(int(num_str[i]) for i in range(len(num_str)) if i % 2 != 0)\n    return (odd_sum - even_sum) % 11 == 0"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    total_ascii = sum(ord(char) for char in s)\n    return chr((total_ascii % 26) + ord('a'))"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n < 1:\n        return 0\n    if n <= 3:\n        return n\n    newman_conway = [0] * (n + 1)\n    newman_conway[1], newman_conway[2], newman_conway[3] = 1, 2, 3\n    for i in range(4, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i - 1]] + newman_conway[i - newman_conway[i - 1]]\n    return newman_conway[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    s = str(n)\n    for i in range(1, len(s) - 1):\n        if (s[i] == s[i - 1]) or (s[i] == s[i + 1]):\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        result = 1\n        for _ in range(b):\n            result *= a\n        return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    return min(tuples_list, key=lambda x: x[1])[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    return min(len(lst) for lst in lists)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    frequency = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        return None\n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                A[i][j] = (i + 1) * A[i - 1][j]\n            elif j == i:\n                A[i][j] = (i) * A[i - 1][j - 1]\n            else:\n                A[i][j] = (i - j + 1) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1]\n    return A[n][m]"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lists):\n    return [sorted(sublist) for sublist in lists]"}
{"task_id": "Mbpp/105", "solution": "def count(boolean_list):\n    return sum(boolean_list)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    return sorted(merged_list)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, k):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    if s.isdigit() or (s[0] in ('-', '+') and s[1:].isdigit()):\n        return True\n    return False"}
{"task_id": "Mbpp/115", "solution": "def empty_dict(lst):\n    return all(not d for d in lst)"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [tuple(float(x) for x in sublist) for sublist in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split(' ')"}
{"task_id": "Mbpp/119", "solution": "def search(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for a, b in tuples_list:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(limit):\n    def sum_of_divisors(n):\n        total = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    current_diff = 0\n    for char in s:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisor_sum = 0\n    g = gcd(a, b)\n    for i in range(1, g + 1):\n        if g % i == 0:\n            common_divisor_sum += i\n    return common_divisor_sum"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return max(frequency, key=frequency.get)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s_list[left] in vowels and s_list[right] in vowels:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n        if s_list[left] not in vowels:\n            left += 1\n        if s_list[right] not in vowels:\n            right -= 1\n            \n    return ''.join(s_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zeroes = sum(1 for x in arr if x == 0)\n    non_zeroes = sum(1 for x in arr if x != 0)\n    if non_zeroes == 0:\n        return float('inf')  # or handle as needed\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    while n > 0:\n        if n & 1:\n            n -= 1\n        n >>= 1\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        return sub_arr[:k][::-1] + sub_arr[k:]\n\n    def find_max_index(sub_arr, n):\n        max_index = 0\n        for i in range(1, n):\n            if sub_arr[i] > sub_arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(arr)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(arr, i)\n        if max_index != i - 1:\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            arr = flip(arr, i)\n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(t):\n    return sum(1 for item in t if isinstance(item, list))"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, to_remove):\n    return [item for item in lst if item not in to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i, char in enumerate(s):\n        if char.isalpha() and ord(char) - ord('a') == i:\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 1:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    if start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return all(isinstance(x, type(t[0])) for x in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n    return negative + positive + arr[n:]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(s, char):\n    return s.replace(' ', char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    return n | 0xAAAAAAAA"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return {k: v for k, v in occurrences.items() if v > 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    \n    for length in range(2, n + 1):\n        for last in range(1, m + 1):\n            for prev in range((last + 1) // 2, last + 1):\n                if prev <= m:\n                    dp[length][last] += dp[length - 1][prev]\n    \n    return sum(dp[n][i] for i in range(1, m + 1))"}
{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    return lst1[:-1] + lst2"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    root = int(n**0.5)\n    return (root + 1) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Create an array to store the maximum sum of increasing subsequence\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Create an array to store the maximum sum of decreasing subsequence\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    s = s.replace(\" \", \"\").lower()\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and length == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    if isinstance(z, complex):\n        r, theta = cmath.polar(z)\n        return (r, theta)\n    else:\n        return (abs(z), 0.0)  # For real numbers, return magnitude and angle 0"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple((max(a, b) for a, b in zip(t1[i], t2[i])) for i in range(len(t1)))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and (num - 1) % 3 == 0:\n            count += 1\n    return num"}
{"task_id": "Mbpp/261", "solution": "def division_elements(t1, t2):\n    return tuple(a // b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years < 0:\n        return \"Age cannot be negative\"\n    elif human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [[lst[i] for i in range(j, len(lst), n)] for j in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum((2 * i + 1) ** 2 for i in range(n))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return (6 * n * n) - (6 * n) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(t1, t2):\n    return tuple(a - b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += binomial(n, k)\n    return sum_even\n\ndef binomial(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial(n - 1, k - 1) + binomial(n - 1, k)"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    return {key: value for key, value in input_dict.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (4 * n - 3)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    digit_count = [0] * 10\n    for digit in str(n):\n        digit_count[int(digit)] += 1\n    for i in range(10):\n        if digit_count[i] > i:\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(string):\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, string))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_kadane = kadane(arr)\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    if k == 1:\n        return max_kadane\n\n    return max(max_kadane, max_suffix_sum + max_prefix_sum, max_suffix_sum + max_prefix_sum + (k - 2) * sum(arr))"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n        \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n        \n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        \n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n            \n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, score in tuples_list:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    return max(aggregate.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    return count_binary_seq(n - 1) * (4 * n - 2) // (n + 1)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if isinstance(d, dict) and d:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = [word for word in words if word.startswith('p') or word.startswith('P')]\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = [0] * n\n    max_sum[0] = arr[0]\n    \n    for j in range(1, n):\n        max_sum[j] = arr[j]\n        for l in range(j):\n            if arr[j] > arr[l]:\n                max_sum[j] = max(max_sum[j], max_sum[l] + arr[j])\n    \n    max_increasing_sum = max(max_sum[:i+1])\n    if k < n:\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                max_increasing_sum = max(max_increasing_sum, max_sum[i] + arr[j])\n    \n    return max_increasing_sum"}
{"task_id": "Mbpp/308", "solution": "import heapq\n\ndef large_product(list1, list2, k):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    return heapq.nlargest(k, products)"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return a if a > b else b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    position = 0\n    while (n >> position) & 1:\n        position += 1\n    return n | (1 << position)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(x) for x in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    return [{ids[i]: {names[i]: scores[i]}} for i in range(len(ids))]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n < 12:\n        return n\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s and s[0] == s[-1]:\n        return \"Valid\"\n    return \"Invalid\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers)"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    unique_tuples = set()\n    for item in lst:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the pivot\n    pivot = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n    \n    if pivot == -1:\n        return -1  # No bigger number possible\n    \n    # Step 2: Find the successor\n    for i in range(length - 1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            # Step 3: Swap\n            digits[i], digits[pivot] = digits[pivot], digits[i]\n            break\n    \n    # Step 4: Reverse the suffix\n    digits = digits[:pivot + 1] + digits[pivot + 1:][::-1]\n    \n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    for a, b in tuples_list:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_value = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_value:\n            min_value = item\n    return min_value if min_value != float('inf') else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    for i in arr[2:]:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return (max2, max1)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    return sum_of_cubes / n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return -((b**2 - 4*a*c) / (4*a)) if a != 0 else None"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    return any(elem in list1 for elem in list2)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b) / 2"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return all(num > x for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return abs(n) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(pairs):\n    count = 0\n    seen = set()\n    for a, b in pairs:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n    return count"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, sentence)\n    if match:\n        start = match.start()\n        end = match.end()\n        return (start, end, match.group())\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * (size ** 2)"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive_numbers = sum(1 for x in arr if x > 0)\n    return positive_numbers / len(arr)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a * b for a, b in zip(t1_elem, t2_elem)) for t1_elem, t2_elem in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    return [x ** 3 for x in lst]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n < 0:\n        return 0\n    perrin = [0] * (n + 1)\n    perrin[0], perrin[1], perrin[2] = 3, 0, 2\n    for i in range(3, n + 1):\n        perrin[i] = perrin[i - 2] + perrin[i - 3]\n    return sum(perrin[:n + 1])"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    import re\n    return bool(re.search(r'\\b\\w*z\\w*\\b', text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    if not lst:\n        return []\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join(c for c in s if not c.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    result = []\n    n = len(elements)\n    for i in range(1 << n):\n        combination = []\n        for j in range(n):\n            if i & (1 << j):\n                combination.append(elements[j])\n        result.append(combination)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_prod = [0] * n\n    max_prod[0] = arr[0]\n    \n    for i in range(1, n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    \n    return max(max_prod)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(nums):\n    if not nums:\n        return False\n    nums = sorted(set(nums))\n    return all(nums[i] + 1 == nums[i + 1] for i in range(len(nums) - 1))"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = {tuple(sorted(t)) for t in tuple_list1}\n    set2 = {tuple(sorted(t)) for t in tuple_list2}\n    return set1.intersection(set2)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return min(arr) + max(arr)"}
{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join(char for char in s if not char.islower())"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = sum(1 for x in arr if x % 2 != 0)\n    even_count = n - odd_count\n    return odd_count * even_count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in s)"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    total_distance = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union_set = set(tuple1).union(set(tuple2))\n    return tuple(sorted(union_set))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    unique_elements = set(arr)\n    count = 0\n    unique_list = list(unique_elements)\n    for i in range(len(unique_list)):\n        for j in range(i + 1, len(unique_list)):\n            count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return [num for num, freq in count.items() if freq == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    n, m = len(main_list), len(sub_list)\n    for i in range(n - m + 1):\n        if main_list[i:i + m] == sub_list:\n            return True\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    if isinstance(t, tuple):\n        return tuple(extract_even(x) for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple) and any(isinstance(i, int) and i % 2 == 0 for i in x))\n    return t"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = (height ** 2 + (base_edge / 2) ** 2) ** 0.5\n    lateral_area = 2 * base_edge * slant_height\n    return base_area + lateral_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    return [i * i for i in range(1, int(end**0.5) + 1) if i * i >= start and i * i <= end]"}
{"task_id": "Mbpp/590", "solution": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect_coords = (x, y)\n    complex_form = complex(x, y)\n    return rect_coords, complex_form"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    def binomial_coefficient(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += binomial_coefficient(n, i) * binomial_coefficient(n, i + 1)\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    parts = ip.split('.')\n    stripped_parts = [str(int(part)) for part in parts]\n    return '.'.join(stripped_parts)"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return None"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n            \n    return count // 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    \n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    \n    if len1 == 0:\n        return arr2[k - 1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = min(len1, k // 2)\n    j = k - i\n    \n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    power = len(str(num))\n    total = sum(int(digit) ** power for digit in str(num))\n    return total == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    words = s.split()\n    return ' '.join(reversed(words))"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "def radian_degree(degrees):\n    import math\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuples_list):\n    return sum(sum(tup) for tup in tuples_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(a, b):\n    return [x / y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = ''.join(filter(str.isalpha, s))\n    numbers = ''.join(filter(str.isdigit, s))\n    return letters + numbers"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(a):\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"task_id": "Mbpp/622", "solution": "def get_median(arr1, arr2, n):\n    if n <= 0:\n        return None\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        return get_median(arr1[n//2:], arr2, n - n//2)\n    return get_median(arr1, arr2[n//2:], n - n//2)\n\ndef median(arr, n):\n    if n % 2 == 0:\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    return arr[n//2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [x ** n for x in lst]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()"}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return (radius ** 2) * (3.14159 / 2) / 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    count = 0\n    for num in arr:\n        if num != 0:\n            arr[count] = num\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n    return arr"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    if velocity < 0 or temperature > 50 or temperature < -50:\n        raise ValueError(\"Invalid input values.\")\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return round(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(strings):\n    result = []\n    for s in strings:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(len(result))\n            elif char == ')':\n                if stack:\n                    start = stack.pop()\n                    result[start] = ''\n            else:\n                if not stack:\n                    result.append(char)\n                else:\n                    result[len(result) - 1] += char\n    return ''.join(result).strip()"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    return 'z' in s[1:-1]"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        k = len(arr)\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dct):\n    return tup + (dct,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    \n    total_cost = dp[n-1][n-1]\n    path_length = (2 * (n - 1)) + 1  # Total cells in the path\n    return total_cost / path_length"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for a, b in zip(list1, list2) if a == b)"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    if n < 4:\n        return n\n    mask = 0\n    num_bits = n.bit_length()\n    for i in range(1, num_bits - 1):\n        mask |= (1 << i)\n    return n ^ mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    triangular_number = 0\n    index = 0\n    while True:\n        index += 1\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) >= n:\n            return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup) - 1, 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(2) / 12) * a**2 * math.sqrt(2) * a"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    n = len(lst)\n    k = k % n\n    return lst[-k:] + lst[:-k]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    return any(x is None for x in t)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    result = []\n    for char in s:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(map(int, lst))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range((n // 2) - 1, -1, -1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        return None\n    unique_numbers.sort()\n    return unique_numbers[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    for s in string_list:\n        reversed_s = s[::-1]\n        if reversed_s in seen:\n            count += 1\n        seen.add(s)\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        parts = s.split('.')\n        if len(parts) != 2:\n            return False\n        return len(parts[1]) == 2 and parts[0].isdigit() and parts[1].isdigit()\n    except Exception:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    return month in [4, 6, 9, 11]"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 == 1 or num % 4 != 0:\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(arr, target_sum):\n    count = 0\n    num_map = {}\n    \n    for num in arr:\n        complement = target_sum - num\n        if complement in num_map:\n            count += num_map[complement]\n        \n        if num in num_map:\n            num_map[num] += 1\n        else:\n            num_map[num] = 1\n            \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2] + [item for item in list2 if item not in list1]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum((2 * i + 1) ** 4 for i in range(n))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expr):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expr:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    start = string.find(substring)\n    if start == -1:\n        return None\n    return (substring, start, start + len(substring))"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return sum(num for num in lst if count[num] == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            packed.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    packed.append(current_sublist)\n    return packed"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    from itertools import combinations\n    result = set()\n    for comb in combinations(tuple_list, 2):\n        result.add((comb[0][0] + comb[1][0], comb[0][1] + comb[1][1]))\n        result.add((comb[0][0] + comb[1][1], comb[0][1] + comb[1][0]))\n    return sorted(list(result))"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Calculate the number of odd-length subarrays that include arr[i]\n        total_subarrays = (i + 1) * (n - i)\n        odd_subarrays = (total_subarrays + 1) // 2\n        \n        total_sum += arr[i] * odd_subarrays\n    \n    return total_sum"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    h = s = v = mx\n    d = mx - mn\n    if mx == 0:\n        s = 0\n    else:\n        s = d / mx\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / d) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / d) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / d) + 240) % 360\n    return (h, s * 100, mx * 100)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        if num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(s):\n    return tuple(map(int, s.strip(\"()\").split(\", \")))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    low, high = 0, len(arr)\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    return low"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    return bool(re.fullmatch(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    return sum(d.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    d = d % 32\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return ''.join(s.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    equal_count = 0\n    if a == b:\n        equal_count += 1\n    if b == c:\n        equal_count += 1\n    if a == c:\n        equal_count += 1\n    return equal_count + (1 if equal_count > 0 else 0)"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    root = int(num**0.5)\n    return root * root == num"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n            \n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))"}
