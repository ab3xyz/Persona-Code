{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a sorted tuple\n    return tuple(sorted(shared_elements))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"Return True if n is not a prime number, otherwise False.\"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    # Perform XOR operation\n    xor_result = num1 ^ num2\n    # Count the number of set bits (1s) in the result\n    return bin(xor_result).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10, 20, 30]) == [100, 400, 900]\nassert square_nums([12, 15]) == [144, 225]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i % n:] + s[:i % n]:\n            return i\n    return n\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or first_index == last_index:\n        return s.replace(char, '', 1) if first_index != -1 else s\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"abcda\", \"a\") == \"bcd\"\nassert remove_Occ(\"PHP\", \"P\") == \"H\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\n# Test cases\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \n    Parameters:\n    base (float): The base of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n    \n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    triangular_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = triangular_area * length\n    \n    return volume\n\n# Test the function with the given assertions\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1"}
{"task_id": "Mbpp/16", "solution": "import re\n\ndef text_lowercase_underscore(s):\n    # Regular expression to match the required pattern\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    remove_set = set(s2)\n    result = [char for char in s1 if char not in remove_set]\n    return ''.join(result)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "solution": "def check(n):\n    # Convert the number to a string to reverse it\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Test the function with the given assertions\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True"}
{"task_id": "Mbpp/57", "solution": "from functools import cmp_to_key\n\ndef compare(x, y):\n    # Compare two strings based on their concatenated results\n    if x + y > y + x:\n        return -1\n    elif x + y < y + x:\n        return 1\n    else:\n        return 0\n\ndef find_Max_Num(digits):\n    # Convert digits to strings\n    str_digits = list(map(str, digits))\n    # Sort the digits based on the custom comparator\n    str_digits.sort(key=cmp_to_key(compare))\n    # Join the sorted strings and convert to an integer\n    return int(''.join(str_digits))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    # XOR the two numbers and check the sign bit\n    return (x ^ y) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(3, 2) == False\nassert opposite_Signs(-10, -10) == False\nassert opposite_Signs(-2, 2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)\n\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    if not numbers:  # Handle empty list case\n        return None\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each pair in the list\n    for a, b in pairs:\n        # Calculate the absolute difference between the elements of the pair\n        diff = abs(a - b)\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Test cases\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\nassert subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]) == [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(nested_list):\n    total = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\n# Test cases\nassert recursive_list_sum(([1, 2, [3, 4], [5, 6]])) == 21\nassert recursive_list_sum(([7, 10, [15, 14], [19, 41]])) == 106\nassert recursive_list_sum(([10, 20, [30, 40], [50, 60]])) == 210"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # Explicitly put the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is in bell[n][0]\n    return bell[n][0]\n\n# Test cases\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    if len(array) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False\n        elif array[i] < array[i - 1]:\n            increasing = False\n        \n        if not increasing and not decreasing:\n            return False\n    \n    return increasing or decreasing"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    if not sublist:  # An empty sublist is always a sublist\n        return True\n    if len(sublist) > len(main_list):  # Sublist can't be longer than main list\n        return False\n    \n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i + len(sublist)] == sublist:\n            return True\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    if n % 2 != 0:\n        return True\n    elif n % 4 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, letters):\n    if len(patterns) != len(letters):\n        return False\n    \n    color_to_letter = {}\n    letter_to_color = {}\n    \n    for color, letter in zip(patterns, letters):\n        if color in color_to_letter:\n            if color_to_letter[color] != letter:\n                return False\n        else:\n            color_to_letter[color] = letter\n        \n        if letter in letter_to_color:\n            if letter_to_color[letter] != color:\n                return False\n        else:\n            letter_to_color[letter] = color\n            \n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_Diff(number):\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Initialize sums for odd and even positioned digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n    \n    # Calculate the difference\n    difference = abs(odd_sum - even_sum)\n    \n    # Check if the difference is divisible by 11\n    return difference % 11 == 0\n\n# Test the function\nassert is_Diff(12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    This function checks whether the length of the given word is odd or not.\n    \n    Parameters:\n    word (str): The word to check.\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6\n\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in s)\n    \n    # Find the result modulo 26\n    mod_result = ascii_sum % 26\n    \n    # Convert the result to a character (assuming 'a' corresponds to 0, 'b' to 1, ..., 'z' to 25)\n    result_char = chr(mod_result + ord('a'))\n    \n    return result_char\n\n# Test cases\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"v\"\nassert get_Char(\"ab\") == \"n\""}
{"task_id": "Mbpp/84", "solution": "def sequence(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1 or n == 2:\n        return 1\n    memo[n] = sequence(sequence(n - 1, memo), memo) + sequence(n - sequence(n - 1, memo), memo)\n    return memo[n]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Test cases\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n > 0:\n        return n - 1\n    return None  # or you could return a specific message"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    if not words:\n        return 0\n    return max(len(word) for word in words)\n\n# Test cases\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\nassert len_log([\"a\", \"ab\", \"abc\"]) == 3\nassert len_log([\"small\", \"big\", \"tall\"]) == 5"}
{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    num_str = str(number)\n    length = len(num_str)\n    \n    if length < 2:\n        return True  # Single digit or empty is considered undulating\n    \n    for i in range(length - 1):\n        if num_str[i] == num_str[i + 1]:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    if not tuples_list:\n        return None  # Handle empty list case\n    \n    min_value = float('inf')\n    min_name = None\n    \n    for name, value in tuples_list:\n        if value < min_value:\n            min_value = value\n            min_name = name\n            \n    return min_name"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0  # Return 0 if the list of lists is empty\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n\n# Test cases\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    if n < 1:\n        return 0  # Handle edge case for non-positive integers\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test cases\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\nfrom operator import mul\n\ndef multiply_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list should not be empty\")\n    product = reduce(mul, numbers)\n    length = len(numbers)\n    return product / length\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str\n\n# Test cases\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    n += 1  # Start searching from the next number\n    while not is_palindrome(n):\n        n += 1\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    # Return the element at the 0-based index\n    return arr[index]\n\n# Test assertions\nassert kth_element([12, 3, 5, 7, 19], 2) == 3\nassert kth_element([17, 24, 8, 23], 3) == 8\nassert kth_element([16, 21, 25, 36, 4], 4) == 36"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_str = ''.join(x.capitalize() for x in components)\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m, memo=None):\n    if memo is None:\n        memo = {}\n    \n    if (n, m) in memo:\n        return memo[(n, m)]\n    \n    if m == 0:\n        return 1\n    if m == n:\n        return 1\n    if n == 0 or m < 0 or m > n:\n        return 0\n    \n    result = (n - 1) * (eulerian_num(n - 1, m - 1, memo) + eulerian_num(n - 1, m, memo))\n    memo[(n, m)] = result\n    return result"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(sublists):\n    return [sorted(sublist) for sublist in sublists]"}
{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    true_count = 0\n    for value in bool_list:\n        if value is True:\n            true_count += 1\n    return true_count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    combined_list = list1 + list2 + list3\n    return sorted(combined_list)"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    unique_odds = set()\n    n = len(binary_string)\n    \n    for i in range(n):\n        rotated_string = binary_string[i:] + binary_string[:i]\n        if rotated_string[-1] == '1':  # Check if the last character is '1'\n            unique_odds.add(int(rotated_string, 2))  # Convert to decimal and add to set\n    \n    return len(unique_odds)\n\n# Test cases\nassert odd_Equivalent(\"011001\", 6) == 3\nassert odd_Equivalent(\"11011\", 5) == 4\nassert odd_Equivalent(\"1010\", 4) == 2"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    \n    for inner_list in nested_lists[1:]:\n        common_elements.intersection_update(inner_list)\n    \n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"1\") == True\nassert check_integer(\"12345\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"12.3\") == False\nassert check_integer(\"0\") == True\nassert check_integer(\"\") == False\nassert check_integer(\"   \") == False"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    for d in dict_list:\n        if d:  # Check if the dictionary is not empty\n            return False\n    return True"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(str(i) for i in tup))"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [[float(item) for item in inner] for inner in lst]"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    return input_string.split()\n\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"lists tuples strings\") == ['lists', 'tuples', 'strings']\nassert string_to_list(\"write a program\") == ['write', 'a', 'program']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        # Ensure mid is even\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Check if the single element is in the left half or right half\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')  # Initialize to negative infinity\n    for a, b in tuples_list:\n        product = a * b  # Calculate the product of the tuple\n        if product > max_product:  # Update max_product if current product is greater\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def proper_divisors(n):\n    divisors = []\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    \n    for num in range(1, limit + 1):\n        if num not in amicable_numbers:\n            sum_div = sum(proper_divisors(num))\n            if sum_div != num:  # Ensure they are different\n                sum_div_of_pair = sum(proper_divisors(sum_div))\n                if sum_div_of_pair == num:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(sum_div)\n    \n    return sum(amicable_numbers)\n\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    return math.atan2(z.imag, z.real)\n\n# Test cases\nassert math.isclose(angle_complex(1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2 + 1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(2j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(s: str) -> int:\n    max_diff = 0\n    current_sum = 0\n    \n    for char in s:\n        if char == '0':\n            current_sum += 1\n        else:  # char == '1'\n            current_sum -= 1\n        \n        if current_sum > max_diff:\n            max_diff = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divs = divisors(gcd(a, b))\n    return sum(common_divs)\n\n# Test cases\nassert sum_of_common_divisors(10, 15) == 6\nassert sum_of_common_divisors(100, 150) == 93\nassert sum_of_common_divisors(4, 6) == 3"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b\n\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words_string):\n    words = words_string.split()\n    return [word for word in words if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the magic constant\n    magic_constant = sum(matrix[0])\n    \n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_constant:\n            return False\n    \n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_constant:\n            return False\n    \n    # Check sums of diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n    \n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    if not lst:\n        return None  # Handle empty list case\n    \n    frequency = {}\n    max_item = lst[0]\n    max_count = 1\n    \n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n        \n        if frequency[item] > max_count:\n            max_count = frequency[item]\n            max_item = item\n    \n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_list = [char for char in s if char in vowels]\n    reversed_vowels = vowel_list[::-1]\n    \n    result = []\n    vowel_index = 0\n    \n    for char in s:\n        if char in vowels:\n            result.append(reversed_vowels[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)\n\n# Test cases\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\nassert tup_string(('p', 'y', 't', 'h', 'o', 'n')) == \"python\"\nassert tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm')) == \"program\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)\n\n# Test cases\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\nassert sum_negativenum([10, 15, -14, 13, -18, 12, -20]) == -52\nassert sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return 2 * n * n - n\n\n# Test cases\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Handle case where all elements are zero\n    return zeroes / non_zeroes\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    def can_sum(target, powers):\n        if target == 0:\n            return True\n        if target < 0 or not powers:\n            return False\n        \n        # Include the last power of 2\n        include_last = can_sum(target - powers[-1], powers[:-1])\n        # Exclude the last power of 2\n        exclude_last = can_sum(target, powers[:-1])\n        \n        return include_last or exclude_last\n\n    # Generate powers of 2 up to n\n    powers_of_two = []\n    power = 1\n    while power <= n:\n        powers_of_two.append(power)\n        power *= 2\n\n    return can_sum(n, powers_of_two)\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(list_of_lists):\n    unique_numbers = set()\n    for sublist in list_of_lists:\n        for number in sublist:\n            unique_numbers.add(number)\n    return unique_numbers"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        return sub_arr[:k][::-1] + sub_arr[k:]\n\n    n = len(arr)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in arr[0:i]\n        max_index = arr.index(max(arr[0:i]))\n        \n        # Flip the maximum element to the front if it's not already there\n        if max_index != i - 1:\n            # Flip the maximum element to the front\n            arr = flip(arr, max_index + 1)\n            # Flip it to its correct position\n            arr = flip(arr, i)\n    \n    return arr"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n    \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tpl):\n    count = 0\n    for item in tpl:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test cases\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6])) == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1], )) == 1"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0  # Not defined for less than two elements\n    return max(arr) - min(arr)"}
{"task_id": "Mbpp/160", "solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_solution(a, b, n):\n    g = gcd(a, b)\n    \n    if n % g != 0:\n        return None\n    \n    # Extended Euclidean Algorithm to find one solution\n    def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        g, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return g, x, y\n    \n    _, x0, y0 = extended_gcd(a, b)\n    \n    # Scale the solution to the original equation\n    x0 *= n // g\n    y0 *= n // g\n    \n    # General solution: x = x0 + (b/g) * k, y = y0 - (a/g) * k\n    # We need to find integer k such that both x and y are integers\n    k = 0\n    x = x0 + (b // g) * k\n    y = y0 - (a // g) * k\n    \n    return (x, y)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    set_to_remove = set(list2)\n    return [element for element in list1 if element not in set_to_remove]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term < 0:\n            break\n        total += term\n    return total"}
{"task_id": "Mbpp/164", "solution": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef are_equivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\n# Test cases\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()  # Normalize to lowercase\n    count = 0\n    \n    for index, char in enumerate(s):\n        position = ord(char) - ord('a') + 1  # Calculate position in alphabet\n        if position == index + 1:  # Compare with index (1-based)\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    even_count = 0\n    odd_count = 0\n    \n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs"}
{"task_id": "Mbpp/167", "solution": "import math\n\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    power = 1 << (n - 1).bit_length()\n    return power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, target):\n    count = 0\n    for number in lst:\n        if number == target:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        return 0\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate the perimeter\n    perimeter = number_of_sides * side_length\n    \n    return perimeter\n\n# Test the function with the given examples\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    if not t:  # If the tuple is empty, return True\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_index = -1\n    last_index = -1\n    \n    for i in range(n):\n        if arr[i] == element:\n            if first_index == -1:\n                first_index = i\n            last_index = i\n    \n    if first_index == -1:  # Element not found\n        return False\n    \n    count = last_index - first_index + 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n# Test cases\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    # Compare the first two numbers\n    if a < b:\n        min_val = a\n    else:\n        min_val = b\n    \n    # Compare the result with the third number\n    if c < min_val:\n        min_val = c\n    \n    return min_val\n\n# Test cases\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(19, 15, 18) == 15\nassert min_of_three(-10, -20, -30) == -30"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    # Separate the first n elements into negative and non-negative lists\n    negative_elements = []\n    non_negative_elements = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            non_negative_elements.append(arr[i])\n    \n    # Combine the negative and non-negative lists\n    rearranged = negative_elements + non_negative_elements\n    \n    # Append the remaining elements of the array (if any)\n    rearranged += arr[n:]\n    \n    return rearranged\n\n# Test cases\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 2, 4, 5, 6, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string, replacement_char):\n    return input_string.replace(\" \", replacement_char)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    if not lst or n <= 0:\n        return []\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateralsurface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsurface_cylinder(4, 5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsurface_cylinder(4, 10), 251.32000000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3\n\nassert volume_cube(3) == 27\nassert volume_cube(2) == 8\nassert volume_cube(5) == 125"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(number):\n    # Create a bitmask for even bits\n    bitmask = 0xAAAAAAAA  # This is 10101010101010101010101010101010 in binary\n    # Set even bits using bitwise OR\n    return number | bitmask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurrences = {}\n    \n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n            \n    # Filter out the tuples that occur only once\n    return {k: v for k, v in occurrences.items() if v > 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2 if n > 0 else 0"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 0 or m == 0:\n        return 0\n    \n    # Create a DP table with (n+1) x (m+1)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: There is one way to have a sequence of length 1 for each number from 1 to m\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the DP table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # We need to find all k such that 2 * k <= j\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i - 1][k]\n    \n    # Sum up all sequences of length n\n    total_sequences = sum(dp[n][j] for j in range(1, m + 1))\n    \n    return total_sequences"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    return list1[:-1] + list2"}
{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)\n\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"language\") == 8\nassert count_charac(\"words\") == 5"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(n):\n    root = math.isqrt(n)\n    next_root = root + 1\n    return next_root * next_root\n\n# Test cases\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Step 1: Calculate increasing_sum\n    increasing_sum = [0] * n\n    for i in range(n):\n        increasing_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n\n    # Step 2: Calculate decreasing_sum\n    decreasing_sum = [0] * n\n    for i in range(n-1, -1, -1):\n        decreasing_sum[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n\n    # Step 3: Calculate maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s: str) -> int:\n    s = s.replace(\" \", \"\").upper()  # Normalize the string by removing spaces and converting to uppercase\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1  # Each character is a palindrome of length 1\n\n    for length in range(2, n + 1):  # Length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    set1 = set(arr1)\n    result = [value for value in arr2 if value in set1]\n    return result"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z, 0)\n    magnitude = abs(z)\n    angle = cmath.phase(z)\n    return (magnitude, angle)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test cases\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([1, 2, 3]) == 3\nassert count_integer([1, 1.2, 4, 5.1]) == 2"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(elements, n):\n    def generate_combinations(current_combination, start):\n        if len(current_combination) == n:\n            result.append(tuple(current_combination))\n            return\n        for i in range(start, len(elements)):\n            current_combination.append(elements[i])\n            generate_combinations(current_combination, i)  # Allow repetition by passing i\n            current_combination.pop()  # Backtrack\n\n    result = []\n    generate_combinations([], 0)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int, float): The first number.\n    b (int, float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)\n\n# Test cases\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(15, 17) == (17, 15)\nassert swap_numbers(100, 200) == (200, 100)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple((max(a, b), max(c, d)) for (a, c), (b, d) in zip(t1, t2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length.\")\n    \n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered.\")\n        result.append(a // b)  # Using integer division as per the example\n    \n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    if L > len(lst):\n        return (lst, [])\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\nassert dog_age(12) == 61\nassert dog_age(15) == 73\nassert dog_age(24) == 109"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [[lst[i] for i in range(j, len(lst), n)] for j in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \n    Parameters:\n    side_length (float): The length of a side of the cube.\n    \n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2\n\n# Test the function with the given assertions\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(9) == 324\nassert lateralsurface_cube(10) == 400"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character whose ASCII value is to be found.\n    \n    Returns:\n    int: ASCII value of the character.\n    \n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    # Ensure the input is a single character\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character\")\n    \n    # Return the ASCII value using the ord() function\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 == 0:\n            total += value\n    return total"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total_sum += even_number ** 5\n    \n    return total_sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/274", "solution": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for k in range(0, n + 1, 2):  # Iterate over even indices\n        total_sum += comb(n, k)    # Calculate binomial coefficient and add to sum\n    return total_sum"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height\n\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 10), 502.64000000000004, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    d (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered results\n    filtered_dict = {}\n    \n    # Iterate through the dictionary items\n    for key, value in d.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = value\n    \n    return filtered_dict\n\n# Test cases\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n    A decagonal number is given by the formula: D(n) = 4n^2 - 3n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return 4 * n * n - 3 * n\n\n# Test the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    for index, value in enumerate(array):\n        if value == element:\n            return (True, index)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(n):\n    from collections import Counter\n    \n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Count the frequency of each digit\n    digit_count = Counter(str_n)\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    \n    # Use re.search to find if the pattern exists in the text\n    match = re.search(pattern, text)\n    \n    # Return True if a match is found, otherwise False\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_subarray_sum = kadane(arr)\n    total_sum = sum(arr)\n    \n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    if k == 1:\n        return max_subarray_sum\n    elif k == 2:\n        return max(max_subarray_sum, max_suffix_sum + max_prefix_sum)\n    else:\n        return max(max_subarray_sum, max_suffix_sum + max_prefix_sum + (total_sum * (k - 2)))"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum_of_squares = 0\n    \n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    \n    return sum_of_squares\n\n# Test the function with the provided assertions\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)\n\n# Test cases\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\nassert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])"}
{"task_id": "Mbpp/292", "solution": "def find(numerator, denominator):\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    return numerator // denominator\n\n# Test cases\nassert find(10, 3) == 3\nassert find(4, 2) == 2\nassert find(20, 5) == 4"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(heterogeneous_list):\n    max_value = float('-inf')  # Initialize to negative infinity\n    for item in heterogeneous_list:\n        if isinstance(item, int):  # Check if the item is an integer\n            if item > max_value:  # Compare with current max\n                max_value = item\n    return max_value if max_value != float('-inf') else None  # Return None if no integers found\n\n# Test cases\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    # Initialize the sum of divisors\n    sum_of_divisors = 0\n    \n    # Iterate through all possible divisors\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors\n\n# Test cases\nassert sum_div(8) == 7\nassert sum_div(12) == 16\nassert sum_div(7) == 1"}
{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            inv_count += (mid - i + 1)\n            temp_arr[k] = arr[j]\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n# Test cases\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5\nassert get_Inv_Count([1, 2, 1]) == 1\nassert get_Inv_Count([1, 2, 5, 6, 1]) == 3"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(data):\n    score_dict = {}\n    \n    for name, score in data:\n        if name in score_dict:\n            score_dict[name] += score\n        else:\n            score_dict[name] = score\n            \n    max_name = max(score_dict, key=score_dict.get)\n    return (max_name, score_dict[max_name])"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\ndef count_binary_seq(n):\n    return binomial_coefficient(2 * n, n)\n\n# Test cases\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value))\n    return max_depth + 1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    found = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                found.append(word)\n                if len(found) == 2:\n                    return tuple(found)\n    return tuple(found)  # Return whatever we found, even if less than 2"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array\n    dp = [0] * n\n    \n    # Fill dp array for increasing subsequences up to index i\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n    \n    # Now include the kth element\n    max_sum = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max(max_sum, dp[k])  # Return the maximum sum including the kth element"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = []\n    \n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:n]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b\n\n# Test the function\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)\n\n# Test cases\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\") == ('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\") == ('1', '5', '.', '1', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == 0:\n        return 1\n    \n    # Find the position of the left-most unset bit\n    position = 0\n    while (n & (1 << position)) != 0:\n        position += 1\n    \n    # Set the left-most unset bit\n    n |= (1 << position)\n    \n    return n\n\n# Test cases\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Compute the nth Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n\n\n# Test cases\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4"}
{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    result = []\n    for i in range(len(ids)):\n        result.append({ids[i]: {names[i]: scores[i]}})\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo={}):\n    if n <= 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    \n    max_sum = max(n, get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + \n                  get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo))\n    \n    memo[n] = max_sum\n    return max_sum"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    \n    # First pass: count each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\""}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]\n\n# Test cases\nassert check_char(\"abba\") == True\nassert check_char(\"a\") == True\nassert check_char(\"abcd\") == False"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    if (a <= b and b <= c) or (c <= b and b <= a):\n        return float(b)\n    elif (b <= a and a <= c) or (c <= a and a <= b):\n        return float(a)\n    else:\n        return float(c)\n\n# Test cases\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(20, 10, 30) == 20.0\nassert median_numbers(15, 45, 75) == 45.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        if isinstance(num, int):  # Check if the element is an integer\n            total_sum += sum(int(digit) for digit in str(abs(num)))  # Sum the digits of the absolute value\n    return total_sum"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for tup in tuples_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return a if a < b else b\n\n# Test cases\nassert minimum(1, 2) == 1\nassert minimum(-5, -4) == -5\nassert minimum(0, 0) == 0"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    return element in tup"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    return number % 2 == 1\n\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(num):\n    digits = list(str(num))\n    n = len(digits)\n\n    # Step 2: Find the pivot\n    pivot = -1\n    for i in range(n - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n\n    # If no pivot is found, return None\n    if pivot == -1:\n        return None\n\n    # Step 3: Find the successor\n    successor = -1\n    for i in range(n - 1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            successor = i\n            break\n\n    # Step 4: Swap the pivot and successor\n    digits[pivot], digits[successor] = digits[successor], digits[pivot]\n\n    # Step 5: Reverse the digits to the right of the pivot\n    digits = digits[:pivot + 1] + digits[pivot + 1:][::-1]\n\n    # Step 6: Convert back to integer\n    return int(''.join(digits))"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(pairs):\n    min_product = float('inf')\n    for a, b in pairs:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(heterogeneous_list):\n    numeric_values = [x for x in heterogeneous_list if isinstance(x, (int, float))]\n    return min(numeric_values) if numeric_values else None"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    set_seq2 = set(seq2)\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False\n\n# Test cases\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3], [4, 5, 6]) == False\nassert overlapping([1, 4, 5], [1, 4, 5]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize the two largest and two smallest values\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        # Update the two largest values\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest values\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the product of the two largest values with the product of the two smallest values\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n# Test cases\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\nassert max_Product([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\nassert max_Product([1, 2, 3]) == (2, 3)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    if not lst:  # Handle empty list case\n        return []\n    \n    max_element = lst[0]\n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n    return max_element\n\n# Test cases\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\nassert Find_Max([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\nassert Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result\n\n# Test cases\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5, 2, 9, 24.3, 29]) == 345\nassert round_and_sum([25.0, 56.7, 89.2]) == 513"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    # Calculate the sum of cubes of the first n even natural numbers\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\n# Test the function with the provided assertions\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(input_tuple):\n    return '-'.join(str(element) for element in input_tuple)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average by dividing the sum by n\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test assertions\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test cases\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\"\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    # Calculate the vertex (h, k)\n    h = -b / (2 * a)\n    k = a * (h ** 2) + b * h + c\n    \n    # Calculate p\n    p = 1 / (4 * a)\n    \n    # Calculate the directrix\n    directrix = k - p\n    \n    return directrix"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    set_list1 = set(list1)\n    for element in list2:\n        if element in set_list1:\n            return True\n    return False"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\n\n# Test cases\nassert median_trapezium(15, 25, 35) == 20\nassert median_trapezium(10, 20, 30) == 15\nassert median_trapezium(6, 9, 4) == 7.5"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(number):\n    return number % 10\n\n# Test cases\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]\n\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([-1, -2, 3, 4]) == [-1, -2]\nassert neg_nos([-7, -6, 8, 9]) == [-7, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    unique_pairs = set()\n    \n    for a, b in tuples:\n        # Create a canonical form of the tuple\n        pair = (min(a, b), max(a, b))\n        unique_pairs.add(pair)\n    \n    return len(unique_pairs)\n\n# Test cases\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 3"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    # Convert each integer to string and join them\n    concatenated_string = ''.join(map(str, int_list))\n    # Convert the concatenated string back to an integer\n    return int(concatenated_string)"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverbs = {\"clearly\", \"seriously\", \"unfortunately\", \"quickly\", \"silently\", \"happily\", \"sadly\"}\n    words = sentence.split()\n    \n    for word in words:\n        # Clean the word of punctuation for accurate matching\n        clean_word = ''.join(char for char in word if char.isalnum())\n        if clean_word in adverbs:\n            start_index = sentence.index(word)\n            end_index = start_index + len(clean_word) - 1\n            return (start_index, end_index, clean_word)\n    \n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    surface_area = 6 * (side_length ** 2)\n    return surface_area\n\n# Test the function with assertions\nassert surfacearea_cube(5) == 150\nassert surfacearea_cube(3) == 54\nassert surfacearea_cube(10) == 600"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    if not arr:\n        return 0  # Handle the case of an empty array\n    positive_numbers = [num for num in arr if num > 0]\n    ratio = len(positive_numbers) / len(arr)\n    return round(ratio, 2)"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(t1, t2))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    return [x ** 3 for x in numbers]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10, 20, 30]) == [1000, 8000, 27000]\nassert cube_nums([12, 15]) == [1728, 3375]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    \n    perrin = [0] * (n + 1)\n    perrin[0] = 3\n    perrin[1] = 0\n    perrin[2] = 2\n    \n    total_sum = perrin[0] + perrin[1] + perrin[2]\n    \n    for i in range(3, n + 1):\n        perrin[i] = perrin[i - 2] + perrin[i - 3]\n        total_sum += perrin[i]\n    \n    return total_sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, length):\n    return [s for s in string_list if len(s) == length]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())\n\n# Test cases\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(word):\n    return 'z' in word.strip().lower()"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    # List of months that have 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month is in the list\n    return month in months_with_31_days"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    if not lists:\n        return []\n    min_list = lists[0]\n    for sublist in lists:\n        if len(sublist) < len(min_list):\n            min_list = sublist\n    return min_list\n\n# Test cases\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(width, height):\n    return width * height\n\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = []\n    in_uppercase = False\n    \n    for char in s:\n        if char.isupper():\n            in_uppercase = True\n        else:\n            if in_uppercase:\n                in_uppercase = False\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists if sublist]"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(elements):\n    def generate_combinations(index):\n        if index == len(elements):\n            return [[]]  # Base case: return a list with an empty combination\n        else:\n            current_element = elements[index]\n            # Get combinations from the rest of the list\n            combinations_without_current = generate_combinations(index + 1)\n            # Create combinations that include the current element\n            combinations_with_current = [[current_element] + combo for combo in combinations_without_current]\n            # Return all combinations\n            return combinations_without_current + combinations_with_current\n\n    return generate_combinations(0)"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    return {k: v for k, v in input_dict.items() if v is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = arr[:]  # Initialize dp with the values of arr\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)\n\n# Test cases\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] + t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    if not lst:\n        return False\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    intersection = set1.intersection(set2)\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)\n\n# Test cases\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\nassert replace_char(\"character\", 'c', 'a') == \"aharaater\"\nassert replace_char(\"python\", 'l', 'a') == \"python\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if not arr:  # Check for empty list\n        return 0  # or raise an error\n    largest = max(arr)\n    smallest = min(arr)\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n    \n    Parameters:\n    input_string (str): The string to be converted to lower case.\n    \n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()\n\n# Test cases\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)\n\n# Test cases\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\nassert remove_lowercase(\"FInD\") == 'FID'\nassert remove_lowercase(\"STRinG\") == 'STRG'"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    # Convert the number to a string and handle negative sign\n    num_str = str(abs(num))\n    # Return the first character converted back to an integer\n    return int(num_str[0])\n\n# Test cases\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\nassert first_Digit(-789) == 7\nassert first_Digit(-1001) == 1"}
{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Find the difference\n    diff = sum_cubes - sum_n\n    \n    return diff\n\n# Test assertions\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    # Count the number of odd and even numbers in the array\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR value is the product of the number of odd and even numbers\n    return odd_count * even_count\n\n# Test cases\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\nassert find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7) == 12\nassert find_Odd_Pair([1, 2, 3], 3) == 2"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    toggled = \"\"\n    for char in s:\n        if char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char.upper()\n    return toggled"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of per-digit differences\n    total_difference = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n    \n    return total_difference"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    # Step 1: Combine both tuples into a set to remove duplicates\n    unique_elements = set(tuple1) | set(tuple2)\n    \n    # Step 2: Sort the unique elements\n    sorted_elements = sorted(unique_elements)\n    \n    # Step 3: Convert the sorted list back to a tuple\n    return tuple(sorted_elements)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(s):\n    # Use regular expression to find all values between quotation marks\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test cases\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"') == ['python', 'program', 'language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"') == ['red', 'blue', 'green', 'yellow']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr, n):\n    unique_elements = set(arr)\n    count = len(unique_elements)\n    if count < 2:\n        return 0\n    return count * (count - 1) // 2\n\n# Test cases\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)\n\n# Test cases\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']\nassert split('Name') == ['N', 'a', 'm', 'e']\nassert split('program') == ['p', 'r', 'o', 'g', 'r', 'a', 'm']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Function to check whether a specified list is sorted in ascending order.\n    \n    Parameters:\n    lst (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False\nassert issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    for sublist in list_of_lists:\n        sublist.sort()\n    return list_of_lists\n\n# Test cases\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"}
{"task_id": "Mbpp/572", "solution": "from collections import Counter\n\ndef two_unique_nums(nums):\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)  # Use a set to get unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n\n# Test cases\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\nassert unique_product([1, 2, 3, 1]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0"}
{"task_id": "Mbpp/574", "solution": "import math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n\n# Test cases\nassert math.isclose(surfacearea_cylinder(10, 5), 942.45, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 5), 226.18800000000002, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4, 10), 351.848, rel_tol=0.001)"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(main_list, sub_list):\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n    \n    if sub_len > main_len:\n        return False\n    \n    for i in range(main_len - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    \n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2, 1], [1, 2, 1]) == True\nassert is_Sub_Array([1, 0, 2, 2], [2, 2, 0]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test cases\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, int):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, tuple):\n            even_subtuple = extract_even(item)\n            if even_subtuple:  # Only add non-empty tuples\n                result.append(even_subtuple)\n    return tuple(result)\n\n# Test cases\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"}
{"task_id": "Mbpp/581", "solution": "import math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    lateral_area = 2 * base_edge * slant_height\n    total_area = base_area + lateral_area\n    return total_area"}
{"task_id": "Mbpp/582", "solution": "def my_dict(d):\n    return len(d) == 0\n\n# Test cases\nassert my_dict({10: 0}) == False\nassert my_dict({11: 0}) == False\nassert my_dict({}) == True"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the results of subproblems\n    catalan = [0] * (n + 1)\n    \n    # Initialize the first two values in the array\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    # Fill the array using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]\n\n# Test cases\nassert catalan_number(10) == 16796\nassert catalan_number(9) == 4862\nassert catalan_number(7) == 429"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the top n items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    if not arr:\n        return []\n    n = n % len(arr)  # Handle cases where n is larger than the list length\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    return tuple(input_list)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58, 44, 56]) == (58, 44, 56)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    return max(lst) - min(lst)\n\n# Test cases\nassert big_diff([1, 2, 3, 4]) == 3\nassert big_diff([4, 5, 12]) == 8\nassert big_diff([9, 2, 3]) == 7"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    if start > end:\n        return []\n    \n    # Find the smallest integer whose square is >= start\n    import math\n    start_sqrt = math.ceil(math.sqrt(start))\n    # Find the largest integer whose square is <= end\n    end_sqrt = math.floor(math.sqrt(end))\n    \n    # Generate the list of perfect squares\n    return [i * i for i in range(start_sqrt, end_sqrt + 1)]"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), complex(x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) <= 1:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "from math import comb\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for k in range(n):\n        product = comb(n, k) * comb(n, k + 1)\n        total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Remove leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back into a single string\n    return '.'.join(parts)\n\n# Test cases\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\nassert removezero_ip(\"12.01.024\") == '12.1.24'\nassert removezero_ip(\"216.08.094.0196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None  # or raise an exception if preferred"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(s1: str, s2: str) -> int:\n    if len(s1) != len(s2):\n        return None\n    \n    count_1_to_0 = 0\n    count_0_to_1 = 0\n    \n    for bit1, bit2 in zip(s1, s2):\n        if bit1 == '1' and bit2 == '0':\n            count_1_to_0 += 1\n        elif bit1 == '0' and bit2 == '1':\n            count_0_to_1 += 1\n    \n    # The number of swaps needed is the maximum of the two counts\n    return max(count_1_to_0, count_0_to_1)\n\n# Test cases\nassert min_Swaps(\"1101\", \"1110\") == 1\nassert min_Swaps(\"111\", \"000\") == None\nassert min_Swaps(\"111\", \"110\") == None"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test cases\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\")) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))) == sys.getsizeof(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    \n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n    \n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = min(len1, k // 2)\n    j = k - i\n    \n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    # Convert the number to string to iterate over digits\n    digits = str(num)\n    num_digits = len(digits)\n    \n    # Calculate the sum of the digits raised to the power of num_digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    \n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n    # Return the sum and average as a tuple\n    return sum_n, average_n\n\n# Assertions to verify the function works correctly\nassert sum_average(10) == (55, 5.5)\nassert sum_average(15) == (120, 8.0)\nassert sum_average(20) == (210, 10.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    return number % 2 == 0\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\""}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    def sieve_of_eratosthenes(limit):\n        is_prime = [True] * (limit + 1)\n        p = 2\n        while (p * p <= limit):\n            if (is_prime[p]):\n                for i in range(p * p, limit + 1, p):\n                    is_prime[i] = False\n            p += 1\n        return [p for p in range(2, limit + 1) if is_prime[p]]\n\n    primes = sieve_of_eratosthenes(n)\n    lucid_numbers = set()\n\n    def find_lucid(current_sum, start_index):\n        if current_sum <= n:\n            lucid_numbers.add(current_sum)\n        for i in range(start_index, len(primes)):\n            find_lucid(current_sum + primes[i], i + 1)\n\n    find_lucid(0, 0)\n    return sorted(lucid_numbers)\n\n# Test cases\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(s: str) -> str:\n    \"\"\"\n    This function takes a string s and returns a new string with the words reversed.\n    \n    :param s: A string with words separated by spaces.\n    :return: A string with the words in reverse order.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a string\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string\n\n# Test cases\nassert reverse_words(\"python program\") == \"program python\"\nassert reverse_words(\"java language\") == \"language java\"\nassert reverse_words(\"indian man\") == \"man indian\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(60) == 1.0471975511965976\nassert radian_degree(120) == 2.0943951023931953"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(input_string, pattern):\n    match = re.search(pattern, input_string)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # Explicitly put the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is in bell[n][0]\n    return bell[n][0]\n\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        return lst  # Return the original list if k is out of bounds\n    return lst[:k] + lst[k+1:]\n\n# Test cases\nassert remove_kth_element([1,1,2,3,4,4,5,1], 3) == [1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    if not matrix or n < 0 or n >= len(matrix[0]):\n        return None  # or raise an error\n\n    max_value = float('-inf')\n    for row in matrix:\n        if len(row) > n:  # Ensure the row has enough columns\n            max_value = max(max_value, row[n])\n    \n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        for num in tup:\n            total_sum += num\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    return tuple(a % b for a, b in zip(tuple1, tuple2))\n\n# Test cases\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n    if any(b == 0 for b in list2):\n        raise ValueError(\"Division by zero is not allowed\")\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    letters = []\n    numbers = []\n    \n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    \n    return ''.join(letters) + ''.join(numbers)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    if not nums:\n        return 0\n    \n    nums.sort()\n    n = len(nums)\n    dp = [1] * n\n    \n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged = []\n    i, j = 0, 0\n    \n    # Merge the two sorted lists\n    while i < n and j < n:\n        if list1[i] < list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n            \n    # If there are remaining elements in list1\n    while i < n:\n        merged.append(list1[i])\n        i += 1\n        \n    # If there are remaining elements in list2\n    while j < n:\n        merged.append(list2[j])\n        j += 1\n    \n    # Calculate the median\n    mid = n * 2\n    if mid % 2 == 0:\n        return (merged[mid // 2 - 1] + merged[mid // 2]) / 2.0\n    else:\n        return merged[mid // 2]"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    return [x ** n for x in numbers]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\n# Test the function\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\""}
{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return radius ** 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"}
{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = [[x + dx, y + dy] for dx in [-1, 0, 1] for dy in [-1, 0, 1]]\n    return adjacent_coords"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    # Replace underscores with a temporary placeholder\n    temp_string = input_string.replace('_', '__TEMP__')\n    # Replace spaces with underscores\n    temp_string = temp_string.replace(' ', '_')\n    # Replace the temporary placeholder back to spaces\n    result_string = temp_string.replace('__TEMP__', ' ')\n    return result_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    non_zero = []\n    zero_count = 0\n    \n    for num in lst:\n        if num != 0:\n            non_zero.append(num)\n        else:\n            zero_count += 1\n            \n    return non_zero + [0] * zero_count"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1  # left = 2*i + 1\n    right = 2 * i + 2  # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    # See if right child of root exists and is greater than root\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    # Change root, if needed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements from heap\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\n# Test the function with assertions\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(100, 100) == True\nassert noprofit_noloss(2000, 5000) == False"}
{"task_id": "Mbpp/638", "solution": "import math\n\ndef wind_chill(velocity, temperature):\n    wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return math.ceil(wci)"}
{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n\n# Test cases\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(s):\n    result = []\n    open_parentheses = 0\n    \n    for char in s:\n        if char == '(':\n            open_parentheses += 1\n        elif char == ')':\n            if open_parentheses > 0:\n                open_parentheses -= 1\n        elif open_parentheses == 0:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n    A nonagonal number is given by the formula: n(7n-5)/2\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n# Test the function with the given assertions\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    if len(s) <= 2:  # Check for empty or single character strings\n        return False\n    if s[0] == 'z' or s[-1] == 'z':  # Check if 'z' is at the start or end\n        return False\n    return 'z' in s[1:-1]  # Check for 'z' in the middle part of the string"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        raise ValueError(\"k should be within the bounds of the array length\")\n    return arr[:k][::-1] + arr[k:]\n\n# Test cases\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dct):\n    return tup + (dct,)\n\n# Test cases\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\": 2, \"is\": 3, \"Worst\": 4}) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\": 3, \"is\": 4, \"Okay\": 5}) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n\n    n = len(matrix)\n    dp_cost = [[0] * n for _ in range(n)]\n    dp_count = [[0] * n for _ in range(n)]\n\n    dp_cost[0][0] = matrix[0][0]\n    dp_count[0][0] = 1\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            \n            max_cost = 0\n            count = 0\n            \n            if i > 0:  # coming from above\n                max_cost = dp_cost[i-1][j]\n                count = dp_count[i-1][j]\n                \n            if j > 0:  # coming from left\n                if dp_cost[i][j-1] > max_cost:\n                    max_cost = dp_cost[i][j-1]\n                    count = dp_count[i][j-1]\n                elif dp_cost[i][j-1] == max_cost:\n                    count = max(count, dp_count[i][j-1])\n            \n            dp_cost[i][j] = max_cost + matrix[i][j]\n            dp_count[i][j] = count + 1\n\n    total_cost = dp_cost[n-1][n-1]\n    total_cells = dp_count[n-1][n-1]\n    \n    return total_cost / total_cells"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Initialize the sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character in the string, convert it to an integer, and add to the sum\n    for char in result_str:\n        sum_of_digits += int(char)\n    \n    return sum_of_digits"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    if len(t) < 2:\n        return ()\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    if len(a) != len(b):\n        raise ValueError(\"Both lists must be of the same length.\")\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)  # Calculate the slant height\n    A = math.pi * r * l          # Calculate the lateral surface area\n    return A"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    return input_string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Test cases\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n            \n    return total_sum\n\n# Test cases\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\nassert sum_Of_Subarray_Prod([1, 2]) == 5\nassert sum_Of_Subarray_Prod([1, 2, 3, 4]) == 84"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert number to binary string\n    binary_str = bin(n)[2:]  # Skip the '0b' prefix\n    length = len(binary_str)\n    \n    if length <= 2:\n        return n  # No middle bits to toggle\n    \n    # Create a list to hold the new binary representation\n    new_binary = list(binary_str)\n    \n    # Toggle the middle bits\n    for i in range(1, length - 1):\n        new_binary[i] = '1' if binary_str[i] == '0' else '0'\n    \n    # Join the list back into a string and convert to integer\n    toggled_number = int(''.join(new_binary), 2)\n    \n    return toggled_number"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted elements.\n    x (int/float): The value to find the insertion point for.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test cases\nassert left_insertion([1, 2, 4, 5], 6) == 4\nassert left_insertion([1, 2, 4, 5], 3) == 2\nassert left_insertion([1, 2, 4, 5], 7) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    return bool(pattern.match(s))\n\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")"}
{"task_id": "Mbpp/739", "solution": "import math\n\ndef find_Index(n):\n    index = 1\n    while True:\n        # Calculate the nth triangular number\n        triangular_number = index * (index + 1) // 2\n        # Check the number of digits\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return math.sqrt(3) * (a ** 2)"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    if not lst:  # Check for empty list\n        return lst\n    n = n % len(lst)  # Effective rotation\n    return lst[-n:] + lst[:-n]  # Rotate the list\n\n# Test cases\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in str_num):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return 0.5 * radius ** 2 * math.radians(angle)"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    if not s:\n        return s\n    \n    result = []\n    \n    for i, char in enumerate(s):\n        if char.isupper() and i != 0:\n            result.append(' ')\n        result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(num_strings):\n    return sorted(int(num) for num in num_strings)"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range((n // 2) - 1 + 1):  # Loop through all parent nodes\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[i] > arr[left]:  # Check left child\n            return False\n        if right < n and arr[i] > arr[right]:  # Check right child\n            return False\n            \n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    j0, j1 = 0, 1\n    for i in range(2, n + 1):\n        j_next = j1 + 2 * j0\n        j0, j1 = j1, j_next\n    \n    return j1\n\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    # Sort the records based on the second element (score)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k records\n    return sorted_records[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test cases\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    unique_numbers = set(numbers)\n    if len(unique_numbers) < 2:\n        return None\n    sorted_numbers = sorted(unique_numbers)\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    seen = set()\n    count = 0\n    \n    for string in string_list:\n        reversed_string = string[::-1]\n        if reversed_string in seen:\n            count += 1\n        seen.add(string)\n    \n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    count_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"}
{"task_id": "Mbpp/759", "solution": "import re\n\ndef is_decimal(s):\n    pattern = re.compile(r'^\\d+\\.\\d{2}$')\n    return bool(pattern.match(s))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    return len(set(numbers)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    # Months with 30 days: April (4), June (6), September (9), November (11)\n    return month in [4, 6, 9, 11]\n\n# Test the function\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(2) == False\nassert check_monthnumber_number(12) == False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    if n < 2:\n        return None  # Not enough elements to find a difference\n\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    polite_numbers = []\n    current_number = 1\n    \n    while len(polite_numbers) < n:\n        if current_number & (current_number - 1) != 0:  # Check if not a power of 2\n            polite_numbers.append(current_number)\n        current_number += 1\n    \n    return polite_numbers[n - 1]\n\n# Test cases\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i + 1]))\n    return result"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_count = {}\n    \n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_count:\n            count += num_count[complement]\n        \n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n            \n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n# Test the function\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1, 2, 3, 4, 5], [6, 7, 1])) == [2, 3, 4, 5]\nassert (Diff([1, 2, 3], [6, 7, 1])) == [2, 3, 6, 7]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total_sum += odd_number ** 4\n    return total_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in mapping.values():  # If it's one of '(', '{', '['\n            stack.append(char)\n        elif char in mapping.keys():  # If it's one of ')', '}', ']'\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    \n    return not stack  # If stack is empty, return True; otherwise, return False"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join(word for word in s.split() if len(word) != k)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    start_index = main_string.find(substring)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(substring)\n    return (substring, start_index, end_index)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    from collections import Counter\n    element_count = Counter(lst)\n    return sum(element for element, count in element_count.items() if count == 1)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    temp = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    \n    result.append(temp)  # Append the last group\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    from itertools import combinations\n    \n    result_set = set()\n    \n    for (t1, t2) in combinations(tuple_list, 2):\n        combined_sum = tuple(a + b for a, b in zip(t1, t2))\n        result_set.add(combined_sum)\n    \n    return sorted(result_set)\n\n# Test cases\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n):\n            if (end - start + 1) % 2 == 1:  # Check if the length is odd\n                total_sum += sum(arr[start:end + 1])  # Sum the subarray\n    \n    return total_sum\n\n# Test cases\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 1, 2]) == 15\nassert odd_length_sum([1, 7]) == 8"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n\n    # Calculate Hue\n    if delta == 0:\n        h = 0\n    elif max_c == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_c == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:  # max_c == b\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    # Calculate Saturation\n    s = 0 if max_c == 0 else (delta / max_c) * 100\n\n    # Calculate Value\n    v = max_c * 100\n\n    return (h, s, v)\n\n# Test cases\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0) == (120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110) == (149.2682926829268, 95.34883720930233, 84.31372549019608)"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break early if both are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None  # or raise an error if preferred"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove parentheses and split the string by commas\n    elements = tuple_str.strip(\"()\").split(\", \")\n    # Convert each element to an integer and create a tuple\n    return tuple(int(element) for element in elements)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to insert.\n    \n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test cases\nassert right_insertion([1, 2, 4, 5], 6) == 4\nassert right_insertion([1, 2, 4, 5], 3) == 2\nassert right_insertion([1, 2, 4, 5], 7) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(s):\n    # Check if the pattern 'abbb' exists in the string\n    return bool(re.search(r'abbb', s))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst) + (string,)\n\n# Test cases\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3, 2, 1]) == False\nassert even_position([1, 2, 3]) == False\nassert even_position([2, 1, 4]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Test cases\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)\n\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1, 2], [2, 3], [4, 5]]) == 3\nassert count_list([[1, 0], [2, 0]]) == 2"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            result = mid  # Update result and continue searching to the right\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(input_dict):\n    total = 0\n    for value in input_dict.values():\n        total += value\n    return total"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum\n\n# Test assertions\nassert sum_in_range(2, 5) == 8\nassert sum_in_range(5, 7) == 12\nassert sum_in_range(7, 13) == 40"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    # Ensure d is within the range of 0-31\n    d = d % 32\n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n\n# Test cases\nassert left_rotate(16, 2) == 64\nassert left_rotate(10, 2) == 40\nassert left_rotate(99, 3) == 792\nassert left_rotate(0b0001, 3) == 0b1000\nassert left_rotate(0b0101, 3) == 0b101000\nassert left_rotate(0b11101, 3) == 0b11101000"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return ''.join(s.split())\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\n\n# Test cases\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None  # In case there are no odd numbers in the list\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 1, 3]) == 1\nassert first_odd([8, 9, 1]) == 9"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup\n\n# Test cases\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must be of the same length\")\n    \n    for a, b in zip(tuple1, tuple2):\n        if not (b < a):\n            return False\n    return True"}
